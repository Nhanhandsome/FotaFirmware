
FlashFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800a3d8  0800a3d8  0001a3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab6c  0800ab6c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab6c  0800ab6c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab6c  0800ab6c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab6c  0800ab6c  0001ab6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab70  0800ab70  0001ab70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ab74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001f8  0800ad6c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800ad6c  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ea  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab6  00000000  00000000  0002c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014226  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb6f  00000000  00000000  0004439e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bc7e  00000000  00000000  00053f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  000bfbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a3bc 	.word	0x0800a3bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	0800a3bc 	.word	0x0800a3bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe12 	bl	8002264 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd12 	bl	8002264 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 f9da 	bl	8002264 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 f9be 	bl	8002264 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800a3f8 	.word	0x0800a3f8
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f8ef 	bl	8002264 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f8e0 	bl	8002264 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fdd6 	bl	8002264 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fdb8 	bl	8002264 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800a438 	.word	0x0800a438
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd08 	bl	8002264 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fcfa 	bl	8002264 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fc64 	bl	8002264 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb2c 	bl	8002264 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f8d4 	bl	8002264 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8a9 	bl	8002264 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_d2f>:
 8002154:	0002      	movs	r2, r0
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	030c      	lsls	r4, r1, #12
 800215e:	4e3d      	ldr	r6, [pc, #244]	; (8002254 <__aeabi_d2f+0x100>)
 8002160:	0a64      	lsrs	r4, r4, #9
 8002162:	0f40      	lsrs	r0, r0, #29
 8002164:	1c5f      	adds	r7, r3, #1
 8002166:	0fc9      	lsrs	r1, r1, #31
 8002168:	4304      	orrs	r4, r0
 800216a:	00d5      	lsls	r5, r2, #3
 800216c:	4237      	tst	r7, r6
 800216e:	d00a      	beq.n	8002186 <__aeabi_d2f+0x32>
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <__aeabi_d2f+0x104>)
 8002172:	181e      	adds	r6, r3, r0
 8002174:	2efe      	cmp	r6, #254	; 0xfe
 8002176:	dd16      	ble.n	80021a6 <__aeabi_d2f+0x52>
 8002178:	20ff      	movs	r0, #255	; 0xff
 800217a:	2400      	movs	r4, #0
 800217c:	05c0      	lsls	r0, r0, #23
 800217e:	4320      	orrs	r0, r4
 8002180:	07c9      	lsls	r1, r1, #31
 8002182:	4308      	orrs	r0, r1
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <__aeabi_d2f+0x44>
 800218a:	432c      	orrs	r4, r5
 800218c:	d026      	beq.n	80021dc <__aeabi_d2f+0x88>
 800218e:	2205      	movs	r2, #5
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	0a54      	lsrs	r4, r2, #9
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	e7f1      	b.n	800217c <__aeabi_d2f+0x28>
 8002198:	4325      	orrs	r5, r4
 800219a:	d0ed      	beq.n	8002178 <__aeabi_d2f+0x24>
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	03c0      	lsls	r0, r0, #15
 80021a0:	4304      	orrs	r4, r0
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	e7ea      	b.n	800217c <__aeabi_d2f+0x28>
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	dd1b      	ble.n	80021e2 <__aeabi_d2f+0x8e>
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	1e53      	subs	r3, r2, #1
 80021ae:	419a      	sbcs	r2, r3
 80021b0:	00e4      	lsls	r4, r4, #3
 80021b2:	0f6d      	lsrs	r5, r5, #29
 80021b4:	4322      	orrs	r2, r4
 80021b6:	432a      	orrs	r2, r5
 80021b8:	0753      	lsls	r3, r2, #29
 80021ba:	d048      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d000      	beq.n	80021c6 <__aeabi_d2f+0x72>
 80021c4:	3204      	adds	r2, #4
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	04db      	lsls	r3, r3, #19
 80021ca:	4013      	ands	r3, r2
 80021cc:	d03f      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021ce:	1c70      	adds	r0, r6, #1
 80021d0:	2efe      	cmp	r6, #254	; 0xfe
 80021d2:	d0d1      	beq.n	8002178 <__aeabi_d2f+0x24>
 80021d4:	0192      	lsls	r2, r2, #6
 80021d6:	0a54      	lsrs	r4, r2, #9
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	e7cf      	b.n	800217c <__aeabi_d2f+0x28>
 80021dc:	2000      	movs	r0, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	e7cc      	b.n	800217c <__aeabi_d2f+0x28>
 80021e2:	0032      	movs	r2, r6
 80021e4:	3217      	adds	r2, #23
 80021e6:	db22      	blt.n	800222e <__aeabi_d2f+0xda>
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	4320      	orrs	r0, r4
 80021ee:	241e      	movs	r4, #30
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	2c1f      	cmp	r4, #31
 80021f4:	dd1d      	ble.n	8002232 <__aeabi_d2f+0xde>
 80021f6:	2202      	movs	r2, #2
 80021f8:	4252      	negs	r2, r2
 80021fa:	1b96      	subs	r6, r2, r6
 80021fc:	0002      	movs	r2, r0
 80021fe:	40f2      	lsrs	r2, r6
 8002200:	0016      	movs	r6, r2
 8002202:	2c20      	cmp	r4, #32
 8002204:	d004      	beq.n	8002210 <__aeabi_d2f+0xbc>
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <__aeabi_d2f+0x108>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	4098      	lsls	r0, r3
 800220e:	4305      	orrs	r5, r0
 8002210:	002a      	movs	r2, r5
 8002212:	1e53      	subs	r3, r2, #1
 8002214:	419a      	sbcs	r2, r3
 8002216:	4332      	orrs	r2, r6
 8002218:	2600      	movs	r6, #0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d1ce      	bne.n	80021bc <__aeabi_d2f+0x68>
 800221e:	2480      	movs	r4, #128	; 0x80
 8002220:	0013      	movs	r3, r2
 8002222:	04e4      	lsls	r4, r4, #19
 8002224:	2001      	movs	r0, #1
 8002226:	4023      	ands	r3, r4
 8002228:	4222      	tst	r2, r4
 800222a:	d1d3      	bne.n	80021d4 <__aeabi_d2f+0x80>
 800222c:	e7b0      	b.n	8002190 <__aeabi_d2f+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	e7ad      	b.n	800218e <__aeabi_d2f+0x3a>
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <__aeabi_d2f+0x10c>)
 8002234:	4694      	mov	ip, r2
 8002236:	002a      	movs	r2, r5
 8002238:	40e2      	lsrs	r2, r4
 800223a:	0014      	movs	r4, r2
 800223c:	002a      	movs	r2, r5
 800223e:	4463      	add	r3, ip
 8002240:	409a      	lsls	r2, r3
 8002242:	4098      	lsls	r0, r3
 8002244:	1e55      	subs	r5, r2, #1
 8002246:	41aa      	sbcs	r2, r5
 8002248:	4302      	orrs	r2, r0
 800224a:	4322      	orrs	r2, r4
 800224c:	e7e4      	b.n	8002218 <__aeabi_d2f+0xc4>
 800224e:	0033      	movs	r3, r6
 8002250:	e79e      	b.n	8002190 <__aeabi_d2f+0x3c>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	; (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <check_new_firmware>:
#include "fota.h"
Ring_Buffer_t firmware_buffer;

uint16_t firmware_size = 1024;

uint8_t check_new_firmware() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
	uint32_t check_firmware = flash_read(FIRMWARE_AVAILABLE_ADDR);
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fb8a 	bl	80029c4 <flash_read>
 80022b0:	0003      	movs	r3, r0
 80022b2:	607b      	str	r3, [r7, #4]
	if(check_firmware == (uint32_t)0x01){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <check_new_firmware+0x1e>
		return 1; // firmware available
 80022ba:	2301      	movs	r3, #1
 80022bc:	e005      	b.n	80022ca <check_new_firmware+0x2a>
	}
	else if(check_firmware == (uint32_t)0x02){
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d101      	bne.n	80022c8 <check_new_firmware+0x28>
		return 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	e000      	b.n	80022ca <check_new_firmware+0x2a>
	}

	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <flash_firmware_process>:
void flash_firmware_process() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
	if (check_new_firmware() == 1) {
 80022da:	f7ff ffe1 	bl	80022a0 <check_new_firmware>
 80022de:	0003      	movs	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d117      	bne.n	8002314 <flash_firmware_process+0x40>
		fota_init(&fota);
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <flash_firmware_process+0x60>)
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f89c 	bl	8002424 <fota_init>
		int result = fota_poll(&fota);
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <flash_firmware_process+0x60>)
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f8f2 	bl	80024d8 <fota_poll>
 80022f4:	0003      	movs	r3, r0
 80022f6:	607b      	str	r3, [r7, #4]
		if(result == 2){
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d103      	bne.n	8002306 <flash_firmware_process+0x32>
			checkout_firmware(app_firmware);
 80022fe:	2002      	movs	r0, #2
 8002300:	f000 f81a 	bl	8002338 <checkout_firmware>
 8002304:	e00e      	b.n	8002324 <flash_firmware_process+0x50>
		}
		else if(result == -1){
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3301      	adds	r3, #1
 800230a:	d10b      	bne.n	8002324 <flash_firmware_process+0x50>
			checkout_firmware(factory_firmware);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f813 	bl	8002338 <checkout_firmware>
 8002312:	e007      	b.n	8002324 <flash_firmware_process+0x50>
		}
	}
	else if(check_new_firmware() == 2){
 8002314:	f7ff ffc4 	bl	80022a0 <check_new_firmware>
 8002318:	0003      	movs	r3, r0
 800231a:	2b02      	cmp	r3, #2
 800231c:	d102      	bne.n	8002324 <flash_firmware_process+0x50>
		checkout_firmware(factory_firmware);
 800231e:	2003      	movs	r0, #3
 8002320:	f000 f80a 	bl	8002338 <checkout_firmware>
	}
	checkout_firmware(app_firmware);
 8002324:	2002      	movs	r0, #2
 8002326:	f000 f807 	bl	8002338 <checkout_firmware>
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000248 	.word	0x20000248

08002338 <checkout_firmware>:
void checkout_firmware(firmware_type_t firmware) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	0002      	movs	r2, r0
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	701a      	strb	r2, [r3, #0]
	switch (firmware) {
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d01a      	beq.n	8002382 <checkout_firmware+0x4a>
 800234c:	dc1f      	bgt.n	800238e <checkout_firmware+0x56>
 800234e:	2b02      	cmp	r3, #2
 8002350:	d011      	beq.n	8002376 <checkout_firmware+0x3e>
 8002352:	dc1c      	bgt.n	800238e <checkout_firmware+0x56>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <checkout_firmware+0x26>
 8002358:	2b01      	cmp	r3, #1
 800235a:	d006      	beq.n	800236a <checkout_firmware+0x32>
		break;
	case factory_firmware:
		jump_app(FACTORY_FIRMWARE_ADDR);
		break;
	default:
		break;
 800235c:	e017      	b.n	800238e <checkout_firmware+0x56>
		jump_app(BOOTLOADER_ADDR);
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	051b      	lsls	r3, r3, #20
 8002362:	0018      	movs	r0, r3
 8002364:	f000 fb58 	bl	8002a18 <jump_app>
		break;
 8002368:	e012      	b.n	8002390 <checkout_firmware+0x58>
		jump_app(FLASH_FIRMWARE_ADDR);
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	051b      	lsls	r3, r3, #20
 800236e:	0018      	movs	r0, r3
 8002370:	f000 fb52 	bl	8002a18 <jump_app>
		break;
 8002374:	e00c      	b.n	8002390 <checkout_firmware+0x58>
		jump_app(APP_FIRMWARE_ADDR);
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	051b      	lsls	r3, r3, #20
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fb4c 	bl	8002a18 <jump_app>
		break;
 8002380:	e006      	b.n	8002390 <checkout_firmware+0x58>
		jump_app(FACTORY_FIRMWARE_ADDR);
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fb46 	bl	8002a18 <jump_app>
		break;
 800238c:	e000      	b.n	8002390 <checkout_firmware+0x58>
		break;
 800238e:	46c0      	nop			; (mov r8, r8)
	}
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <fota_checksum>:
		0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };
/**
 *
 */
uint16_t fota_checksum(uint8_t *data, uint16_t length) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	000a      	movs	r2, r1
 80023a2:	1cbb      	adds	r3, r7, #2
 80023a4:	801a      	strh	r2, [r3, #0]
	uint8_t ucCRCHi = 0xFF;
 80023a6:	230f      	movs	r3, #15
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	701a      	strb	r2, [r3, #0]
	uint8_t ucCRCLo = 0xFF;
 80023ae:	230e      	movs	r3, #14
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	701a      	strb	r2, [r3, #0]
	int iIndex;

	while (length--) {
 80023b6:	e019      	b.n	80023ec <fota_checksum+0x54>
		iIndex = ucCRCLo ^ *(data++);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	200e      	movs	r0, #14
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4053      	eors	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	60bb      	str	r3, [r7, #8]
		ucCRCLo = (uint8_t) (ucCRCHi ^ aucCRCHi[iIndex]);
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <fota_checksum+0x84>)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	7819      	ldrb	r1, [r3, #0]
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	200f      	movs	r0, #15
 80023d8:	183a      	adds	r2, r7, r0
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	404a      	eors	r2, r1
 80023de:	701a      	strb	r2, [r3, #0]
		ucCRCHi = aucCRCLo[iIndex];
 80023e0:	183b      	adds	r3, r7, r0
 80023e2:	490f      	ldr	r1, [pc, #60]	; (8002420 <fota_checksum+0x88>)
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	188a      	adds	r2, r1, r2
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	701a      	strb	r2, [r3, #0]
	while (length--) {
 80023ec:	1cbb      	adds	r3, r7, #2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	1cba      	adds	r2, r7, #2
 80023f2:	1e59      	subs	r1, r3, #1
 80023f4:	8011      	strh	r1, [r2, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1de      	bne.n	80023b8 <fota_checksum+0x20>
	}
	return (uint16_t) (ucCRCHi << 8 | ucCRCLo);
 80023fa:	230f      	movs	r3, #15
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	b21a      	sxth	r2, r3
 8002404:	230e      	movs	r3, #14
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b21b      	sxth	r3, r3
 8002410:	b29b      	uxth	r3, r3
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	0800a478 	.word	0x0800a478
 8002420:	0800a578 	.word	0x0800a578

08002424 <fota_init>:
/**
 *
 */
void fota_init(fota_class *p_fota) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	p_fota->status = FOTA_ST_IDLE;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	23a2      	movs	r3, #162	; 0xa2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	2100      	movs	r1, #0
 8002434:	54d1      	strb	r1, [r2, r3]
	p_fota->get_status = fota_get_status;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	23a9      	movs	r3, #169	; 0xa9
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4913      	ldr	r1, [pc, #76]	; (800248c <fota_init+0x68>)
 800243e:	50d1      	str	r1, [r2, r3]
	p_fota->poll = fota_poll;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	23a6      	movs	r3, #166	; 0xa6
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4912      	ldr	r1, [pc, #72]	; (8002490 <fota_init+0x6c>)
 8002448:	50d1      	str	r1, [r2, r3]
	p_fota->process = fota_process;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	23a7      	movs	r3, #167	; 0xa7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4910      	ldr	r1, [pc, #64]	; (8002494 <fota_init+0x70>)
 8002452:	50d1      	str	r1, [r2, r3]
	p_fota->set_satus = fota_set_satus;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	23a8      	movs	r3, #168	; 0xa8
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	490f      	ldr	r1, [pc, #60]	; (8002498 <fota_init+0x74>)
 800245c:	50d1      	str	r1, [r2, r3]
	ring_init(&p_fota->fota_fifo, MAX_RING_BUFFER);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3378      	adds	r3, #120	; 0x78
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	0011      	movs	r1, r2
 8002468:	0018      	movs	r0, r3
 800246a:	f000 fbed 	bl	8002c48 <ring_init>
	fota_event_creat(&p_fota->event);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fa52 	bl	800291c <fota_event_creat>
	p_fota->is_push_fifo = 0;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	705a      	strb	r2, [r3, #1]
	p_fota->last_data = 0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	080024bf 	.word	0x080024bf
 8002490:	080024d9 	.word	0x080024d9
 8002494:	08002835 	.word	0x08002835
 8002498:	0800249d 	.word	0x0800249d

0800249c <fota_set_satus>:
void fota_set_satus(fota_class *p_fota, FOTA_STATUS_t status) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	000a      	movs	r2, r1
 80024a6:	1cfb      	adds	r3, r7, #3
 80024a8:	701a      	strb	r2, [r3, #0]
	p_fota->status = status;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	1cf9      	adds	r1, r7, #3
 80024ae:	23a2      	movs	r3, #162	; 0xa2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	7809      	ldrb	r1, [r1, #0]
 80024b4:	54d1      	strb	r1, [r2, r3]
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}

080024be <fota_get_status>:
FOTA_STATUS_t fota_get_status(fota_class *p_fota) {
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	return p_fota->status;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	23a2      	movs	r3, #162	; 0xa2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <fota_poll>:

int fota_poll(fota_class *p_fota) {
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	4c7f      	ldr	r4, [pc, #508]	; (80026d8 <fota_poll+0x200>)
 80024dc:	44a5      	add	sp, r4
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
	int result = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	2283      	movs	r2, #131	; 0x83
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	18ba      	adds	r2, r7, r2
 80024ea:	6013      	str	r3, [r2, #0]
	fota_event_t event = fota_no_message;
 80024ec:	4c7b      	ldr	r4, [pc, #492]	; (80026dc <fota_poll+0x204>)
 80024ee:	193b      	adds	r3, r7, r4
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
	if (fota_event_pop_tail(&p_fota->event, &event) == true)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	193a      	adds	r2, r7, r4
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 fa27 	bl	8002950 <fota_event_pop_tail>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d100      	bne.n	8002508 <fota_poll+0x30>
 8002506:	e081      	b.n	800260c <fota_poll+0x134>
		if (event == fota_new_message) {
 8002508:	193b      	adds	r3, r7, r4
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d000      	beq.n	8002512 <fota_poll+0x3a>
 8002510:	e07c      	b.n	800260c <fota_poll+0x134>
			uint8_t data[512];
			uint16_t p_data = 0;
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <fota_poll+0x208>)
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]
			while (1) {
				if (ring_pop_tail(&p_fota->fota_fifo, data + p_data) == true
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3378      	adds	r3, #120	; 0x78
 800251e:	0018      	movs	r0, r3
 8002520:	4c6f      	ldr	r4, [pc, #444]	; (80026e0 <fota_poll+0x208>)
 8002522:	193b      	adds	r3, r7, r4
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	2208      	movs	r2, #8
 8002528:	18ba      	adds	r2, r7, r2
 800252a:	18d3      	adds	r3, r2, r3
 800252c:	0019      	movs	r1, r3
 800252e:	f000 fba8 	bl	8002c82 <ring_pop_tail>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d00c      	beq.n	8002550 <fota_poll+0x78>
						&& data[0] == FOTA_HEAD) {
 8002536:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <fota_poll+0x20c>)
 8002538:	2284      	movs	r2, #132	; 0x84
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	189b      	adds	r3, r3, r2
 800253e:	19db      	adds	r3, r3, r7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b7e      	cmp	r3, #126	; 0x7e
 8002544:	d104      	bne.n	8002550 <fota_poll+0x78>
					p_data++;
 8002546:	193b      	adds	r3, r7, r4
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	193b      	adds	r3, r7, r4
 800254c:	3201      	adds	r2, #1
 800254e:	801a      	strh	r2, [r3, #0]
				}
				if (data[p_data - 1] == '\n' && data[p_data - 2] == '\r') {
 8002550:	4963      	ldr	r1, [pc, #396]	; (80026e0 <fota_poll+0x208>)
 8002552:	187b      	adds	r3, r7, r1
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	3b01      	subs	r3, #1
 8002558:	4a62      	ldr	r2, [pc, #392]	; (80026e4 <fota_poll+0x20c>)
 800255a:	2084      	movs	r0, #132	; 0x84
 800255c:	0080      	lsls	r0, r0, #2
 800255e:	1812      	adds	r2, r2, r0
 8002560:	19d2      	adds	r2, r2, r7
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	2b0a      	cmp	r3, #10
 8002566:	d1d8      	bne.n	800251a <fota_poll+0x42>
 8002568:	187b      	adds	r3, r7, r1
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	3b02      	subs	r3, #2
 800256e:	4a5d      	ldr	r2, [pc, #372]	; (80026e4 <fota_poll+0x20c>)
 8002570:	1812      	adds	r2, r2, r0
 8002572:	19d2      	adds	r2, r2, r7
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	2b0d      	cmp	r3, #13
 8002578:	d000      	beq.n	800257c <fota_poll+0xa4>
				if (ring_pop_tail(&p_fota->fota_fifo, data + p_data) == true
 800257a:	e7ce      	b.n	800251a <fota_poll+0x42>
					break;
 800257c:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (p_fota->process(p_fota, data, p_data) == 1) {
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	23a7      	movs	r3, #167	; 0xa7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	58d3      	ldr	r3, [r2, r3]
 8002586:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <fota_poll+0x208>)
 8002588:	18ba      	adds	r2, r7, r2
 800258a:	8812      	ldrh	r2, [r2, #0]
 800258c:	2108      	movs	r1, #8
 800258e:	1879      	adds	r1, r7, r1
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	0003      	movs	r3, r0
 8002596:	2b01      	cmp	r3, #1
 8002598:	d12f      	bne.n	80025fa <fota_poll+0x122>
				//debug_printf("%s\r\n", p_fota->commands.data);
				switch (p_fota->commands.commands) {
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <fota_poll+0x210>)
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d017      	beq.n	80025d4 <fota_poll+0xfc>
 80025a4:	dc2b      	bgt.n	80025fe <fota_poll+0x126>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d02b      	beq.n	8002602 <fota_poll+0x12a>
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d000      	beq.n	80025b0 <fota_poll+0xd8>
				case FOTA_WRITE:
					if (p_fota->get_status(p_fota) == FOTA_ST_BEGIN)
						p_fota->set_satus(p_fota, FOTA_ST_PROCESS);
					break;
				default:
					break;
 80025ae:	e026      	b.n	80025fe <fota_poll+0x126>
					if (p_fota->get_status(p_fota) == FOTA_ST_IDLE)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	23a9      	movs	r3, #169	; 0xa9
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	58d3      	ldr	r3, [r2, r3]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	0010      	movs	r0, r2
 80025bc:	4798      	blx	r3
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d121      	bne.n	8002606 <fota_poll+0x12e>
						p_fota->set_satus(p_fota, FOTA_ST_BEGIN);
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	23a8      	movs	r3, #168	; 0xa8
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	58d3      	ldr	r3, [r2, r3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	2101      	movs	r1, #1
 80025ce:	0010      	movs	r0, r2
 80025d0:	4798      	blx	r3
					break;
 80025d2:	e018      	b.n	8002606 <fota_poll+0x12e>
					if (p_fota->get_status(p_fota) == FOTA_ST_BEGIN)
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	23a9      	movs	r3, #169	; 0xa9
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	58d3      	ldr	r3, [r2, r3]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	0010      	movs	r0, r2
 80025e0:	4798      	blx	r3
 80025e2:	0003      	movs	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d110      	bne.n	800260a <fota_poll+0x132>
						p_fota->set_satus(p_fota, FOTA_ST_PROCESS);
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	23a8      	movs	r3, #168	; 0xa8
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	58d3      	ldr	r3, [r2, r3]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	2102      	movs	r1, #2
 80025f4:	0010      	movs	r0, r2
 80025f6:	4798      	blx	r3
					break;
 80025f8:	e007      	b.n	800260a <fota_poll+0x132>
				}
			}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	e006      	b.n	800260c <fota_poll+0x134>
					break;
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	e004      	b.n	800260c <fota_poll+0x134>
					break;
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	e002      	b.n	800260c <fota_poll+0x134>
					break;
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	e000      	b.n	800260c <fota_poll+0x134>
					break;
 800260a:	46c0      	nop			; (mov r8, r8)

		}
	switch (p_fota->get_status(p_fota)) {
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	23a9      	movs	r3, #169	; 0xa9
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	58d3      	ldr	r3, [r2, r3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	0010      	movs	r0, r2
 8002618:	4798      	blx	r3
 800261a:	0003      	movs	r3, r0
 800261c:	2b05      	cmp	r3, #5
 800261e:	d842      	bhi.n	80026a6 <fota_poll+0x1ce>
 8002620:	009a      	lsls	r2, r3, #2
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <fota_poll+0x214>)
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	469f      	mov	pc, r3
	case FOTA_ST_IDLE:
		break;
	case FOTA_ST_BEGIN:
		break;
	case FOTA_ST_PROCESS:
		if (fota_flash_firmware(p_fota) == 0) {
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 f85f 	bl	80026f0 <fota_flash_firmware>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d108      	bne.n	8002648 <fota_poll+0x170>
			p_fota->set_satus(p_fota, FOTA_ST_ERROR);
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	23a8      	movs	r3, #168	; 0xa8
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	58d3      	ldr	r3, [r2, r3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	2105      	movs	r1, #5
 8002642:	0010      	movs	r0, r2
 8002644:	4798      	blx	r3
			p_fota->set_satus(p_fota, FOTA_ST_SUCCESS);
		}
		else{
			p_fota->set_satus(p_fota, FOTA_ST_END);
		}
		break;
 8002646:	e031      	b.n	80026ac <fota_poll+0x1d4>
		} else if(fota_flash_firmware(p_fota) == 1) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f850 	bl	80026f0 <fota_flash_firmware>
 8002650:	0003      	movs	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <fota_poll+0x190>
			p_fota->set_satus(p_fota, FOTA_ST_SUCCESS);
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	23a8      	movs	r3, #168	; 0xa8
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	58d3      	ldr	r3, [r2, r3]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	2103      	movs	r1, #3
 8002662:	0010      	movs	r0, r2
 8002664:	4798      	blx	r3
		break;
 8002666:	e021      	b.n	80026ac <fota_poll+0x1d4>
			p_fota->set_satus(p_fota, FOTA_ST_END);
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	23a8      	movs	r3, #168	; 0xa8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	58d3      	ldr	r3, [r2, r3]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	2104      	movs	r1, #4
 8002674:	0010      	movs	r0, r2
 8002676:	4798      	blx	r3
		break;
 8002678:	e018      	b.n	80026ac <fota_poll+0x1d4>
	case FOTA_ST_SUCCESS:
		p_fota->set_satus(p_fota, FOTA_ST_BEGIN);
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	23a8      	movs	r3, #168	; 0xa8
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	58d3      	ldr	r3, [r2, r3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	2101      	movs	r1, #1
 8002686:	0010      	movs	r0, r2
 8002688:	4798      	blx	r3
		break;
 800268a:	e00f      	b.n	80026ac <fota_poll+0x1d4>
	case FOTA_ST_END:
		result = 2;
 800268c:	2302      	movs	r3, #2
 800268e:	2283      	movs	r2, #131	; 0x83
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	18ba      	adds	r2, r7, r2
 8002694:	6013      	str	r3, [r2, #0]
		break;
 8002696:	e009      	b.n	80026ac <fota_poll+0x1d4>
	case FOTA_ST_ERROR:
		result = -1;
 8002698:	2301      	movs	r3, #1
 800269a:	425b      	negs	r3, r3
 800269c:	2283      	movs	r2, #131	; 0x83
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	18ba      	adds	r2, r7, r2
 80026a2:	6013      	str	r3, [r2, #0]
		break;
 80026a4:	e002      	b.n	80026ac <fota_poll+0x1d4>
	default:
		break;
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	e000      	b.n	80026ac <fota_poll+0x1d4>
		break;
 80026aa:	46c0      	nop			; (mov r8, r8)
	}
	if(result == 1){
 80026ac:	2383      	movs	r3, #131	; 0x83
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <fota_poll+0x1ec>
		return fota_poll(p_fota);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff ff0c 	bl	80024d8 <fota_poll>
 80026c0:	0003      	movs	r3, r0
 80026c2:	e003      	b.n	80026cc <fota_poll+0x1f4>
	}
	return result;
 80026c4:	2383      	movs	r3, #131	; 0x83
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	2385      	movs	r3, #133	; 0x85
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	449d      	add	sp, r3
 80026d6:	bd90      	pop	{r4, r7, pc}
 80026d8:	fffffdec 	.word	0xfffffdec
 80026dc:	00000209 	.word	0x00000209
 80026e0:	0000020a 	.word	0x0000020a
 80026e4:	fffffdf8 	.word	0xfffffdf8
 80026e8:	00000292 	.word	0x00000292
 80026ec:	0800a678 	.word	0x0800a678

080026f0 <fota_flash_firmware>:
uint8_t fota_flash_firmware(fota_class *p_fota) {
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	static uint32_t addr_write;
	uint32_t data_write;
	intel_hex *p_hex_data;
	uint16_t length = byte_to_hardword((uint8_t*)p_fota->commands.byte_count.byte);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a4b      	ldr	r2, [pc, #300]	; (8002828 <fota_flash_firmware+0x138>)
 80026fc:	4694      	mov	ip, r2
 80026fe:	4463      	add	r3, ip
 8002700:	2514      	movs	r5, #20
 8002702:	197c      	adds	r4, r7, r5
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fbe8 	bl	8002eda <byte_to_hardword>
 800270a:	0003      	movs	r3, r0
 800270c:	8023      	strh	r3, [r4, #0]
	uint8_t *p_data_line = string_to_hex((char*)p_fota->commands.data,length);
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	23a5      	movs	r3, #165	; 0xa5
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	58d2      	ldr	r2, [r2, r3]
 8002716:	197b      	adds	r3, r7, r5
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	0019      	movs	r1, r3
 800271c:	0010      	movs	r0, r2
 800271e:	f000 fb33 	bl	8002d88 <string_to_hex>
 8002722:	0003      	movs	r3, r0
 8002724:	613b      	str	r3, [r7, #16]
	p_hex_data = intel_hex_process(p_data_line,length);
 8002726:	197b      	adds	r3, r7, r5
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f9e1 	bl	8002af6 <intel_hex_process>
 8002734:	0003      	movs	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]
	if (p_hex_data == NULL) {
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <fota_flash_firmware+0x52>
		return 0;
 800273e:	2300      	movs	r3, #0
 8002740:	e06e      	b.n	8002820 <fota_flash_firmware+0x130>
	} else {
		switch (p_hex_data->record_type) {
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d866      	bhi.n	8002818 <fota_flash_firmware+0x128>
 800274a:	009a      	lsls	r2, r3, #2
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <fota_flash_firmware+0x13c>)
 800274e:	18d3      	adds	r3, r2, r3
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	469f      	mov	pc, r3
			case Data_rec:
				addr_write += (uint32_t) byte_to_hardword(p_hex_data->addr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3302      	adds	r3, #2
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fbbe 	bl	8002eda <byte_to_hardword>
 800275e:	0003      	movs	r3, r0
 8002760:	001a      	movs	r2, r3
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <fota_flash_firmware+0x140>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	18d2      	adds	r2, r2, r3
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <fota_flash_firmware+0x140>)
 800276a:	601a      	str	r2, [r3, #0]
				/*Flash write*/
				for(uint16_t i = 0;i<4;i++){
 800276c:	2316      	movs	r3, #22
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2200      	movs	r2, #0
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	e02c      	b.n	80027d0 <fota_flash_firmware+0xe0>
					data_write = byte_to_word_cr(p_hex_data->data+i*4);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2416      	movs	r4, #22
 800277c:	193a      	adds	r2, r7, r4
 800277e:	8812      	ldrh	r2, [r2, #0]
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	189b      	adds	r3, r3, r2
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fbbb 	bl	8002f00 <byte_to_word_cr>
 800278a:	0003      	movs	r3, r0
 800278c:	60bb      	str	r3, [r7, #8]
					addr_write=addr_write + i*4;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	001a      	movs	r2, r3
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <fota_flash_firmware+0x140>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	18d2      	adds	r2, r2, r3
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <fota_flash_firmware+0x140>)
 800279e:	601a      	str	r2, [r3, #0]
					flash_write(addr_write, data_write);
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <fota_flash_firmware+0x140>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f918 	bl	80029de <flash_write>
					if(flash_read(addr_write) != data_write){
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <fota_flash_firmware+0x140>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f906 	bl	80029c4 <flash_read>
 80027b8:	0002      	movs	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4293      	cmp	r3, r2
 80027be:	d001      	beq.n	80027c4 <fota_flash_firmware+0xd4>
						return 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e02d      	b.n	8002820 <fota_flash_firmware+0x130>
				for(uint16_t i = 0;i<4;i++){
 80027c4:	2116      	movs	r1, #22
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	3201      	adds	r2, #1
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	2316      	movs	r3, #22
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d9cd      	bls.n	8002776 <fota_flash_firmware+0x86>
					}
				}
				break;
 80027da:	e020      	b.n	800281e <fota_flash_firmware+0x12e>
			case EndFile_rec:
				/*Flash Lock*/
				flash_lock();
 80027dc:	f000 f915 	bl	8002a0a <flash_lock>
				return 2;
 80027e0:	2302      	movs	r3, #2
 80027e2:	e01d      	b.n	8002820 <fota_flash_firmware+0x130>
				break;
			case Start_Segment_Address_rec:

				break;
			case Extended_Linear_Address_rec:
				addr_write = (uint32_t) byte_to_hardword(p_hex_data->data)<<16 |(uint32_t) byte_to_hardword(p_hex_data->addr);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 fb76 	bl	8002eda <byte_to_hardword>
 80027ee:	0003      	movs	r3, r0
 80027f0:	041c      	lsls	r4, r3, #16
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3302      	adds	r3, #2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fb6f 	bl	8002eda <byte_to_hardword>
 80027fc:	0003      	movs	r3, r0
 80027fe:	0022      	movs	r2, r4
 8002800:	431a      	orrs	r2, r3
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <fota_flash_firmware+0x140>)
 8002804:	601a      	str	r2, [r3, #0]
				/*Unlock Flash*/
				flash_unlock();
 8002806:	f000 f8f9 	bl	80029fc <flash_unlock>
				/*Erase Flash*/
				flash_erase(addr_write,5);
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <fota_flash_firmware+0x140>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2105      	movs	r1, #5
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f8c7 	bl	80029a4 <flash_erase>
				break;
 8002816:	e002      	b.n	800281e <fota_flash_firmware+0x12e>
			case Start_Linear_Address_rec:

				break;
			default:
				break;
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	e000      	b.n	800281e <fota_flash_firmware+0x12e>
				break;
 800281c:	46c0      	nop			; (mov r8, r8)
		}
		return 1;
 800281e:	2301      	movs	r3, #1
	}
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b006      	add	sp, #24
 8002826:	bdb0      	pop	{r4, r5, r7, pc}
 8002828:	0000028e 	.word	0x0000028e
 800282c:	0800a690 	.word	0x0800a690
 8002830:	200004f0 	.word	0x200004f0

08002834 <fota_process>:
uint8_t fota_process(fota_class *p_fota, uint8_t *data, uint16_t length) {
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	1dbb      	adds	r3, r7, #6
 8002840:	801a      	strh	r2, [r3, #0]
	p_fota->commands.checksum.byte[0] = data[length - 2];
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	3b02      	subs	r3, #2
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	18d3      	adds	r3, r2, r3
 800284c:	7819      	ldrb	r1, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	23a4      	movs	r3, #164	; 0xa4
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	54d1      	strb	r1, [r2, r3]
	p_fota->commands.checksum.byte[0] = data[length - 1];
 8002856:	1dbb      	adds	r3, r7, #6
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	3b01      	subs	r3, #1
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	7819      	ldrb	r1, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	23a4      	movs	r3, #164	; 0xa4
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	54d1      	strb	r1, [r2, r3]
	if (p_fota->commands.checksum.haftword != fota_checksum(data, length - 2)) {
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	23a4      	movs	r3, #164	; 0xa4
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	5ad4      	ldrh	r4, [r2, r3]
 8002872:	1dbb      	adds	r3, r7, #6
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	3b02      	subs	r3, #2
 8002878:	b29a      	uxth	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0011      	movs	r1, r2
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff fd8a 	bl	8002398 <fota_checksum>
 8002884:	0003      	movs	r3, r0
 8002886:	429c      	cmp	r4, r3
 8002888:	d001      	beq.n	800288e <fota_process+0x5a>
		return 0;
 800288a:	2300      	movs	r3, #0
 800288c:	e039      	b.n	8002902 <fota_process+0xce>
	}
	p_fota->commands.header = data[0];
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	7819      	ldrb	r1, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	23a3      	movs	r3, #163	; 0xa3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	54d1      	strb	r1, [r2, r3]
	p_fota->commands.commands = data[1];
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	7859      	ldrb	r1, [r3, #1]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <fota_process+0xd8>)
 80028a2:	5499      	strb	r1, [r3, r2]
	p_fota->commands.byte_count.byte[0] = data[2];
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	7899      	ldrb	r1, [r3, #2]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a19      	ldr	r2, [pc, #100]	; (8002910 <fota_process+0xdc>)
 80028ac:	5499      	strb	r1, [r3, r2]
	p_fota->commands.byte_count.byte[1] = data[3];
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	78d9      	ldrb	r1, [r3, #3]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <fota_process+0xe0>)
 80028b6:	5499      	strb	r1, [r3, r2]
	for (uint16_t i = 0; i < p_fota->commands.byte_count.haftword; i++) {
 80028b8:	2316      	movs	r3, #22
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e011      	b.n	80028e6 <fota_process+0xb2>
		fota_buffer[i] = data[4 + i];
 80028c2:	2116      	movs	r1, #22
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	3304      	adds	r3, #4
 80028ca:	001a      	movs	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	189a      	adds	r2, r3, r2
 80028d0:	0008      	movs	r0, r1
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	7811      	ldrb	r1, [r2, #0]
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <fota_process+0xe4>)
 80028da:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < p_fota->commands.byte_count.haftword; i++) {
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	183b      	adds	r3, r7, r0
 80028e2:	3201      	adds	r2, #1
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a09      	ldr	r2, [pc, #36]	; (8002910 <fota_process+0xdc>)
 80028ea:	5a9b      	ldrh	r3, [r3, r2]
 80028ec:	2216      	movs	r2, #22
 80028ee:	18ba      	adds	r2, r7, r2
 80028f0:	8812      	ldrh	r2, [r2, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3e5      	bcc.n	80028c2 <fota_process+0x8e>
	}
	p_fota->commands.data = fota_buffer;
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	23a5      	movs	r3, #165	; 0xa5
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <fota_process+0xe4>)
 80028fe:	50d1      	str	r1, [r2, r3]
	return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b007      	add	sp, #28
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	00000292 	.word	0x00000292
 8002910:	0000028e 	.word	0x0000028e
 8002914:	0000028f 	.word	0x0000028f
 8002918:	20000214 	.word	0x20000214

0800291c <fota_event_creat>:


#include "fota_event.h"


void fota_event_creat(fota_event_queue_handle *p_fota_event){
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	memset(p_fota_event->buff,fota_no_message,MAX_FOTA_EVENT_QUEUE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2264      	movs	r2, #100	; 0x64
 8002928:	2100      	movs	r1, #0
 800292a:	0018      	movs	r0, r3
 800292c:	f003 f822 	bl	8005974 <memset>
	p_fota_event->head = 0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	66da      	str	r2, [r3, #108]	; 0x6c
	p_fota_event->tail = 0;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	669a      	str	r2, [r3, #104]	; 0x68
	p_fota_event->count = 0;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	671a      	str	r2, [r3, #112]	; 0x70
	p_fota_event->size = MAX_FOTA_EVENT_QUEUE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2264      	movs	r2, #100	; 0x64
 8002946:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <fota_event_pop_tail>:
		p_fota_event->count += 1;
		return true;
	}
	return false;
}
bool fota_event_pop_tail(fota_event_queue_handle *p_fota_event, fota_event_t* data){
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	if (p_fota_event->head != p_fota_event->tail) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002962:	429a      	cmp	r2, r3
 8002964:	d019      	beq.n	800299a <fota_event_pop_tail+0x4a>
		data[0] = p_fota_event->buff[p_fota_event->tail];
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	5cd2      	ldrb	r2, [r2, r3]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	701a      	strb	r2, [r3, #0]
		p_fota_event->tail = (unsigned int) (p_fota_event->tail + 1) % p_fota_event->size;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297c:	0019      	movs	r1, r3
 800297e:	0010      	movs	r0, r2
 8002980:	f7fd fc64 	bl	800024c <__aeabi_uidivmod>
 8002984:	000b      	movs	r3, r1
 8002986:	001a      	movs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	669a      	str	r2, [r3, #104]	; 0x68
		p_fota_event->count -= 1;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	671a      	str	r2, [r3, #112]	; 0x70
		return true;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <fota_event_pop_tail+0x4c>
	}
	return false;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <flash_erase>:


#include "flash.h"


uint8_t flash_erase(uint32_t page_or_sector_addr, uint32_t nb_page_or_sector){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	return flash_hw_erase(page_or_sector_addr,nb_page_or_sector);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 f83b 	bl	8002a30 <flash_hw_erase>
 80029ba:	0003      	movs	r3, r0
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b002      	add	sp, #8
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <flash_read>:
uint32_t flash_read(uint32_t addr){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	return flash_hw_read(addr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f84d 	bl	8002a6e <flash_hw_read>
 80029d4:	0003      	movs	r3, r0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b002      	add	sp, #8
 80029dc:	bd80      	pop	{r7, pc}

080029de <flash_write>:
void flash_write(uint32_t addr,uint32_t data){
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
	flash_hw_write(addr, data);
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0011      	movs	r1, r2
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f847 	bl	8002a82 <flash_hw_write>
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}

080029fc <flash_unlock>:
void flash_unlock(void){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
	flash_hw_unlock();
 8002a00:	f000 f850 	bl	8002aa4 <flash_hw_unlock>
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <flash_lock>:
void flash_lock(void){
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
	flash_hw_lock();
 8002a0e:	f000 f850 	bl	8002ab2 <flash_hw_lock>
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <jump_app>:
void jump_app(uint32_t addr){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	jump_hw_app(addr);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f84c 	bl	8002ac0 <jump_hw_app>
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <flash_hw_erase>:

#include "flash_hw.h"

#define PAGE_ADDR_BEGIN (uint32_t)0x800c000

uint8_t flash_hw_erase(uint32_t page_or_sector_addr, uint32_t nb_page_or_sector){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef flash_erase;
	flash_erase.PageAddress = page_or_sector_addr;
 8002a3a:	210c      	movs	r1, #12
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	605a      	str	r2, [r3, #4]
	flash_erase.NbPages = nb_page_or_sector;
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	609a      	str	r2, [r3, #8]
	flash_erase.TypeErase =  FLASH_TYPEERASE_PAGES;
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
	uint32_t page_error;
	if(HAL_FLASHEx_Erase(&flash_erase,&page_error) == HAL_OK){
 8002a4e:	2308      	movs	r3, #8
 8002a50:	18fa      	adds	r2, r7, r3
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f001 f850 	bl	8003afc <HAL_FLASHEx_Erase>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d101      	bne.n	8002a64 <flash_hw_erase+0x34>
		return 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <flash_hw_erase+0x36>
	}
	return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b006      	add	sp, #24
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <flash_hw_read>:
uint32_t flash_hw_read(uint32_t addr){
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t *)(addr);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <flash_hw_write>:
void flash_hw_write(uint32_t addr,uint32_t data){
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, data);
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	000a      	movs	r2, r1
 8002a90:	2100      	movs	r1, #0
 8002a92:	000b      	movs	r3, r1
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	2002      	movs	r0, #2
 8002a98:	f000 feda 	bl	8003850 <HAL_FLASH_Program>
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <flash_hw_unlock>:
void flash_hw_unlock(void){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002aa8:	f000 ff68 	bl	800397c <HAL_FLASH_Unlock>
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <flash_hw_lock>:
void flash_hw_lock(void){
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8002ab6:	f000 ff87 	bl	80039c8 <HAL_FLASH_Lock>
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <jump_hw_app>:
void jump_hw_app(uint32_t addr){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	HAL_RCC_DeInit();
 8002ac8:	f001 fa52 	bl	8003f70 <HAL_RCC_DeInit>
	HAL_DeInit();
 8002acc:	f000 fcee 	bl	80034ac <HAL_DeInit>
	//SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |SCB_SHCSR_BUSFAULTENA_Msk |SCB_SHCSR_MEMFAULTENA_Msk ) ;
	__set_MSP(*((volatile uint32_t*) addr));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f383 8808 	msr	MSP, r3
}
 8002adc:	46c0      	nop			; (mov r8, r8)
	uint32_t JumpAddress = *((volatile uint32_t*) (addr + 4));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
	void (*reset_handler)(void) = (void*)JumpAddress;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
	reset_handler();
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4798      	blx	r3
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <intel_hex_process>:

#include "intelhex.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
intel_hex* intel_hex_process(uint8_t* data, uint16_t length){
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	000a      	movs	r2, r1
 8002b00:	1cbb      	adds	r3, r7, #2
 8002b02:	801a      	strh	r2, [r3, #0]
	intel_hex* result = (intel_hex*)malloc(length);
 8002b04:	1cbb      	adds	r3, r7, #2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f002 ff1f 	bl	800594c <malloc>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	60bb      	str	r3, [r7, #8]
	if(data[0] == ':'){
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b3a      	cmp	r3, #58	; 0x3a
 8002b18:	d157      	bne.n	8002bca <intel_hex_process+0xd4>
		result->start_code = data[0];
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	701a      	strb	r2, [r3, #0]
		result->byte_count = data[1];
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	785a      	ldrb	r2, [r3, #1]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	705a      	strb	r2, [r3, #1]
		result->addr[0] = data[2];
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	789a      	ldrb	r2, [r3, #2]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	709a      	strb	r2, [r3, #2]
		result->addr[1] = data[3];
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	78da      	ldrb	r2, [r3, #3]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	70da      	strb	r2, [r3, #3]
		result->record_type = data[4];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	791a      	ldrb	r2, [r3, #4]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	711a      	strb	r2, [r3, #4]
		result->data = malloc(result->byte_count);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f002 ff00 	bl	800594c <malloc>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	001a      	movs	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	609a      	str	r2, [r3, #8]
		for(uint16_t i = 0;i<result->byte_count;i++){
 8002b54:	230e      	movs	r3, #14
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2200      	movs	r2, #0
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	e012      	b.n	8002b84 <intel_hex_process+0x8e>
			result->data[i] = data[5+i];
 8002b5e:	200e      	movs	r0, #14
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	3305      	adds	r3, #5
 8002b66:	001a      	movs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	189a      	adds	r2, r3, r2
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	18cb      	adds	r3, r1, r3
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0;i<result->byte_count;i++){
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	3201      	adds	r2, #1
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	220e      	movs	r2, #14
 8002b8c:	18ba      	adds	r2, r7, r2
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d3e4      	bcc.n	8002b5e <intel_hex_process+0x68>
		}
		result->checksum = data[5+result->byte_count];
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	3305      	adds	r3, #5
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	731a      	strb	r2, [r3, #12]
		if(result->checksum != intel_hex_checksum(data, length)){
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	7b1c      	ldrb	r4, [r3, #12]
 8002baa:	1cbb      	adds	r3, r7, #2
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f80e 	bl	8002bd4 <intel_hex_checksum>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	429c      	cmp	r4, r3
 8002bbc:	d005      	beq.n	8002bca <intel_hex_process+0xd4>
			free(result);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f002 fecd 	bl	8005960 <free>
			return NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <intel_hex_process+0xd6>
		}
	}
	return result;
 8002bca:	68bb      	ldr	r3, [r7, #8]
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b005      	add	sp, #20
 8002bd2:	bd90      	pop	{r4, r7, pc}

08002bd4 <intel_hex_checksum>:
uint8_t intel_hex_checksum(uint8_t* data, uint16_t length){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	000a      	movs	r2, r1
 8002bde:	1cbb      	adds	r3, r7, #2
 8002be0:	801a      	strh	r2, [r3, #0]
	uint8_t intel_crc = 0;
 8002be2:	230f      	movs	r3, #15
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1;i<length-1;i++){
 8002bea:	230c      	movs	r3, #12
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2201      	movs	r2, #1
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e010      	b.n	8002c16 <intel_hex_checksum+0x42>
		intel_crc = intel_crc + data[i];
 8002bf4:	200c      	movs	r0, #12
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	18d3      	adds	r3, r2, r3
 8002bfe:	7819      	ldrb	r1, [r3, #0]
 8002c00:	220f      	movs	r2, #15
 8002c02:	18bb      	adds	r3, r7, r2
 8002c04:	18ba      	adds	r2, r7, r2
 8002c06:	7812      	ldrb	r2, [r2, #0]
 8002c08:	188a      	adds	r2, r1, r2
 8002c0a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1;i<length-1;i++){
 8002c0c:	183b      	adds	r3, r7, r0
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	3201      	adds	r2, #1
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	230c      	movs	r3, #12
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	1cbb      	adds	r3, r7, #2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dbe6      	blt.n	8002bf4 <intel_hex_checksum+0x20>
	}
	intel_crc = !intel_crc + 1;
 8002c26:	230f      	movs	r3, #15
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <intel_hex_checksum+0x60>
 8002c30:	2202      	movs	r2, #2
 8002c32:	e000      	b.n	8002c36 <intel_hex_checksum+0x62>
 8002c34:	2201      	movs	r2, #1
 8002c36:	210f      	movs	r1, #15
 8002c38:	187b      	adds	r3, r7, r1
 8002c3a:	701a      	strb	r2, [r3, #0]
	return intel_crc;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	781b      	ldrb	r3, [r3, #0]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b004      	add	sp, #16
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <ring_init>:
 *      Author: Admin
 */

#include "ringbuffer.h"

void ring_init(Ring_Buffer_t *ringbuf, unsigned int size) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	ringbuf->count = 0;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	2383      	movs	r3, #131	; 0x83
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	2100      	movs	r1, #0
 8002c5a:	50d1      	str	r1, [r2, r3]
	ringbuf->head = 0;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	2382      	movs	r3, #130	; 0x82
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	2100      	movs	r1, #0
 8002c64:	50d1      	str	r1, [r2, r3]
	ringbuf->tail = 0;
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	2381      	movs	r3, #129	; 0x81
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	50d1      	str	r1, [r2, r3]
	ringbuf->size = size;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	50d1      	str	r1, [r2, r3]
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <ring_pop_tail>:
		return true;
	}
	return false;
}

bool ring_pop_tail(Ring_Buffer_t *ring, uint8_t* data) {
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
	if (ring->head != ring->tail) {
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	2382      	movs	r3, #130	; 0x82
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	58d2      	ldr	r2, [r2, r3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	2381      	movs	r3, #129	; 0x81
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	58cb      	ldr	r3, [r1, r3]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d024      	beq.n	8002cea <ring_pop_tail+0x68>
		data[0] = ring->buff[ring->tail];
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	2381      	movs	r3, #129	; 0x81
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	58d3      	ldr	r3, [r2, r3]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	5cd2      	ldrb	r2, [r2, r3]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
		ring->tail = (unsigned int) (ring->tail + 1) % ring->size;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	2381      	movs	r3, #129	; 0x81
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	58d3      	ldr	r3, [r2, r3]
 8002cb8:	1c58      	adds	r0, r3, #1
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	58d3      	ldr	r3, [r2, r3]
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	f7fd fac2 	bl	800024c <__aeabi_uidivmod>
 8002cc8:	000b      	movs	r3, r1
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	2381      	movs	r3, #129	; 0x81
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	50d1      	str	r1, [r2, r3]
		ring->count -= 1;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	2383      	movs	r3, #131	; 0x83
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	58d3      	ldr	r3, [r2, r3]
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	2383      	movs	r3, #131	; 0x83
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	50d1      	str	r1, [r2, r3]
		return true;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <ring_pop_tail+0x6a>
	}
	return false;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <byte_to_hex>:
#include "utils.h"

uint8_t hex[22] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
		'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f' };
uint8_t byte_to_hex(uint8_t byte);
uint8_t byte_to_hex(uint8_t byte) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	1dfb      	adds	r3, r7, #7
 8002cfe:	701a      	strb	r2, [r3, #0]
	uint8_t _hex;
	for (uint16_t i = 0; i < 22; i++) {
 8002d00:	230c      	movs	r3, #12
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	e02f      	b.n	8002d6a <byte_to_hex+0x76>
		if (byte == hex[i]) {
 8002d0a:	210c      	movs	r1, #12
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <byte_to_hex+0x90>)
 8002d12:	5cd3      	ldrb	r3, [r2, r3]
 8002d14:	1dfa      	adds	r2, r7, #7
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d120      	bne.n	8002d5e <byte_to_hex+0x6a>
			if (i < 10) {
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d806      	bhi.n	8002d32 <byte_to_hex+0x3e>
				_hex = byte - 48;
 8002d24:	230f      	movs	r3, #15
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	1dfa      	adds	r2, r7, #7
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	3a30      	subs	r2, #48	; 0x30
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e015      	b.n	8002d5e <byte_to_hex+0x6a>
			} else if (i >= 10 && i < 16) {
 8002d32:	220c      	movs	r2, #12
 8002d34:	18bb      	adds	r3, r7, r2
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d90a      	bls.n	8002d52 <byte_to_hex+0x5e>
 8002d3c:	18bb      	adds	r3, r7, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d806      	bhi.n	8002d52 <byte_to_hex+0x5e>
				_hex = byte - 55;
 8002d44:	230f      	movs	r3, #15
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	1dfa      	adds	r2, r7, #7
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	3a37      	subs	r2, #55	; 0x37
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e005      	b.n	8002d5e <byte_to_hex+0x6a>
			} else {
				_hex = byte - 87;
 8002d52:	230f      	movs	r3, #15
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	1dfa      	adds	r2, r7, #7
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	3a57      	subs	r2, #87	; 0x57
 8002d5c:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 22; i++) {
 8002d5e:	210c      	movs	r1, #12
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	3201      	adds	r2, #1
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	2b15      	cmp	r3, #21
 8002d72:	d9ca      	bls.n	8002d0a <byte_to_hex+0x16>
			}
		}
	}
	return _hex;
 8002d74:	230f      	movs	r3, #15
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	781b      	ldrb	r3, [r3, #0]
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20000000 	.word	0x20000000

08002d88 <string_to_hex>:

uint8_t* string_to_hex(char* data, uint16_t length) {
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	000a      	movs	r2, r1
 8002d92:	1cbb      	adds	r3, r7, #2
 8002d94:	801a      	strh	r2, [r3, #0]
	uint8_t *result = (uint8_t*) malloc(length / 2 + 1);
 8002d96:	1cbb      	adds	r3, r7, #2
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	0018      	movs	r0, r3
 8002da2:	f002 fdd3 	bl	800594c <malloc>
 8002da6:	0003      	movs	r3, r0
 8002da8:	60fb      	str	r3, [r7, #12]
	if (length % 2 != 0) {
 8002daa:	1cbb      	adds	r3, r7, #2
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d046      	beq.n	8002e46 <string_to_hex+0xbe>
		uint16_t p_result = 0;
 8002db8:	2316      	movs	r3, #22
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length - 1; i = i + 2) {
 8002dc0:	2314      	movs	r3, #20
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e034      	b.n	8002e34 <string_to_hex+0xac>
			uint8_t high_byte = byte_to_hex((uint8_t)data[i]);
 8002dca:	2514      	movs	r5, #20
 8002dcc:	197b      	adds	r3, r7, r5
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	18d3      	adds	r3, r2, r3
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2609      	movs	r6, #9
 8002dd8:	19bc      	adds	r4, r7, r6
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7ff ff8a 	bl	8002cf4 <byte_to_hex>
 8002de0:	0003      	movs	r3, r0
 8002de2:	7023      	strb	r3, [r4, #0]
			uint8_t low_byte = byte_to_hex((uint8_t)data[i + 1]);
 8002de4:	197b      	adds	r3, r7, r5
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2208      	movs	r2, #8
 8002df2:	18bc      	adds	r4, r7, r2
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff ff7d 	bl	8002cf4 <byte_to_hex>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	7023      	strb	r3, [r4, #0]
			result[p_result] = (uint8_t) (high_byte << 4 | low_byte);
 8002dfe:	19bb      	adds	r3, r7, r6
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	b25a      	sxtb	r2, r3
 8002e06:	2308      	movs	r3, #8
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b259      	sxtb	r1, r3
 8002e12:	2016      	movs	r0, #22
 8002e14:	183b      	adds	r3, r7, r0
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	18d3      	adds	r3, r2, r3
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]
			p_result++;
 8002e20:	183b      	adds	r3, r7, r0
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	3201      	adds	r2, #1
 8002e28:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length - 1; i = i + 2) {
 8002e2a:	197b      	adds	r3, r7, r5
 8002e2c:	197a      	adds	r2, r7, r5
 8002e2e:	8812      	ldrh	r2, [r2, #0]
 8002e30:	3202      	adds	r2, #2
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	2314      	movs	r3, #20
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	1cbb      	adds	r3, r7, #2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	429a      	cmp	r2, r3
 8002e42:	dbc2      	blt.n	8002dca <string_to_hex+0x42>
 8002e44:	e044      	b.n	8002ed0 <string_to_hex+0x148>
		}
	} else {
		uint16_t p_result = 0;
 8002e46:	2312      	movs	r3, #18
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length; i = i + 2) {
 8002e4e:	2310      	movs	r3, #16
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	e034      	b.n	8002ec2 <string_to_hex+0x13a>
			uint8_t high_byte = byte_to_hex((uint8_t)data[i]);
 8002e58:	2510      	movs	r5, #16
 8002e5a:	197b      	adds	r3, r7, r5
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	18d3      	adds	r3, r2, r3
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	260b      	movs	r6, #11
 8002e66:	19bc      	adds	r4, r7, r6
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff ff43 	bl	8002cf4 <byte_to_hex>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	7023      	strb	r3, [r4, #0]
			uint8_t low_byte = byte_to_hex((uint8_t)data[i + 1]);
 8002e72:	197b      	adds	r3, r7, r5
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	18d3      	adds	r3, r2, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	220a      	movs	r2, #10
 8002e80:	18bc      	adds	r4, r7, r2
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff ff36 	bl	8002cf4 <byte_to_hex>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	7023      	strb	r3, [r4, #0]
			result[p_result] = (uint8_t) (high_byte << 4 | low_byte);
 8002e8c:	19bb      	adds	r3, r7, r6
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	b25a      	sxtb	r2, r3
 8002e94:	230a      	movs	r3, #10
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b259      	sxtb	r1, r3
 8002ea0:	2012      	movs	r0, #18
 8002ea2:	183b      	adds	r3, r7, r0
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	18d3      	adds	r3, r2, r3
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
			p_result++;
 8002eae:	183b      	adds	r3, r7, r0
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	3201      	adds	r2, #1
 8002eb6:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length; i = i + 2) {
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	197a      	adds	r2, r7, r5
 8002ebc:	8812      	ldrh	r2, [r2, #0]
 8002ebe:	3202      	adds	r2, #2
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	18fa      	adds	r2, r7, r3
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3c3      	bcc.n	8002e58 <string_to_hex+0xd0>
		}
	}
	return result;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b007      	add	sp, #28
 8002ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eda <byte_to_hardword>:
uint16_t byte_to_hardword(uint8_t* src){
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	return (uint16_t)((uint16_t)src[0]<<8 | (uint16_t)src[1]);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	b21a      	sxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3301      	adds	r3, #1
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b21b      	sxth	r3, r3
 8002ef6:	b29b      	uxth	r3, r3
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <byte_to_word_cr>:
	for(uint16_t i = 0;i<4;i++){
		result = result | (uint32_t)src[i]<< 8*(3-i);
	}
	return result;
}
uint32_t byte_to_word_cr(uint8_t* src){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0;i<4;i++){
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2200      	movs	r2, #0
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	e013      	b.n	8002f3e <byte_to_word_cr+0x3e>
		result = result | (uint32_t)src[i]<< 8*(i);
 8002f16:	210a      	movs	r1, #10
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	18d3      	adds	r3, r2, r3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	001a      	movs	r2, r3
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0;i<4;i++){
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	3201      	adds	r2, #1
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	230a      	movs	r3, #10
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d9e6      	bls.n	8002f16 <byte_to_word_cr+0x16>
	}
	return result;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f56:	f000 fa95 	bl	8003484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f5a:	f000 f807 	bl	8002f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f5e:	f000 f895 	bl	800308c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002f62:	f000 f863 	bl	800302c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  flash_firmware_process();
 8002f66:	f7ff f9b5 	bl	80022d4 <flash_firmware_process>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f6a:	e7fe      	b.n	8002f6a <main+0x18>

08002f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b097      	sub	sp, #92	; 0x5c
 8002f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f72:	2428      	movs	r4, #40	; 0x28
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	0018      	movs	r0, r3
 8002f78:	2330      	movs	r3, #48	; 0x30
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f002 fcf9 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f82:	2318      	movs	r3, #24
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	0018      	movs	r0, r3
 8002f88:	2310      	movs	r3, #16
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	f002 fcf1 	bl	8005974 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	0018      	movs	r0, r3
 8002f96:	2314      	movs	r3, #20
 8002f98:	001a      	movs	r2, r3
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f002 fcea 	bl	8005974 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa0:	0021      	movs	r1, r4
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	2201      	movs	r2, #1
 8002fac:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	0252      	lsls	r2, r2, #9
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0352      	lsls	r2, r2, #13
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f001 f855 	bl	800407c <HAL_RCC_OscConfig>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d001      	beq.n	8002fda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002fd6:	f000 f8c3 	bl	8003160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fda:	2118      	movs	r1, #24
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2207      	movs	r2, #7
 8002fe0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fb59 	bl	80046b0 <HAL_RCC_ClockConfig>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003002:	f000 f8ad 	bl	8003160 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	0018      	movs	r0, r3
 8003016:	f001 fc9d 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d001      	beq.n	8003022 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800301e:	f000 f89f 	bl	8003160 <Error_Handler>
  }
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b017      	add	sp, #92	; 0x5c
 8003028:	bd90      	pop	{r4, r7, pc}
	...

0800302c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <MX_USART1_UART_Init+0x5c>)
 8003034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003038:	22e1      	movs	r2, #225	; 0xe1
 800303a:	0252      	lsls	r2, r2, #9
 800303c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <MX_USART1_UART_Init+0x58>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003052:	220c      	movs	r2, #12
 8003054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <MX_USART1_UART_Init+0x58>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <MX_USART1_UART_Init+0x58>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <MX_USART1_UART_Init+0x58>)
 8003070:	0018      	movs	r0, r3
 8003072:	f001 fd4d 	bl	8004b10 <HAL_UART_Init>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800307a:	f000 f871 	bl	8003160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200004f4 	.word	0x200004f4
 8003088:	40013800 	.word	0x40013800

0800308c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003092:	240c      	movs	r4, #12
 8003094:	193b      	adds	r3, r7, r4
 8003096:	0018      	movs	r0, r3
 8003098:	2314      	movs	r3, #20
 800309a:	001a      	movs	r2, r3
 800309c:	2100      	movs	r1, #0
 800309e:	f002 fc69 	bl	8005974 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b2c      	ldr	r3, [pc, #176]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	03c9      	lsls	r1, r1, #15
 80030ac:	430a      	orrs	r2, r1
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	03db      	lsls	r3, r3, #15
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	4b25      	ldr	r3, [pc, #148]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	0289      	lsls	r1, r1, #10
 80030c8:	430a      	orrs	r2, r1
 80030ca:	615a      	str	r2, [r3, #20]
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	029b      	lsls	r3, r3, #10
 80030d4:	4013      	ands	r3, r2
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0309      	lsls	r1, r1, #12
 80030e4:	430a      	orrs	r2, r1
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <MX_GPIO_Init+0xcc>)
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	031b      	lsls	r3, r3, #12
 80030f0:	4013      	ands	r3, r2
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80030f6:	23c0      	movs	r3, #192	; 0xc0
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4818      	ldr	r0, [pc, #96]	; (800315c <MX_GPIO_Init+0xd0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	0019      	movs	r1, r3
 8003100:	f000 ff18 	bl	8003f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003104:	193b      	adds	r3, r7, r4
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	2290      	movs	r2, #144	; 0x90
 800310e:	0352      	lsls	r2, r2, #13
 8003110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	193b      	adds	r3, r7, r4
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003118:	193a      	adds	r2, r7, r4
 800311a:	2390      	movs	r3, #144	; 0x90
 800311c:	05db      	lsls	r3, r3, #23
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fd97 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8003126:	0021      	movs	r1, r4
 8003128:	187b      	adds	r3, r7, r1
 800312a:	22c0      	movs	r2, #192	; 0xc0
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003130:	187b      	adds	r3, r7, r1
 8003132:	2201      	movs	r2, #1
 8003134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003142:	187b      	adds	r3, r7, r1
 8003144:	4a05      	ldr	r2, [pc, #20]	; (800315c <MX_GPIO_Init+0xd0>)
 8003146:	0019      	movs	r1, r3
 8003148:	0010      	movs	r0, r2
 800314a:	f000 fd83 	bl	8003c54 <HAL_GPIO_Init>

}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b009      	add	sp, #36	; 0x24
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	40021000 	.word	0x40021000
 800315c:	48000800 	.word	0x48000800

08003160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003164:	b672      	cpsid	i
}
 8003166:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003168:	e7fe      	b.n	8003168 <Error_Handler+0x8>
	...

0800316c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_MspInit+0x44>)
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_MspInit+0x44>)
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	619a      	str	r2, [r3, #24]
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_MspInit+0x44>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_MspInit+0x44>)
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_MspInit+0x44>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0549      	lsls	r1, r1, #21
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_MspInit+0x44>)
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	055b      	lsls	r3, r3, #21
 80031a0:	4013      	ands	r3, r2
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b08b      	sub	sp, #44	; 0x2c
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	2414      	movs	r4, #20
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	0018      	movs	r0, r3
 80031c2:	2314      	movs	r3, #20
 80031c4:	001a      	movs	r2, r3
 80031c6:	2100      	movs	r1, #0
 80031c8:	f002 fbd4 	bl	8005974 <memset>
  if(huart->Instance==USART1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <HAL_UART_MspInit+0xa4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d13b      	bne.n	800324e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_UART_MspInit+0xa8>)
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_UART_MspInit+0xa8>)
 80031dc:	2180      	movs	r1, #128	; 0x80
 80031de:	01c9      	lsls	r1, r1, #7
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_UART_MspInit+0xa8>)
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	01db      	lsls	r3, r3, #7
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_UART_MspInit+0xa8>)
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_UART_MspInit+0xa8>)
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	0289      	lsls	r1, r1, #10
 80031fc:	430a      	orrs	r2, r1
 80031fe:	615a      	str	r2, [r3, #20]
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_UART_MspInit+0xa8>)
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	029b      	lsls	r3, r3, #10
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800320e:	193b      	adds	r3, r7, r4
 8003210:	22c0      	movs	r2, #192	; 0xc0
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	0021      	movs	r1, r4
 8003218:	187b      	adds	r3, r7, r1
 800321a:	2202      	movs	r2, #2
 800321c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2203      	movs	r2, #3
 8003228:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2201      	movs	r2, #1
 800322e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003230:	187a      	adds	r2, r7, r1
 8003232:	2390      	movs	r3, #144	; 0x90
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fd0b 	bl	8003c54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	201b      	movs	r0, #27
 8003244:	f000 fa54 	bl	80036f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003248:	201b      	movs	r0, #27
 800324a:	f000 fa66 	bl	800371a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b00b      	add	sp, #44	; 0x2c
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	40013800 	.word	0x40013800
 800325c:	40021000 	.word	0x40021000

08003260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003264:	e7fe      	b.n	8003264 <NMI_Handler+0x4>

08003266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326a:	e7fe      	b.n	800326a <HardFault_Handler+0x4>

0800326c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003284:	f000 f96c 	bl	8003560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <USART1_IRQHandler+0x14>)
 8003296:	0018      	movs	r0, r3
 8003298:	f001 fc8e 	bl	8004bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	200004f4 	.word	0x200004f4

080032a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	return 1;
 80032ac:	2301      	movs	r3, #1
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_kill>:

int _kill(int pid, int sig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032be:	f002 fb1b 	bl	80058f8 <__errno>
 80032c2:	0003      	movs	r3, r0
 80032c4:	2216      	movs	r2, #22
 80032c6:	601a      	str	r2, [r3, #0]
	return -1;
 80032c8:	2301      	movs	r3, #1
 80032ca:	425b      	negs	r3, r3
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_exit>:

void _exit (int status)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032dc:	2301      	movs	r3, #1
 80032de:	425a      	negs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0011      	movs	r1, r2
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff ffe5 	bl	80032b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ea:	e7fe      	b.n	80032ea <_exit+0x16>

080032ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e00a      	b.n	8003314 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032fe:	e000      	b.n	8003302 <_read+0x16>
 8003300:	bf00      	nop
 8003302:	0001      	movs	r1, r0
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	60ba      	str	r2, [r7, #8]
 800330a:	b2ca      	uxtb	r2, r1
 800330c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	dbf0      	blt.n	80032fe <_read+0x12>
	}

return len;
 800331c:	687b      	ldr	r3, [r7, #4]
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b006      	add	sp, #24
 8003324:	bd80      	pop	{r7, pc}

08003326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e009      	b.n	800334c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	60ba      	str	r2, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	e000      	b.n	8003346 <_write+0x20>
 8003344:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3301      	adds	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	dbf1      	blt.n	8003338 <_write+0x12>
	}
	return len;
 8003354:	687b      	ldr	r3, [r7, #4]
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bd80      	pop	{r7, pc}

0800335e <_close>:

int _close(int file)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
	return -1;
 8003366:	2301      	movs	r3, #1
 8003368:	425b      	negs	r3, r3
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b002      	add	sp, #8
 8003370:	bd80      	pop	{r7, pc}

08003372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	0192      	lsls	r2, r2, #6
 8003382:	605a      	str	r2, [r3, #4]
	return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}

0800338e <_isatty>:

int _isatty(int file)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
	return 1;
 8003396:	2301      	movs	r3, #1
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
	return 0;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <_sbrk+0x5c>)
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <_sbrk+0x60>)
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <_sbrk+0x64>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <_sbrk+0x64>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <_sbrk+0x68>)
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <_sbrk+0x64>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d207      	bcs.n	80033f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e8:	f002 fa86 	bl	80058f8 <__errno>
 80033ec:	0003      	movs	r3, r0
 80033ee:	220c      	movs	r2, #12
 80033f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	425b      	negs	r3, r3
 80033f6:	e009      	b.n	800340c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <_sbrk+0x64>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <_sbrk+0x64>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	18d2      	adds	r2, r2, r3
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <_sbrk+0x64>)
 8003408:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b006      	add	sp, #24
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20002000 	.word	0x20002000
 8003418:	00000400 	.word	0x00000400
 800341c:	20000578 	.word	0x20000578
 8003420:	200005b0 	.word	0x200005b0

08003424 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003430:	480d      	ldr	r0, [pc, #52]	; (8003468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003432:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003434:	480d      	ldr	r0, [pc, #52]	; (800346c <LoopForever+0x6>)
  ldr r1, =_edata
 8003436:	490e      	ldr	r1, [pc, #56]	; (8003470 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003438:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <LoopForever+0xe>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800343c:	e002      	b.n	8003444 <LoopCopyDataInit>

0800343e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003442:	3304      	adds	r3, #4

08003444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003448:	d3f9      	bcc.n	800343e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344a:	4a0b      	ldr	r2, [pc, #44]	; (8003478 <LoopForever+0x12>)
  ldr r4, =_ebss
 800344c:	4c0b      	ldr	r4, [pc, #44]	; (800347c <LoopForever+0x16>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003450:	e001      	b.n	8003456 <LoopFillZerobss>

08003452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003454:	3204      	adds	r2, #4

08003456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003458:	d3fb      	bcc.n	8003452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800345a:	f7ff ffe3 	bl	8003424 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800345e:	f002 fa51 	bl	8005904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003462:	f7ff fd76 	bl	8002f52 <main>

08003466 <LoopForever>:

LoopForever:
    b LoopForever
 8003466:	e7fe      	b.n	8003466 <LoopForever>
  ldr   r0, =_estack
 8003468:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003470:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003474:	0800ab74 	.word	0x0800ab74
  ldr r2, =_sbss
 8003478:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800347c:	200005b0 	.word	0x200005b0

08003480 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <ADC1_COMP_IRQHandler>
	...

08003484 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <HAL_Init+0x24>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_Init+0x24>)
 800348e:	2110      	movs	r1, #16
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003494:	2000      	movs	r0, #0
 8003496:	f000 f82f 	bl	80034f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800349a:	f7ff fe67 	bl	800316c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	40022000 	.word	0x40022000

080034ac <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_DeInit+0x3c>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	4252      	negs	r2, r2
 80034b6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_DeInit+0x3c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_DeInit+0x3c>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	4252      	negs	r2, r2
 80034c4:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_DeInit+0x3c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_DeInit+0x3c>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	4252      	negs	r2, r2
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_DeInit+0x3c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80034da:	f000 f807 	bl	80034ec <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_InitTick+0x5c>)
 8003502:	681c      	ldr	r4, [r3, #0]
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_InitTick+0x60>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	0019      	movs	r1, r3
 800350a:	23fa      	movs	r3, #250	; 0xfa
 800350c:	0098      	lsls	r0, r3, #2
 800350e:	f7fc fe17 	bl	8000140 <__udivsi3>
 8003512:	0003      	movs	r3, r0
 8003514:	0019      	movs	r1, r3
 8003516:	0020      	movs	r0, r4
 8003518:	f7fc fe12 	bl	8000140 <__udivsi3>
 800351c:	0003      	movs	r3, r0
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f90b 	bl	800373a <HAL_SYSTICK_Config>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e00f      	b.n	800354c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d80b      	bhi.n	800354a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	2301      	movs	r3, #1
 8003536:	425b      	negs	r3, r3
 8003538:	2200      	movs	r2, #0
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f8d8 	bl	80036f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_InitTick+0x64>)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b003      	add	sp, #12
 8003552:	bd90      	pop	{r4, r7, pc}
 8003554:	20000018 	.word	0x20000018
 8003558:	20000020 	.word	0x20000020
 800355c:	2000001c 	.word	0x2000001c

08003560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_IncTick+0x1c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	001a      	movs	r2, r3
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_IncTick+0x20>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	18d2      	adds	r2, r2, r3
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_IncTick+0x20>)
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	20000020 	.word	0x20000020
 8003580:	2000057c 	.word	0x2000057c

08003584 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  return uwTick;
 8003588:	4b02      	ldr	r3, [pc, #8]	; (8003594 <HAL_GetTick+0x10>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	2000057c 	.word	0x2000057c

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	0002      	movs	r2, r0
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b7f      	cmp	r3, #127	; 0x7f
 80035aa:	d809      	bhi.n	80035c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	001a      	movs	r2, r3
 80035b2:	231f      	movs	r3, #31
 80035b4:	401a      	ands	r2, r3
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_EnableIRQ+0x30>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	4091      	lsls	r1, r2
 80035bc:	000a      	movs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
  }
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	e000e100 	.word	0xe000e100

080035cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	0002      	movs	r2, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b7f      	cmp	r3, #127	; 0x7f
 80035e0:	d828      	bhi.n	8003634 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035e2:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <__NVIC_SetPriority+0xd4>)
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	33c0      	adds	r3, #192	; 0xc0
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	589b      	ldr	r3, [r3, r2]
 80035f2:	1dfa      	adds	r2, r7, #7
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	0011      	movs	r1, r2
 80035f8:	2203      	movs	r2, #3
 80035fa:	400a      	ands	r2, r1
 80035fc:	00d2      	lsls	r2, r2, #3
 80035fe:	21ff      	movs	r1, #255	; 0xff
 8003600:	4091      	lsls	r1, r2
 8003602:	000a      	movs	r2, r1
 8003604:	43d2      	mvns	r2, r2
 8003606:	401a      	ands	r2, r3
 8003608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	401a      	ands	r2, r3
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	0018      	movs	r0, r3
 8003618:	2303      	movs	r3, #3
 800361a:	4003      	ands	r3, r0
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003620:	481f      	ldr	r0, [pc, #124]	; (80036a0 <__NVIC_SetPriority+0xd4>)
 8003622:	1dfb      	adds	r3, r7, #7
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b25b      	sxtb	r3, r3
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	430a      	orrs	r2, r1
 800362c:	33c0      	adds	r3, #192	; 0xc0
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003632:	e031      	b.n	8003698 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <__NVIC_SetPriority+0xd8>)
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0019      	movs	r1, r3
 800363c:	230f      	movs	r3, #15
 800363e:	400b      	ands	r3, r1
 8003640:	3b08      	subs	r3, #8
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3306      	adds	r3, #6
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	18d3      	adds	r3, r2, r3
 800364a:	3304      	adds	r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1dfa      	adds	r2, r7, #7
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	0011      	movs	r1, r2
 8003654:	2203      	movs	r2, #3
 8003656:	400a      	ands	r2, r1
 8003658:	00d2      	lsls	r2, r2, #3
 800365a:	21ff      	movs	r1, #255	; 0xff
 800365c:	4091      	lsls	r1, r2
 800365e:	000a      	movs	r2, r1
 8003660:	43d2      	mvns	r2, r2
 8003662:	401a      	ands	r2, r3
 8003664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	22ff      	movs	r2, #255	; 0xff
 800366c:	401a      	ands	r2, r3
 800366e:	1dfb      	adds	r3, r7, #7
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	0018      	movs	r0, r3
 8003674:	2303      	movs	r3, #3
 8003676:	4003      	ands	r3, r0
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800367c:	4809      	ldr	r0, [pc, #36]	; (80036a4 <__NVIC_SetPriority+0xd8>)
 800367e:	1dfb      	adds	r3, r7, #7
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001c      	movs	r4, r3
 8003684:	230f      	movs	r3, #15
 8003686:	4023      	ands	r3, r4
 8003688:	3b08      	subs	r3, #8
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	430a      	orrs	r2, r1
 800368e:	3306      	adds	r3, #6
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	18c3      	adds	r3, r0, r3
 8003694:	3304      	adds	r3, #4
 8003696:	601a      	str	r2, [r3, #0]
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b003      	add	sp, #12
 800369e:	bd90      	pop	{r4, r7, pc}
 80036a0:	e000e100 	.word	0xe000e100
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1e5a      	subs	r2, r3, #1
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	045b      	lsls	r3, r3, #17
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d301      	bcc.n	80036c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036bc:	2301      	movs	r3, #1
 80036be:	e010      	b.n	80036e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <SysTick_Config+0x44>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	3a01      	subs	r2, #1
 80036c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c8:	2301      	movs	r3, #1
 80036ca:	425b      	negs	r3, r3
 80036cc:	2103      	movs	r1, #3
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff ff7c 	bl	80035cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x44>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x44>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	210f      	movs	r1, #15
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	1c02      	adds	r2, r0, #0
 8003700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	187b      	adds	r3, r7, r1
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b25b      	sxtb	r3, r3
 800370a:	0011      	movs	r1, r2
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff ff5d 	bl	80035cc <__NVIC_SetPriority>
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b004      	add	sp, #16
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	0002      	movs	r2, r0
 8003722:	1dfb      	adds	r3, r7, #7
 8003724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b25b      	sxtb	r3, r3
 800372c:	0018      	movs	r0, r3
 800372e:	f7ff ff33 	bl	8003598 <__NVIC_EnableIRQ>
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff ffaf 	bl	80036a8 <SysTick_Config>
 800374a:	0003      	movs	r3, r0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2221      	movs	r2, #33	; 0x21
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d008      	beq.n	800377a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2204      	movs	r2, #4
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e020      	b.n	80037bc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	210e      	movs	r1, #14
 8003786:	438a      	bics	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	438a      	bics	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	2101      	movs	r1, #1
 80037a4:	4091      	lsls	r1, r2
 80037a6:	000a      	movs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2221      	movs	r2, #33	; 0x21
 80037ae:	2101      	movs	r1, #1
 80037b0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	2100      	movs	r1, #0
 80037b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	210f      	movs	r1, #15
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	5c9b      	ldrb	r3, [r3, r2]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d006      	beq.n	80037ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2204      	movs	r2, #4
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e028      	b.n	8003840 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	210e      	movs	r1, #14
 80037fa:	438a      	bics	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	438a      	bics	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	2101      	movs	r1, #1
 8003818:	4091      	lsls	r1, r2
 800381a:	000a      	movs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2221      	movs	r2, #33	; 0x21
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	0010      	movs	r0, r2
 800383e:	4798      	blx	r3
    } 
  }
  return status;
 8003840:	230f      	movs	r3, #15
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603a      	str	r2, [r7, #0]
 800385c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800385e:	2317      	movs	r3, #23
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8003866:	2316      	movs	r3, #22
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800386e:	2315      	movs	r3, #21
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003876:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_FLASH_Program+0x120>)
 8003878:	7e1b      	ldrb	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_FLASH_Program+0x32>
 800387e:	2302      	movs	r3, #2
 8003880:	e072      	b.n	8003968 <HAL_FLASH_Program+0x118>
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_FLASH_Program+0x120>)
 8003884:	2201      	movs	r2, #1
 8003886:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003888:	2317      	movs	r3, #23
 800388a:	18fe      	adds	r6, r7, r3
 800388c:	4b39      	ldr	r3, [pc, #228]	; (8003974 <HAL_FLASH_Program+0x124>)
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f8c4 	bl	8003a1c <FLASH_WaitForLastOperation>
 8003894:	0003      	movs	r3, r0
 8003896:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8003898:	2317      	movs	r3, #23
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d15c      	bne.n	800395c <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d104      	bne.n	80038b2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038a8:	2315      	movs	r3, #21
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e00b      	b.n	80038ca <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d104      	bne.n	80038c2 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038b8:	2315      	movs	r3, #21
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e003      	b.n	80038ca <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038c2:	2315      	movs	r3, #21
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2204      	movs	r2, #4
 80038c8:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80038ca:	2316      	movs	r3, #22
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e039      	b.n	8003948 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038d4:	2116      	movs	r1, #22
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	18d0      	adds	r0, r2, r3
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	001a      	movs	r2, r3
 80038e8:	3a20      	subs	r2, #32
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	db03      	blt.n	80038f6 <HAL_FLASH_Program+0xa6>
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	40d1      	lsrs	r1, r2
 80038f2:	000c      	movs	r4, r1
 80038f4:	e008      	b.n	8003908 <HAL_FLASH_Program+0xb8>
 80038f6:	2220      	movs	r2, #32
 80038f8:	1ad2      	subs	r2, r2, r3
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4091      	lsls	r1, r2
 80038fe:	000a      	movs	r2, r1
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	40d9      	lsrs	r1, r3
 8003904:	000c      	movs	r4, r1
 8003906:	4314      	orrs	r4, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	40da      	lsrs	r2, r3
 800390c:	0015      	movs	r5, r2
 800390e:	b2a3      	uxth	r3, r4
 8003910:	0019      	movs	r1, r3
 8003912:	f000 f867 	bl	80039e4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003916:	2317      	movs	r3, #23
 8003918:	18fe      	adds	r6, r7, r3
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_FLASH_Program+0x124>)
 800391c:	0018      	movs	r0, r3
 800391e:	f000 f87d 	bl	8003a1c <FLASH_WaitForLastOperation>
 8003922:	0003      	movs	r3, r0
 8003924:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003926:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_FLASH_Program+0x128>)
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_FLASH_Program+0x128>)
 800392c:	2101      	movs	r1, #1
 800392e:	438a      	bics	r2, r1
 8003930:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003932:	2317      	movs	r3, #23
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10e      	bne.n	800395a <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 800393c:	2116      	movs	r1, #22
 800393e:	187b      	adds	r3, r7, r1
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	187b      	adds	r3, r7, r1
 8003944:	3201      	adds	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	2316      	movs	r3, #22
 800394a:	18fa      	adds	r2, r7, r3
 800394c:	2315      	movs	r3, #21
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d3bd      	bcc.n	80038d4 <HAL_FLASH_Program+0x84>
 8003958:	e000      	b.n	800395c <HAL_FLASH_Program+0x10c>
      {
        break;
 800395a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_FLASH_Program+0x120>)
 800395e:	2200      	movs	r2, #0
 8003960:	761a      	strb	r2, [r3, #24]

  return status;
 8003962:	2317      	movs	r3, #23
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b007      	add	sp, #28
 800396e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003970:	20000580 	.word	0x20000580
 8003974:	0000c350 	.word	0x0000c350
 8003978:	40022000 	.word	0x40022000

0800397c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_FLASH_Unlock+0x40>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	4013      	ands	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_FLASH_Unlock+0x40>)
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_FLASH_Unlock+0x44>)
 8003996:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_FLASH_Unlock+0x40>)
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_FLASH_Unlock+0x48>)
 800399c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_FLASH_Unlock+0x40>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	4013      	ands	r3, r2
 80039a6:	d002      	beq.n	80039ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b002      	add	sp, #8
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	40022000 	.word	0x40022000
 80039c0:	45670123 	.word	0x45670123
 80039c4:	cdef89ab 	.word	0xcdef89ab

080039c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <HAL_FLASH_Lock+0x18>)
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_FLASH_Lock+0x18>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	430a      	orrs	r2, r1
 80039d6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80039d8:	2300      	movs	r3, #0
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40022000 	.word	0x40022000

080039e4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	000a      	movs	r2, r1
 80039ee:	1cbb      	adds	r3, r7, #2
 80039f0:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <FLASH_Program_HalfWord+0x30>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <FLASH_Program_HalfWord+0x34>)
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <FLASH_Program_HalfWord+0x34>)
 80039fe:	2101      	movs	r1, #1
 8003a00:	430a      	orrs	r2, r1
 8003a02:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	1cba      	adds	r2, r7, #2
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	801a      	strh	r2, [r3, #0]
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000580 	.word	0x20000580
 8003a18:	40022000 	.word	0x40022000

08003a1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a24:	f7ff fdae 	bl	8003584 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a2c:	e00f      	b.n	8003a4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3301      	adds	r3, #1
 8003a32:	d00c      	beq.n	8003a4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <FLASH_WaitForLastOperation+0x2e>
 8003a3a:	f7ff fda3 	bl	8003584 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d201      	bcs.n	8003a4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e01f      	b.n	8003a8e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <FLASH_WaitForLastOperation+0x7c>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d0e9      	beq.n	8003a2e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <FLASH_WaitForLastOperation+0x7c>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d102      	bne.n	8003a6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <FLASH_WaitForLastOperation+0x7c>)
 8003a68:	2220      	movs	r2, #32
 8003a6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <FLASH_WaitForLastOperation+0x7c>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2210      	movs	r2, #16
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d005      	beq.n	8003a84 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <FLASH_WaitForLastOperation+0x7c>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d103      	bne.n	8003a8c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a84:	f000 f80a 	bl	8003a9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	40022000 	.word	0x40022000

08003a9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <FLASH_SetErrorCode+0x58>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2210      	movs	r2, #16
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d109      	bne.n	8003ac6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <FLASH_SetErrorCode+0x5c>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <FLASH_SetErrorCode+0x5c>)
 8003abc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <FLASH_SetErrorCode+0x58>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2204      	movs	r2, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d109      	bne.n	8003ae6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <FLASH_SetErrorCode+0x5c>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <FLASH_SetErrorCode+0x5c>)
 8003adc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003ae6:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <FLASH_SetErrorCode+0x58>)
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
}  
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40022000 	.word	0x40022000
 8003af8:	20000580 	.word	0x20000580

08003afc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b06:	230f      	movs	r3, #15
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b12:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_FLASHEx_Erase+0xe0>)
 8003b14:	7e1b      	ldrb	r3, [r3, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_FLASHEx_Erase+0x22>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e05a      	b.n	8003bd4 <HAL_FLASHEx_Erase+0xd8>
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <HAL_FLASHEx_Erase+0xe0>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d116      	bne.n	8003b5a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_FLASHEx_Erase+0xe4>)
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7ff ff74 	bl	8003a1c <FLASH_WaitForLastOperation>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d147      	bne.n	8003bc8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003b38:	f000 f856 	bl	8003be8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fc      	adds	r4, r7, r3
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_FLASHEx_Erase+0xe4>)
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff ff6a 	bl	8003a1c <FLASH_WaitForLastOperation>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_FLASHEx_Erase+0xe8>)
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_FLASHEx_Erase+0xe8>)
 8003b52:	2104      	movs	r1, #4
 8003b54:	438a      	bics	r2, r1
 8003b56:	611a      	str	r2, [r3, #16]
 8003b58:	e036      	b.n	8003bc8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b5a:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_FLASHEx_Erase+0xe4>)
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ff5d 	bl	8003a1c <FLASH_WaitForLastOperation>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d130      	bne.n	8003bc8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4252      	negs	r2, r2
 8003b6c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	e01f      	b.n	8003bb6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 f84d 	bl	8003c18 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b7e:	250f      	movs	r5, #15
 8003b80:	197c      	adds	r4, r7, r5
 8003b82:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_FLASHEx_Erase+0xe4>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff ff49 	bl	8003a1c <FLASH_WaitForLastOperation>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_FLASHEx_Erase+0xe8>)
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_FLASHEx_Erase+0xe8>)
 8003b94:	2102      	movs	r1, #2
 8003b96:	438a      	bics	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8003b9a:	197b      	adds	r3, r7, r5
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	601a      	str	r2, [r3, #0]
            break;
 8003ba8:	e00e      	b.n	8003bc8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	4694      	mov	ip, r2
 8003bb2:	4463      	add	r3, ip
 8003bb4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	029a      	lsls	r2, r3, #10
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d3d6      	bcc.n	8003b76 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_FLASHEx_Erase+0xe0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	761a      	strb	r2, [r3, #24]

  return status;
 8003bce:	230f      	movs	r3, #15
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bdb0      	pop	{r4, r5, r7, pc}
 8003bdc:	20000580 	.word	0x20000580
 8003be0:	0000c350 	.word	0x0000c350
 8003be4:	40022000 	.word	0x40022000

08003be8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <FLASH_MassErase+0x28>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <FLASH_MassErase+0x2c>)
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <FLASH_MassErase+0x2c>)
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <FLASH_MassErase+0x2c>)
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <FLASH_MassErase+0x2c>)
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	430a      	orrs	r2, r1
 8003c08:	611a      	str	r2, [r3, #16]
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000580 	.word	0x20000580
 8003c14:	40022000 	.word	0x40022000

08003c18 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <FLASH_PageErase+0x34>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <FLASH_PageErase+0x38>)
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <FLASH_PageErase+0x38>)
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <FLASH_PageErase+0x38>)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <FLASH_PageErase+0x38>)
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <FLASH_PageErase+0x38>)
 8003c3e:	2140      	movs	r1, #64	; 0x40
 8003c40:	430a      	orrs	r2, r1
 8003c42:	611a      	str	r2, [r3, #16]
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000580 	.word	0x20000580
 8003c50:	40022000 	.word	0x40022000

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	e14f      	b.n	8003f04 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4091      	lsls	r1, r2
 8003c6e:	000a      	movs	r2, r1
 8003c70:	4013      	ands	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d100      	bne.n	8003c7c <HAL_GPIO_Init+0x28>
 8003c7a:	e140      	b.n	8003efe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2203      	movs	r2, #3
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d005      	beq.n	8003c94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d130      	bne.n	8003cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	0013      	movs	r3, r2
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cca:	2201      	movs	r2, #1
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	0013      	movs	r3, r2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d017      	beq.n	8003d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	0013      	movs	r3, r2
 8003d12:	43da      	mvns	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	0013      	movs	r3, r2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2203      	movs	r2, #3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d123      	bne.n	8003d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	0092      	lsls	r2, r2, #2
 8003d48:	58d3      	ldr	r3, [r2, r3]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2207      	movs	r2, #7
 8003d50:	4013      	ands	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	409a      	lsls	r2, r3
 8003d58:	0013      	movs	r3, r2
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2107      	movs	r1, #7
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	0013      	movs	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	2203      	movs	r2, #3
 8003d92:	409a      	lsls	r2, r3
 8003d94:	0013      	movs	r3, r2
 8003d96:	43da      	mvns	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2203      	movs	r2, #3
 8003da4:	401a      	ands	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	0013      	movs	r3, r2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	23c0      	movs	r3, #192	; 0xc0
 8003dc0:	029b      	lsls	r3, r3, #10
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d100      	bne.n	8003dc8 <HAL_GPIO_Init+0x174>
 8003dc6:	e09a      	b.n	8003efe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc8:	4b54      	ldr	r3, [pc, #336]	; (8003f1c <HAL_GPIO_Init+0x2c8>)
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_GPIO_Init+0x2c8>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	619a      	str	r2, [r3, #24]
 8003dd4:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_GPIO_Init+0x2c8>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	4013      	ands	r3, r2
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003de0:	4a4f      	ldr	r2, [pc, #316]	; (8003f20 <HAL_GPIO_Init+0x2cc>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	589b      	ldr	r3, [r3, r2]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2203      	movs	r2, #3
 8003df2:	4013      	ands	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	220f      	movs	r2, #15
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	0013      	movs	r3, r2
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	2390      	movs	r3, #144	; 0x90
 8003e08:	05db      	lsls	r3, r3, #23
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d013      	beq.n	8003e36 <HAL_GPIO_Init+0x1e2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a44      	ldr	r2, [pc, #272]	; (8003f24 <HAL_GPIO_Init+0x2d0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00d      	beq.n	8003e32 <HAL_GPIO_Init+0x1de>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a43      	ldr	r2, [pc, #268]	; (8003f28 <HAL_GPIO_Init+0x2d4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <HAL_GPIO_Init+0x1da>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a42      	ldr	r2, [pc, #264]	; (8003f2c <HAL_GPIO_Init+0x2d8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_GPIO_Init+0x1d6>
 8003e26:	2303      	movs	r3, #3
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_Init+0x1e4>
 8003e2a:	2305      	movs	r3, #5
 8003e2c:	e004      	b.n	8003e38 <HAL_GPIO_Init+0x1e4>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_Init+0x1e4>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_GPIO_Init+0x1e4>
 8003e36:	2300      	movs	r3, #0
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	0092      	lsls	r2, r2, #2
 8003e40:	4093      	lsls	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e48:	4935      	ldr	r1, [pc, #212]	; (8003f20 <HAL_GPIO_Init+0x2cc>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	029b      	lsls	r3, r3, #10
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ea4:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	035b      	lsls	r3, r3, #13
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	43da      	mvns	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	039b      	lsls	r3, r3, #14
 8003eec:	4013      	ands	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_GPIO_Init+0x2dc>)
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	3301      	adds	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	40da      	lsrs	r2, r3
 8003f0c:	1e13      	subs	r3, r2, #0
 8003f0e:	d000      	beq.n	8003f12 <HAL_GPIO_Init+0x2be>
 8003f10:	e6a8      	b.n	8003c64 <HAL_GPIO_Init+0x10>
  } 
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40010000 	.word	0x40010000
 8003f24:	48000400 	.word	0x48000400
 8003f28:	48000800 	.word	0x48000800
 8003f2c:	48000c00 	.word	0x48000c00
 8003f30:	40010400 	.word	0x40010400

08003f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	0008      	movs	r0, r1
 8003f3e:	0011      	movs	r1, r2
 8003f40:	1cbb      	adds	r3, r7, #2
 8003f42:	1c02      	adds	r2, r0, #0
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	1c7b      	adds	r3, r7, #1
 8003f48:	1c0a      	adds	r2, r1, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f4c:	1c7b      	adds	r3, r7, #1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f54:	1cbb      	adds	r3, r7, #2
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f5c:	e003      	b.n	8003f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f5e:	1cbb      	adds	r3, r7, #2
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b002      	add	sp, #8
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f76:	f7ff fb05 	bl	8003584 <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	607b      	str	r3, [r7, #4]
  
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003f84:	2181      	movs	r1, #129	; 0x81
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_DeInit+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7ff fafa 	bl	8003584 <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_DeInit+0x2e>
    {
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e05a      	b.n	8004054 <HAL_RCC_DeInit+0xe4>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d0f1      	beq.n	8003f8c <HAL_RCC_DeInit+0x1c>
    }
  }

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003fae:	492c      	ldr	r1, [pc, #176]	; (8004060 <HAL_RCC_DeInit+0xf0>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Wait till HSI as SYSCLK status is enabled */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003fb4:	e009      	b.n	8003fca <HAL_RCC_DeInit+0x5a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb6:	f7ff fae5 	bl	8003584 <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	4a28      	ldr	r2, [pc, #160]	; (8004064 <HAL_RCC_DeInit+0xf4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_DeInit+0x5a>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e044      	b.n	8004054 <HAL_RCC_DeInit+0xe4>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	220c      	movs	r2, #12
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_DeInit+0xf8>)
 8003fd6:	4a25      	ldr	r2, [pc, #148]	; (800406c <HAL_RCC_DeInit+0xfc>)
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fda:	4b25      	ldr	r3, [pc, #148]	; (8004070 <HAL_RCC_DeInit+0x100>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7ff fa8a 	bl	80034f8 <HAL_InitTick>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_DeInit+0x7c>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e033      	b.n	8004054 <HAL_RCC_DeInit+0xe4>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003ff2:	4920      	ldr	r1, [pc, #128]	; (8004074 <HAL_RCC_DeInit+0x104>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003ff8:	4b18      	ldr	r3, [pc, #96]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_RCC_DeInit+0xec>)
 8003ffe:	491e      	ldr	r1, [pc, #120]	; (8004078 <HAL_RCC_DeInit+0x108>)
 8004000:	400a      	ands	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

  /* Get start tick */
  tickstart = HAL_GetTick();
 8004004:	f7ff fabe 	bl	8003584 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	607b      	str	r3, [r7, #4]
  
  /* Wait till PLLRDY is cleared */
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_DeInit+0xb0>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400e:	f7ff fab9 	bl	8003584 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_DeInit+0xb0>
    {
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e019      	b.n	8004054 <HAL_RCC_DeInit+0xe4>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_RCC_DeInit+0xec>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	049b      	lsls	r3, r3, #18
 8004028:	4013      	ands	r3, r2
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_DeInit+0xec>)
 800402e:	2200      	movs	r2, #0
 8004030:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_RCC_DeInit+0xec>)
 8004034:	2200      	movs	r2, #0
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_DeInit+0xec>)
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_RCC_DeInit+0xec>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]

  /* Clear all reset flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_DeInit+0xec>)
 8004046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCC_DeInit+0xec>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	0449      	lsls	r1, r1, #17
 800404e:	430a      	orrs	r2, r1
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	f0fff80c 	.word	0xf0fff80c
 8004064:	00001388 	.word	0x00001388
 8004068:	20000018 	.word	0x20000018
 800406c:	007a1200 	.word	0x007a1200
 8004070:	2000001c 	.word	0x2000001c
 8004074:	fef6ffff 	.word	0xfef6ffff
 8004078:	fffbffff 	.word	0xfffbffff

0800407c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e301      	b.n	8004692 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d100      	bne.n	800409a <HAL_RCC_OscConfig+0x1e>
 8004098:	e08d      	b.n	80041b6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800409a:	4bc3      	ldr	r3, [pc, #780]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	220c      	movs	r2, #12
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00e      	beq.n	80040c4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040a6:	4bc0      	ldr	r3, [pc, #768]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	220c      	movs	r2, #12
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d116      	bne.n	80040e0 <HAL_RCC_OscConfig+0x64>
 80040b2:	4bbd      	ldr	r3, [pc, #756]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	401a      	ands	r2, r3
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	025b      	lsls	r3, r3, #9
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4bb8      	ldr	r3, [pc, #736]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	4013      	ands	r3, r2
 80040ce:	d100      	bne.n	80040d2 <HAL_RCC_OscConfig+0x56>
 80040d0:	e070      	b.n	80041b4 <HAL_RCC_OscConfig+0x138>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d000      	beq.n	80040dc <HAL_RCC_OscConfig+0x60>
 80040da:	e06b      	b.n	80041b4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e2d8      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x7c>
 80040e8:	4baf      	ldr	r3, [pc, #700]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4bae      	ldr	r3, [pc, #696]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	0249      	lsls	r1, r1, #9
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e02f      	b.n	8004158 <HAL_RCC_OscConfig+0xdc>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10c      	bne.n	800411a <HAL_RCC_OscConfig+0x9e>
 8004100:	4ba9      	ldr	r3, [pc, #676]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4ba8      	ldr	r3, [pc, #672]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004106:	49a9      	ldr	r1, [pc, #676]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004108:	400a      	ands	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	4ba6      	ldr	r3, [pc, #664]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4ba5      	ldr	r3, [pc, #660]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004112:	49a7      	ldr	r1, [pc, #668]	; (80043b0 <HAL_RCC_OscConfig+0x334>)
 8004114:	400a      	ands	r2, r1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e01e      	b.n	8004158 <HAL_RCC_OscConfig+0xdc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d10e      	bne.n	8004140 <HAL_RCC_OscConfig+0xc4>
 8004122:	4ba1      	ldr	r3, [pc, #644]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4ba0      	ldr	r3, [pc, #640]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	02c9      	lsls	r1, r1, #11
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	4b9d      	ldr	r3, [pc, #628]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b9c      	ldr	r3, [pc, #624]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	0249      	lsls	r1, r1, #9
 800413a:	430a      	orrs	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0xdc>
 8004140:	4b99      	ldr	r3, [pc, #612]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b98      	ldr	r3, [pc, #608]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004146:	4999      	ldr	r1, [pc, #612]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004148:	400a      	ands	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	4b96      	ldr	r3, [pc, #600]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b95      	ldr	r3, [pc, #596]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004152:	4997      	ldr	r1, [pc, #604]	; (80043b0 <HAL_RCC_OscConfig+0x334>)
 8004154:	400a      	ands	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d014      	beq.n	800418a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7ff fa10 	bl	8003584 <HAL_GetTick>
 8004164:	0003      	movs	r3, r0
 8004166:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416a:	f7ff fa0b 	bl	8003584 <HAL_GetTick>
 800416e:	0002      	movs	r2, r0
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b64      	cmp	r3, #100	; 0x64
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e28a      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417c:	4b8a      	ldr	r3, [pc, #552]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	029b      	lsls	r3, r3, #10
 8004184:	4013      	ands	r3, r2
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0xee>
 8004188:	e015      	b.n	80041b6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7ff f9fb 	bl	8003584 <HAL_GetTick>
 800418e:	0003      	movs	r3, r0
 8004190:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004194:	f7ff f9f6 	bl	8003584 <HAL_GetTick>
 8004198:	0002      	movs	r2, r0
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e275      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b80      	ldr	r3, [pc, #512]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	029b      	lsls	r3, r3, #10
 80041ae:	4013      	ands	r3, r2
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x118>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2202      	movs	r2, #2
 80041bc:	4013      	ands	r3, r2
 80041be:	d100      	bne.n	80041c2 <HAL_RCC_OscConfig+0x146>
 80041c0:	e069      	b.n	8004296 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041c2:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	220c      	movs	r2, #12
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	220c      	movs	r2, #12
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d11c      	bne.n	8004212 <HAL_RCC_OscConfig+0x196>
 80041d8:	4b73      	ldr	r3, [pc, #460]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	025b      	lsls	r3, r3, #9
 80041e0:	4013      	ands	r3, r2
 80041e2:	d116      	bne.n	8004212 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e4:	4b70      	ldr	r3, [pc, #448]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d001      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e24b      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fa:	4b6b      	ldr	r3, [pc, #428]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	22f8      	movs	r2, #248	; 0xf8
 8004200:	4393      	bics	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	00da      	lsls	r2, r3, #3
 800420a:	4b67      	ldr	r3, [pc, #412]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004210:	e041      	b.n	8004296 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d024      	beq.n	8004264 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421a:	4b63      	ldr	r3, [pc, #396]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b62      	ldr	r3, [pc, #392]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004220:	2101      	movs	r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7ff f9ad 	bl	8003584 <HAL_GetTick>
 800422a:	0003      	movs	r3, r0
 800422c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004230:	f7ff f9a8 	bl	8003584 <HAL_GetTick>
 8004234:	0002      	movs	r2, r0
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e227      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2202      	movs	r2, #2
 8004248:	4013      	ands	r3, r2
 800424a:	d0f1      	beq.n	8004230 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b56      	ldr	r3, [pc, #344]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	22f8      	movs	r2, #248	; 0xf8
 8004252:	4393      	bics	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00da      	lsls	r2, r3, #3
 800425c:	4b52      	ldr	r3, [pc, #328]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e018      	b.n	8004296 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800426a:	2101      	movs	r1, #1
 800426c:	438a      	bics	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7ff f988 	bl	8003584 <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427a:	f7ff f983 	bl	8003584 <HAL_GetTick>
 800427e:	0002      	movs	r2, r0
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e202      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428c:	4b46      	ldr	r3, [pc, #280]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d1f1      	bne.n	800427a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2208      	movs	r2, #8
 800429c:	4013      	ands	r3, r2
 800429e:	d036      	beq.n	800430e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d019      	beq.n	80042dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a8:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042ae:	2101      	movs	r1, #1
 80042b0:	430a      	orrs	r2, r1
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7ff f966 	bl	8003584 <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042be:	f7ff f961 	bl	8003584 <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1e0      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2202      	movs	r2, #2
 80042d6:	4013      	ands	r3, r2
 80042d8:	d0f1      	beq.n	80042be <HAL_RCC_OscConfig+0x242>
 80042da:	e018      	b.n	800430e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e0:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80042e2:	2101      	movs	r1, #1
 80042e4:	438a      	bics	r2, r1
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e8:	f7ff f94c 	bl	8003584 <HAL_GetTick>
 80042ec:	0003      	movs	r3, r0
 80042ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f2:	f7ff f947 	bl	8003584 <HAL_GetTick>
 80042f6:	0002      	movs	r2, r0
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1c6      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2202      	movs	r2, #2
 800430a:	4013      	ands	r3, r2
 800430c:	d1f1      	bne.n	80042f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2204      	movs	r2, #4
 8004314:	4013      	ands	r3, r2
 8004316:	d100      	bne.n	800431a <HAL_RCC_OscConfig+0x29e>
 8004318:	e0b4      	b.n	8004484 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431a:	201f      	movs	r0, #31
 800431c:	183b      	adds	r3, r7, r0
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	055b      	lsls	r3, r3, #21
 800432a:	4013      	ands	r3, r2
 800432c:	d110      	bne.n	8004350 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	0549      	lsls	r1, r1, #21
 8004338:	430a      	orrs	r2, r1
 800433a:	61da      	str	r2, [r3, #28]
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	055b      	lsls	r3, r3, #21
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800434a:	183b      	adds	r3, r7, r0
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_RCC_OscConfig+0x338>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4013      	ands	r3, r2
 800435a:	d11a      	bne.n	8004392 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x338>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_RCC_OscConfig+0x338>)
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0049      	lsls	r1, r1, #1
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7ff f90b 	bl	8003584 <HAL_GetTick>
 800436e:	0003      	movs	r3, r0
 8004370:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004374:	f7ff f906 	bl	8003584 <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e185      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x338>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4013      	ands	r3, r2
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d10e      	bne.n	80043b8 <HAL_RCC_OscConfig+0x33c>
 800439a:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <HAL_RCC_OscConfig+0x32c>)
 80043a0:	2101      	movs	r1, #1
 80043a2:	430a      	orrs	r2, r1
 80043a4:	621a      	str	r2, [r3, #32]
 80043a6:	e035      	b.n	8004414 <HAL_RCC_OscConfig+0x398>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	fffeffff 	.word	0xfffeffff
 80043b0:	fffbffff 	.word	0xfffbffff
 80043b4:	40007000 	.word	0x40007000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10c      	bne.n	80043da <HAL_RCC_OscConfig+0x35e>
 80043c0:	4bb6      	ldr	r3, [pc, #728]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	4bb5      	ldr	r3, [pc, #724]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	438a      	bics	r2, r1
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	4bb3      	ldr	r3, [pc, #716]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	4bb2      	ldr	r3, [pc, #712]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043d2:	2104      	movs	r1, #4
 80043d4:	438a      	bics	r2, r1
 80043d6:	621a      	str	r2, [r3, #32]
 80043d8:	e01c      	b.n	8004414 <HAL_RCC_OscConfig+0x398>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x380>
 80043e2:	4bae      	ldr	r3, [pc, #696]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043e4:	6a1a      	ldr	r2, [r3, #32]
 80043e6:	4bad      	ldr	r3, [pc, #692]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043e8:	2104      	movs	r1, #4
 80043ea:	430a      	orrs	r2, r1
 80043ec:	621a      	str	r2, [r3, #32]
 80043ee:	4bab      	ldr	r3, [pc, #684]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	4baa      	ldr	r3, [pc, #680]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043f4:	2101      	movs	r1, #1
 80043f6:	430a      	orrs	r2, r1
 80043f8:	621a      	str	r2, [r3, #32]
 80043fa:	e00b      	b.n	8004414 <HAL_RCC_OscConfig+0x398>
 80043fc:	4ba7      	ldr	r3, [pc, #668]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	4ba6      	ldr	r3, [pc, #664]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004402:	2101      	movs	r1, #1
 8004404:	438a      	bics	r2, r1
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	4ba4      	ldr	r3, [pc, #656]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	4ba3      	ldr	r3, [pc, #652]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800440e:	2104      	movs	r1, #4
 8004410:	438a      	bics	r2, r1
 8004412:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d014      	beq.n	8004446 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441c:	f7ff f8b2 	bl	8003584 <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	e009      	b.n	800443a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7ff f8ad 	bl	8003584 <HAL_GetTick>
 800442a:	0002      	movs	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	4a9b      	ldr	r2, [pc, #620]	; (80046a0 <HAL_RCC_OscConfig+0x624>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e12b      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	4b98      	ldr	r3, [pc, #608]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	2202      	movs	r2, #2
 8004440:	4013      	ands	r3, r2
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x3aa>
 8004444:	e013      	b.n	800446e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7ff f89d 	bl	8003584 <HAL_GetTick>
 800444a:	0003      	movs	r3, r0
 800444c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444e:	e009      	b.n	8004464 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7ff f898 	bl	8003584 <HAL_GetTick>
 8004454:	0002      	movs	r2, r0
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	4a91      	ldr	r2, [pc, #580]	; (80046a0 <HAL_RCC_OscConfig+0x624>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e116      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	4b8d      	ldr	r3, [pc, #564]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	2202      	movs	r2, #2
 800446a:	4013      	ands	r3, r2
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800446e:	231f      	movs	r3, #31
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	4b87      	ldr	r3, [pc, #540]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800447e:	4989      	ldr	r1, [pc, #548]	; (80046a4 <HAL_RCC_OscConfig+0x628>)
 8004480:	400a      	ands	r2, r1
 8004482:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2210      	movs	r2, #16
 800448a:	4013      	ands	r3, r2
 800448c:	d063      	beq.n	8004556 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12a      	bne.n	80044ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004496:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	4b80      	ldr	r3, [pc, #512]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800449c:	2104      	movs	r1, #4
 800449e:	430a      	orrs	r2, r1
 80044a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80044a2:	4b7e      	ldr	r3, [pc, #504]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a6:	4b7d      	ldr	r3, [pc, #500]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044a8:	2101      	movs	r1, #1
 80044aa:	430a      	orrs	r2, r1
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7ff f869 	bl	8003584 <HAL_GetTick>
 80044b2:	0003      	movs	r3, r0
 80044b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80044b8:	f7ff f864 	bl	8003584 <HAL_GetTick>
 80044bc:	0002      	movs	r2, r0
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0e3      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044ca:	4b74      	ldr	r3, [pc, #464]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	2202      	movs	r2, #2
 80044d0:	4013      	ands	r3, r2
 80044d2:	d0f1      	beq.n	80044b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044d4:	4b71      	ldr	r3, [pc, #452]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	22f8      	movs	r2, #248	; 0xf8
 80044da:	4393      	bics	r3, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	4b6d      	ldr	r3, [pc, #436]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34
 80044ea:	e034      	b.n	8004556 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	3305      	adds	r3, #5
 80044f2:	d111      	bne.n	8004518 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80044f4:	4b69      	ldr	r3, [pc, #420]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f8:	4b68      	ldr	r3, [pc, #416]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80044fa:	2104      	movs	r1, #4
 80044fc:	438a      	bics	r2, r1
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004500:	4b66      	ldr	r3, [pc, #408]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004504:	22f8      	movs	r2, #248	; 0xf8
 8004506:	4393      	bics	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	00da      	lsls	r2, r3, #3
 8004510:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004512:	430a      	orrs	r2, r1
 8004514:	635a      	str	r2, [r3, #52]	; 0x34
 8004516:	e01e      	b.n	8004556 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004518:	4b60      	ldr	r3, [pc, #384]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800451a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451c:	4b5f      	ldr	r3, [pc, #380]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800451e:	2104      	movs	r1, #4
 8004520:	430a      	orrs	r2, r1
 8004522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004524:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004528:	4b5c      	ldr	r3, [pc, #368]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800452a:	2101      	movs	r1, #1
 800452c:	438a      	bics	r2, r1
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004530:	f7ff f828 	bl	8003584 <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800453a:	f7ff f823 	bl	8003584 <HAL_GetTick>
 800453e:	0002      	movs	r2, r0
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0a2      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	2202      	movs	r2, #2
 8004552:	4013      	ands	r3, r2
 8004554:	d1f1      	bne.n	800453a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d100      	bne.n	8004560 <HAL_RCC_OscConfig+0x4e4>
 800455e:	e097      	b.n	8004690 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004560:	4b4e      	ldr	r3, [pc, #312]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	220c      	movs	r2, #12
 8004566:	4013      	ands	r3, r2
 8004568:	2b08      	cmp	r3, #8
 800456a:	d100      	bne.n	800456e <HAL_RCC_OscConfig+0x4f2>
 800456c:	e06b      	b.n	8004646 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d14c      	bne.n	8004610 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b49      	ldr	r3, [pc, #292]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b48      	ldr	r3, [pc, #288]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800457c:	494a      	ldr	r1, [pc, #296]	; (80046a8 <HAL_RCC_OscConfig+0x62c>)
 800457e:	400a      	ands	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fe ffff 	bl	8003584 <HAL_GetTick>
 8004586:	0003      	movs	r3, r0
 8004588:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fe fffa 	bl	8003584 <HAL_GetTick>
 8004590:	0002      	movs	r2, r0
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e079      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	049b      	lsls	r3, r3, #18
 80045a6:	4013      	ands	r3, r2
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	220f      	movs	r2, #15
 80045b0:	4393      	bics	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <HAL_RCC_OscConfig+0x630>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	431a      	orrs	r2, r3
 80045d2:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d8:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_RCC_OscConfig+0x620>)
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	0449      	lsls	r1, r1, #17
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fe ffcd 	bl	8003584 <HAL_GetTick>
 80045ea:	0003      	movs	r3, r0
 80045ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe ffc8 	bl	8003584 <HAL_GetTick>
 80045f4:	0002      	movs	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e047      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	049b      	lsls	r3, r3, #18
 800460a:	4013      	ands	r3, r2
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x574>
 800460e:	e03f      	b.n	8004690 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b22      	ldr	r3, [pc, #136]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004616:	4924      	ldr	r1, [pc, #144]	; (80046a8 <HAL_RCC_OscConfig+0x62c>)
 8004618:	400a      	ands	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe ffb2 	bl	8003584 <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004626:	f7fe ffad 	bl	8003584 <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e02c      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	049b      	lsls	r3, r3, #18
 8004640:	4013      	ands	r3, r2
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x5aa>
 8004644:	e024      	b.n	8004690 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e01f      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <HAL_RCC_OscConfig+0x620>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_OscConfig+0x620>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	025b      	lsls	r3, r3, #9
 8004664:	401a      	ands	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	429a      	cmp	r2, r3
 800466c:	d10e      	bne.n	800468c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	220f      	movs	r2, #15
 8004672:	401a      	ands	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d107      	bne.n	800468c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	23f0      	movs	r3, #240	; 0xf0
 8004680:	039b      	lsls	r3, r3, #14
 8004682:	401a      	ands	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b008      	add	sp, #32
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	40021000 	.word	0x40021000
 80046a0:	00001388 	.word	0x00001388
 80046a4:	efffffff 	.word	0xefffffff
 80046a8:	feffffff 	.word	0xfeffffff
 80046ac:	ffc2ffff 	.word	0xffc2ffff

080046b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b3      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b5b      	ldr	r3, [pc, #364]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2201      	movs	r2, #1
 80046ca:	4013      	ands	r3, r2
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d911      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b58      	ldr	r3, [pc, #352]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	4393      	bics	r3, r2
 80046da:	0019      	movs	r1, r3
 80046dc:	4b55      	ldr	r3, [pc, #340]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e09a      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2202      	movs	r2, #2
 80046fc:	4013      	ands	r3, r2
 80046fe:	d015      	beq.n	800472c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2204      	movs	r2, #4
 8004706:	4013      	ands	r3, r2
 8004708:	d006      	beq.n	8004718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800470a:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004710:	21e0      	movs	r1, #224	; 0xe0
 8004712:	00c9      	lsls	r1, r1, #3
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004718:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	22f0      	movs	r2, #240	; 0xf0
 800471e:	4393      	bics	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
 8004734:	d040      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d107      	bne.n	800474e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	4013      	ands	r3, r2
 8004748:	d114      	bne.n	8004774 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e06e      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b38      	ldr	r3, [pc, #224]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	049b      	lsls	r3, r3, #18
 800475e:	4013      	ands	r3, r2
 8004760:	d108      	bne.n	8004774 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e062      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b34      	ldr	r3, [pc, #208]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2202      	movs	r2, #2
 800476c:	4013      	ands	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e05b      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004774:	4b30      	ldr	r3, [pc, #192]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	4393      	bics	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004788:	f7fe fefc 	bl	8003584 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004790:	e009      	b.n	80047a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004792:	f7fe fef7 	bl	8003584 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <HAL_RCC_ClockConfig+0x18c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e042      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	220c      	movs	r2, #12
 80047ac:	401a      	ands	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1ec      	bne.n	8004792 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	4013      	ands	r3, r2
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d211      	bcs.n	80047ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4393      	bics	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d8:	4b16      	ldr	r3, [pc, #88]	; (8004834 <HAL_RCC_ClockConfig+0x184>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	4013      	ands	r3, r2
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e020      	b.n	800482c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2204      	movs	r2, #4
 80047f0:	4013      	ands	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_RCC_ClockConfig+0x190>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004808:	f000 f820 	bl	800484c <HAL_RCC_GetSysClockFreq>
 800480c:	0001      	movs	r1, r0
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_RCC_ClockConfig+0x188>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	220f      	movs	r2, #15
 8004816:	4013      	ands	r3, r2
 8004818:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <HAL_RCC_ClockConfig+0x194>)
 800481a:	5cd3      	ldrb	r3, [r2, r3]
 800481c:	000a      	movs	r2, r1
 800481e:	40da      	lsrs	r2, r3
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x198>)
 8004822:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004824:	2000      	movs	r0, #0
 8004826:	f7fe fe67 	bl	80034f8 <HAL_InitTick>
  
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40022000 	.word	0x40022000
 8004838:	40021000 	.word	0x40021000
 800483c:	00001388 	.word	0x00001388
 8004840:	fffff8ff 	.word	0xfffff8ff
 8004844:	0800a6a8 	.word	0x0800a6a8
 8004848:	20000018 	.word	0x20000018

0800484c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b08f      	sub	sp, #60	; 0x3c
 8004850:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004852:	2314      	movs	r3, #20
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004858:	ca13      	ldmia	r2!, {r0, r1, r4}
 800485a:	c313      	stmia	r3!, {r0, r1, r4}
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	4a29      	ldr	r2, [pc, #164]	; (8004908 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004864:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004866:	c313      	stmia	r3!, {r0, r1, r4}
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004870:	2300      	movs	r3, #0
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
 8004874:	2300      	movs	r3, #0
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	220c      	movs	r2, #12
 800488a:	4013      	ands	r3, r2
 800488c:	2b04      	cmp	r3, #4
 800488e:	d002      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x4a>
 8004890:	2b08      	cmp	r3, #8
 8004892:	d003      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x50>
 8004894:	e02d      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800489a:	e02d      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	0c9b      	lsrs	r3, r3, #18
 80048a0:	220f      	movs	r2, #15
 80048a2:	4013      	ands	r3, r2
 80048a4:	2214      	movs	r2, #20
 80048a6:	18ba      	adds	r2, r7, r2
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80048ac:	4b17      	ldr	r3, [pc, #92]	; (800490c <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	220f      	movs	r2, #15
 80048b2:	4013      	ands	r3, r2
 80048b4:	1d3a      	adds	r2, r7, #4
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	025b      	lsls	r3, r3, #9
 80048c0:	4013      	ands	r3, r2
 80048c2:	d009      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048c6:	4812      	ldr	r0, [pc, #72]	; (8004910 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048c8:	f7fb fc3a 	bl	8000140 <__udivsi3>
 80048cc:	0003      	movs	r3, r0
 80048ce:	001a      	movs	r2, r3
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	4353      	muls	r3, r2
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
 80048d6:	e009      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048da:	000a      	movs	r2, r1
 80048dc:	0152      	lsls	r2, r2, #5
 80048de:	1a52      	subs	r2, r2, r1
 80048e0:	0193      	lsls	r3, r2, #6
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	185b      	adds	r3, r3, r1
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048f0:	e002      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b00f      	add	sp, #60	; 0x3c
 8004900:	bd90      	pop	{r4, r7, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	0800a3d8 	.word	0x0800a3d8
 8004908:	0800a3e8 	.word	0x0800a3e8
 800490c:	40021000 	.word	0x40021000
 8004910:	007a1200 	.word	0x007a1200

08004914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004918:	4b02      	ldr	r3, [pc, #8]	; (8004924 <HAL_RCC_GetHCLKFreq+0x10>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	20000018 	.word	0x20000018

08004928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800492c:	f7ff fff2 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 8004930:	0001      	movs	r1, r0
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	2207      	movs	r2, #7
 800493a:	4013      	ands	r3, r2
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	40d9      	lsrs	r1, r3
 8004942:	000b      	movs	r3, r1
}    
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	40021000 	.word	0x40021000
 8004950:	0800a6b8 	.word	0x0800a6b8

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	025b      	lsls	r3, r3, #9
 800496c:	4013      	ands	r3, r2
 800496e:	d100      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004970:	e08e      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2017      	movs	r0, #23
 8004974:	183b      	adds	r3, r7, r0
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497a:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	055b      	lsls	r3, r3, #21
 8004982:	4013      	ands	r3, r2
 8004984:	d110      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	4b5c      	ldr	r3, [pc, #368]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	0549      	lsls	r1, r1, #21
 8004990:	430a      	orrs	r2, r1
 8004992:	61da      	str	r2, [r3, #28]
 8004994:	4b58      	ldr	r3, [pc, #352]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	055b      	lsls	r3, r3, #21
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	4b54      	ldr	r3, [pc, #336]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4013      	ands	r3, r2
 80049b2:	d11a      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b4:	4b51      	ldr	r3, [pc, #324]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	0049      	lsls	r1, r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c2:	f7fe fddf 	bl	8003584 <HAL_GetTick>
 80049c6:	0003      	movs	r3, r0
 80049c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ca:	e008      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049cc:	f7fe fdda 	bl	8003584 <HAL_GetTick>
 80049d0:	0002      	movs	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e087      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4013      	ands	r3, r2
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ea:	4b43      	ldr	r3, [pc, #268]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	23c0      	movs	r3, #192	; 0xc0
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4013      	ands	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d034      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	23c0      	movs	r3, #192	; 0xc0
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4013      	ands	r3, r2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d02c      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a0c:	4b3a      	ldr	r3, [pc, #232]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a3b      	ldr	r2, [pc, #236]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a16:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	0249      	lsls	r1, r1, #9
 8004a20:	430a      	orrs	r2, r1
 8004a22:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a2a:	4936      	ldr	r1, [pc, #216]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a30:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe fda1 	bl	8003584 <HAL_GetTick>
 8004a42:	0003      	movs	r3, r0
 8004a44:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	e009      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fe fd9c 	bl	8003584 <HAL_GetTick>
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	4a2d      	ldr	r2, [pc, #180]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e048      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	2202      	movs	r2, #2
 8004a62:	4013      	ands	r3, r2
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a76:	430a      	orrs	r2, r1
 8004a78:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a7a:	2317      	movs	r3, #23
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a84:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a8a:	4920      	ldr	r1, [pc, #128]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2201      	movs	r2, #1
 8004a96:	4013      	ands	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a9a:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	2210      	movs	r2, #16
 8004abe:	4393      	bics	r3, r2
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	4393      	bics	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b006      	add	sp, #24
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40007000 	.word	0x40007000
 8004b00:	fffffcff 	.word	0xfffffcff
 8004b04:	fffeffff 	.word	0xfffeffff
 8004b08:	00001388 	.word	0x00001388
 8004b0c:	efffffff 	.word	0xefffffff

08004b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e044      	b.n	8004bac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2274      	movs	r2, #116	; 0x74
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7fe fb3d 	bl	80031b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2224      	movs	r2, #36	; 0x24
 8004b3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fb24 	bl	80051a0 <UART_SetConfig>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e024      	b.n	8004bac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 fc57 	bl	8005420 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	490d      	ldr	r1, [pc, #52]	; (8004bb4 <HAL_UART_Init+0xa4>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	212a      	movs	r1, #42	; 0x2a
 8004b8e:	438a      	bics	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 fcef 	bl	8005588 <UART_CheckIdleState>
 8004baa:	0003      	movs	r3, r0
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	ffffb7ff 	.word	0xffffb7ff

08004bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b0ab      	sub	sp, #172	; 0xac
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	22a4      	movs	r2, #164	; 0xa4
 8004bc8:	18b9      	adds	r1, r7, r2
 8004bca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	20a0      	movs	r0, #160	; 0xa0
 8004bd4:	1839      	adds	r1, r7, r0
 8004bd6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	219c      	movs	r1, #156	; 0x9c
 8004be0:	1879      	adds	r1, r7, r1
 8004be2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004be4:	0011      	movs	r1, r2
 8004be6:	18bb      	adds	r3, r7, r2
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a99      	ldr	r2, [pc, #612]	; (8004e50 <HAL_UART_IRQHandler+0x298>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	2298      	movs	r2, #152	; 0x98
 8004bf0:	18bc      	adds	r4, r7, r2
 8004bf2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004bf4:	18bb      	adds	r3, r7, r2
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d114      	bne.n	8004c26 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2220      	movs	r2, #32
 8004c02:	4013      	ands	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c06:	183b      	adds	r3, r7, r0
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d00a      	beq.n	8004c26 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d100      	bne.n	8004c1a <HAL_UART_IRQHandler+0x62>
 8004c18:	e296      	b.n	8005148 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	0010      	movs	r0, r2
 8004c22:	4798      	blx	r3
      }
      return;
 8004c24:	e290      	b.n	8005148 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c26:	2398      	movs	r3, #152	; 0x98
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d100      	bne.n	8004c32 <HAL_UART_IRQHandler+0x7a>
 8004c30:	e114      	b.n	8004e5c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c32:	239c      	movs	r3, #156	; 0x9c
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c3e:	23a0      	movs	r3, #160	; 0xa0
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a83      	ldr	r2, [pc, #524]	; (8004e54 <HAL_UART_IRQHandler+0x29c>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	d100      	bne.n	8004c4c <HAL_UART_IRQHandler+0x94>
 8004c4a:	e107      	b.n	8004e5c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c4c:	23a4      	movs	r3, #164	; 0xa4
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	d012      	beq.n	8004c7e <HAL_UART_IRQHandler+0xc6>
 8004c58:	23a0      	movs	r3, #160	; 0xa0
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	589b      	ldr	r3, [r3, r2]
 8004c74:	2201      	movs	r2, #1
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c7e:	23a4      	movs	r3, #164	; 0xa4
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2202      	movs	r2, #2
 8004c86:	4013      	ands	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_UART_IRQHandler+0xf6>
 8004c8a:	239c      	movs	r3, #156	; 0x9c
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4013      	ands	r3, r2
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	589b      	ldr	r3, [r3, r2]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2180      	movs	r1, #128	; 0x80
 8004cac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cae:	23a4      	movs	r3, #164	; 0xa4
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d011      	beq.n	8004cde <HAL_UART_IRQHandler+0x126>
 8004cba:	239c      	movs	r3, #156	; 0x9c
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cde:	23a4      	movs	r3, #164	; 0xa4
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d017      	beq.n	8004d1a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cea:	23a0      	movs	r3, #160	; 0xa0
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d105      	bne.n	8004d02 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cf6:	239c      	movs	r3, #156	; 0x9c
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d00:	d00b      	beq.n	8004d1a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2208      	movs	r2, #8
 8004d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2280      	movs	r2, #128	; 0x80
 8004d0e:	589b      	ldr	r3, [r3, r2]
 8004d10:	2208      	movs	r2, #8
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d1a:	23a4      	movs	r3, #164	; 0xa4
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4013      	ands	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_UART_IRQHandler+0x198>
 8004d28:	23a0      	movs	r3, #160	; 0xa0
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	04db      	lsls	r3, r3, #19
 8004d32:	4013      	ands	r3, r2
 8004d34:	d00c      	beq.n	8004d50 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	0112      	lsls	r2, r2, #4
 8004d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	589b      	ldr	r3, [r3, r2]
 8004d46:	2220      	movs	r2, #32
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	589b      	ldr	r3, [r3, r2]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d100      	bne.n	8004d5c <HAL_UART_IRQHandler+0x1a4>
 8004d5a:	e1f7      	b.n	800514c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d5c:	23a4      	movs	r3, #164	; 0xa4
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2220      	movs	r2, #32
 8004d64:	4013      	ands	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d68:	23a0      	movs	r3, #160	; 0xa0
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	4013      	ands	r3, r2
 8004d72:	d008      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	0010      	movs	r0, r2
 8004d84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2280      	movs	r2, #128	; 0x80
 8004d8a:	589b      	ldr	r3, [r3, r2]
 8004d8c:	2194      	movs	r1, #148	; 0x94
 8004d8e:	187a      	adds	r2, r7, r1
 8004d90:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2240      	movs	r2, #64	; 0x40
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d004      	beq.n	8004daa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2228      	movs	r2, #40	; 0x28
 8004da6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004da8:	d047      	beq.n	8004e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 fcf7 	bl	80057a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d137      	bne.n	8004e30 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc8:	2090      	movs	r0, #144	; 0x90
 8004dca:	183a      	adds	r2, r7, r0
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	2301      	movs	r3, #1
 8004dd0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2140      	movs	r1, #64	; 0x40
 8004de6:	438a      	bics	r2, r1
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <HAL_UART_IRQHandler+0x2a0>)
 8004e06:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7fe fcd9 	bl	80037c4 <HAL_DMA_Abort_IT>
 8004e12:	1e03      	subs	r3, r0, #0
 8004e14:	d01a      	beq.n	8004e4c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	0018      	movs	r0, r3
 8004e22:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	e012      	b.n	8004e4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f9a5 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2e:	e00d      	b.n	8004e4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f9a0 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	e008      	b.n	8004e4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 f99b 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	2100      	movs	r1, #0
 8004e48:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004e4a:	e17f      	b.n	800514c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	46c0      	nop			; (mov r8, r8)
    return;
 8004e4e:	e17d      	b.n	800514c <HAL_UART_IRQHandler+0x594>
 8004e50:	0000080f 	.word	0x0000080f
 8004e54:	04000120 	.word	0x04000120
 8004e58:	08005865 	.word	0x08005865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d000      	beq.n	8004e66 <HAL_UART_IRQHandler+0x2ae>
 8004e64:	e131      	b.n	80050ca <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e66:	23a4      	movs	r3, #164	; 0xa4
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d100      	bne.n	8004e74 <HAL_UART_IRQHandler+0x2bc>
 8004e72:	e12a      	b.n	80050ca <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e74:	23a0      	movs	r3, #160	; 0xa0
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2210      	movs	r2, #16
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <HAL_UART_IRQHandler+0x2ca>
 8004e80:	e123      	b.n	80050ca <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2210      	movs	r2, #16
 8004e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d000      	beq.n	8004e9a <HAL_UART_IRQHandler+0x2e2>
 8004e98:	e09b      	b.n	8004fd2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	217e      	movs	r1, #126	; 0x7e
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d100      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x2fa>
 8004eb0:	e14e      	b.n	8005150 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2258      	movs	r2, #88	; 0x58
 8004eb6:	5a9b      	ldrh	r3, [r3, r2]
 8004eb8:	187a      	adds	r2, r7, r1
 8004eba:	8812      	ldrh	r2, [r2, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d300      	bcc.n	8004ec2 <HAL_UART_IRQHandler+0x30a>
 8004ec0:	e146      	b.n	8005150 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	187a      	adds	r2, r7, r1
 8004ec6:	215a      	movs	r1, #90	; 0x5a
 8004ec8:	8812      	ldrh	r2, [r2, #0]
 8004eca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d06e      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ede:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	499a      	ldr	r1, [pc, #616]	; (8005160 <HAL_UART_IRQHandler+0x5a8>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f383 8810 	msr	PRIMASK, r3
}
 8004f06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f08:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	677b      	str	r3, [r7, #116]	; 0x74
 8004f12:	2301      	movs	r3, #1
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f18:	f383 8810 	msr	PRIMASK, r3
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	438a      	bics	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
 8004f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f42:	673b      	str	r3, [r7, #112]	; 0x70
 8004f44:	2301      	movs	r3, #1
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	f383 8810 	msr	PRIMASK, r3
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2140      	movs	r1, #64	; 0x40
 8004f5c:	438a      	bics	r2, r1
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f62:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f78:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f82:	2301      	movs	r3, #1
 8004f84:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f88:	f383 8810 	msr	PRIMASK, r3
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2110      	movs	r1, #16
 8004f9a:	438a      	bics	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f7fe fbd0 	bl	8003754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2258      	movs	r2, #88	; 0x58
 8004fb8:	5a9a      	ldrh	r2, [r3, r2]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	215a      	movs	r1, #90	; 0x5a
 8004fbe:	5a5b      	ldrh	r3, [r3, r1]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0011      	movs	r1, r2
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f8dc 	bl	8005188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fd0:	e0be      	b.n	8005150 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2258      	movs	r2, #88	; 0x58
 8004fd6:	5a99      	ldrh	r1, [r3, r2]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	225a      	movs	r2, #90	; 0x5a
 8004fdc:	5a9b      	ldrh	r3, [r3, r2]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	208e      	movs	r0, #142	; 0x8e
 8004fe2:	183b      	adds	r3, r7, r0
 8004fe4:	1a8a      	subs	r2, r1, r2
 8004fe6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	225a      	movs	r2, #90	; 0x5a
 8004fec:	5a9b      	ldrh	r3, [r3, r2]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d100      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x43e>
 8004ff4:	e0ae      	b.n	8005154 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d100      	bne.n	8005000 <HAL_UART_IRQHandler+0x448>
 8004ffe:	e0a9      	b.n	8005154 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005000:	f3ef 8310 	mrs	r3, PRIMASK
 8005004:	60fb      	str	r3, [r7, #12]
  return(result);
 8005006:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005008:	2488      	movs	r4, #136	; 0x88
 800500a:	193a      	adds	r2, r7, r4
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	2301      	movs	r3, #1
 8005010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	494f      	ldr	r1, [pc, #316]	; (8005164 <HAL_UART_IRQHandler+0x5ac>)
 8005026:	400a      	ands	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	193b      	adds	r3, r7, r4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f383 8810 	msr	PRIMASK, r3
}
 8005036:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005038:	f3ef 8310 	mrs	r3, PRIMASK
 800503c:	61bb      	str	r3, [r7, #24]
  return(result);
 800503e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	2484      	movs	r4, #132	; 0x84
 8005042:	193a      	adds	r2, r7, r4
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	2301      	movs	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2101      	movs	r1, #1
 800505e:	438a      	bics	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	193b      	adds	r3, r7, r4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	f383 8810 	msr	PRIMASK, r3
}
 800506e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005082:	f3ef 8310 	mrs	r3, PRIMASK
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	2480      	movs	r4, #128	; 0x80
 800508c:	193a      	adds	r2, r7, r4
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	2301      	movs	r3, #1
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2110      	movs	r1, #16
 80050a8:	438a      	bics	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0011      	movs	r1, r2
 80050c2:	0018      	movs	r0, r3
 80050c4:	f000 f860 	bl	8005188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050c8:	e044      	b.n	8005154 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050ca:	23a4      	movs	r3, #164	; 0xa4
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	035b      	lsls	r3, r3, #13
 80050d4:	4013      	ands	r3, r2
 80050d6:	d010      	beq.n	80050fa <HAL_UART_IRQHandler+0x542>
 80050d8:	239c      	movs	r3, #156	; 0x9c
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	03db      	lsls	r3, r3, #15
 80050e2:	4013      	ands	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	0352      	lsls	r2, r2, #13
 80050ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 fbf8 	bl	80058e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050f8:	e02f      	b.n	800515a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050fa:	23a4      	movs	r3, #164	; 0xa4
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2280      	movs	r2, #128	; 0x80
 8005102:	4013      	ands	r3, r2
 8005104:	d00f      	beq.n	8005126 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005106:	23a0      	movs	r3, #160	; 0xa0
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2280      	movs	r2, #128	; 0x80
 800510e:	4013      	ands	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01e      	beq.n	8005158 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	0010      	movs	r0, r2
 8005122:	4798      	blx	r3
    }
    return;
 8005124:	e018      	b.n	8005158 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005126:	23a4      	movs	r3, #164	; 0xa4
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2240      	movs	r2, #64	; 0x40
 800512e:	4013      	ands	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_UART_IRQHandler+0x5a2>
 8005132:	23a0      	movs	r3, #160	; 0xa0
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	4013      	ands	r3, r2
 800513c:	d00d      	beq.n	800515a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fba6 	bl	8005892 <UART_EndTransmit_IT>
    return;
 8005146:	e008      	b.n	800515a <HAL_UART_IRQHandler+0x5a2>
      return;
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	e006      	b.n	800515a <HAL_UART_IRQHandler+0x5a2>
    return;
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	e004      	b.n	800515a <HAL_UART_IRQHandler+0x5a2>
      return;
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	e002      	b.n	800515a <HAL_UART_IRQHandler+0x5a2>
      return;
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	e000      	b.n	800515a <HAL_UART_IRQHandler+0x5a2>
    return;
 8005158:	46c0      	nop			; (mov r8, r8)
  }

}
 800515a:	46bd      	mov	sp, r7
 800515c:	b02b      	add	sp, #172	; 0xac
 800515e:	bd90      	pop	{r4, r7, pc}
 8005160:	fffffeff 	.word	0xfffffeff
 8005164:	fffffedf 	.word	0xfffffedf

08005168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	000a      	movs	r2, r1
 8005192:	1cbb      	adds	r3, r7, #2
 8005194:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	46bd      	mov	sp, r7
 800519a:	b002      	add	sp, #8
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a8:	231e      	movs	r3, #30
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a8d      	ldr	r2, [pc, #564]	; (8005404 <UART_SetConfig+0x264>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	0019      	movs	r1, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	430a      	orrs	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a88      	ldr	r2, [pc, #544]	; (8005408 <UART_SetConfig+0x268>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	0019      	movs	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a7f      	ldr	r2, [pc, #508]	; (800540c <UART_SetConfig+0x26c>)
 800520e:	4013      	ands	r3, r2
 8005210:	0019      	movs	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7b      	ldr	r2, [pc, #492]	; (8005410 <UART_SetConfig+0x270>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d127      	bne.n	8005276 <UART_SetConfig+0xd6>
 8005226:	4b7b      	ldr	r3, [pc, #492]	; (8005414 <UART_SetConfig+0x274>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	2203      	movs	r2, #3
 800522c:	4013      	ands	r3, r2
 800522e:	2b03      	cmp	r3, #3
 8005230:	d00d      	beq.n	800524e <UART_SetConfig+0xae>
 8005232:	d81b      	bhi.n	800526c <UART_SetConfig+0xcc>
 8005234:	2b02      	cmp	r3, #2
 8005236:	d014      	beq.n	8005262 <UART_SetConfig+0xc2>
 8005238:	d818      	bhi.n	800526c <UART_SetConfig+0xcc>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <UART_SetConfig+0xa4>
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00a      	beq.n	8005258 <UART_SetConfig+0xb8>
 8005242:	e013      	b.n	800526c <UART_SetConfig+0xcc>
 8005244:	231f      	movs	r3, #31
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e021      	b.n	8005292 <UART_SetConfig+0xf2>
 800524e:	231f      	movs	r3, #31
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	2202      	movs	r2, #2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e01c      	b.n	8005292 <UART_SetConfig+0xf2>
 8005258:	231f      	movs	r3, #31
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	2204      	movs	r2, #4
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e017      	b.n	8005292 <UART_SetConfig+0xf2>
 8005262:	231f      	movs	r3, #31
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	2208      	movs	r2, #8
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e012      	b.n	8005292 <UART_SetConfig+0xf2>
 800526c:	231f      	movs	r3, #31
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	2210      	movs	r2, #16
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e00d      	b.n	8005292 <UART_SetConfig+0xf2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a67      	ldr	r2, [pc, #412]	; (8005418 <UART_SetConfig+0x278>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d104      	bne.n	800528a <UART_SetConfig+0xea>
 8005280:	231f      	movs	r3, #31
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e003      	b.n	8005292 <UART_SetConfig+0xf2>
 800528a:	231f      	movs	r3, #31
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	2210      	movs	r2, #16
 8005290:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	429a      	cmp	r2, r3
 800529c:	d15d      	bne.n	800535a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800529e:	231f      	movs	r3, #31
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d015      	beq.n	80052d4 <UART_SetConfig+0x134>
 80052a8:	dc18      	bgt.n	80052dc <UART_SetConfig+0x13c>
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d00d      	beq.n	80052ca <UART_SetConfig+0x12a>
 80052ae:	dc15      	bgt.n	80052dc <UART_SetConfig+0x13c>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <UART_SetConfig+0x11a>
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d005      	beq.n	80052c4 <UART_SetConfig+0x124>
 80052b8:	e010      	b.n	80052dc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ba:	f7ff fb35 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 80052be:	0003      	movs	r3, r0
 80052c0:	61bb      	str	r3, [r7, #24]
        break;
 80052c2:	e012      	b.n	80052ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b55      	ldr	r3, [pc, #340]	; (800541c <UART_SetConfig+0x27c>)
 80052c6:	61bb      	str	r3, [r7, #24]
        break;
 80052c8:	e00f      	b.n	80052ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7ff fabf 	bl	800484c <HAL_RCC_GetSysClockFreq>
 80052ce:	0003      	movs	r3, r0
 80052d0:	61bb      	str	r3, [r7, #24]
        break;
 80052d2:	e00a      	b.n	80052ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	61bb      	str	r3, [r7, #24]
        break;
 80052da:	e006      	b.n	80052ea <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052e0:	231e      	movs	r3, #30
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
        break;
 80052e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d100      	bne.n	80052f2 <UART_SetConfig+0x152>
 80052f0:	e07b      	b.n	80053ea <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	005a      	lsls	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	18d2      	adds	r2, r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0019      	movs	r1, r3
 8005304:	0010      	movs	r0, r2
 8005306:	f7fa ff1b 	bl	8000140 <__udivsi3>
 800530a:	0003      	movs	r3, r0
 800530c:	b29b      	uxth	r3, r3
 800530e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	d91c      	bls.n	8005350 <UART_SetConfig+0x1b0>
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	025b      	lsls	r3, r3, #9
 800531c:	429a      	cmp	r2, r3
 800531e:	d217      	bcs.n	8005350 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	b29a      	uxth	r2, r3
 8005324:	200e      	movs	r0, #14
 8005326:	183b      	adds	r3, r7, r0
 8005328:	210f      	movs	r1, #15
 800532a:	438a      	bics	r2, r1
 800532c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	2207      	movs	r2, #7
 8005336:	4013      	ands	r3, r2
 8005338:	b299      	uxth	r1, r3
 800533a:	183b      	adds	r3, r7, r0
 800533c:	183a      	adds	r2, r7, r0
 800533e:	8812      	ldrh	r2, [r2, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	183a      	adds	r2, r7, r0
 800534a:	8812      	ldrh	r2, [r2, #0]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	e04c      	b.n	80053ea <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005350:	231e      	movs	r3, #30
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e047      	b.n	80053ea <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800535a:	231f      	movs	r3, #31
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d015      	beq.n	8005390 <UART_SetConfig+0x1f0>
 8005364:	dc18      	bgt.n	8005398 <UART_SetConfig+0x1f8>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d00d      	beq.n	8005386 <UART_SetConfig+0x1e6>
 800536a:	dc15      	bgt.n	8005398 <UART_SetConfig+0x1f8>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <UART_SetConfig+0x1d6>
 8005370:	2b02      	cmp	r3, #2
 8005372:	d005      	beq.n	8005380 <UART_SetConfig+0x1e0>
 8005374:	e010      	b.n	8005398 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005376:	f7ff fad7 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 800537a:	0003      	movs	r3, r0
 800537c:	61bb      	str	r3, [r7, #24]
        break;
 800537e:	e012      	b.n	80053a6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005380:	4b26      	ldr	r3, [pc, #152]	; (800541c <UART_SetConfig+0x27c>)
 8005382:	61bb      	str	r3, [r7, #24]
        break;
 8005384:	e00f      	b.n	80053a6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005386:	f7ff fa61 	bl	800484c <HAL_RCC_GetSysClockFreq>
 800538a:	0003      	movs	r3, r0
 800538c:	61bb      	str	r3, [r7, #24]
        break;
 800538e:	e00a      	b.n	80053a6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	61bb      	str	r3, [r7, #24]
        break;
 8005396:	e006      	b.n	80053a6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800539c:	231e      	movs	r3, #30
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
        break;
 80053a4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	085a      	lsrs	r2, r3, #1
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	18d2      	adds	r2, r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	0019      	movs	r1, r3
 80053bc:	0010      	movs	r0, r2
 80053be:	f7fa febf 	bl	8000140 <__udivsi3>
 80053c2:	0003      	movs	r3, r0
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d909      	bls.n	80053e2 <UART_SetConfig+0x242>
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	025b      	lsls	r3, r3, #9
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d204      	bcs.n	80053e2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e003      	b.n	80053ea <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	231e      	movs	r3, #30
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053f6:	231e      	movs	r3, #30
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	781b      	ldrb	r3, [r3, #0]
}
 80053fc:	0018      	movs	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	b008      	add	sp, #32
 8005402:	bd80      	pop	{r7, pc}
 8005404:	ffff69f3 	.word	0xffff69f3
 8005408:	ffffcfff 	.word	0xffffcfff
 800540c:	fffff4ff 	.word	0xfffff4ff
 8005410:	40013800 	.word	0x40013800
 8005414:	40021000 	.word	0x40021000
 8005418:	40004400 	.word	0x40004400
 800541c:	007a1200 	.word	0x007a1200

08005420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2201      	movs	r2, #1
 800542e:	4013      	ands	r3, r2
 8005430:	d00b      	beq.n	800544a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a4a      	ldr	r2, [pc, #296]	; (8005564 <UART_AdvFeatureConfig+0x144>)
 800543a:	4013      	ands	r3, r2
 800543c:	0019      	movs	r1, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2202      	movs	r2, #2
 8005450:	4013      	ands	r3, r2
 8005452:	d00b      	beq.n	800546c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4a43      	ldr	r2, [pc, #268]	; (8005568 <UART_AdvFeatureConfig+0x148>)
 800545c:	4013      	ands	r3, r2
 800545e:	0019      	movs	r1, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2204      	movs	r2, #4
 8005472:	4013      	ands	r3, r2
 8005474:	d00b      	beq.n	800548e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a3b      	ldr	r2, [pc, #236]	; (800556c <UART_AdvFeatureConfig+0x14c>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2208      	movs	r2, #8
 8005494:	4013      	ands	r3, r2
 8005496:	d00b      	beq.n	80054b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4a34      	ldr	r2, [pc, #208]	; (8005570 <UART_AdvFeatureConfig+0x150>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	2210      	movs	r2, #16
 80054b6:	4013      	ands	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <UART_AdvFeatureConfig+0x154>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2220      	movs	r2, #32
 80054d8:	4013      	ands	r3, r2
 80054da:	d00b      	beq.n	80054f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <UART_AdvFeatureConfig+0x158>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2240      	movs	r2, #64	; 0x40
 80054fa:	4013      	ands	r3, r2
 80054fc:	d01d      	beq.n	800553a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <UART_AdvFeatureConfig+0x15c>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	035b      	lsls	r3, r3, #13
 800551e:	429a      	cmp	r2, r3
 8005520:	d10b      	bne.n	800553a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a15      	ldr	r2, [pc, #84]	; (8005580 <UART_AdvFeatureConfig+0x160>)
 800552a:	4013      	ands	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2280      	movs	r2, #128	; 0x80
 8005540:	4013      	ands	r3, r2
 8005542:	d00b      	beq.n	800555c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <UART_AdvFeatureConfig+0x164>)
 800554c:	4013      	ands	r3, r2
 800554e:	0019      	movs	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
  }
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b002      	add	sp, #8
 8005562:	bd80      	pop	{r7, pc}
 8005564:	fffdffff 	.word	0xfffdffff
 8005568:	fffeffff 	.word	0xfffeffff
 800556c:	fffbffff 	.word	0xfffbffff
 8005570:	ffff7fff 	.word	0xffff7fff
 8005574:	ffffefff 	.word	0xffffefff
 8005578:	ffffdfff 	.word	0xffffdfff
 800557c:	ffefffff 	.word	0xffefffff
 8005580:	ff9fffff 	.word	0xff9fffff
 8005584:	fff7ffff 	.word	0xfff7ffff

08005588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	2100      	movs	r1, #0
 8005596:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005598:	f7fd fff4 	bl	8003584 <HAL_GetTick>
 800559c:	0003      	movs	r3, r0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2208      	movs	r2, #8
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d10c      	bne.n	80055c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2280      	movs	r2, #128	; 0x80
 80055b2:	0391      	lsls	r1, r2, #14
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4a17      	ldr	r2, [pc, #92]	; (8005614 <UART_CheckIdleState+0x8c>)
 80055b8:	9200      	str	r2, [sp, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f000 f82c 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d001      	beq.n	80055c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e021      	b.n	800560c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2204      	movs	r2, #4
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d10c      	bne.n	80055f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2280      	movs	r2, #128	; 0x80
 80055da:	03d1      	lsls	r1, r2, #15
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4a0d      	ldr	r2, [pc, #52]	; (8005614 <UART_CheckIdleState+0x8c>)
 80055e0:	9200      	str	r2, [sp, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f000 f818 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 80055e8:	1e03      	subs	r3, r0, #0
 80055ea:	d001      	beq.n	80055f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e00d      	b.n	800560c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2274      	movs	r2, #116	; 0x74
 8005606:	2100      	movs	r1, #0
 8005608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b004      	add	sp, #16
 8005612:	bd80      	pop	{r7, pc}
 8005614:	01ffffff 	.word	0x01ffffff

08005618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b094      	sub	sp, #80	; 0x50
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	1dfb      	adds	r3, r7, #7
 8005626:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005628:	e0a3      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800562c:	3301      	adds	r3, #1
 800562e:	d100      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005630:	e09f      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fd ffa7 	bl	8003584 <HAL_GetTick>
 8005636:	0002      	movs	r2, r0
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <UART_WaitOnFlagUntilTimeout+0x30>
 8005642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005644:	2b00      	cmp	r3, #0
 8005646:	d13d      	bne.n	80056c4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005648:	f3ef 8310 	mrs	r3, PRIMASK
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005650:	647b      	str	r3, [r7, #68]	; 0x44
 8005652:	2301      	movs	r3, #1
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	f383 8810 	msr	PRIMASK, r3
}
 800565c:	46c0      	nop			; (mov r8, r8)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	494c      	ldr	r1, [pc, #304]	; (800579c <UART_WaitOnFlagUntilTimeout+0x184>)
 800566a:	400a      	ands	r2, r1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	f383 8810 	msr	PRIMASK, r3
}
 8005678:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567a:	f3ef 8310 	mrs	r3, PRIMASK
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
 8005684:	2301      	movs	r3, #1
 8005686:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	f383 8810 	msr	PRIMASK, r3
}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2101      	movs	r1, #1
 800569c:	438a      	bics	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	f383 8810 	msr	PRIMASK, r3
}
 80056aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2274      	movs	r2, #116	; 0x74
 80056bc:	2100      	movs	r1, #0
 80056be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e067      	b.n	8005794 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2204      	movs	r2, #4
 80056cc:	4013      	ands	r3, r2
 80056ce:	d050      	beq.n	8005772 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	401a      	ands	r2, r3
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d146      	bne.n	8005772 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2280      	movs	r2, #128	; 0x80
 80056ea:	0112      	lsls	r2, r2, #4
 80056ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8310 	mrs	r3, PRIMASK
 80056f2:	613b      	str	r3, [r7, #16]
  return(result);
 80056f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f383 8810 	msr	PRIMASK, r3
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4923      	ldr	r1, [pc, #140]	; (800579c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005710:	400a      	ands	r2, r1
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005716:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f383 8810 	msr	PRIMASK, r3
}
 800571e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005720:	f3ef 8310 	mrs	r3, PRIMASK
 8005724:	61fb      	str	r3, [r7, #28]
  return(result);
 8005726:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
 800572a:	2301      	movs	r3, #1
 800572c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2101      	movs	r1, #1
 8005742:	438a      	bics	r2, r1
 8005744:	609a      	str	r2, [r3, #8]
 8005746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	2120      	movs	r1, #32
 8005764:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2274      	movs	r2, #116	; 0x74
 800576a:	2100      	movs	r1, #0
 800576c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e010      	b.n	8005794 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	425a      	negs	r2, r3
 8005782:	4153      	adcs	r3, r2
 8005784:	b2db      	uxtb	r3, r3
 8005786:	001a      	movs	r2, r3
 8005788:	1dfb      	adds	r3, r7, #7
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d100      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005790:	e74b      	b.n	800562a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b014      	add	sp, #80	; 0x50
 800579a:	bd80      	pop	{r7, pc}
 800579c:	fffffe5f 	.word	0xfffffe5f

080057a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	; 0x38
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	617b      	str	r3, [r7, #20]
  return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	2301      	movs	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4925      	ldr	r1, [pc, #148]	; (8005860 <UART_EndRxTransfer+0xc0>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057da:	f3ef 8310 	mrs	r3, PRIMASK
 80057de:	623b      	str	r3, [r7, #32]
  return(result);
 80057e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	633b      	str	r3, [r7, #48]	; 0x30
 80057e4:	2301      	movs	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	438a      	bics	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	2b01      	cmp	r3, #1
 8005812:	d118      	bne.n	8005846 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005814:	f3ef 8310 	mrs	r3, PRIMASK
 8005818:	60bb      	str	r3, [r7, #8]
  return(result);
 800581a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581e:	2301      	movs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2110      	movs	r1, #16
 8005836:	438a      	bics	r2, r1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b00e      	add	sp, #56	; 0x38
 800585e:	bd80      	pop	{r7, pc}
 8005860:	fffffedf 	.word	0xfffffedf

08005864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	225a      	movs	r2, #90	; 0x5a
 8005876:	2100      	movs	r1, #0
 8005878:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2252      	movs	r2, #82	; 0x52
 800587e:	2100      	movs	r1, #0
 8005880:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff fc77 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589a:	f3ef 8310 	mrs	r3, PRIMASK
 800589e:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	2301      	movs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f383 8810 	msr	PRIMASK, r3
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	438a      	bics	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f383 8810 	msr	PRIMASK, r3
}
 80058ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fc44 	bl	8005168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b006      	add	sp, #24
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b002      	add	sp, #8
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <__errno>:
 80058f8:	4b01      	ldr	r3, [pc, #4]	; (8005900 <__errno+0x8>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	4770      	bx	lr
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	20000024 	.word	0x20000024

08005904 <__libc_init_array>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	2600      	movs	r6, #0
 8005908:	4d0c      	ldr	r5, [pc, #48]	; (800593c <__libc_init_array+0x38>)
 800590a:	4c0d      	ldr	r4, [pc, #52]	; (8005940 <__libc_init_array+0x3c>)
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	42a6      	cmp	r6, r4
 8005912:	d109      	bne.n	8005928 <__libc_init_array+0x24>
 8005914:	2600      	movs	r6, #0
 8005916:	f004 fd51 	bl	800a3bc <_init>
 800591a:	4d0a      	ldr	r5, [pc, #40]	; (8005944 <__libc_init_array+0x40>)
 800591c:	4c0a      	ldr	r4, [pc, #40]	; (8005948 <__libc_init_array+0x44>)
 800591e:	1b64      	subs	r4, r4, r5
 8005920:	10a4      	asrs	r4, r4, #2
 8005922:	42a6      	cmp	r6, r4
 8005924:	d105      	bne.n	8005932 <__libc_init_array+0x2e>
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	00b3      	lsls	r3, r6, #2
 800592a:	58eb      	ldr	r3, [r5, r3]
 800592c:	4798      	blx	r3
 800592e:	3601      	adds	r6, #1
 8005930:	e7ee      	b.n	8005910 <__libc_init_array+0xc>
 8005932:	00b3      	lsls	r3, r6, #2
 8005934:	58eb      	ldr	r3, [r5, r3]
 8005936:	4798      	blx	r3
 8005938:	3601      	adds	r6, #1
 800593a:	e7f2      	b.n	8005922 <__libc_init_array+0x1e>
 800593c:	0800ab6c 	.word	0x0800ab6c
 8005940:	0800ab6c 	.word	0x0800ab6c
 8005944:	0800ab6c 	.word	0x0800ab6c
 8005948:	0800ab70 	.word	0x0800ab70

0800594c <malloc>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <malloc+0x10>)
 8005950:	0001      	movs	r1, r0
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	f000 f882 	bl	8005a5c <_malloc_r>
 8005958:	bd10      	pop	{r4, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	20000024 	.word	0x20000024

08005960 <free>:
 8005960:	b510      	push	{r4, lr}
 8005962:	4b03      	ldr	r3, [pc, #12]	; (8005970 <free+0x10>)
 8005964:	0001      	movs	r1, r0
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	f000 f80c 	bl	8005984 <_free_r>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	20000024 	.word	0x20000024

08005974 <memset>:
 8005974:	0003      	movs	r3, r0
 8005976:	1882      	adds	r2, r0, r2
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	7019      	strb	r1, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <_free_r>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	0005      	movs	r5, r0
 8005988:	2900      	cmp	r1, #0
 800598a:	d010      	beq.n	80059ae <_free_r+0x2a>
 800598c:	1f0c      	subs	r4, r1, #4
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	da00      	bge.n	8005996 <_free_r+0x12>
 8005994:	18e4      	adds	r4, r4, r3
 8005996:	0028      	movs	r0, r5
 8005998:	f003 f992 	bl	8008cc0 <__malloc_lock>
 800599c:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <_free_r+0x90>)
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <_free_r+0x2c>
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	6014      	str	r4, [r2, #0]
 80059a8:	0028      	movs	r0, r5
 80059aa:	f003 f991 	bl	8008cd0 <__malloc_unlock>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x42>
 80059b4:	6821      	ldr	r1, [r4, #0]
 80059b6:	1860      	adds	r0, r4, r1
 80059b8:	4283      	cmp	r3, r0
 80059ba:	d1f3      	bne.n	80059a4 <_free_r+0x20>
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	1841      	adds	r1, r0, r1
 80059c2:	6021      	str	r1, [r4, #0]
 80059c4:	e7ee      	b.n	80059a4 <_free_r+0x20>
 80059c6:	001a      	movs	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <_free_r+0x4e>
 80059ce:	42a3      	cmp	r3, r4
 80059d0:	d9f9      	bls.n	80059c6 <_free_r+0x42>
 80059d2:	6811      	ldr	r1, [r2, #0]
 80059d4:	1850      	adds	r0, r2, r1
 80059d6:	42a0      	cmp	r0, r4
 80059d8:	d10b      	bne.n	80059f2 <_free_r+0x6e>
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	1809      	adds	r1, r1, r0
 80059de:	1850      	adds	r0, r2, r1
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	4283      	cmp	r3, r0
 80059e4:	d1e0      	bne.n	80059a8 <_free_r+0x24>
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	1841      	adds	r1, r0, r1
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	6053      	str	r3, [r2, #4]
 80059f0:	e7da      	b.n	80059a8 <_free_r+0x24>
 80059f2:	42a0      	cmp	r0, r4
 80059f4:	d902      	bls.n	80059fc <_free_r+0x78>
 80059f6:	230c      	movs	r3, #12
 80059f8:	602b      	str	r3, [r5, #0]
 80059fa:	e7d5      	b.n	80059a8 <_free_r+0x24>
 80059fc:	6821      	ldr	r1, [r4, #0]
 80059fe:	1860      	adds	r0, r4, r1
 8005a00:	4283      	cmp	r3, r0
 8005a02:	d103      	bne.n	8005a0c <_free_r+0x88>
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	1841      	adds	r1, r0, r1
 8005a0a:	6021      	str	r1, [r4, #0]
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	6054      	str	r4, [r2, #4]
 8005a10:	e7ca      	b.n	80059a8 <_free_r+0x24>
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	200005a0 	.word	0x200005a0

08005a18 <sbrk_aligned>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4e0f      	ldr	r6, [pc, #60]	; (8005a58 <sbrk_aligned+0x40>)
 8005a1c:	000d      	movs	r5, r1
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	0004      	movs	r4, r0
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d102      	bne.n	8005a2c <sbrk_aligned+0x14>
 8005a26:	f000 ff05 	bl	8006834 <_sbrk_r>
 8005a2a:	6030      	str	r0, [r6, #0]
 8005a2c:	0029      	movs	r1, r5
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f000 ff00 	bl	8006834 <_sbrk_r>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d00a      	beq.n	8005a4e <sbrk_aligned+0x36>
 8005a38:	2303      	movs	r3, #3
 8005a3a:	1cc5      	adds	r5, r0, #3
 8005a3c:	439d      	bics	r5, r3
 8005a3e:	42a8      	cmp	r0, r5
 8005a40:	d007      	beq.n	8005a52 <sbrk_aligned+0x3a>
 8005a42:	1a29      	subs	r1, r5, r0
 8005a44:	0020      	movs	r0, r4
 8005a46:	f000 fef5 	bl	8006834 <_sbrk_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	d101      	bne.n	8005a52 <sbrk_aligned+0x3a>
 8005a4e:	2501      	movs	r5, #1
 8005a50:	426d      	negs	r5, r5
 8005a52:	0028      	movs	r0, r5
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	200005a4 	.word	0x200005a4

08005a5c <_malloc_r>:
 8005a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a5e:	2203      	movs	r2, #3
 8005a60:	1ccb      	adds	r3, r1, #3
 8005a62:	4393      	bics	r3, r2
 8005a64:	3308      	adds	r3, #8
 8005a66:	0006      	movs	r6, r0
 8005a68:	001f      	movs	r7, r3
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d232      	bcs.n	8005ad4 <_malloc_r+0x78>
 8005a6e:	270c      	movs	r7, #12
 8005a70:	42b9      	cmp	r1, r7
 8005a72:	d831      	bhi.n	8005ad8 <_malloc_r+0x7c>
 8005a74:	0030      	movs	r0, r6
 8005a76:	f003 f923 	bl	8008cc0 <__malloc_lock>
 8005a7a:	4d32      	ldr	r5, [pc, #200]	; (8005b44 <_malloc_r+0xe8>)
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	001c      	movs	r4, r3
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	d12e      	bne.n	8005ae2 <_malloc_r+0x86>
 8005a84:	0039      	movs	r1, r7
 8005a86:	0030      	movs	r0, r6
 8005a88:	f7ff ffc6 	bl	8005a18 <sbrk_aligned>
 8005a8c:	0004      	movs	r4, r0
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d11e      	bne.n	8005ad0 <_malloc_r+0x74>
 8005a92:	682c      	ldr	r4, [r5, #0]
 8005a94:	0025      	movs	r5, r4
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	d14a      	bne.n	8005b30 <_malloc_r+0xd4>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	0029      	movs	r1, r5
 8005a9e:	18e3      	adds	r3, r4, r3
 8005aa0:	0030      	movs	r0, r6
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	f000 fec6 	bl	8006834 <_sbrk_r>
 8005aa8:	9b01      	ldr	r3, [sp, #4]
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	d143      	bne.n	8005b36 <_malloc_r+0xda>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	3703      	adds	r7, #3
 8005ab2:	1aff      	subs	r7, r7, r3
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	439f      	bics	r7, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	2f0c      	cmp	r7, #12
 8005abc:	d200      	bcs.n	8005ac0 <_malloc_r+0x64>
 8005abe:	270c      	movs	r7, #12
 8005ac0:	0039      	movs	r1, r7
 8005ac2:	0030      	movs	r0, r6
 8005ac4:	f7ff ffa8 	bl	8005a18 <sbrk_aligned>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d034      	beq.n	8005b36 <_malloc_r+0xda>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	19df      	adds	r7, r3, r7
 8005ad0:	6027      	str	r7, [r4, #0]
 8005ad2:	e013      	b.n	8005afc <_malloc_r+0xa0>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dacb      	bge.n	8005a70 <_malloc_r+0x14>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	2500      	movs	r5, #0
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	0028      	movs	r0, r5
 8005ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	1bd1      	subs	r1, r2, r7
 8005ae6:	d420      	bmi.n	8005b2a <_malloc_r+0xce>
 8005ae8:	290b      	cmp	r1, #11
 8005aea:	d917      	bls.n	8005b1c <_malloc_r+0xc0>
 8005aec:	19e2      	adds	r2, r4, r7
 8005aee:	6027      	str	r7, [r4, #0]
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d111      	bne.n	8005b18 <_malloc_r+0xbc>
 8005af4:	602a      	str	r2, [r5, #0]
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	6053      	str	r3, [r2, #4]
 8005afc:	0030      	movs	r0, r6
 8005afe:	0025      	movs	r5, r4
 8005b00:	f003 f8e6 	bl	8008cd0 <__malloc_unlock>
 8005b04:	2207      	movs	r2, #7
 8005b06:	350b      	adds	r5, #11
 8005b08:	1d23      	adds	r3, r4, #4
 8005b0a:	4395      	bics	r5, r2
 8005b0c:	1aea      	subs	r2, r5, r3
 8005b0e:	429d      	cmp	r5, r3
 8005b10:	d0e5      	beq.n	8005ade <_malloc_r+0x82>
 8005b12:	1b5b      	subs	r3, r3, r5
 8005b14:	50a3      	str	r3, [r4, r2]
 8005b16:	e7e2      	b.n	8005ade <_malloc_r+0x82>
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	e7ec      	b.n	8005af6 <_malloc_r+0x9a>
 8005b1c:	6862      	ldr	r2, [r4, #4]
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	d101      	bne.n	8005b26 <_malloc_r+0xca>
 8005b22:	602a      	str	r2, [r5, #0]
 8005b24:	e7ea      	b.n	8005afc <_malloc_r+0xa0>
 8005b26:	605a      	str	r2, [r3, #4]
 8005b28:	e7e8      	b.n	8005afc <_malloc_r+0xa0>
 8005b2a:	0023      	movs	r3, r4
 8005b2c:	6864      	ldr	r4, [r4, #4]
 8005b2e:	e7a7      	b.n	8005a80 <_malloc_r+0x24>
 8005b30:	002c      	movs	r4, r5
 8005b32:	686d      	ldr	r5, [r5, #4]
 8005b34:	e7af      	b.n	8005a96 <_malloc_r+0x3a>
 8005b36:	230c      	movs	r3, #12
 8005b38:	0030      	movs	r0, r6
 8005b3a:	6033      	str	r3, [r6, #0]
 8005b3c:	f003 f8c8 	bl	8008cd0 <__malloc_unlock>
 8005b40:	e7cd      	b.n	8005ade <_malloc_r+0x82>
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	200005a0 	.word	0x200005a0

08005b48 <__cvt>:
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4a:	001e      	movs	r6, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	0014      	movs	r4, r2
 8005b50:	b08b      	sub	sp, #44	; 0x2c
 8005b52:	429e      	cmp	r6, r3
 8005b54:	da04      	bge.n	8005b60 <__cvt+0x18>
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	0609      	lsls	r1, r1, #24
 8005b5a:	1873      	adds	r3, r6, r1
 8005b5c:	001e      	movs	r6, r3
 8005b5e:	232d      	movs	r3, #45	; 0x2d
 8005b60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b64:	7013      	strb	r3, [r2, #0]
 8005b66:	2320      	movs	r3, #32
 8005b68:	2203      	movs	r2, #3
 8005b6a:	439f      	bics	r7, r3
 8005b6c:	2f46      	cmp	r7, #70	; 0x46
 8005b6e:	d007      	beq.n	8005b80 <__cvt+0x38>
 8005b70:	003b      	movs	r3, r7
 8005b72:	3b45      	subs	r3, #69	; 0x45
 8005b74:	4259      	negs	r1, r3
 8005b76:	414b      	adcs	r3, r1
 8005b78:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	18cb      	adds	r3, r1, r3
 8005b7e:	9310      	str	r3, [sp, #64]	; 0x40
 8005b80:	ab09      	add	r3, sp, #36	; 0x24
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	ab08      	add	r3, sp, #32
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b8a:	9200      	str	r2, [sp, #0]
 8005b8c:	9302      	str	r3, [sp, #8]
 8005b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b90:	0022      	movs	r2, r4
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	0033      	movs	r3, r6
 8005b96:	f001 fdd5 	bl	8007744 <_dtoa_r>
 8005b9a:	0005      	movs	r5, r0
 8005b9c:	2f47      	cmp	r7, #71	; 0x47
 8005b9e:	d102      	bne.n	8005ba6 <__cvt+0x5e>
 8005ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba2:	07db      	lsls	r3, r3, #31
 8005ba4:	d528      	bpl.n	8005bf8 <__cvt+0xb0>
 8005ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ba8:	18eb      	adds	r3, r5, r3
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	2f46      	cmp	r7, #70	; 0x46
 8005bae:	d114      	bne.n	8005bda <__cvt+0x92>
 8005bb0:	782b      	ldrb	r3, [r5, #0]
 8005bb2:	2b30      	cmp	r3, #48	; 0x30
 8005bb4:	d10c      	bne.n	8005bd0 <__cvt+0x88>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2300      	movs	r3, #0
 8005bba:	0020      	movs	r0, r4
 8005bbc:	0031      	movs	r1, r6
 8005bbe:	f7fa fc45 	bl	800044c <__aeabi_dcmpeq>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d104      	bne.n	8005bd0 <__cvt+0x88>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bd2:	9a07      	ldr	r2, [sp, #28]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	18d3      	adds	r3, r2, r3
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2300      	movs	r3, #0
 8005bde:	0020      	movs	r0, r4
 8005be0:	0031      	movs	r1, r6
 8005be2:	f7fa fc33 	bl	800044c <__aeabi_dcmpeq>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d001      	beq.n	8005bee <__cvt+0xa6>
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	9309      	str	r3, [sp, #36]	; 0x24
 8005bee:	2230      	movs	r2, #48	; 0x30
 8005bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf2:	9907      	ldr	r1, [sp, #28]
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	d306      	bcc.n	8005c06 <__cvt+0xbe>
 8005bf8:	0028      	movs	r0, r5
 8005bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bfe:	1b5b      	subs	r3, r3, r5
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	b00b      	add	sp, #44	; 0x2c
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	9109      	str	r1, [sp, #36]	; 0x24
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e7f0      	b.n	8005bf0 <__cvt+0xa8>

08005c0e <__exponent>:
 8005c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c10:	1c83      	adds	r3, r0, #2
 8005c12:	b087      	sub	sp, #28
 8005c14:	9303      	str	r3, [sp, #12]
 8005c16:	0005      	movs	r5, r0
 8005c18:	000c      	movs	r4, r1
 8005c1a:	232b      	movs	r3, #43	; 0x2b
 8005c1c:	7002      	strb	r2, [r0, #0]
 8005c1e:	2900      	cmp	r1, #0
 8005c20:	da01      	bge.n	8005c26 <__exponent+0x18>
 8005c22:	424c      	negs	r4, r1
 8005c24:	3302      	adds	r3, #2
 8005c26:	706b      	strb	r3, [r5, #1]
 8005c28:	2c09      	cmp	r4, #9
 8005c2a:	dd31      	ble.n	8005c90 <__exponent+0x82>
 8005c2c:	270a      	movs	r7, #10
 8005c2e:	ab04      	add	r3, sp, #16
 8005c30:	1dde      	adds	r6, r3, #7
 8005c32:	0020      	movs	r0, r4
 8005c34:	0039      	movs	r1, r7
 8005c36:	9601      	str	r6, [sp, #4]
 8005c38:	f7fa fbf2 	bl	8000420 <__aeabi_idivmod>
 8005c3c:	3e01      	subs	r6, #1
 8005c3e:	3130      	adds	r1, #48	; 0x30
 8005c40:	0020      	movs	r0, r4
 8005c42:	7031      	strb	r1, [r6, #0]
 8005c44:	0039      	movs	r1, r7
 8005c46:	9402      	str	r4, [sp, #8]
 8005c48:	f7fa fb04 	bl	8000254 <__divsi3>
 8005c4c:	9b02      	ldr	r3, [sp, #8]
 8005c4e:	0004      	movs	r4, r0
 8005c50:	2b63      	cmp	r3, #99	; 0x63
 8005c52:	dcee      	bgt.n	8005c32 <__exponent+0x24>
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	3430      	adds	r4, #48	; 0x30
 8005c58:	1e9a      	subs	r2, r3, #2
 8005c5a:	0013      	movs	r3, r2
 8005c5c:	9903      	ldr	r1, [sp, #12]
 8005c5e:	7014      	strb	r4, [r2, #0]
 8005c60:	a804      	add	r0, sp, #16
 8005c62:	3007      	adds	r0, #7
 8005c64:	4298      	cmp	r0, r3
 8005c66:	d80e      	bhi.n	8005c86 <__exponent+0x78>
 8005c68:	ab04      	add	r3, sp, #16
 8005c6a:	3307      	adds	r3, #7
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d804      	bhi.n	8005c7c <__exponent+0x6e>
 8005c72:	ab04      	add	r3, sp, #16
 8005c74:	3009      	adds	r0, #9
 8005c76:	18c0      	adds	r0, r0, r3
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	1ac0      	subs	r0, r0, r3
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	1818      	adds	r0, r3, r0
 8005c80:	1b40      	subs	r0, r0, r5
 8005c82:	b007      	add	sp, #28
 8005c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c86:	7818      	ldrb	r0, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	7008      	strb	r0, [r1, #0]
 8005c8c:	3101      	adds	r1, #1
 8005c8e:	e7e7      	b.n	8005c60 <__exponent+0x52>
 8005c90:	2330      	movs	r3, #48	; 0x30
 8005c92:	18e4      	adds	r4, r4, r3
 8005c94:	70ab      	strb	r3, [r5, #2]
 8005c96:	1d28      	adds	r0, r5, #4
 8005c98:	70ec      	strb	r4, [r5, #3]
 8005c9a:	e7f1      	b.n	8005c80 <__exponent+0x72>

08005c9c <_printf_float>:
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	b095      	sub	sp, #84	; 0x54
 8005ca0:	000c      	movs	r4, r1
 8005ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca4:	001e      	movs	r6, r3
 8005ca6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005ca8:	0007      	movs	r7, r0
 8005caa:	f002 ffdb 	bl	8008c64 <_localeconv_r>
 8005cae:	6803      	ldr	r3, [r0, #0]
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8005cb4:	f7fa fa28 	bl	8000108 <strlen>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9312      	str	r3, [sp, #72]	; 0x48
 8005cbc:	7e23      	ldrb	r3, [r4, #24]
 8005cbe:	2207      	movs	r2, #7
 8005cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	900e      	str	r0, [sp, #56]	; 0x38
 8005cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8005cc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	05c9      	lsls	r1, r1, #23
 8005cce:	d547      	bpl.n	8005d60 <_printf_float+0xc4>
 8005cd0:	189b      	adds	r3, r3, r2
 8005cd2:	4393      	bics	r3, r2
 8005cd4:	001a      	movs	r2, r3
 8005cd6:	3208      	adds	r2, #8
 8005cd8:	602a      	str	r2, [r5, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	64a2      	str	r2, [r4, #72]	; 0x48
 8005ce0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ce6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cea:	006b      	lsls	r3, r5, #1
 8005cec:	085b      	lsrs	r3, r3, #1
 8005cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cf2:	4ba7      	ldr	r3, [pc, #668]	; (8005f90 <_printf_float+0x2f4>)
 8005cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cf6:	4252      	negs	r2, r2
 8005cf8:	f7fc f982 	bl	8002000 <__aeabi_dcmpun>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d131      	bne.n	8005d64 <_printf_float+0xc8>
 8005d00:	2201      	movs	r2, #1
 8005d02:	4ba3      	ldr	r3, [pc, #652]	; (8005f90 <_printf_float+0x2f4>)
 8005d04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d08:	4252      	negs	r2, r2
 8005d0a:	f7fa fbaf 	bl	800046c <__aeabi_dcmple>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d128      	bne.n	8005d64 <_printf_float+0xc8>
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	0029      	movs	r1, r5
 8005d18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d1a:	f7fa fb9d 	bl	8000458 <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d003      	beq.n	8005d2a <_printf_float+0x8e>
 8005d22:	0023      	movs	r3, r4
 8005d24:	222d      	movs	r2, #45	; 0x2d
 8005d26:	3343      	adds	r3, #67	; 0x43
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2c:	4d99      	ldr	r5, [pc, #612]	; (8005f94 <_printf_float+0x2f8>)
 8005d2e:	2b47      	cmp	r3, #71	; 0x47
 8005d30:	d900      	bls.n	8005d34 <_printf_float+0x98>
 8005d32:	4d99      	ldr	r5, [pc, #612]	; (8005f98 <_printf_float+0x2fc>)
 8005d34:	2303      	movs	r3, #3
 8005d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d38:	6123      	str	r3, [r4, #16]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	439a      	bics	r2, r3
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	0021      	movs	r1, r4
 8005d48:	0038      	movs	r0, r7
 8005d4a:	9600      	str	r6, [sp, #0]
 8005d4c:	aa13      	add	r2, sp, #76	; 0x4c
 8005d4e:	f000 f9e7 	bl	8006120 <_printf_common>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d000      	beq.n	8005d58 <_printf_float+0xbc>
 8005d56:	e0a2      	b.n	8005e9e <_printf_float+0x202>
 8005d58:	2001      	movs	r0, #1
 8005d5a:	4240      	negs	r0, r0
 8005d5c:	b015      	add	sp, #84	; 0x54
 8005d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d60:	3307      	adds	r3, #7
 8005d62:	e7b6      	b.n	8005cd2 <_printf_float+0x36>
 8005d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d66:	002b      	movs	r3, r5
 8005d68:	0010      	movs	r0, r2
 8005d6a:	0029      	movs	r1, r5
 8005d6c:	f7fc f948 	bl	8002000 <__aeabi_dcmpun>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d00b      	beq.n	8005d8c <_printf_float+0xf0>
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	da03      	bge.n	8005d80 <_printf_float+0xe4>
 8005d78:	0023      	movs	r3, r4
 8005d7a:	222d      	movs	r2, #45	; 0x2d
 8005d7c:	3343      	adds	r3, #67	; 0x43
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d82:	4d86      	ldr	r5, [pc, #536]	; (8005f9c <_printf_float+0x300>)
 8005d84:	2b47      	cmp	r3, #71	; 0x47
 8005d86:	d9d5      	bls.n	8005d34 <_printf_float+0x98>
 8005d88:	4d85      	ldr	r5, [pc, #532]	; (8005fa0 <_printf_float+0x304>)
 8005d8a:	e7d3      	b.n	8005d34 <_printf_float+0x98>
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	4391      	bics	r1, r2
 8005d94:	910f      	str	r1, [sp, #60]	; 0x3c
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	d149      	bne.n	8005e2e <_printf_float+0x192>
 8005d9a:	3307      	adds	r3, #7
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4313      	orrs	r3, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	9206      	str	r2, [sp, #24]
 8005daa:	aa12      	add	r2, sp, #72	; 0x48
 8005dac:	9205      	str	r2, [sp, #20]
 8005dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db0:	a908      	add	r1, sp, #32
 8005db2:	9204      	str	r2, [sp, #16]
 8005db4:	aa11      	add	r2, sp, #68	; 0x44
 8005db6:	9203      	str	r2, [sp, #12]
 8005db8:	2223      	movs	r2, #35	; 0x23
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	6863      	ldr	r3, [r4, #4]
 8005dc0:	1852      	adds	r2, r2, r1
 8005dc2:	9202      	str	r2, [sp, #8]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	0038      	movs	r0, r7
 8005dc8:	002b      	movs	r3, r5
 8005dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dcc:	f7ff febc 	bl	8005b48 <__cvt>
 8005dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd2:	0005      	movs	r5, r0
 8005dd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005dd6:	2b47      	cmp	r3, #71	; 0x47
 8005dd8:	d108      	bne.n	8005dec <_printf_float+0x150>
 8005dda:	1ccb      	adds	r3, r1, #3
 8005ddc:	db02      	blt.n	8005de4 <_printf_float+0x148>
 8005dde:	6863      	ldr	r3, [r4, #4]
 8005de0:	4299      	cmp	r1, r3
 8005de2:	dd48      	ble.n	8005e76 <_printf_float+0x1da>
 8005de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de6:	3b02      	subs	r3, #2
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	930a      	str	r3, [sp, #40]	; 0x28
 8005dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dee:	2b65      	cmp	r3, #101	; 0x65
 8005df0:	d824      	bhi.n	8005e3c <_printf_float+0x1a0>
 8005df2:	0020      	movs	r0, r4
 8005df4:	001a      	movs	r2, r3
 8005df6:	3901      	subs	r1, #1
 8005df8:	3050      	adds	r0, #80	; 0x50
 8005dfa:	9111      	str	r1, [sp, #68]	; 0x44
 8005dfc:	f7ff ff07 	bl	8005c0e <__exponent>
 8005e00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e02:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e04:	1813      	adds	r3, r2, r0
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	2a01      	cmp	r2, #1
 8005e0a:	dc02      	bgt.n	8005e12 <_printf_float+0x176>
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	07d2      	lsls	r2, r2, #31
 8005e10:	d501      	bpl.n	8005e16 <_printf_float+0x17a>
 8005e12:	3301      	adds	r3, #1
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	2323      	movs	r3, #35	; 0x23
 8005e18:	aa08      	add	r2, sp, #32
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d100      	bne.n	8005e24 <_printf_float+0x188>
 8005e22:	e78f      	b.n	8005d44 <_printf_float+0xa8>
 8005e24:	0023      	movs	r3, r4
 8005e26:	222d      	movs	r2, #45	; 0x2d
 8005e28:	3343      	adds	r3, #67	; 0x43
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e78a      	b.n	8005d44 <_printf_float+0xa8>
 8005e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e30:	2a47      	cmp	r2, #71	; 0x47
 8005e32:	d1b4      	bne.n	8005d9e <_printf_float+0x102>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1b2      	bne.n	8005d9e <_printf_float+0x102>
 8005e38:	3301      	adds	r3, #1
 8005e3a:	e7af      	b.n	8005d9c <_printf_float+0x100>
 8005e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3e:	2b66      	cmp	r3, #102	; 0x66
 8005e40:	d11b      	bne.n	8005e7a <_printf_float+0x1de>
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	2900      	cmp	r1, #0
 8005e46:	dd0d      	ble.n	8005e64 <_printf_float+0x1c8>
 8005e48:	6121      	str	r1, [r4, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <_printf_float+0x1b8>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	07d2      	lsls	r2, r2, #31
 8005e52:	d502      	bpl.n	8005e5a <_printf_float+0x1be>
 8005e54:	3301      	adds	r3, #1
 8005e56:	1859      	adds	r1, r3, r1
 8005e58:	6121      	str	r1, [r4, #16]
 8005e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e5e:	2300      	movs	r3, #0
 8005e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e62:	e7d8      	b.n	8005e16 <_printf_float+0x17a>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <_printf_float+0x1d4>
 8005e68:	2201      	movs	r2, #1
 8005e6a:	6821      	ldr	r1, [r4, #0]
 8005e6c:	4211      	tst	r1, r2
 8005e6e:	d000      	beq.n	8005e72 <_printf_float+0x1d6>
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	6122      	str	r2, [r4, #16]
 8005e74:	e7f1      	b.n	8005e5a <_printf_float+0x1be>
 8005e76:	2367      	movs	r3, #103	; 0x67
 8005e78:	930a      	str	r3, [sp, #40]	; 0x28
 8005e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	db06      	blt.n	8005e90 <_printf_float+0x1f4>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	6123      	str	r3, [r4, #16]
 8005e86:	07d2      	lsls	r2, r2, #31
 8005e88:	d5e7      	bpl.n	8005e5a <_printf_float+0x1be>
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	e7e4      	b.n	8005e5a <_printf_float+0x1be>
 8005e90:	2101      	movs	r1, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	dc01      	bgt.n	8005e9a <_printf_float+0x1fe>
 8005e96:	1849      	adds	r1, r1, r1
 8005e98:	1ac9      	subs	r1, r1, r3
 8005e9a:	1852      	adds	r2, r2, r1
 8005e9c:	e7e9      	b.n	8005e72 <_printf_float+0x1d6>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	0553      	lsls	r3, r2, #21
 8005ea2:	d407      	bmi.n	8005eb4 <_printf_float+0x218>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	002a      	movs	r2, r5
 8005ea8:	0038      	movs	r0, r7
 8005eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eac:	47b0      	blx	r6
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	d128      	bne.n	8005f04 <_printf_float+0x268>
 8005eb2:	e751      	b.n	8005d58 <_printf_float+0xbc>
 8005eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb6:	2b65      	cmp	r3, #101	; 0x65
 8005eb8:	d800      	bhi.n	8005ebc <_printf_float+0x220>
 8005eba:	e0e1      	b.n	8006080 <_printf_float+0x3e4>
 8005ebc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005ebe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f7fa fac2 	bl	800044c <__aeabi_dcmpeq>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d031      	beq.n	8005f30 <_printf_float+0x294>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	0038      	movs	r0, r7
 8005ed0:	4a34      	ldr	r2, [pc, #208]	; (8005fa4 <_printf_float+0x308>)
 8005ed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed4:	47b0      	blx	r6
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d100      	bne.n	8005edc <_printf_float+0x240>
 8005eda:	e73d      	b.n	8005d58 <_printf_float+0xbc>
 8005edc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	db02      	blt.n	8005eea <_printf_float+0x24e>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	07db      	lsls	r3, r3, #31
 8005ee8:	d50c      	bpl.n	8005f04 <_printf_float+0x268>
 8005eea:	0038      	movs	r0, r7
 8005eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef2:	47b0      	blx	r6
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d100      	bne.n	8005efc <_printf_float+0x260>
 8005efa:	e72d      	b.n	8005d58 <_printf_float+0xbc>
 8005efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005efe:	3b01      	subs	r3, #1
 8005f00:	42ab      	cmp	r3, r5
 8005f02:	dc0a      	bgt.n	8005f1a <_printf_float+0x27e>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	079b      	lsls	r3, r3, #30
 8005f08:	d500      	bpl.n	8005f0c <_printf_float+0x270>
 8005f0a:	e106      	b.n	800611a <_printf_float+0x47e>
 8005f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f0e:	68e0      	ldr	r0, [r4, #12]
 8005f10:	4298      	cmp	r0, r3
 8005f12:	db00      	blt.n	8005f16 <_printf_float+0x27a>
 8005f14:	e722      	b.n	8005d5c <_printf_float+0xc0>
 8005f16:	0018      	movs	r0, r3
 8005f18:	e720      	b.n	8005d5c <_printf_float+0xc0>
 8005f1a:	0022      	movs	r2, r4
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	0038      	movs	r0, r7
 8005f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f22:	321a      	adds	r2, #26
 8005f24:	47b0      	blx	r6
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	d100      	bne.n	8005f2c <_printf_float+0x290>
 8005f2a:	e715      	b.n	8005d58 <_printf_float+0xbc>
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	e7e5      	b.n	8005efc <_printf_float+0x260>
 8005f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dc38      	bgt.n	8005fa8 <_printf_float+0x30c>
 8005f36:	2301      	movs	r3, #1
 8005f38:	0038      	movs	r0, r7
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <_printf_float+0x308>)
 8005f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f3e:	47b0      	blx	r6
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d100      	bne.n	8005f46 <_printf_float+0x2aa>
 8005f44:	e708      	b.n	8005d58 <_printf_float+0xbc>
 8005f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	d102      	bne.n	8005f54 <_printf_float+0x2b8>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	07db      	lsls	r3, r3, #31
 8005f52:	d5d7      	bpl.n	8005f04 <_printf_float+0x268>
 8005f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f56:	0038      	movs	r0, r7
 8005f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f5c:	47b0      	blx	r6
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d100      	bne.n	8005f64 <_printf_float+0x2c8>
 8005f62:	e6f9      	b.n	8005d58 <_printf_float+0xbc>
 8005f64:	2300      	movs	r3, #0
 8005f66:	930a      	str	r3, [sp, #40]	; 0x28
 8005f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	dc01      	bgt.n	8005f76 <_printf_float+0x2da>
 8005f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f74:	e797      	b.n	8005ea6 <_printf_float+0x20a>
 8005f76:	0022      	movs	r2, r4
 8005f78:	2301      	movs	r3, #1
 8005f7a:	0038      	movs	r0, r7
 8005f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f7e:	321a      	adds	r2, #26
 8005f80:	47b0      	blx	r6
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	d100      	bne.n	8005f88 <_printf_float+0x2ec>
 8005f86:	e6e7      	b.n	8005d58 <_printf_float+0xbc>
 8005f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	e7eb      	b.n	8005f66 <_printf_float+0x2ca>
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	7fefffff 	.word	0x7fefffff
 8005f94:	0800a6c4 	.word	0x0800a6c4
 8005f98:	0800a6c8 	.word	0x0800a6c8
 8005f9c:	0800a6cc 	.word	0x0800a6cc
 8005fa0:	0800a6d0 	.word	0x0800a6d0
 8005fa4:	0800a6d4 	.word	0x0800a6d4
 8005fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005faa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fac:	920a      	str	r2, [sp, #40]	; 0x28
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	dd00      	ble.n	8005fb4 <_printf_float+0x318>
 8005fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dc3c      	bgt.n	8006034 <_printf_float+0x398>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	930d      	str	r3, [sp, #52]	; 0x34
 8005fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	17db      	asrs	r3, r3, #31
 8005fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	4013      	ands	r3, r2
 8005fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	dc34      	bgt.n	8006044 <_printf_float+0x3a8>
 8005fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	db3d      	blt.n	800605e <_printf_float+0x3c2>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	07db      	lsls	r3, r3, #31
 8005fe6:	d43a      	bmi.n	800605e <_printf_float+0x3c2>
 8005fe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	1a52      	subs	r2, r2, r1
 8005ff2:	920a      	str	r2, [sp, #40]	; 0x28
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dd00      	ble.n	8005ffa <_printf_float+0x35e>
 8005ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8005ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dc36      	bgt.n	800606e <_printf_float+0x3d2>
 8006000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006002:	2500      	movs	r5, #0
 8006004:	43db      	mvns	r3, r3
 8006006:	17db      	asrs	r3, r3, #31
 8006008:	930b      	str	r3, [sp, #44]	; 0x2c
 800600a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800600c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800600e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006014:	400a      	ands	r2, r1
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	42ab      	cmp	r3, r5
 800601a:	dc00      	bgt.n	800601e <_printf_float+0x382>
 800601c:	e772      	b.n	8005f04 <_printf_float+0x268>
 800601e:	0022      	movs	r2, r4
 8006020:	2301      	movs	r3, #1
 8006022:	0038      	movs	r0, r7
 8006024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006026:	321a      	adds	r2, #26
 8006028:	47b0      	blx	r6
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	d100      	bne.n	8006030 <_printf_float+0x394>
 800602e:	e693      	b.n	8005d58 <_printf_float+0xbc>
 8006030:	3501      	adds	r5, #1
 8006032:	e7ea      	b.n	800600a <_printf_float+0x36e>
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	002a      	movs	r2, r5
 8006038:	0038      	movs	r0, r7
 800603a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800603c:	47b0      	blx	r6
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d1bb      	bne.n	8005fba <_printf_float+0x31e>
 8006042:	e689      	b.n	8005d58 <_printf_float+0xbc>
 8006044:	0022      	movs	r2, r4
 8006046:	2301      	movs	r3, #1
 8006048:	0038      	movs	r0, r7
 800604a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800604c:	321a      	adds	r2, #26
 800604e:	47b0      	blx	r6
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d100      	bne.n	8006056 <_printf_float+0x3ba>
 8006054:	e680      	b.n	8005d58 <_printf_float+0xbc>
 8006056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006058:	3301      	adds	r3, #1
 800605a:	930d      	str	r3, [sp, #52]	; 0x34
 800605c:	e7b3      	b.n	8005fc6 <_printf_float+0x32a>
 800605e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006060:	0038      	movs	r0, r7
 8006062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006066:	47b0      	blx	r6
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d1bd      	bne.n	8005fe8 <_printf_float+0x34c>
 800606c:	e674      	b.n	8005d58 <_printf_float+0xbc>
 800606e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006070:	0038      	movs	r0, r7
 8006072:	18ea      	adds	r2, r5, r3
 8006074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006078:	47b0      	blx	r6
 800607a:	1c43      	adds	r3, r0, #1
 800607c:	d1c0      	bne.n	8006000 <_printf_float+0x364>
 800607e:	e66b      	b.n	8005d58 <_printf_float+0xbc>
 8006080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006082:	2b01      	cmp	r3, #1
 8006084:	dc02      	bgt.n	800608c <_printf_float+0x3f0>
 8006086:	2301      	movs	r3, #1
 8006088:	421a      	tst	r2, r3
 800608a:	d034      	beq.n	80060f6 <_printf_float+0x45a>
 800608c:	2301      	movs	r3, #1
 800608e:	002a      	movs	r2, r5
 8006090:	0038      	movs	r0, r7
 8006092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006094:	47b0      	blx	r6
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d100      	bne.n	800609c <_printf_float+0x400>
 800609a:	e65d      	b.n	8005d58 <_printf_float+0xbc>
 800609c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800609e:	0038      	movs	r0, r7
 80060a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060a4:	47b0      	blx	r6
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d100      	bne.n	80060ac <_printf_float+0x410>
 80060aa:	e655      	b.n	8005d58 <_printf_float+0xbc>
 80060ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80060ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80060b0:	2200      	movs	r2, #0
 80060b2:	2300      	movs	r3, #0
 80060b4:	f7fa f9ca 	bl	800044c <__aeabi_dcmpeq>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d11a      	bne.n	80060f2 <_printf_float+0x456>
 80060bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060be:	1c6a      	adds	r2, r5, #1
 80060c0:	3b01      	subs	r3, #1
 80060c2:	0038      	movs	r0, r7
 80060c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c6:	47b0      	blx	r6
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d10e      	bne.n	80060ea <_printf_float+0x44e>
 80060cc:	e644      	b.n	8005d58 <_printf_float+0xbc>
 80060ce:	0022      	movs	r2, r4
 80060d0:	2301      	movs	r3, #1
 80060d2:	0038      	movs	r0, r7
 80060d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060d6:	321a      	adds	r2, #26
 80060d8:	47b0      	blx	r6
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d100      	bne.n	80060e0 <_printf_float+0x444>
 80060de:	e63b      	b.n	8005d58 <_printf_float+0xbc>
 80060e0:	3501      	adds	r5, #1
 80060e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060e4:	3b01      	subs	r3, #1
 80060e6:	42ab      	cmp	r3, r5
 80060e8:	dcf1      	bgt.n	80060ce <_printf_float+0x432>
 80060ea:	0022      	movs	r2, r4
 80060ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ee:	3250      	adds	r2, #80	; 0x50
 80060f0:	e6da      	b.n	8005ea8 <_printf_float+0x20c>
 80060f2:	2500      	movs	r5, #0
 80060f4:	e7f5      	b.n	80060e2 <_printf_float+0x446>
 80060f6:	002a      	movs	r2, r5
 80060f8:	e7e3      	b.n	80060c2 <_printf_float+0x426>
 80060fa:	0022      	movs	r2, r4
 80060fc:	2301      	movs	r3, #1
 80060fe:	0038      	movs	r0, r7
 8006100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006102:	3219      	adds	r2, #25
 8006104:	47b0      	blx	r6
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d100      	bne.n	800610c <_printf_float+0x470>
 800610a:	e625      	b.n	8005d58 <_printf_float+0xbc>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf0      	bgt.n	80060fa <_printf_float+0x45e>
 8006118:	e6f8      	b.n	8005f0c <_printf_float+0x270>
 800611a:	2500      	movs	r5, #0
 800611c:	e7f7      	b.n	800610e <_printf_float+0x472>
 800611e:	46c0      	nop			; (mov r8, r8)

08006120 <_printf_common>:
 8006120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006122:	0015      	movs	r5, r2
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	688a      	ldr	r2, [r1, #8]
 8006128:	690b      	ldr	r3, [r1, #16]
 800612a:	000c      	movs	r4, r1
 800612c:	9000      	str	r0, [sp, #0]
 800612e:	4293      	cmp	r3, r2
 8006130:	da00      	bge.n	8006134 <_printf_common+0x14>
 8006132:	0013      	movs	r3, r2
 8006134:	0022      	movs	r2, r4
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	3243      	adds	r2, #67	; 0x43
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	2a00      	cmp	r2, #0
 800613e:	d001      	beq.n	8006144 <_printf_common+0x24>
 8006140:	3301      	adds	r3, #1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	069b      	lsls	r3, r3, #26
 8006148:	d502      	bpl.n	8006150 <_printf_common+0x30>
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	3302      	adds	r3, #2
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	2306      	movs	r3, #6
 8006154:	0017      	movs	r7, r2
 8006156:	401f      	ands	r7, r3
 8006158:	421a      	tst	r2, r3
 800615a:	d027      	beq.n	80061ac <_printf_common+0x8c>
 800615c:	0023      	movs	r3, r4
 800615e:	3343      	adds	r3, #67	; 0x43
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	1e5a      	subs	r2, r3, #1
 8006164:	4193      	sbcs	r3, r2
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	0692      	lsls	r2, r2, #26
 800616a:	d430      	bmi.n	80061ce <_printf_common+0xae>
 800616c:	0022      	movs	r2, r4
 800616e:	9901      	ldr	r1, [sp, #4]
 8006170:	9800      	ldr	r0, [sp, #0]
 8006172:	9e08      	ldr	r6, [sp, #32]
 8006174:	3243      	adds	r2, #67	; 0x43
 8006176:	47b0      	blx	r6
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d025      	beq.n	80061c8 <_printf_common+0xa8>
 800617c:	2306      	movs	r3, #6
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	682a      	ldr	r2, [r5, #0]
 8006182:	68e1      	ldr	r1, [r4, #12]
 8006184:	2500      	movs	r5, #0
 8006186:	4003      	ands	r3, r0
 8006188:	2b04      	cmp	r3, #4
 800618a:	d103      	bne.n	8006194 <_printf_common+0x74>
 800618c:	1a8d      	subs	r5, r1, r2
 800618e:	43eb      	mvns	r3, r5
 8006190:	17db      	asrs	r3, r3, #31
 8006192:	401d      	ands	r5, r3
 8006194:	68a3      	ldr	r3, [r4, #8]
 8006196:	6922      	ldr	r2, [r4, #16]
 8006198:	4293      	cmp	r3, r2
 800619a:	dd01      	ble.n	80061a0 <_printf_common+0x80>
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	18ed      	adds	r5, r5, r3
 80061a0:	2700      	movs	r7, #0
 80061a2:	42bd      	cmp	r5, r7
 80061a4:	d120      	bne.n	80061e8 <_printf_common+0xc8>
 80061a6:	2000      	movs	r0, #0
 80061a8:	e010      	b.n	80061cc <_printf_common+0xac>
 80061aa:	3701      	adds	r7, #1
 80061ac:	68e3      	ldr	r3, [r4, #12]
 80061ae:	682a      	ldr	r2, [r5, #0]
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	42bb      	cmp	r3, r7
 80061b4:	ddd2      	ble.n	800615c <_printf_common+0x3c>
 80061b6:	0022      	movs	r2, r4
 80061b8:	2301      	movs	r3, #1
 80061ba:	9901      	ldr	r1, [sp, #4]
 80061bc:	9800      	ldr	r0, [sp, #0]
 80061be:	9e08      	ldr	r6, [sp, #32]
 80061c0:	3219      	adds	r2, #25
 80061c2:	47b0      	blx	r6
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d1f0      	bne.n	80061aa <_printf_common+0x8a>
 80061c8:	2001      	movs	r0, #1
 80061ca:	4240      	negs	r0, r0
 80061cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061ce:	2030      	movs	r0, #48	; 0x30
 80061d0:	18e1      	adds	r1, r4, r3
 80061d2:	3143      	adds	r1, #67	; 0x43
 80061d4:	7008      	strb	r0, [r1, #0]
 80061d6:	0021      	movs	r1, r4
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	3145      	adds	r1, #69	; 0x45
 80061dc:	7809      	ldrb	r1, [r1, #0]
 80061de:	18a2      	adds	r2, r4, r2
 80061e0:	3243      	adds	r2, #67	; 0x43
 80061e2:	3302      	adds	r3, #2
 80061e4:	7011      	strb	r1, [r2, #0]
 80061e6:	e7c1      	b.n	800616c <_printf_common+0x4c>
 80061e8:	0022      	movs	r2, r4
 80061ea:	2301      	movs	r3, #1
 80061ec:	9901      	ldr	r1, [sp, #4]
 80061ee:	9800      	ldr	r0, [sp, #0]
 80061f0:	9e08      	ldr	r6, [sp, #32]
 80061f2:	321a      	adds	r2, #26
 80061f4:	47b0      	blx	r6
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d0e6      	beq.n	80061c8 <_printf_common+0xa8>
 80061fa:	3701      	adds	r7, #1
 80061fc:	e7d1      	b.n	80061a2 <_printf_common+0x82>
	...

08006200 <_printf_i>:
 8006200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006202:	b08b      	sub	sp, #44	; 0x2c
 8006204:	9206      	str	r2, [sp, #24]
 8006206:	000a      	movs	r2, r1
 8006208:	3243      	adds	r2, #67	; 0x43
 800620a:	9307      	str	r3, [sp, #28]
 800620c:	9005      	str	r0, [sp, #20]
 800620e:	9204      	str	r2, [sp, #16]
 8006210:	7e0a      	ldrb	r2, [r1, #24]
 8006212:	000c      	movs	r4, r1
 8006214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006216:	2a78      	cmp	r2, #120	; 0x78
 8006218:	d807      	bhi.n	800622a <_printf_i+0x2a>
 800621a:	2a62      	cmp	r2, #98	; 0x62
 800621c:	d809      	bhi.n	8006232 <_printf_i+0x32>
 800621e:	2a00      	cmp	r2, #0
 8006220:	d100      	bne.n	8006224 <_printf_i+0x24>
 8006222:	e0c1      	b.n	80063a8 <_printf_i+0x1a8>
 8006224:	2a58      	cmp	r2, #88	; 0x58
 8006226:	d100      	bne.n	800622a <_printf_i+0x2a>
 8006228:	e08c      	b.n	8006344 <_printf_i+0x144>
 800622a:	0026      	movs	r6, r4
 800622c:	3642      	adds	r6, #66	; 0x42
 800622e:	7032      	strb	r2, [r6, #0]
 8006230:	e022      	b.n	8006278 <_printf_i+0x78>
 8006232:	0010      	movs	r0, r2
 8006234:	3863      	subs	r0, #99	; 0x63
 8006236:	2815      	cmp	r0, #21
 8006238:	d8f7      	bhi.n	800622a <_printf_i+0x2a>
 800623a:	f7f9 ff77 	bl	800012c <__gnu_thumb1_case_shi>
 800623e:	0016      	.short	0x0016
 8006240:	fff6001f 	.word	0xfff6001f
 8006244:	fff6fff6 	.word	0xfff6fff6
 8006248:	001ffff6 	.word	0x001ffff6
 800624c:	fff6fff6 	.word	0xfff6fff6
 8006250:	fff6fff6 	.word	0xfff6fff6
 8006254:	003600a8 	.word	0x003600a8
 8006258:	fff6009a 	.word	0xfff6009a
 800625c:	00b9fff6 	.word	0x00b9fff6
 8006260:	0036fff6 	.word	0x0036fff6
 8006264:	fff6fff6 	.word	0xfff6fff6
 8006268:	009e      	.short	0x009e
 800626a:	0026      	movs	r6, r4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	3642      	adds	r6, #66	; 0x42
 8006270:	1d11      	adds	r1, r2, #4
 8006272:	6019      	str	r1, [r3, #0]
 8006274:	6813      	ldr	r3, [r2, #0]
 8006276:	7033      	strb	r3, [r6, #0]
 8006278:	2301      	movs	r3, #1
 800627a:	e0a7      	b.n	80063cc <_printf_i+0x1cc>
 800627c:	6808      	ldr	r0, [r1, #0]
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	1d0a      	adds	r2, r1, #4
 8006282:	0605      	lsls	r5, r0, #24
 8006284:	d50b      	bpl.n	800629e <_printf_i+0x9e>
 8006286:	680d      	ldr	r5, [r1, #0]
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	2d00      	cmp	r5, #0
 800628c:	da03      	bge.n	8006296 <_printf_i+0x96>
 800628e:	232d      	movs	r3, #45	; 0x2d
 8006290:	9a04      	ldr	r2, [sp, #16]
 8006292:	426d      	negs	r5, r5
 8006294:	7013      	strb	r3, [r2, #0]
 8006296:	4b61      	ldr	r3, [pc, #388]	; (800641c <_printf_i+0x21c>)
 8006298:	270a      	movs	r7, #10
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	e01b      	b.n	80062d6 <_printf_i+0xd6>
 800629e:	680d      	ldr	r5, [r1, #0]
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	0641      	lsls	r1, r0, #25
 80062a4:	d5f1      	bpl.n	800628a <_printf_i+0x8a>
 80062a6:	b22d      	sxth	r5, r5
 80062a8:	e7ef      	b.n	800628a <_printf_i+0x8a>
 80062aa:	680d      	ldr	r5, [r1, #0]
 80062ac:	6819      	ldr	r1, [r3, #0]
 80062ae:	1d08      	adds	r0, r1, #4
 80062b0:	6018      	str	r0, [r3, #0]
 80062b2:	062e      	lsls	r6, r5, #24
 80062b4:	d501      	bpl.n	80062ba <_printf_i+0xba>
 80062b6:	680d      	ldr	r5, [r1, #0]
 80062b8:	e003      	b.n	80062c2 <_printf_i+0xc2>
 80062ba:	066d      	lsls	r5, r5, #25
 80062bc:	d5fb      	bpl.n	80062b6 <_printf_i+0xb6>
 80062be:	680d      	ldr	r5, [r1, #0]
 80062c0:	b2ad      	uxth	r5, r5
 80062c2:	4b56      	ldr	r3, [pc, #344]	; (800641c <_printf_i+0x21c>)
 80062c4:	2708      	movs	r7, #8
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	2a6f      	cmp	r2, #111	; 0x6f
 80062ca:	d000      	beq.n	80062ce <_printf_i+0xce>
 80062cc:	3702      	adds	r7, #2
 80062ce:	0023      	movs	r3, r4
 80062d0:	2200      	movs	r2, #0
 80062d2:	3343      	adds	r3, #67	; 0x43
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	6863      	ldr	r3, [r4, #4]
 80062d8:	60a3      	str	r3, [r4, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	db03      	blt.n	80062e6 <_printf_i+0xe6>
 80062de:	2204      	movs	r2, #4
 80062e0:	6821      	ldr	r1, [r4, #0]
 80062e2:	4391      	bics	r1, r2
 80062e4:	6021      	str	r1, [r4, #0]
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	d102      	bne.n	80062f0 <_printf_i+0xf0>
 80062ea:	9e04      	ldr	r6, [sp, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <_printf_i+0x10a>
 80062f0:	9e04      	ldr	r6, [sp, #16]
 80062f2:	0028      	movs	r0, r5
 80062f4:	0039      	movs	r1, r7
 80062f6:	f7f9 ffa9 	bl	800024c <__aeabi_uidivmod>
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	3e01      	subs	r6, #1
 80062fe:	5c5b      	ldrb	r3, [r3, r1]
 8006300:	7033      	strb	r3, [r6, #0]
 8006302:	002b      	movs	r3, r5
 8006304:	0005      	movs	r5, r0
 8006306:	429f      	cmp	r7, r3
 8006308:	d9f3      	bls.n	80062f2 <_printf_i+0xf2>
 800630a:	2f08      	cmp	r7, #8
 800630c:	d109      	bne.n	8006322 <_printf_i+0x122>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	07db      	lsls	r3, r3, #31
 8006312:	d506      	bpl.n	8006322 <_printf_i+0x122>
 8006314:	6863      	ldr	r3, [r4, #4]
 8006316:	6922      	ldr	r2, [r4, #16]
 8006318:	4293      	cmp	r3, r2
 800631a:	dc02      	bgt.n	8006322 <_printf_i+0x122>
 800631c:	2330      	movs	r3, #48	; 0x30
 800631e:	3e01      	subs	r6, #1
 8006320:	7033      	strb	r3, [r6, #0]
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	1b9b      	subs	r3, r3, r6
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	9b07      	ldr	r3, [sp, #28]
 800632a:	0021      	movs	r1, r4
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	9805      	ldr	r0, [sp, #20]
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	aa09      	add	r2, sp, #36	; 0x24
 8006334:	f7ff fef4 	bl	8006120 <_printf_common>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d14c      	bne.n	80063d6 <_printf_i+0x1d6>
 800633c:	2001      	movs	r0, #1
 800633e:	4240      	negs	r0, r0
 8006340:	b00b      	add	sp, #44	; 0x2c
 8006342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006344:	3145      	adds	r1, #69	; 0x45
 8006346:	700a      	strb	r2, [r1, #0]
 8006348:	4a34      	ldr	r2, [pc, #208]	; (800641c <_printf_i+0x21c>)
 800634a:	9203      	str	r2, [sp, #12]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	6821      	ldr	r1, [r4, #0]
 8006350:	ca20      	ldmia	r2!, {r5}
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	0608      	lsls	r0, r1, #24
 8006356:	d516      	bpl.n	8006386 <_printf_i+0x186>
 8006358:	07cb      	lsls	r3, r1, #31
 800635a:	d502      	bpl.n	8006362 <_printf_i+0x162>
 800635c:	2320      	movs	r3, #32
 800635e:	4319      	orrs	r1, r3
 8006360:	6021      	str	r1, [r4, #0]
 8006362:	2710      	movs	r7, #16
 8006364:	2d00      	cmp	r5, #0
 8006366:	d1b2      	bne.n	80062ce <_printf_i+0xce>
 8006368:	2320      	movs	r3, #32
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	439a      	bics	r2, r3
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	e7ad      	b.n	80062ce <_printf_i+0xce>
 8006372:	2220      	movs	r2, #32
 8006374:	6809      	ldr	r1, [r1, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	6022      	str	r2, [r4, #0]
 800637a:	0022      	movs	r2, r4
 800637c:	2178      	movs	r1, #120	; 0x78
 800637e:	3245      	adds	r2, #69	; 0x45
 8006380:	7011      	strb	r1, [r2, #0]
 8006382:	4a27      	ldr	r2, [pc, #156]	; (8006420 <_printf_i+0x220>)
 8006384:	e7e1      	b.n	800634a <_printf_i+0x14a>
 8006386:	0648      	lsls	r0, r1, #25
 8006388:	d5e6      	bpl.n	8006358 <_printf_i+0x158>
 800638a:	b2ad      	uxth	r5, r5
 800638c:	e7e4      	b.n	8006358 <_printf_i+0x158>
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	680d      	ldr	r5, [r1, #0]
 8006392:	1d10      	adds	r0, r2, #4
 8006394:	6949      	ldr	r1, [r1, #20]
 8006396:	6018      	str	r0, [r3, #0]
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	062e      	lsls	r6, r5, #24
 800639c:	d501      	bpl.n	80063a2 <_printf_i+0x1a2>
 800639e:	6019      	str	r1, [r3, #0]
 80063a0:	e002      	b.n	80063a8 <_printf_i+0x1a8>
 80063a2:	066d      	lsls	r5, r5, #25
 80063a4:	d5fb      	bpl.n	800639e <_printf_i+0x19e>
 80063a6:	8019      	strh	r1, [r3, #0]
 80063a8:	2300      	movs	r3, #0
 80063aa:	9e04      	ldr	r6, [sp, #16]
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	e7bb      	b.n	8006328 <_printf_i+0x128>
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	1d11      	adds	r1, r2, #4
 80063b4:	6019      	str	r1, [r3, #0]
 80063b6:	6816      	ldr	r6, [r2, #0]
 80063b8:	2100      	movs	r1, #0
 80063ba:	0030      	movs	r0, r6
 80063bc:	6862      	ldr	r2, [r4, #4]
 80063be:	f002 fc6a 	bl	8008c96 <memchr>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d001      	beq.n	80063ca <_printf_i+0x1ca>
 80063c6:	1b80      	subs	r0, r0, r6
 80063c8:	6060      	str	r0, [r4, #4]
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	2300      	movs	r3, #0
 80063d0:	9a04      	ldr	r2, [sp, #16]
 80063d2:	7013      	strb	r3, [r2, #0]
 80063d4:	e7a8      	b.n	8006328 <_printf_i+0x128>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	0032      	movs	r2, r6
 80063da:	9906      	ldr	r1, [sp, #24]
 80063dc:	9805      	ldr	r0, [sp, #20]
 80063de:	9d07      	ldr	r5, [sp, #28]
 80063e0:	47a8      	blx	r5
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	d0aa      	beq.n	800633c <_printf_i+0x13c>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	079b      	lsls	r3, r3, #30
 80063ea:	d415      	bmi.n	8006418 <_printf_i+0x218>
 80063ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ee:	68e0      	ldr	r0, [r4, #12]
 80063f0:	4298      	cmp	r0, r3
 80063f2:	daa5      	bge.n	8006340 <_printf_i+0x140>
 80063f4:	0018      	movs	r0, r3
 80063f6:	e7a3      	b.n	8006340 <_printf_i+0x140>
 80063f8:	0022      	movs	r2, r4
 80063fa:	2301      	movs	r3, #1
 80063fc:	9906      	ldr	r1, [sp, #24]
 80063fe:	9805      	ldr	r0, [sp, #20]
 8006400:	9e07      	ldr	r6, [sp, #28]
 8006402:	3219      	adds	r2, #25
 8006404:	47b0      	blx	r6
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d098      	beq.n	800633c <_printf_i+0x13c>
 800640a:	3501      	adds	r5, #1
 800640c:	68e3      	ldr	r3, [r4, #12]
 800640e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	42ab      	cmp	r3, r5
 8006414:	dcf0      	bgt.n	80063f8 <_printf_i+0x1f8>
 8006416:	e7e9      	b.n	80063ec <_printf_i+0x1ec>
 8006418:	2500      	movs	r5, #0
 800641a:	e7f7      	b.n	800640c <_printf_i+0x20c>
 800641c:	0800a6d6 	.word	0x0800a6d6
 8006420:	0800a6e7 	.word	0x0800a6e7

08006424 <_scanf_float>:
 8006424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006426:	b08b      	sub	sp, #44	; 0x2c
 8006428:	0015      	movs	r5, r2
 800642a:	9001      	str	r0, [sp, #4]
 800642c:	22ae      	movs	r2, #174	; 0xae
 800642e:	2000      	movs	r0, #0
 8006430:	9306      	str	r3, [sp, #24]
 8006432:	688b      	ldr	r3, [r1, #8]
 8006434:	000e      	movs	r6, r1
 8006436:	1e59      	subs	r1, r3, #1
 8006438:	0052      	lsls	r2, r2, #1
 800643a:	9005      	str	r0, [sp, #20]
 800643c:	4291      	cmp	r1, r2
 800643e:	d905      	bls.n	800644c <_scanf_float+0x28>
 8006440:	3b5e      	subs	r3, #94	; 0x5e
 8006442:	3bff      	subs	r3, #255	; 0xff
 8006444:	9305      	str	r3, [sp, #20]
 8006446:	235e      	movs	r3, #94	; 0x5e
 8006448:	33ff      	adds	r3, #255	; 0xff
 800644a:	60b3      	str	r3, [r6, #8]
 800644c:	23f0      	movs	r3, #240	; 0xf0
 800644e:	6832      	ldr	r2, [r6, #0]
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	4313      	orrs	r3, r2
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	0033      	movs	r3, r6
 8006458:	2400      	movs	r4, #0
 800645a:	331c      	adds	r3, #28
 800645c:	001f      	movs	r7, r3
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	9402      	str	r4, [sp, #8]
 8006462:	9408      	str	r4, [sp, #32]
 8006464:	9407      	str	r4, [sp, #28]
 8006466:	9400      	str	r4, [sp, #0]
 8006468:	9404      	str	r4, [sp, #16]
 800646a:	68b2      	ldr	r2, [r6, #8]
 800646c:	2a00      	cmp	r2, #0
 800646e:	d00a      	beq.n	8006486 <_scanf_float+0x62>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b4e      	cmp	r3, #78	; 0x4e
 8006476:	d844      	bhi.n	8006502 <_scanf_float+0xde>
 8006478:	0018      	movs	r0, r3
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d82c      	bhi.n	80064d8 <_scanf_float+0xb4>
 800647e:	382b      	subs	r0, #43	; 0x2b
 8006480:	b2c1      	uxtb	r1, r0
 8006482:	290e      	cmp	r1, #14
 8006484:	d92a      	bls.n	80064dc <_scanf_float+0xb8>
 8006486:	9b00      	ldr	r3, [sp, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <_scanf_float+0x70>
 800648c:	6832      	ldr	r2, [r6, #0]
 800648e:	4ba4      	ldr	r3, [pc, #656]	; (8006720 <_scanf_float+0x2fc>)
 8006490:	4013      	ands	r3, r2
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	3b01      	subs	r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d900      	bls.n	800649e <_scanf_float+0x7a>
 800649c:	e0f9      	b.n	8006692 <_scanf_float+0x26e>
 800649e:	24be      	movs	r4, #190	; 0xbe
 80064a0:	0064      	lsls	r4, r4, #1
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	429f      	cmp	r7, r3
 80064a6:	d900      	bls.n	80064aa <_scanf_float+0x86>
 80064a8:	e0e9      	b.n	800667e <_scanf_float+0x25a>
 80064aa:	2301      	movs	r3, #1
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	e185      	b.n	80067bc <_scanf_float+0x398>
 80064b0:	0018      	movs	r0, r3
 80064b2:	3861      	subs	r0, #97	; 0x61
 80064b4:	280d      	cmp	r0, #13
 80064b6:	d8e6      	bhi.n	8006486 <_scanf_float+0x62>
 80064b8:	f7f9 fe38 	bl	800012c <__gnu_thumb1_case_shi>
 80064bc:	ffe50083 	.word	0xffe50083
 80064c0:	ffe5ffe5 	.word	0xffe5ffe5
 80064c4:	00a200b6 	.word	0x00a200b6
 80064c8:	ffe5ffe5 	.word	0xffe5ffe5
 80064cc:	ffe50089 	.word	0xffe50089
 80064d0:	ffe5ffe5 	.word	0xffe5ffe5
 80064d4:	0065ffe5 	.word	0x0065ffe5
 80064d8:	3841      	subs	r0, #65	; 0x41
 80064da:	e7eb      	b.n	80064b4 <_scanf_float+0x90>
 80064dc:	280e      	cmp	r0, #14
 80064de:	d8d2      	bhi.n	8006486 <_scanf_float+0x62>
 80064e0:	f7f9 fe24 	bl	800012c <__gnu_thumb1_case_shi>
 80064e4:	ffd1004b 	.word	0xffd1004b
 80064e8:	0098004b 	.word	0x0098004b
 80064ec:	0020ffd1 	.word	0x0020ffd1
 80064f0:	00400040 	.word	0x00400040
 80064f4:	00400040 	.word	0x00400040
 80064f8:	00400040 	.word	0x00400040
 80064fc:	00400040 	.word	0x00400040
 8006500:	0040      	.short	0x0040
 8006502:	2b6e      	cmp	r3, #110	; 0x6e
 8006504:	d809      	bhi.n	800651a <_scanf_float+0xf6>
 8006506:	2b60      	cmp	r3, #96	; 0x60
 8006508:	d8d2      	bhi.n	80064b0 <_scanf_float+0x8c>
 800650a:	2b54      	cmp	r3, #84	; 0x54
 800650c:	d07d      	beq.n	800660a <_scanf_float+0x1e6>
 800650e:	2b59      	cmp	r3, #89	; 0x59
 8006510:	d1b9      	bne.n	8006486 <_scanf_float+0x62>
 8006512:	2c07      	cmp	r4, #7
 8006514:	d1b7      	bne.n	8006486 <_scanf_float+0x62>
 8006516:	2408      	movs	r4, #8
 8006518:	e02c      	b.n	8006574 <_scanf_float+0x150>
 800651a:	2b74      	cmp	r3, #116	; 0x74
 800651c:	d075      	beq.n	800660a <_scanf_float+0x1e6>
 800651e:	2b79      	cmp	r3, #121	; 0x79
 8006520:	d0f7      	beq.n	8006512 <_scanf_float+0xee>
 8006522:	e7b0      	b.n	8006486 <_scanf_float+0x62>
 8006524:	6831      	ldr	r1, [r6, #0]
 8006526:	05c8      	lsls	r0, r1, #23
 8006528:	d51c      	bpl.n	8006564 <_scanf_float+0x140>
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	4399      	bics	r1, r3
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	6031      	str	r1, [r6, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	9b05      	ldr	r3, [sp, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <_scanf_float+0x120>
 800653c:	3b01      	subs	r3, #1
 800653e:	3201      	adds	r2, #1
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	60b2      	str	r2, [r6, #8]
 8006544:	68b3      	ldr	r3, [r6, #8]
 8006546:	3b01      	subs	r3, #1
 8006548:	60b3      	str	r3, [r6, #8]
 800654a:	6933      	ldr	r3, [r6, #16]
 800654c:	3301      	adds	r3, #1
 800654e:	6133      	str	r3, [r6, #16]
 8006550:	686b      	ldr	r3, [r5, #4]
 8006552:	3b01      	subs	r3, #1
 8006554:	606b      	str	r3, [r5, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	dc00      	bgt.n	800655c <_scanf_float+0x138>
 800655a:	e086      	b.n	800666a <_scanf_float+0x246>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	3301      	adds	r3, #1
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	e782      	b.n	800646a <_scanf_float+0x46>
 8006564:	9a02      	ldr	r2, [sp, #8]
 8006566:	1912      	adds	r2, r2, r4
 8006568:	2a00      	cmp	r2, #0
 800656a:	d18c      	bne.n	8006486 <_scanf_float+0x62>
 800656c:	4a6d      	ldr	r2, [pc, #436]	; (8006724 <_scanf_float+0x300>)
 800656e:	6831      	ldr	r1, [r6, #0]
 8006570:	400a      	ands	r2, r1
 8006572:	6032      	str	r2, [r6, #0]
 8006574:	703b      	strb	r3, [r7, #0]
 8006576:	3701      	adds	r7, #1
 8006578:	e7e4      	b.n	8006544 <_scanf_float+0x120>
 800657a:	2180      	movs	r1, #128	; 0x80
 800657c:	6832      	ldr	r2, [r6, #0]
 800657e:	420a      	tst	r2, r1
 8006580:	d081      	beq.n	8006486 <_scanf_float+0x62>
 8006582:	438a      	bics	r2, r1
 8006584:	e7f5      	b.n	8006572 <_scanf_float+0x14e>
 8006586:	9a02      	ldr	r2, [sp, #8]
 8006588:	2a00      	cmp	r2, #0
 800658a:	d10f      	bne.n	80065ac <_scanf_float+0x188>
 800658c:	9a00      	ldr	r2, [sp, #0]
 800658e:	2a00      	cmp	r2, #0
 8006590:	d10f      	bne.n	80065b2 <_scanf_float+0x18e>
 8006592:	6832      	ldr	r2, [r6, #0]
 8006594:	21e0      	movs	r1, #224	; 0xe0
 8006596:	0010      	movs	r0, r2
 8006598:	00c9      	lsls	r1, r1, #3
 800659a:	4008      	ands	r0, r1
 800659c:	4288      	cmp	r0, r1
 800659e:	d108      	bne.n	80065b2 <_scanf_float+0x18e>
 80065a0:	4961      	ldr	r1, [pc, #388]	; (8006728 <_scanf_float+0x304>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	6032      	str	r2, [r6, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	e7e3      	b.n	8006574 <_scanf_float+0x150>
 80065ac:	9a02      	ldr	r2, [sp, #8]
 80065ae:	2a02      	cmp	r2, #2
 80065b0:	d059      	beq.n	8006666 <_scanf_float+0x242>
 80065b2:	2c01      	cmp	r4, #1
 80065b4:	d002      	beq.n	80065bc <_scanf_float+0x198>
 80065b6:	2c04      	cmp	r4, #4
 80065b8:	d000      	beq.n	80065bc <_scanf_float+0x198>
 80065ba:	e764      	b.n	8006486 <_scanf_float+0x62>
 80065bc:	3401      	adds	r4, #1
 80065be:	b2e4      	uxtb	r4, r4
 80065c0:	e7d8      	b.n	8006574 <_scanf_float+0x150>
 80065c2:	9a02      	ldr	r2, [sp, #8]
 80065c4:	2a01      	cmp	r2, #1
 80065c6:	d000      	beq.n	80065ca <_scanf_float+0x1a6>
 80065c8:	e75d      	b.n	8006486 <_scanf_float+0x62>
 80065ca:	2202      	movs	r2, #2
 80065cc:	e7ec      	b.n	80065a8 <_scanf_float+0x184>
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	d110      	bne.n	80065f4 <_scanf_float+0x1d0>
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	d000      	beq.n	80065da <_scanf_float+0x1b6>
 80065d8:	e758      	b.n	800648c <_scanf_float+0x68>
 80065da:	6832      	ldr	r2, [r6, #0]
 80065dc:	21e0      	movs	r1, #224	; 0xe0
 80065de:	0010      	movs	r0, r2
 80065e0:	00c9      	lsls	r1, r1, #3
 80065e2:	4008      	ands	r0, r1
 80065e4:	4288      	cmp	r0, r1
 80065e6:	d000      	beq.n	80065ea <_scanf_float+0x1c6>
 80065e8:	e754      	b.n	8006494 <_scanf_float+0x70>
 80065ea:	494f      	ldr	r1, [pc, #316]	; (8006728 <_scanf_float+0x304>)
 80065ec:	3401      	adds	r4, #1
 80065ee:	400a      	ands	r2, r1
 80065f0:	6032      	str	r2, [r6, #0]
 80065f2:	e7bf      	b.n	8006574 <_scanf_float+0x150>
 80065f4:	21fd      	movs	r1, #253	; 0xfd
 80065f6:	1ee2      	subs	r2, r4, #3
 80065f8:	420a      	tst	r2, r1
 80065fa:	d000      	beq.n	80065fe <_scanf_float+0x1da>
 80065fc:	e743      	b.n	8006486 <_scanf_float+0x62>
 80065fe:	e7dd      	b.n	80065bc <_scanf_float+0x198>
 8006600:	2c02      	cmp	r4, #2
 8006602:	d000      	beq.n	8006606 <_scanf_float+0x1e2>
 8006604:	e73f      	b.n	8006486 <_scanf_float+0x62>
 8006606:	2403      	movs	r4, #3
 8006608:	e7b4      	b.n	8006574 <_scanf_float+0x150>
 800660a:	2c06      	cmp	r4, #6
 800660c:	d000      	beq.n	8006610 <_scanf_float+0x1ec>
 800660e:	e73a      	b.n	8006486 <_scanf_float+0x62>
 8006610:	2407      	movs	r4, #7
 8006612:	e7af      	b.n	8006574 <_scanf_float+0x150>
 8006614:	6832      	ldr	r2, [r6, #0]
 8006616:	0591      	lsls	r1, r2, #22
 8006618:	d400      	bmi.n	800661c <_scanf_float+0x1f8>
 800661a:	e734      	b.n	8006486 <_scanf_float+0x62>
 800661c:	4943      	ldr	r1, [pc, #268]	; (800672c <_scanf_float+0x308>)
 800661e:	400a      	ands	r2, r1
 8006620:	6032      	str	r2, [r6, #0]
 8006622:	9a00      	ldr	r2, [sp, #0]
 8006624:	9204      	str	r2, [sp, #16]
 8006626:	e7a5      	b.n	8006574 <_scanf_float+0x150>
 8006628:	21a0      	movs	r1, #160	; 0xa0
 800662a:	2080      	movs	r0, #128	; 0x80
 800662c:	6832      	ldr	r2, [r6, #0]
 800662e:	00c9      	lsls	r1, r1, #3
 8006630:	4011      	ands	r1, r2
 8006632:	00c0      	lsls	r0, r0, #3
 8006634:	4281      	cmp	r1, r0
 8006636:	d006      	beq.n	8006646 <_scanf_float+0x222>
 8006638:	4202      	tst	r2, r0
 800663a:	d100      	bne.n	800663e <_scanf_float+0x21a>
 800663c:	e723      	b.n	8006486 <_scanf_float+0x62>
 800663e:	9900      	ldr	r1, [sp, #0]
 8006640:	2900      	cmp	r1, #0
 8006642:	d100      	bne.n	8006646 <_scanf_float+0x222>
 8006644:	e726      	b.n	8006494 <_scanf_float+0x70>
 8006646:	0591      	lsls	r1, r2, #22
 8006648:	d404      	bmi.n	8006654 <_scanf_float+0x230>
 800664a:	9900      	ldr	r1, [sp, #0]
 800664c:	9804      	ldr	r0, [sp, #16]
 800664e:	9708      	str	r7, [sp, #32]
 8006650:	1a09      	subs	r1, r1, r0
 8006652:	9107      	str	r1, [sp, #28]
 8006654:	4934      	ldr	r1, [pc, #208]	; (8006728 <_scanf_float+0x304>)
 8006656:	400a      	ands	r2, r1
 8006658:	21c0      	movs	r1, #192	; 0xc0
 800665a:	0049      	lsls	r1, r1, #1
 800665c:	430a      	orrs	r2, r1
 800665e:	6032      	str	r2, [r6, #0]
 8006660:	2200      	movs	r2, #0
 8006662:	9200      	str	r2, [sp, #0]
 8006664:	e786      	b.n	8006574 <_scanf_float+0x150>
 8006666:	2203      	movs	r2, #3
 8006668:	e79e      	b.n	80065a8 <_scanf_float+0x184>
 800666a:	23c0      	movs	r3, #192	; 0xc0
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	0029      	movs	r1, r5
 8006670:	58f3      	ldr	r3, [r6, r3]
 8006672:	9801      	ldr	r0, [sp, #4]
 8006674:	4798      	blx	r3
 8006676:	2800      	cmp	r0, #0
 8006678:	d100      	bne.n	800667c <_scanf_float+0x258>
 800667a:	e6f6      	b.n	800646a <_scanf_float+0x46>
 800667c:	e703      	b.n	8006486 <_scanf_float+0x62>
 800667e:	3f01      	subs	r7, #1
 8006680:	5933      	ldr	r3, [r6, r4]
 8006682:	002a      	movs	r2, r5
 8006684:	7839      	ldrb	r1, [r7, #0]
 8006686:	9801      	ldr	r0, [sp, #4]
 8006688:	4798      	blx	r3
 800668a:	6933      	ldr	r3, [r6, #16]
 800668c:	3b01      	subs	r3, #1
 800668e:	6133      	str	r3, [r6, #16]
 8006690:	e707      	b.n	80064a2 <_scanf_float+0x7e>
 8006692:	1e63      	subs	r3, r4, #1
 8006694:	2b06      	cmp	r3, #6
 8006696:	d80e      	bhi.n	80066b6 <_scanf_float+0x292>
 8006698:	9702      	str	r7, [sp, #8]
 800669a:	2c02      	cmp	r4, #2
 800669c:	d920      	bls.n	80066e0 <_scanf_float+0x2bc>
 800669e:	1be3      	subs	r3, r4, r7
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	9b02      	ldr	r3, [sp, #8]
 80066a6:	9a05      	ldr	r2, [sp, #20]
 80066a8:	189b      	adds	r3, r3, r2
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d827      	bhi.n	8006700 <_scanf_float+0x2dc>
 80066b0:	3c03      	subs	r4, #3
 80066b2:	b2e4      	uxtb	r4, r4
 80066b4:	1b3f      	subs	r7, r7, r4
 80066b6:	6833      	ldr	r3, [r6, #0]
 80066b8:	05da      	lsls	r2, r3, #23
 80066ba:	d554      	bpl.n	8006766 <_scanf_float+0x342>
 80066bc:	055b      	lsls	r3, r3, #21
 80066be:	d537      	bpl.n	8006730 <_scanf_float+0x30c>
 80066c0:	24be      	movs	r4, #190	; 0xbe
 80066c2:	0064      	lsls	r4, r4, #1
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	429f      	cmp	r7, r3
 80066c8:	d800      	bhi.n	80066cc <_scanf_float+0x2a8>
 80066ca:	e6ee      	b.n	80064aa <_scanf_float+0x86>
 80066cc:	3f01      	subs	r7, #1
 80066ce:	5933      	ldr	r3, [r6, r4]
 80066d0:	002a      	movs	r2, r5
 80066d2:	7839      	ldrb	r1, [r7, #0]
 80066d4:	9801      	ldr	r0, [sp, #4]
 80066d6:	4798      	blx	r3
 80066d8:	6933      	ldr	r3, [r6, #16]
 80066da:	3b01      	subs	r3, #1
 80066dc:	6133      	str	r3, [r6, #16]
 80066de:	e7f1      	b.n	80066c4 <_scanf_float+0x2a0>
 80066e0:	24be      	movs	r4, #190	; 0xbe
 80066e2:	0064      	lsls	r4, r4, #1
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	429f      	cmp	r7, r3
 80066e8:	d800      	bhi.n	80066ec <_scanf_float+0x2c8>
 80066ea:	e6de      	b.n	80064aa <_scanf_float+0x86>
 80066ec:	3f01      	subs	r7, #1
 80066ee:	5933      	ldr	r3, [r6, r4]
 80066f0:	002a      	movs	r2, r5
 80066f2:	7839      	ldrb	r1, [r7, #0]
 80066f4:	9801      	ldr	r0, [sp, #4]
 80066f6:	4798      	blx	r3
 80066f8:	6933      	ldr	r3, [r6, #16]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6133      	str	r3, [r6, #16]
 80066fe:	e7f1      	b.n	80066e4 <_scanf_float+0x2c0>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	002a      	movs	r2, r5
 8006704:	3b01      	subs	r3, #1
 8006706:	7819      	ldrb	r1, [r3, #0]
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	23be      	movs	r3, #190	; 0xbe
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	58f3      	ldr	r3, [r6, r3]
 8006710:	9801      	ldr	r0, [sp, #4]
 8006712:	9309      	str	r3, [sp, #36]	; 0x24
 8006714:	4798      	blx	r3
 8006716:	6933      	ldr	r3, [r6, #16]
 8006718:	3b01      	subs	r3, #1
 800671a:	6133      	str	r3, [r6, #16]
 800671c:	e7c2      	b.n	80066a4 <_scanf_float+0x280>
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	fffffeff 	.word	0xfffffeff
 8006724:	fffffe7f 	.word	0xfffffe7f
 8006728:	fffff87f 	.word	0xfffff87f
 800672c:	fffffd7f 	.word	0xfffffd7f
 8006730:	6933      	ldr	r3, [r6, #16]
 8006732:	1e7c      	subs	r4, r7, #1
 8006734:	7821      	ldrb	r1, [r4, #0]
 8006736:	3b01      	subs	r3, #1
 8006738:	6133      	str	r3, [r6, #16]
 800673a:	2965      	cmp	r1, #101	; 0x65
 800673c:	d00c      	beq.n	8006758 <_scanf_float+0x334>
 800673e:	2945      	cmp	r1, #69	; 0x45
 8006740:	d00a      	beq.n	8006758 <_scanf_float+0x334>
 8006742:	23be      	movs	r3, #190	; 0xbe
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	58f3      	ldr	r3, [r6, r3]
 8006748:	002a      	movs	r2, r5
 800674a:	9801      	ldr	r0, [sp, #4]
 800674c:	4798      	blx	r3
 800674e:	6933      	ldr	r3, [r6, #16]
 8006750:	1ebc      	subs	r4, r7, #2
 8006752:	3b01      	subs	r3, #1
 8006754:	7821      	ldrb	r1, [r4, #0]
 8006756:	6133      	str	r3, [r6, #16]
 8006758:	23be      	movs	r3, #190	; 0xbe
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	002a      	movs	r2, r5
 800675e:	58f3      	ldr	r3, [r6, r3]
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	4798      	blx	r3
 8006764:	0027      	movs	r7, r4
 8006766:	6832      	ldr	r2, [r6, #0]
 8006768:	2310      	movs	r3, #16
 800676a:	0011      	movs	r1, r2
 800676c:	4019      	ands	r1, r3
 800676e:	9102      	str	r1, [sp, #8]
 8006770:	421a      	tst	r2, r3
 8006772:	d158      	bne.n	8006826 <_scanf_float+0x402>
 8006774:	23c0      	movs	r3, #192	; 0xc0
 8006776:	7039      	strb	r1, [r7, #0]
 8006778:	6832      	ldr	r2, [r6, #0]
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	4013      	ands	r3, r2
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	00d2      	lsls	r2, r2, #3
 8006782:	4293      	cmp	r3, r2
 8006784:	d11d      	bne.n	80067c2 <_scanf_float+0x39e>
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	9a00      	ldr	r2, [sp, #0]
 800678a:	9900      	ldr	r1, [sp, #0]
 800678c:	1a9a      	subs	r2, r3, r2
 800678e:	428b      	cmp	r3, r1
 8006790:	d124      	bne.n	80067dc <_scanf_float+0x3b8>
 8006792:	2200      	movs	r2, #0
 8006794:	9903      	ldr	r1, [sp, #12]
 8006796:	9801      	ldr	r0, [sp, #4]
 8006798:	f000 feae 	bl	80074f8 <_strtod_r>
 800679c:	9b06      	ldr	r3, [sp, #24]
 800679e:	000d      	movs	r5, r1
 80067a0:	6831      	ldr	r1, [r6, #0]
 80067a2:	0004      	movs	r4, r0
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	078a      	lsls	r2, r1, #30
 80067a8:	d525      	bpl.n	80067f6 <_scanf_float+0x3d2>
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	9906      	ldr	r1, [sp, #24]
 80067ae:	600a      	str	r2, [r1, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	601c      	str	r4, [r3, #0]
 80067b4:	605d      	str	r5, [r3, #4]
 80067b6:	68f3      	ldr	r3, [r6, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60f3      	str	r3, [r6, #12]
 80067bc:	9802      	ldr	r0, [sp, #8]
 80067be:	b00b      	add	sp, #44	; 0x2c
 80067c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c2:	9b07      	ldr	r3, [sp, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0e4      	beq.n	8006792 <_scanf_float+0x36e>
 80067c8:	9b08      	ldr	r3, [sp, #32]
 80067ca:	9a02      	ldr	r2, [sp, #8]
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	9801      	ldr	r0, [sp, #4]
 80067d0:	230a      	movs	r3, #10
 80067d2:	f000 ff27 	bl	8007624 <_strtol_r>
 80067d6:	9b07      	ldr	r3, [sp, #28]
 80067d8:	9f08      	ldr	r7, [sp, #32]
 80067da:	1ac2      	subs	r2, r0, r3
 80067dc:	0033      	movs	r3, r6
 80067de:	3370      	adds	r3, #112	; 0x70
 80067e0:	33ff      	adds	r3, #255	; 0xff
 80067e2:	429f      	cmp	r7, r3
 80067e4:	d302      	bcc.n	80067ec <_scanf_float+0x3c8>
 80067e6:	0037      	movs	r7, r6
 80067e8:	376f      	adds	r7, #111	; 0x6f
 80067ea:	37ff      	adds	r7, #255	; 0xff
 80067ec:	0038      	movs	r0, r7
 80067ee:	490f      	ldr	r1, [pc, #60]	; (800682c <_scanf_float+0x408>)
 80067f0:	f000 f836 	bl	8006860 <siprintf>
 80067f4:	e7cd      	b.n	8006792 <_scanf_float+0x36e>
 80067f6:	1d1a      	adds	r2, r3, #4
 80067f8:	0749      	lsls	r1, r1, #29
 80067fa:	d4d7      	bmi.n	80067ac <_scanf_float+0x388>
 80067fc:	9906      	ldr	r1, [sp, #24]
 80067fe:	0020      	movs	r0, r4
 8006800:	600a      	str	r2, [r1, #0]
 8006802:	681f      	ldr	r7, [r3, #0]
 8006804:	0022      	movs	r2, r4
 8006806:	002b      	movs	r3, r5
 8006808:	0029      	movs	r1, r5
 800680a:	f7fb fbf9 	bl	8002000 <__aeabi_dcmpun>
 800680e:	2800      	cmp	r0, #0
 8006810:	d004      	beq.n	800681c <_scanf_float+0x3f8>
 8006812:	4807      	ldr	r0, [pc, #28]	; (8006830 <_scanf_float+0x40c>)
 8006814:	f000 f820 	bl	8006858 <nanf>
 8006818:	6038      	str	r0, [r7, #0]
 800681a:	e7cc      	b.n	80067b6 <_scanf_float+0x392>
 800681c:	0020      	movs	r0, r4
 800681e:	0029      	movs	r1, r5
 8006820:	f7fb fc98 	bl	8002154 <__aeabi_d2f>
 8006824:	e7f8      	b.n	8006818 <_scanf_float+0x3f4>
 8006826:	2300      	movs	r3, #0
 8006828:	e640      	b.n	80064ac <_scanf_float+0x88>
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	0800a6f8 	.word	0x0800a6f8
 8006830:	0800ab68 	.word	0x0800ab68

08006834 <_sbrk_r>:
 8006834:	2300      	movs	r3, #0
 8006836:	b570      	push	{r4, r5, r6, lr}
 8006838:	4d06      	ldr	r5, [pc, #24]	; (8006854 <_sbrk_r+0x20>)
 800683a:	0004      	movs	r4, r0
 800683c:	0008      	movs	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fc fdba 	bl	80033b8 <_sbrk>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d103      	bne.n	8006850 <_sbrk_r+0x1c>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d000      	beq.n	8006850 <_sbrk_r+0x1c>
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	200005ac 	.word	0x200005ac

08006858 <nanf>:
 8006858:	4800      	ldr	r0, [pc, #0]	; (800685c <nanf+0x4>)
 800685a:	4770      	bx	lr
 800685c:	7fc00000 	.word	0x7fc00000

08006860 <siprintf>:
 8006860:	b40e      	push	{r1, r2, r3}
 8006862:	b500      	push	{lr}
 8006864:	490b      	ldr	r1, [pc, #44]	; (8006894 <siprintf+0x34>)
 8006866:	b09c      	sub	sp, #112	; 0x70
 8006868:	ab1d      	add	r3, sp, #116	; 0x74
 800686a:	9002      	str	r0, [sp, #8]
 800686c:	9006      	str	r0, [sp, #24]
 800686e:	9107      	str	r1, [sp, #28]
 8006870:	9104      	str	r1, [sp, #16]
 8006872:	4809      	ldr	r0, [pc, #36]	; (8006898 <siprintf+0x38>)
 8006874:	4909      	ldr	r1, [pc, #36]	; (800689c <siprintf+0x3c>)
 8006876:	cb04      	ldmia	r3!, {r2}
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	a902      	add	r1, sp, #8
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	f002 ff86 	bl	8009790 <_svfiprintf_r>
 8006884:	2300      	movs	r3, #0
 8006886:	9a02      	ldr	r2, [sp, #8]
 8006888:	7013      	strb	r3, [r2, #0]
 800688a:	b01c      	add	sp, #112	; 0x70
 800688c:	bc08      	pop	{r3}
 800688e:	b003      	add	sp, #12
 8006890:	4718      	bx	r3
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	7fffffff 	.word	0x7fffffff
 8006898:	20000024 	.word	0x20000024
 800689c:	ffff0208 	.word	0xffff0208

080068a0 <sulp>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	0016      	movs	r6, r2
 80068a4:	000d      	movs	r5, r1
 80068a6:	f002 fd9f 	bl	80093e8 <__ulp>
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	d00d      	beq.n	80068ca <sulp+0x2a>
 80068ae:	236b      	movs	r3, #107	; 0x6b
 80068b0:	006a      	lsls	r2, r5, #1
 80068b2:	0d52      	lsrs	r2, r2, #21
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd07      	ble.n	80068ca <sulp+0x2a>
 80068ba:	2400      	movs	r4, #0
 80068bc:	4a03      	ldr	r2, [pc, #12]	; (80068cc <sulp+0x2c>)
 80068be:	051b      	lsls	r3, r3, #20
 80068c0:	189d      	adds	r5, r3, r2
 80068c2:	002b      	movs	r3, r5
 80068c4:	0022      	movs	r2, r4
 80068c6:	f7fa fd9d 	bl	8001404 <__aeabi_dmul>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	3ff00000 	.word	0x3ff00000

080068d0 <_strtod_l>:
 80068d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d2:	001d      	movs	r5, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	b0a5      	sub	sp, #148	; 0x94
 80068d8:	9320      	str	r3, [sp, #128]	; 0x80
 80068da:	4bac      	ldr	r3, [pc, #688]	; (8006b8c <_strtod_l+0x2bc>)
 80068dc:	9005      	str	r0, [sp, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	9108      	str	r1, [sp, #32]
 80068e2:	0018      	movs	r0, r3
 80068e4:	9307      	str	r3, [sp, #28]
 80068e6:	921b      	str	r2, [sp, #108]	; 0x6c
 80068e8:	f7f9 fc0e 	bl	8000108 <strlen>
 80068ec:	2600      	movs	r6, #0
 80068ee:	0004      	movs	r4, r0
 80068f0:	2700      	movs	r7, #0
 80068f2:	9b08      	ldr	r3, [sp, #32]
 80068f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80068f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80068f8:	7813      	ldrb	r3, [r2, #0]
 80068fa:	2b2b      	cmp	r3, #43	; 0x2b
 80068fc:	d058      	beq.n	80069b0 <_strtod_l+0xe0>
 80068fe:	d844      	bhi.n	800698a <_strtod_l+0xba>
 8006900:	2b0d      	cmp	r3, #13
 8006902:	d83d      	bhi.n	8006980 <_strtod_l+0xb0>
 8006904:	2b08      	cmp	r3, #8
 8006906:	d83d      	bhi.n	8006984 <_strtod_l+0xb4>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d047      	beq.n	800699c <_strtod_l+0xcc>
 800690c:	2300      	movs	r3, #0
 800690e:	930e      	str	r3, [sp, #56]	; 0x38
 8006910:	2200      	movs	r2, #0
 8006912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006914:	920a      	str	r2, [sp, #40]	; 0x28
 8006916:	9306      	str	r3, [sp, #24]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b30      	cmp	r3, #48	; 0x30
 800691c:	d000      	beq.n	8006920 <_strtod_l+0x50>
 800691e:	e07f      	b.n	8006a20 <_strtod_l+0x150>
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	3220      	adds	r2, #32
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	4393      	bics	r3, r2
 8006928:	2b58      	cmp	r3, #88	; 0x58
 800692a:	d000      	beq.n	800692e <_strtod_l+0x5e>
 800692c:	e06e      	b.n	8006a0c <_strtod_l+0x13c>
 800692e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006930:	9502      	str	r5, [sp, #8]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	ab20      	add	r3, sp, #128	; 0x80
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4a95      	ldr	r2, [pc, #596]	; (8006b90 <_strtod_l+0x2c0>)
 800693a:	ab21      	add	r3, sp, #132	; 0x84
 800693c:	9805      	ldr	r0, [sp, #20]
 800693e:	a91f      	add	r1, sp, #124	; 0x7c
 8006940:	f001 fe86 	bl	8008650 <__gethex>
 8006944:	2307      	movs	r3, #7
 8006946:	0005      	movs	r5, r0
 8006948:	0004      	movs	r4, r0
 800694a:	401d      	ands	r5, r3
 800694c:	4218      	tst	r0, r3
 800694e:	d006      	beq.n	800695e <_strtod_l+0x8e>
 8006950:	2d06      	cmp	r5, #6
 8006952:	d12f      	bne.n	80069b4 <_strtod_l+0xe4>
 8006954:	9b06      	ldr	r3, [sp, #24]
 8006956:	3301      	adds	r3, #1
 8006958:	931f      	str	r3, [sp, #124]	; 0x7c
 800695a:	2300      	movs	r3, #0
 800695c:	930e      	str	r3, [sp, #56]	; 0x38
 800695e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <_strtod_l+0x9a>
 8006964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006966:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01c      	beq.n	80069aa <_strtod_l+0xda>
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	0032      	movs	r2, r6
 8006974:	061b      	lsls	r3, r3, #24
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	0010      	movs	r0, r2
 800697a:	0019      	movs	r1, r3
 800697c:	b025      	add	sp, #148	; 0x94
 800697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006980:	2b20      	cmp	r3, #32
 8006982:	d1c3      	bne.n	800690c <_strtod_l+0x3c>
 8006984:	3201      	adds	r2, #1
 8006986:	921f      	str	r2, [sp, #124]	; 0x7c
 8006988:	e7b5      	b.n	80068f6 <_strtod_l+0x26>
 800698a:	2b2d      	cmp	r3, #45	; 0x2d
 800698c:	d1be      	bne.n	800690c <_strtod_l+0x3c>
 800698e:	3b2c      	subs	r3, #44	; 0x2c
 8006990:	930e      	str	r3, [sp, #56]	; 0x38
 8006992:	1c53      	adds	r3, r2, #1
 8006994:	931f      	str	r3, [sp, #124]	; 0x7c
 8006996:	7853      	ldrb	r3, [r2, #1]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1b9      	bne.n	8006910 <_strtod_l+0x40>
 800699c:	9b08      	ldr	r3, [sp, #32]
 800699e:	931f      	str	r3, [sp, #124]	; 0x7c
 80069a0:	2300      	movs	r3, #0
 80069a2:	930e      	str	r3, [sp, #56]	; 0x38
 80069a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1dc      	bne.n	8006964 <_strtod_l+0x94>
 80069aa:	0032      	movs	r2, r6
 80069ac:	003b      	movs	r3, r7
 80069ae:	e7e3      	b.n	8006978 <_strtod_l+0xa8>
 80069b0:	2300      	movs	r3, #0
 80069b2:	e7ed      	b.n	8006990 <_strtod_l+0xc0>
 80069b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	d007      	beq.n	80069ca <_strtod_l+0xfa>
 80069ba:	2135      	movs	r1, #53	; 0x35
 80069bc:	a822      	add	r0, sp, #136	; 0x88
 80069be:	f002 fe14 	bl	80095ea <__copybits>
 80069c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80069c4:	9805      	ldr	r0, [sp, #20]
 80069c6:	f002 f9cf 	bl	8008d68 <_Bfree>
 80069ca:	1e68      	subs	r0, r5, #1
 80069cc:	2804      	cmp	r0, #4
 80069ce:	d806      	bhi.n	80069de <_strtod_l+0x10e>
 80069d0:	f7f9 fba2 	bl	8000118 <__gnu_thumb1_case_uqi>
 80069d4:	1816030b 	.word	0x1816030b
 80069d8:	0b          	.byte	0x0b
 80069d9:	00          	.byte	0x00
 80069da:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80069dc:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80069de:	0723      	lsls	r3, r4, #28
 80069e0:	d5bd      	bpl.n	800695e <_strtod_l+0x8e>
 80069e2:	2380      	movs	r3, #128	; 0x80
 80069e4:	061b      	lsls	r3, r3, #24
 80069e6:	431f      	orrs	r7, r3
 80069e8:	e7b9      	b.n	800695e <_strtod_l+0x8e>
 80069ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069ec:	4a69      	ldr	r2, [pc, #420]	; (8006b94 <_strtod_l+0x2c4>)
 80069ee:	496a      	ldr	r1, [pc, #424]	; (8006b98 <_strtod_l+0x2c8>)
 80069f0:	401a      	ands	r2, r3
 80069f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80069f6:	185b      	adds	r3, r3, r1
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	431a      	orrs	r2, r3
 80069fc:	0017      	movs	r7, r2
 80069fe:	e7ee      	b.n	80069de <_strtod_l+0x10e>
 8006a00:	4f66      	ldr	r7, [pc, #408]	; (8006b9c <_strtod_l+0x2cc>)
 8006a02:	e7ec      	b.n	80069de <_strtod_l+0x10e>
 8006a04:	2601      	movs	r6, #1
 8006a06:	4f66      	ldr	r7, [pc, #408]	; (8006ba0 <_strtod_l+0x2d0>)
 8006a08:	4276      	negs	r6, r6
 8006a0a:	e7e8      	b.n	80069de <_strtod_l+0x10e>
 8006a0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	921f      	str	r2, [sp, #124]	; 0x7c
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d0f9      	beq.n	8006a0c <_strtod_l+0x13c>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0a0      	beq.n	800695e <_strtod_l+0x8e>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a22:	220a      	movs	r2, #10
 8006a24:	9310      	str	r3, [sp, #64]	; 0x40
 8006a26:	2300      	movs	r3, #0
 8006a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006a30:	7805      	ldrb	r5, [r0, #0]
 8006a32:	002b      	movs	r3, r5
 8006a34:	3b30      	subs	r3, #48	; 0x30
 8006a36:	b2d9      	uxtb	r1, r3
 8006a38:	2909      	cmp	r1, #9
 8006a3a:	d927      	bls.n	8006a8c <_strtod_l+0x1bc>
 8006a3c:	0022      	movs	r2, r4
 8006a3e:	9907      	ldr	r1, [sp, #28]
 8006a40:	f003 f95a 	bl	8009cf8 <strncmp>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d033      	beq.n	8006ab0 <_strtod_l+0x1e0>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	002b      	movs	r3, r5
 8006a4c:	4684      	mov	ip, r0
 8006a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a50:	900c      	str	r0, [sp, #48]	; 0x30
 8006a52:	9206      	str	r2, [sp, #24]
 8006a54:	2220      	movs	r2, #32
 8006a56:	0019      	movs	r1, r3
 8006a58:	4391      	bics	r1, r2
 8006a5a:	000a      	movs	r2, r1
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	9107      	str	r1, [sp, #28]
 8006a60:	2a45      	cmp	r2, #69	; 0x45
 8006a62:	d000      	beq.n	8006a66 <_strtod_l+0x196>
 8006a64:	e0c5      	b.n	8006bf2 <_strtod_l+0x322>
 8006a66:	9b06      	ldr	r3, [sp, #24]
 8006a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a6a:	4303      	orrs	r3, r0
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	428b      	cmp	r3, r1
 8006a70:	d094      	beq.n	800699c <_strtod_l+0xcc>
 8006a72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a74:	9308      	str	r3, [sp, #32]
 8006a76:	3301      	adds	r3, #1
 8006a78:	931f      	str	r3, [sp, #124]	; 0x7c
 8006a7a:	9b08      	ldr	r3, [sp, #32]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b2b      	cmp	r3, #43	; 0x2b
 8006a80:	d076      	beq.n	8006b70 <_strtod_l+0x2a0>
 8006a82:	000c      	movs	r4, r1
 8006a84:	2b2d      	cmp	r3, #45	; 0x2d
 8006a86:	d179      	bne.n	8006b7c <_strtod_l+0x2ac>
 8006a88:	2401      	movs	r4, #1
 8006a8a:	e072      	b.n	8006b72 <_strtod_l+0x2a2>
 8006a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a8e:	2908      	cmp	r1, #8
 8006a90:	dc09      	bgt.n	8006aa6 <_strtod_l+0x1d6>
 8006a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a94:	4351      	muls	r1, r2
 8006a96:	185b      	adds	r3, r3, r1
 8006a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa2:	901f      	str	r0, [sp, #124]	; 0x7c
 8006aa4:	e7c3      	b.n	8006a2e <_strtod_l+0x15e>
 8006aa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006aa8:	4351      	muls	r1, r2
 8006aaa:	185b      	adds	r3, r3, r1
 8006aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aae:	e7f4      	b.n	8006a9a <_strtod_l+0x1ca>
 8006ab0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab4:	191c      	adds	r4, r3, r4
 8006ab6:	941f      	str	r4, [sp, #124]	; 0x7c
 8006ab8:	7823      	ldrb	r3, [r4, #0]
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	d039      	beq.n	8006b32 <_strtod_l+0x262>
 8006abe:	900c      	str	r0, [sp, #48]	; 0x30
 8006ac0:	9206      	str	r2, [sp, #24]
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	3a30      	subs	r2, #48	; 0x30
 8006ac6:	2a09      	cmp	r2, #9
 8006ac8:	d912      	bls.n	8006af0 <_strtod_l+0x220>
 8006aca:	2201      	movs	r2, #1
 8006acc:	4694      	mov	ip, r2
 8006ace:	e7c1      	b.n	8006a54 <_strtod_l+0x184>
 8006ad0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b30      	cmp	r3, #48	; 0x30
 8006adc:	d0f8      	beq.n	8006ad0 <_strtod_l+0x200>
 8006ade:	001a      	movs	r2, r3
 8006ae0:	3a31      	subs	r2, #49	; 0x31
 8006ae2:	2a08      	cmp	r2, #8
 8006ae4:	d83f      	bhi.n	8006b66 <_strtod_l+0x296>
 8006ae6:	900c      	str	r0, [sp, #48]	; 0x30
 8006ae8:	2000      	movs	r0, #0
 8006aea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006aec:	9006      	str	r0, [sp, #24]
 8006aee:	9210      	str	r2, [sp, #64]	; 0x40
 8006af0:	001a      	movs	r2, r3
 8006af2:	1c41      	adds	r1, r0, #1
 8006af4:	3a30      	subs	r2, #48	; 0x30
 8006af6:	2b30      	cmp	r3, #48	; 0x30
 8006af8:	d015      	beq.n	8006b26 <_strtod_l+0x256>
 8006afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afc:	185b      	adds	r3, r3, r1
 8006afe:	210a      	movs	r1, #10
 8006b00:	930c      	str	r3, [sp, #48]	; 0x30
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	18c4      	adds	r4, r0, r3
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	d115      	bne.n	8006b36 <_strtod_l+0x266>
 8006b0a:	9906      	ldr	r1, [sp, #24]
 8006b0c:	9b06      	ldr	r3, [sp, #24]
 8006b0e:	3101      	adds	r1, #1
 8006b10:	1809      	adds	r1, r1, r0
 8006b12:	181b      	adds	r3, r3, r0
 8006b14:	9106      	str	r1, [sp, #24]
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	dc1b      	bgt.n	8006b52 <_strtod_l+0x282>
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b1e:	434b      	muls	r3, r1
 8006b20:	2100      	movs	r1, #0
 8006b22:	18d3      	adds	r3, r2, r3
 8006b24:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b28:	0008      	movs	r0, r1
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	921f      	str	r2, [sp, #124]	; 0x7c
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	e7c7      	b.n	8006ac2 <_strtod_l+0x1f2>
 8006b32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b34:	e7d1      	b.n	8006ada <_strtod_l+0x20a>
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	dc04      	bgt.n	8006b44 <_strtod_l+0x274>
 8006b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006b3c:	434d      	muls	r5, r1
 8006b3e:	950b      	str	r5, [sp, #44]	; 0x2c
 8006b40:	3301      	adds	r3, #1
 8006b42:	e7e0      	b.n	8006b06 <_strtod_l+0x236>
 8006b44:	1c5d      	adds	r5, r3, #1
 8006b46:	2d10      	cmp	r5, #16
 8006b48:	dcfa      	bgt.n	8006b40 <_strtod_l+0x270>
 8006b4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b4c:	434d      	muls	r5, r1
 8006b4e:	950f      	str	r5, [sp, #60]	; 0x3c
 8006b50:	e7f6      	b.n	8006b40 <_strtod_l+0x270>
 8006b52:	9b06      	ldr	r3, [sp, #24]
 8006b54:	2100      	movs	r1, #0
 8006b56:	2b10      	cmp	r3, #16
 8006b58:	dce5      	bgt.n	8006b26 <_strtod_l+0x256>
 8006b5a:	230a      	movs	r3, #10
 8006b5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006b5e:	4343      	muls	r3, r0
 8006b60:	18d3      	adds	r3, r2, r3
 8006b62:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b64:	e7df      	b.n	8006b26 <_strtod_l+0x256>
 8006b66:	2200      	movs	r2, #0
 8006b68:	920c      	str	r2, [sp, #48]	; 0x30
 8006b6a:	9206      	str	r2, [sp, #24]
 8006b6c:	3201      	adds	r2, #1
 8006b6e:	e7ad      	b.n	8006acc <_strtod_l+0x1fc>
 8006b70:	2400      	movs	r4, #0
 8006b72:	9b08      	ldr	r3, [sp, #32]
 8006b74:	3302      	adds	r3, #2
 8006b76:	931f      	str	r3, [sp, #124]	; 0x7c
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	789b      	ldrb	r3, [r3, #2]
 8006b7c:	001a      	movs	r2, r3
 8006b7e:	3a30      	subs	r2, #48	; 0x30
 8006b80:	2a09      	cmp	r2, #9
 8006b82:	d913      	bls.n	8006bac <_strtod_l+0x2dc>
 8006b84:	9a08      	ldr	r2, [sp, #32]
 8006b86:	921f      	str	r2, [sp, #124]	; 0x7c
 8006b88:	2200      	movs	r2, #0
 8006b8a:	e031      	b.n	8006bf0 <_strtod_l+0x320>
 8006b8c:	0800a9ac 	.word	0x0800a9ac
 8006b90:	0800a700 	.word	0x0800a700
 8006b94:	ffefffff 	.word	0xffefffff
 8006b98:	00000433 	.word	0x00000433
 8006b9c:	7ff00000 	.word	0x7ff00000
 8006ba0:	7fffffff 	.word	0x7fffffff
 8006ba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	921f      	str	r2, [sp, #124]	; 0x7c
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b30      	cmp	r3, #48	; 0x30
 8006bae:	d0f9      	beq.n	8006ba4 <_strtod_l+0x2d4>
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	9207      	str	r2, [sp, #28]
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	3a31      	subs	r2, #49	; 0x31
 8006bb8:	2a08      	cmp	r2, #8
 8006bba:	d81a      	bhi.n	8006bf2 <_strtod_l+0x322>
 8006bbc:	3b30      	subs	r3, #48	; 0x30
 8006bbe:	001a      	movs	r2, r3
 8006bc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	911f      	str	r1, [sp, #124]	; 0x7c
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	001d      	movs	r5, r3
 8006bce:	3d30      	subs	r5, #48	; 0x30
 8006bd0:	2d09      	cmp	r5, #9
 8006bd2:	d939      	bls.n	8006c48 <_strtod_l+0x378>
 8006bd4:	9d07      	ldr	r5, [sp, #28]
 8006bd6:	1b49      	subs	r1, r1, r5
 8006bd8:	4db0      	ldr	r5, [pc, #704]	; (8006e9c <_strtod_l+0x5cc>)
 8006bda:	9507      	str	r5, [sp, #28]
 8006bdc:	2908      	cmp	r1, #8
 8006bde:	dc03      	bgt.n	8006be8 <_strtod_l+0x318>
 8006be0:	9207      	str	r2, [sp, #28]
 8006be2:	42aa      	cmp	r2, r5
 8006be4:	dd00      	ble.n	8006be8 <_strtod_l+0x318>
 8006be6:	9507      	str	r5, [sp, #28]
 8006be8:	2c00      	cmp	r4, #0
 8006bea:	d002      	beq.n	8006bf2 <_strtod_l+0x322>
 8006bec:	9a07      	ldr	r2, [sp, #28]
 8006bee:	4252      	negs	r2, r2
 8006bf0:	9207      	str	r2, [sp, #28]
 8006bf2:	9a06      	ldr	r2, [sp, #24]
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d14b      	bne.n	8006c90 <_strtod_l+0x3c0>
 8006bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bfa:	4310      	orrs	r0, r2
 8006bfc:	d000      	beq.n	8006c00 <_strtod_l+0x330>
 8006bfe:	e6ae      	b.n	800695e <_strtod_l+0x8e>
 8006c00:	4662      	mov	r2, ip
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d000      	beq.n	8006c08 <_strtod_l+0x338>
 8006c06:	e6c9      	b.n	800699c <_strtod_l+0xcc>
 8006c08:	2b69      	cmp	r3, #105	; 0x69
 8006c0a:	d025      	beq.n	8006c58 <_strtod_l+0x388>
 8006c0c:	dc21      	bgt.n	8006c52 <_strtod_l+0x382>
 8006c0e:	2b49      	cmp	r3, #73	; 0x49
 8006c10:	d022      	beq.n	8006c58 <_strtod_l+0x388>
 8006c12:	2b4e      	cmp	r3, #78	; 0x4e
 8006c14:	d000      	beq.n	8006c18 <_strtod_l+0x348>
 8006c16:	e6c1      	b.n	800699c <_strtod_l+0xcc>
 8006c18:	49a1      	ldr	r1, [pc, #644]	; (8006ea0 <_strtod_l+0x5d0>)
 8006c1a:	a81f      	add	r0, sp, #124	; 0x7c
 8006c1c:	f001 ff66 	bl	8008aec <__match>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d100      	bne.n	8006c26 <_strtod_l+0x356>
 8006c24:	e6ba      	b.n	800699c <_strtod_l+0xcc>
 8006c26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b28      	cmp	r3, #40	; 0x28
 8006c2c:	d12a      	bne.n	8006c84 <_strtod_l+0x3b4>
 8006c2e:	499d      	ldr	r1, [pc, #628]	; (8006ea4 <_strtod_l+0x5d4>)
 8006c30:	aa22      	add	r2, sp, #136	; 0x88
 8006c32:	a81f      	add	r0, sp, #124	; 0x7c
 8006c34:	f001 ff6e 	bl	8008b14 <__hexnan>
 8006c38:	2805      	cmp	r0, #5
 8006c3a:	d123      	bne.n	8006c84 <_strtod_l+0x3b4>
 8006c3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c3e:	4a9a      	ldr	r2, [pc, #616]	; (8006ea8 <_strtod_l+0x5d8>)
 8006c40:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006c42:	431a      	orrs	r2, r3
 8006c44:	0017      	movs	r7, r2
 8006c46:	e68a      	b.n	800695e <_strtod_l+0x8e>
 8006c48:	210a      	movs	r1, #10
 8006c4a:	434a      	muls	r2, r1
 8006c4c:	18d2      	adds	r2, r2, r3
 8006c4e:	3a30      	subs	r2, #48	; 0x30
 8006c50:	e7b8      	b.n	8006bc4 <_strtod_l+0x2f4>
 8006c52:	2b6e      	cmp	r3, #110	; 0x6e
 8006c54:	d0e0      	beq.n	8006c18 <_strtod_l+0x348>
 8006c56:	e6a1      	b.n	800699c <_strtod_l+0xcc>
 8006c58:	4994      	ldr	r1, [pc, #592]	; (8006eac <_strtod_l+0x5dc>)
 8006c5a:	a81f      	add	r0, sp, #124	; 0x7c
 8006c5c:	f001 ff46 	bl	8008aec <__match>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d100      	bne.n	8006c66 <_strtod_l+0x396>
 8006c64:	e69a      	b.n	800699c <_strtod_l+0xcc>
 8006c66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c68:	4991      	ldr	r1, [pc, #580]	; (8006eb0 <_strtod_l+0x5e0>)
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	a81f      	add	r0, sp, #124	; 0x7c
 8006c6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8006c70:	f001 ff3c 	bl	8008aec <__match>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d102      	bne.n	8006c7e <_strtod_l+0x3ae>
 8006c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006c7e:	2600      	movs	r6, #0
 8006c80:	4f89      	ldr	r7, [pc, #548]	; (8006ea8 <_strtod_l+0x5d8>)
 8006c82:	e66c      	b.n	800695e <_strtod_l+0x8e>
 8006c84:	488b      	ldr	r0, [pc, #556]	; (8006eb4 <_strtod_l+0x5e4>)
 8006c86:	f002 ffe5 	bl	8009c54 <nan>
 8006c8a:	0006      	movs	r6, r0
 8006c8c:	000f      	movs	r7, r1
 8006c8e:	e666      	b.n	800695e <_strtod_l+0x8e>
 8006c90:	9b07      	ldr	r3, [sp, #28]
 8006c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	930a      	str	r3, [sp, #40]	; 0x28
 8006c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <_strtod_l+0x3d2>
 8006c9e:	9b06      	ldr	r3, [sp, #24]
 8006ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca2:	9c06      	ldr	r4, [sp, #24]
 8006ca4:	2c10      	cmp	r4, #16
 8006ca6:	dd00      	ble.n	8006caa <_strtod_l+0x3da>
 8006ca8:	2410      	movs	r4, #16
 8006caa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006cac:	f7fb fa2c 	bl	8002108 <__aeabi_ui2d>
 8006cb0:	9b06      	ldr	r3, [sp, #24]
 8006cb2:	0006      	movs	r6, r0
 8006cb4:	000f      	movs	r7, r1
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	dd15      	ble.n	8006ce6 <_strtod_l+0x416>
 8006cba:	0022      	movs	r2, r4
 8006cbc:	4b7e      	ldr	r3, [pc, #504]	; (8006eb8 <_strtod_l+0x5e8>)
 8006cbe:	3a09      	subs	r2, #9
 8006cc0:	00d2      	lsls	r2, r2, #3
 8006cc2:	189b      	adds	r3, r3, r2
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f7fa fb9c 	bl	8001404 <__aeabi_dmul>
 8006ccc:	0006      	movs	r6, r0
 8006cce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006cd0:	000f      	movs	r7, r1
 8006cd2:	f7fb fa19 	bl	8002108 <__aeabi_ui2d>
 8006cd6:	0002      	movs	r2, r0
 8006cd8:	000b      	movs	r3, r1
 8006cda:	0030      	movs	r0, r6
 8006cdc:	0039      	movs	r1, r7
 8006cde:	f7f9 fc53 	bl	8000588 <__aeabi_dadd>
 8006ce2:	0006      	movs	r6, r0
 8006ce4:	000f      	movs	r7, r1
 8006ce6:	9b06      	ldr	r3, [sp, #24]
 8006ce8:	2b0f      	cmp	r3, #15
 8006cea:	dc39      	bgt.n	8006d60 <_strtod_l+0x490>
 8006cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d100      	bne.n	8006cf4 <_strtod_l+0x424>
 8006cf2:	e634      	b.n	800695e <_strtod_l+0x8e>
 8006cf4:	dd24      	ble.n	8006d40 <_strtod_l+0x470>
 8006cf6:	2b16      	cmp	r3, #22
 8006cf8:	dc09      	bgt.n	8006d0e <_strtod_l+0x43e>
 8006cfa:	496f      	ldr	r1, [pc, #444]	; (8006eb8 <_strtod_l+0x5e8>)
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	18c9      	adds	r1, r1, r3
 8006d00:	0032      	movs	r2, r6
 8006d02:	6808      	ldr	r0, [r1, #0]
 8006d04:	6849      	ldr	r1, [r1, #4]
 8006d06:	003b      	movs	r3, r7
 8006d08:	f7fa fb7c 	bl	8001404 <__aeabi_dmul>
 8006d0c:	e7bd      	b.n	8006c8a <_strtod_l+0x3ba>
 8006d0e:	2325      	movs	r3, #37	; 0x25
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d16:	4293      	cmp	r3, r2
 8006d18:	db22      	blt.n	8006d60 <_strtod_l+0x490>
 8006d1a:	240f      	movs	r4, #15
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	4d66      	ldr	r5, [pc, #408]	; (8006eb8 <_strtod_l+0x5e8>)
 8006d20:	1ae4      	subs	r4, r4, r3
 8006d22:	00e1      	lsls	r1, r4, #3
 8006d24:	1869      	adds	r1, r5, r1
 8006d26:	0032      	movs	r2, r6
 8006d28:	6808      	ldr	r0, [r1, #0]
 8006d2a:	6849      	ldr	r1, [r1, #4]
 8006d2c:	003b      	movs	r3, r7
 8006d2e:	f7fa fb69 	bl	8001404 <__aeabi_dmul>
 8006d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d34:	1b1c      	subs	r4, r3, r4
 8006d36:	00e4      	lsls	r4, r4, #3
 8006d38:	192c      	adds	r4, r5, r4
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	e7e3      	b.n	8006d08 <_strtod_l+0x438>
 8006d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d42:	3316      	adds	r3, #22
 8006d44:	db0c      	blt.n	8006d60 <_strtod_l+0x490>
 8006d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d48:	9a07      	ldr	r2, [sp, #28]
 8006d4a:	0030      	movs	r0, r6
 8006d4c:	1a9a      	subs	r2, r3, r2
 8006d4e:	4b5a      	ldr	r3, [pc, #360]	; (8006eb8 <_strtod_l+0x5e8>)
 8006d50:	00d2      	lsls	r2, r2, #3
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	0039      	movs	r1, r7
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f7f9 ff51 	bl	8000c00 <__aeabi_ddiv>
 8006d5e:	e794      	b.n	8006c8a <_strtod_l+0x3ba>
 8006d60:	9b06      	ldr	r3, [sp, #24]
 8006d62:	1b1c      	subs	r4, r3, r4
 8006d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d66:	18e4      	adds	r4, r4, r3
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	dd72      	ble.n	8006e52 <_strtod_l+0x582>
 8006d6c:	230f      	movs	r3, #15
 8006d6e:	0021      	movs	r1, r4
 8006d70:	4019      	ands	r1, r3
 8006d72:	421c      	tst	r4, r3
 8006d74:	d00a      	beq.n	8006d8c <_strtod_l+0x4bc>
 8006d76:	00cb      	lsls	r3, r1, #3
 8006d78:	494f      	ldr	r1, [pc, #316]	; (8006eb8 <_strtod_l+0x5e8>)
 8006d7a:	0032      	movs	r2, r6
 8006d7c:	18c9      	adds	r1, r1, r3
 8006d7e:	6808      	ldr	r0, [r1, #0]
 8006d80:	6849      	ldr	r1, [r1, #4]
 8006d82:	003b      	movs	r3, r7
 8006d84:	f7fa fb3e 	bl	8001404 <__aeabi_dmul>
 8006d88:	0006      	movs	r6, r0
 8006d8a:	000f      	movs	r7, r1
 8006d8c:	230f      	movs	r3, #15
 8006d8e:	439c      	bics	r4, r3
 8006d90:	d04a      	beq.n	8006e28 <_strtod_l+0x558>
 8006d92:	3326      	adds	r3, #38	; 0x26
 8006d94:	33ff      	adds	r3, #255	; 0xff
 8006d96:	429c      	cmp	r4, r3
 8006d98:	dd22      	ble.n	8006de0 <_strtod_l+0x510>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9306      	str	r3, [sp, #24]
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da2:	9309      	str	r3, [sp, #36]	; 0x24
 8006da4:	2322      	movs	r3, #34	; 0x22
 8006da6:	2600      	movs	r6, #0
 8006da8:	9a05      	ldr	r2, [sp, #20]
 8006daa:	4f3f      	ldr	r7, [pc, #252]	; (8006ea8 <_strtod_l+0x5d8>)
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db0:	42b3      	cmp	r3, r6
 8006db2:	d100      	bne.n	8006db6 <_strtod_l+0x4e6>
 8006db4:	e5d3      	b.n	800695e <_strtod_l+0x8e>
 8006db6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006db8:	9805      	ldr	r0, [sp, #20]
 8006dba:	f001 ffd5 	bl	8008d68 <_Bfree>
 8006dbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dc0:	9805      	ldr	r0, [sp, #20]
 8006dc2:	f001 ffd1 	bl	8008d68 <_Bfree>
 8006dc6:	9907      	ldr	r1, [sp, #28]
 8006dc8:	9805      	ldr	r0, [sp, #20]
 8006dca:	f001 ffcd 	bl	8008d68 <_Bfree>
 8006dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dd0:	9805      	ldr	r0, [sp, #20]
 8006dd2:	f001 ffc9 	bl	8008d68 <_Bfree>
 8006dd6:	9906      	ldr	r1, [sp, #24]
 8006dd8:	9805      	ldr	r0, [sp, #20]
 8006dda:	f001 ffc5 	bl	8008d68 <_Bfree>
 8006dde:	e5be      	b.n	800695e <_strtod_l+0x8e>
 8006de0:	2300      	movs	r3, #0
 8006de2:	0030      	movs	r0, r6
 8006de4:	0039      	movs	r1, r7
 8006de6:	4d35      	ldr	r5, [pc, #212]	; (8006ebc <_strtod_l+0x5ec>)
 8006de8:	1124      	asrs	r4, r4, #4
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	2c01      	cmp	r4, #1
 8006dee:	dc1e      	bgt.n	8006e2e <_strtod_l+0x55e>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <_strtod_l+0x528>
 8006df4:	0006      	movs	r6, r0
 8006df6:	000f      	movs	r7, r1
 8006df8:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <_strtod_l+0x5f0>)
 8006dfa:	0032      	movs	r2, r6
 8006dfc:	18ff      	adds	r7, r7, r3
 8006dfe:	9b08      	ldr	r3, [sp, #32]
 8006e00:	00dd      	lsls	r5, r3, #3
 8006e02:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <_strtod_l+0x5ec>)
 8006e04:	195d      	adds	r5, r3, r5
 8006e06:	6828      	ldr	r0, [r5, #0]
 8006e08:	6869      	ldr	r1, [r5, #4]
 8006e0a:	003b      	movs	r3, r7
 8006e0c:	f7fa fafa 	bl	8001404 <__aeabi_dmul>
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <_strtod_l+0x5d8>)
 8006e12:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <_strtod_l+0x5f4>)
 8006e14:	0006      	movs	r6, r0
 8006e16:	400b      	ands	r3, r1
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d8be      	bhi.n	8006d9a <_strtod_l+0x4ca>
 8006e1c:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <_strtod_l+0x5f8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d913      	bls.n	8006e4a <_strtod_l+0x57a>
 8006e22:	2601      	movs	r6, #1
 8006e24:	4f29      	ldr	r7, [pc, #164]	; (8006ecc <_strtod_l+0x5fc>)
 8006e26:	4276      	negs	r6, r6
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9308      	str	r3, [sp, #32]
 8006e2c:	e087      	b.n	8006f3e <_strtod_l+0x66e>
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4214      	tst	r4, r2
 8006e32:	d004      	beq.n	8006e3e <_strtod_l+0x56e>
 8006e34:	682a      	ldr	r2, [r5, #0]
 8006e36:	686b      	ldr	r3, [r5, #4]
 8006e38:	f7fa fae4 	bl	8001404 <__aeabi_dmul>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	9a08      	ldr	r2, [sp, #32]
 8006e40:	1064      	asrs	r4, r4, #1
 8006e42:	3201      	adds	r2, #1
 8006e44:	9208      	str	r2, [sp, #32]
 8006e46:	3508      	adds	r5, #8
 8006e48:	e7d0      	b.n	8006dec <_strtod_l+0x51c>
 8006e4a:	23d4      	movs	r3, #212	; 0xd4
 8006e4c:	049b      	lsls	r3, r3, #18
 8006e4e:	18cf      	adds	r7, r1, r3
 8006e50:	e7ea      	b.n	8006e28 <_strtod_l+0x558>
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d0e8      	beq.n	8006e28 <_strtod_l+0x558>
 8006e56:	4264      	negs	r4, r4
 8006e58:	220f      	movs	r2, #15
 8006e5a:	0023      	movs	r3, r4
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	4214      	tst	r4, r2
 8006e60:	d00a      	beq.n	8006e78 <_strtod_l+0x5a8>
 8006e62:	00da      	lsls	r2, r3, #3
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <_strtod_l+0x5e8>)
 8006e66:	0030      	movs	r0, r6
 8006e68:	189b      	adds	r3, r3, r2
 8006e6a:	0039      	movs	r1, r7
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f7f9 fec6 	bl	8000c00 <__aeabi_ddiv>
 8006e74:	0006      	movs	r6, r0
 8006e76:	000f      	movs	r7, r1
 8006e78:	1124      	asrs	r4, r4, #4
 8006e7a:	d0d5      	beq.n	8006e28 <_strtod_l+0x558>
 8006e7c:	2c1f      	cmp	r4, #31
 8006e7e:	dd27      	ble.n	8006ed0 <_strtod_l+0x600>
 8006e80:	2300      	movs	r3, #0
 8006e82:	9306      	str	r3, [sp, #24]
 8006e84:	9307      	str	r3, [sp, #28]
 8006e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e88:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8a:	2322      	movs	r3, #34	; 0x22
 8006e8c:	9a05      	ldr	r2, [sp, #20]
 8006e8e:	2600      	movs	r6, #0
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e94:	2700      	movs	r7, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d18d      	bne.n	8006db6 <_strtod_l+0x4e6>
 8006e9a:	e560      	b.n	800695e <_strtod_l+0x8e>
 8006e9c:	00004e1f 	.word	0x00004e1f
 8006ea0:	0800a6d1 	.word	0x0800a6d1
 8006ea4:	0800a714 	.word	0x0800a714
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	0800a6c9 	.word	0x0800a6c9
 8006eb0:	0800a854 	.word	0x0800a854
 8006eb4:	0800ab68 	.word	0x0800ab68
 8006eb8:	0800aa48 	.word	0x0800aa48
 8006ebc:	0800aa20 	.word	0x0800aa20
 8006ec0:	fcb00000 	.word	0xfcb00000
 8006ec4:	7ca00000 	.word	0x7ca00000
 8006ec8:	7c900000 	.word	0x7c900000
 8006ecc:	7fefffff 	.word	0x7fefffff
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	0022      	movs	r2, r4
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	9208      	str	r2, [sp, #32]
 8006ed8:	421c      	tst	r4, r3
 8006eda:	d001      	beq.n	8006ee0 <_strtod_l+0x610>
 8006edc:	335a      	adds	r3, #90	; 0x5a
 8006ede:	9308      	str	r3, [sp, #32]
 8006ee0:	0030      	movs	r0, r6
 8006ee2:	0039      	movs	r1, r7
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4dc5      	ldr	r5, [pc, #788]	; (80071fc <_strtod_l+0x92c>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	4214      	tst	r4, r2
 8006eec:	d004      	beq.n	8006ef8 <_strtod_l+0x628>
 8006eee:	682a      	ldr	r2, [r5, #0]
 8006ef0:	686b      	ldr	r3, [r5, #4]
 8006ef2:	f7fa fa87 	bl	8001404 <__aeabi_dmul>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	1064      	asrs	r4, r4, #1
 8006efa:	3508      	adds	r5, #8
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	d1f3      	bne.n	8006ee8 <_strtod_l+0x618>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <_strtod_l+0x638>
 8006f04:	0006      	movs	r6, r0
 8006f06:	000f      	movs	r7, r1
 8006f08:	9b08      	ldr	r3, [sp, #32]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <_strtod_l+0x65e>
 8006f0e:	236b      	movs	r3, #107	; 0x6b
 8006f10:	007a      	lsls	r2, r7, #1
 8006f12:	0d52      	lsrs	r2, r2, #21
 8006f14:	0039      	movs	r1, r7
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dd08      	ble.n	8006f2e <_strtod_l+0x65e>
 8006f1c:	2b1f      	cmp	r3, #31
 8006f1e:	dc00      	bgt.n	8006f22 <_strtod_l+0x652>
 8006f20:	e124      	b.n	800716c <_strtod_l+0x89c>
 8006f22:	2600      	movs	r6, #0
 8006f24:	2b34      	cmp	r3, #52	; 0x34
 8006f26:	dc00      	bgt.n	8006f2a <_strtod_l+0x65a>
 8006f28:	e119      	b.n	800715e <_strtod_l+0x88e>
 8006f2a:	27dc      	movs	r7, #220	; 0xdc
 8006f2c:	04bf      	lsls	r7, r7, #18
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	0030      	movs	r0, r6
 8006f34:	0039      	movs	r1, r7
 8006f36:	f7f9 fa89 	bl	800044c <__aeabi_dcmpeq>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d1a0      	bne.n	8006e80 <_strtod_l+0x5b0>
 8006f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	9805      	ldr	r0, [sp, #20]
 8006f4a:	f001 ff75 	bl	8008e38 <__s2b>
 8006f4e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d100      	bne.n	8006f56 <_strtod_l+0x686>
 8006f54:	e721      	b.n	8006d9a <_strtod_l+0x4ca>
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	9907      	ldr	r1, [sp, #28]
 8006f5a:	17da      	asrs	r2, r3, #31
 8006f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f5e:	1a5b      	subs	r3, r3, r1
 8006f60:	401a      	ands	r2, r3
 8006f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f64:	9215      	str	r2, [sp, #84]	; 0x54
 8006f66:	43db      	mvns	r3, r3
 8006f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f6a:	17db      	asrs	r3, r3, #31
 8006f6c:	401a      	ands	r2, r3
 8006f6e:	2300      	movs	r3, #0
 8006f70:	921a      	str	r2, [sp, #104]	; 0x68
 8006f72:	9306      	str	r3, [sp, #24]
 8006f74:	9307      	str	r3, [sp, #28]
 8006f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f78:	9805      	ldr	r0, [sp, #20]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	f001 feb0 	bl	8008ce0 <_Balloc>
 8006f80:	9009      	str	r0, [sp, #36]	; 0x24
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d100      	bne.n	8006f88 <_strtod_l+0x6b8>
 8006f86:	e70d      	b.n	8006da4 <_strtod_l+0x4d4>
 8006f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	310c      	adds	r1, #12
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	300c      	adds	r0, #12
 8006f96:	930c      	str	r3, [sp, #48]	; 0x30
 8006f98:	f001 fe88 	bl	8008cac <memcpy>
 8006f9c:	ab22      	add	r3, sp, #136	; 0x88
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	ab21      	add	r3, sp, #132	; 0x84
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	0032      	movs	r2, r6
 8006fa6:	003b      	movs	r3, r7
 8006fa8:	9805      	ldr	r0, [sp, #20]
 8006faa:	9612      	str	r6, [sp, #72]	; 0x48
 8006fac:	9713      	str	r7, [sp, #76]	; 0x4c
 8006fae:	f002 fa8f 	bl	80094d0 <__d2b>
 8006fb2:	9020      	str	r0, [sp, #128]	; 0x80
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d100      	bne.n	8006fba <_strtod_l+0x6ea>
 8006fb8:	e6f4      	b.n	8006da4 <_strtod_l+0x4d4>
 8006fba:	2101      	movs	r1, #1
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	f001 ffcf 	bl	8008f60 <__i2b>
 8006fc2:	9007      	str	r0, [sp, #28]
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d100      	bne.n	8006fca <_strtod_l+0x6fa>
 8006fc8:	e6ec      	b.n	8006da4 <_strtod_l+0x4d4>
 8006fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fcc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006fd0:	1ad4      	subs	r4, r2, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db01      	blt.n	8006fda <_strtod_l+0x70a>
 8006fd6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006fd8:	195d      	adds	r5, r3, r5
 8006fda:	9908      	ldr	r1, [sp, #32]
 8006fdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	2136      	movs	r1, #54	; 0x36
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	1a8a      	subs	r2, r1, r2
 8006fe6:	4986      	ldr	r1, [pc, #536]	; (8007200 <_strtod_l+0x930>)
 8006fe8:	2001      	movs	r0, #1
 8006fea:	468c      	mov	ip, r1
 8006fec:	2100      	movs	r1, #0
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	9110      	str	r1, [sp, #64]	; 0x40
 8006ff2:	9014      	str	r0, [sp, #80]	; 0x50
 8006ff4:	4563      	cmp	r3, ip
 8006ff6:	da07      	bge.n	8007008 <_strtod_l+0x738>
 8006ff8:	4661      	mov	r1, ip
 8006ffa:	1ac9      	subs	r1, r1, r3
 8006ffc:	1a52      	subs	r2, r2, r1
 8006ffe:	291f      	cmp	r1, #31
 8007000:	dd00      	ble.n	8007004 <_strtod_l+0x734>
 8007002:	e0b8      	b.n	8007176 <_strtod_l+0x8a6>
 8007004:	4088      	lsls	r0, r1
 8007006:	9014      	str	r0, [sp, #80]	; 0x50
 8007008:	18ab      	adds	r3, r5, r2
 800700a:	930c      	str	r3, [sp, #48]	; 0x30
 800700c:	18a4      	adds	r4, r4, r2
 800700e:	9b08      	ldr	r3, [sp, #32]
 8007010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007012:	191c      	adds	r4, r3, r4
 8007014:	002b      	movs	r3, r5
 8007016:	4295      	cmp	r5, r2
 8007018:	dd00      	ble.n	800701c <_strtod_l+0x74c>
 800701a:	0013      	movs	r3, r2
 800701c:	42a3      	cmp	r3, r4
 800701e:	dd00      	ble.n	8007022 <_strtod_l+0x752>
 8007020:	0023      	movs	r3, r4
 8007022:	2b00      	cmp	r3, #0
 8007024:	dd04      	ble.n	8007030 <_strtod_l+0x760>
 8007026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007028:	1ae4      	subs	r4, r4, r3
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	920c      	str	r2, [sp, #48]	; 0x30
 800702e:	1aed      	subs	r5, r5, r3
 8007030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007032:	2b00      	cmp	r3, #0
 8007034:	dd17      	ble.n	8007066 <_strtod_l+0x796>
 8007036:	001a      	movs	r2, r3
 8007038:	9907      	ldr	r1, [sp, #28]
 800703a:	9805      	ldr	r0, [sp, #20]
 800703c:	f002 f856 	bl	80090ec <__pow5mult>
 8007040:	9007      	str	r0, [sp, #28]
 8007042:	2800      	cmp	r0, #0
 8007044:	d100      	bne.n	8007048 <_strtod_l+0x778>
 8007046:	e6ad      	b.n	8006da4 <_strtod_l+0x4d4>
 8007048:	0001      	movs	r1, r0
 800704a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800704c:	9805      	ldr	r0, [sp, #20]
 800704e:	f001 ff9d 	bl	8008f8c <__multiply>
 8007052:	900f      	str	r0, [sp, #60]	; 0x3c
 8007054:	2800      	cmp	r0, #0
 8007056:	d100      	bne.n	800705a <_strtod_l+0x78a>
 8007058:	e6a4      	b.n	8006da4 <_strtod_l+0x4d4>
 800705a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800705c:	9805      	ldr	r0, [sp, #20]
 800705e:	f001 fe83 	bl	8008d68 <_Bfree>
 8007062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007064:	9320      	str	r3, [sp, #128]	; 0x80
 8007066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007068:	2b00      	cmp	r3, #0
 800706a:	dd00      	ble.n	800706e <_strtod_l+0x79e>
 800706c:	e089      	b.n	8007182 <_strtod_l+0x8b2>
 800706e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007070:	2b00      	cmp	r3, #0
 8007072:	dd08      	ble.n	8007086 <_strtod_l+0x7b6>
 8007074:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007076:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	f002 f837 	bl	80090ec <__pow5mult>
 800707e:	9009      	str	r0, [sp, #36]	; 0x24
 8007080:	2800      	cmp	r0, #0
 8007082:	d100      	bne.n	8007086 <_strtod_l+0x7b6>
 8007084:	e68e      	b.n	8006da4 <_strtod_l+0x4d4>
 8007086:	2c00      	cmp	r4, #0
 8007088:	dd08      	ble.n	800709c <_strtod_l+0x7cc>
 800708a:	0022      	movs	r2, r4
 800708c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800708e:	9805      	ldr	r0, [sp, #20]
 8007090:	f002 f888 	bl	80091a4 <__lshift>
 8007094:	9009      	str	r0, [sp, #36]	; 0x24
 8007096:	2800      	cmp	r0, #0
 8007098:	d100      	bne.n	800709c <_strtod_l+0x7cc>
 800709a:	e683      	b.n	8006da4 <_strtod_l+0x4d4>
 800709c:	2d00      	cmp	r5, #0
 800709e:	dd08      	ble.n	80070b2 <_strtod_l+0x7e2>
 80070a0:	002a      	movs	r2, r5
 80070a2:	9907      	ldr	r1, [sp, #28]
 80070a4:	9805      	ldr	r0, [sp, #20]
 80070a6:	f002 f87d 	bl	80091a4 <__lshift>
 80070aa:	9007      	str	r0, [sp, #28]
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d100      	bne.n	80070b2 <_strtod_l+0x7e2>
 80070b0:	e678      	b.n	8006da4 <_strtod_l+0x4d4>
 80070b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80070b6:	9805      	ldr	r0, [sp, #20]
 80070b8:	f002 f8fe 	bl	80092b8 <__mdiff>
 80070bc:	9006      	str	r0, [sp, #24]
 80070be:	2800      	cmp	r0, #0
 80070c0:	d100      	bne.n	80070c4 <_strtod_l+0x7f4>
 80070c2:	e66f      	b.n	8006da4 <_strtod_l+0x4d4>
 80070c4:	2200      	movs	r2, #0
 80070c6:	68c3      	ldr	r3, [r0, #12]
 80070c8:	9907      	ldr	r1, [sp, #28]
 80070ca:	60c2      	str	r2, [r0, #12]
 80070cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ce:	f002 f8d7 	bl	8009280 <__mcmp>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	da5f      	bge.n	8007196 <_strtod_l+0x8c6>
 80070d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d8:	4333      	orrs	r3, r6
 80070da:	d000      	beq.n	80070de <_strtod_l+0x80e>
 80070dc:	e08a      	b.n	80071f4 <_strtod_l+0x924>
 80070de:	033b      	lsls	r3, r7, #12
 80070e0:	d000      	beq.n	80070e4 <_strtod_l+0x814>
 80070e2:	e087      	b.n	80071f4 <_strtod_l+0x924>
 80070e4:	22d6      	movs	r2, #214	; 0xd6
 80070e6:	4b47      	ldr	r3, [pc, #284]	; (8007204 <_strtod_l+0x934>)
 80070e8:	04d2      	lsls	r2, r2, #19
 80070ea:	403b      	ands	r3, r7
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d800      	bhi.n	80070f2 <_strtod_l+0x822>
 80070f0:	e080      	b.n	80071f4 <_strtod_l+0x924>
 80070f2:	9b06      	ldr	r3, [sp, #24]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	930a      	str	r3, [sp, #40]	; 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <_strtod_l+0x836>
 80070fc:	9b06      	ldr	r3, [sp, #24]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	930a      	str	r3, [sp, #40]	; 0x28
 8007102:	2b01      	cmp	r3, #1
 8007104:	dd76      	ble.n	80071f4 <_strtod_l+0x924>
 8007106:	9906      	ldr	r1, [sp, #24]
 8007108:	2201      	movs	r2, #1
 800710a:	9805      	ldr	r0, [sp, #20]
 800710c:	f002 f84a 	bl	80091a4 <__lshift>
 8007110:	9907      	ldr	r1, [sp, #28]
 8007112:	9006      	str	r0, [sp, #24]
 8007114:	f002 f8b4 	bl	8009280 <__mcmp>
 8007118:	2800      	cmp	r0, #0
 800711a:	dd6b      	ble.n	80071f4 <_strtod_l+0x924>
 800711c:	9908      	ldr	r1, [sp, #32]
 800711e:	003b      	movs	r3, r7
 8007120:	4a38      	ldr	r2, [pc, #224]	; (8007204 <_strtod_l+0x934>)
 8007122:	2900      	cmp	r1, #0
 8007124:	d100      	bne.n	8007128 <_strtod_l+0x858>
 8007126:	e092      	b.n	800724e <_strtod_l+0x97e>
 8007128:	0011      	movs	r1, r2
 800712a:	20d6      	movs	r0, #214	; 0xd6
 800712c:	4039      	ands	r1, r7
 800712e:	04c0      	lsls	r0, r0, #19
 8007130:	4281      	cmp	r1, r0
 8007132:	dd00      	ble.n	8007136 <_strtod_l+0x866>
 8007134:	e08b      	b.n	800724e <_strtod_l+0x97e>
 8007136:	23dc      	movs	r3, #220	; 0xdc
 8007138:	049b      	lsls	r3, r3, #18
 800713a:	4299      	cmp	r1, r3
 800713c:	dc00      	bgt.n	8007140 <_strtod_l+0x870>
 800713e:	e6a4      	b.n	8006e8a <_strtod_l+0x5ba>
 8007140:	0030      	movs	r0, r6
 8007142:	0039      	movs	r1, r7
 8007144:	2200      	movs	r2, #0
 8007146:	4b30      	ldr	r3, [pc, #192]	; (8007208 <_strtod_l+0x938>)
 8007148:	f7fa f95c 	bl	8001404 <__aeabi_dmul>
 800714c:	0006      	movs	r6, r0
 800714e:	000f      	movs	r7, r1
 8007150:	4308      	orrs	r0, r1
 8007152:	d000      	beq.n	8007156 <_strtod_l+0x886>
 8007154:	e62f      	b.n	8006db6 <_strtod_l+0x4e6>
 8007156:	2322      	movs	r3, #34	; 0x22
 8007158:	9a05      	ldr	r2, [sp, #20]
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e62b      	b.n	8006db6 <_strtod_l+0x4e6>
 800715e:	234b      	movs	r3, #75	; 0x4b
 8007160:	1a9a      	subs	r2, r3, r2
 8007162:	3b4c      	subs	r3, #76	; 0x4c
 8007164:	4093      	lsls	r3, r2
 8007166:	4019      	ands	r1, r3
 8007168:	000f      	movs	r7, r1
 800716a:	e6e0      	b.n	8006f2e <_strtod_l+0x65e>
 800716c:	2201      	movs	r2, #1
 800716e:	4252      	negs	r2, r2
 8007170:	409a      	lsls	r2, r3
 8007172:	4016      	ands	r6, r2
 8007174:	e6db      	b.n	8006f2e <_strtod_l+0x65e>
 8007176:	4925      	ldr	r1, [pc, #148]	; (800720c <_strtod_l+0x93c>)
 8007178:	1acb      	subs	r3, r1, r3
 800717a:	0001      	movs	r1, r0
 800717c:	4099      	lsls	r1, r3
 800717e:	9110      	str	r1, [sp, #64]	; 0x40
 8007180:	e741      	b.n	8007006 <_strtod_l+0x736>
 8007182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007184:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007186:	9805      	ldr	r0, [sp, #20]
 8007188:	f002 f80c 	bl	80091a4 <__lshift>
 800718c:	9020      	str	r0, [sp, #128]	; 0x80
 800718e:	2800      	cmp	r0, #0
 8007190:	d000      	beq.n	8007194 <_strtod_l+0x8c4>
 8007192:	e76c      	b.n	800706e <_strtod_l+0x79e>
 8007194:	e606      	b.n	8006da4 <_strtod_l+0x4d4>
 8007196:	970c      	str	r7, [sp, #48]	; 0x30
 8007198:	2800      	cmp	r0, #0
 800719a:	d176      	bne.n	800728a <_strtod_l+0x9ba>
 800719c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800719e:	033b      	lsls	r3, r7, #12
 80071a0:	0b1b      	lsrs	r3, r3, #12
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	d038      	beq.n	8007218 <_strtod_l+0x948>
 80071a6:	4a1a      	ldr	r2, [pc, #104]	; (8007210 <_strtod_l+0x940>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d138      	bne.n	800721e <_strtod_l+0x94e>
 80071ac:	2201      	movs	r2, #1
 80071ae:	9b08      	ldr	r3, [sp, #32]
 80071b0:	4252      	negs	r2, r2
 80071b2:	0031      	movs	r1, r6
 80071b4:	0010      	movs	r0, r2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <_strtod_l+0x902>
 80071ba:	24d4      	movs	r4, #212	; 0xd4
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <_strtod_l+0x934>)
 80071be:	0010      	movs	r0, r2
 80071c0:	403b      	ands	r3, r7
 80071c2:	04e4      	lsls	r4, r4, #19
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d804      	bhi.n	80071d2 <_strtod_l+0x902>
 80071c8:	306c      	adds	r0, #108	; 0x6c
 80071ca:	0d1b      	lsrs	r3, r3, #20
 80071cc:	1ac3      	subs	r3, r0, r3
 80071ce:	409a      	lsls	r2, r3
 80071d0:	0010      	movs	r0, r2
 80071d2:	4281      	cmp	r1, r0
 80071d4:	d123      	bne.n	800721e <_strtod_l+0x94e>
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <_strtod_l+0x944>)
 80071d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071da:	429a      	cmp	r2, r3
 80071dc:	d102      	bne.n	80071e4 <_strtod_l+0x914>
 80071de:	1c4b      	adds	r3, r1, #1
 80071e0:	d100      	bne.n	80071e4 <_strtod_l+0x914>
 80071e2:	e5df      	b.n	8006da4 <_strtod_l+0x4d4>
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <_strtod_l+0x934>)
 80071e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e8:	2600      	movs	r6, #0
 80071ea:	401a      	ands	r2, r3
 80071ec:	0013      	movs	r3, r2
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	0352      	lsls	r2, r2, #13
 80071f2:	189f      	adds	r7, r3, r2
 80071f4:	9b08      	ldr	r3, [sp, #32]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1a2      	bne.n	8007140 <_strtod_l+0x870>
 80071fa:	e5dc      	b.n	8006db6 <_strtod_l+0x4e6>
 80071fc:	0800a728 	.word	0x0800a728
 8007200:	fffffc02 	.word	0xfffffc02
 8007204:	7ff00000 	.word	0x7ff00000
 8007208:	39500000 	.word	0x39500000
 800720c:	fffffbe2 	.word	0xfffffbe2
 8007210:	000fffff 	.word	0x000fffff
 8007214:	7fefffff 	.word	0x7fefffff
 8007218:	4333      	orrs	r3, r6
 800721a:	d100      	bne.n	800721e <_strtod_l+0x94e>
 800721c:	e77e      	b.n	800711c <_strtod_l+0x84c>
 800721e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01d      	beq.n	8007260 <_strtod_l+0x990>
 8007224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007226:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007228:	4213      	tst	r3, r2
 800722a:	d0e3      	beq.n	80071f4 <_strtod_l+0x924>
 800722c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800722e:	0030      	movs	r0, r6
 8007230:	0039      	movs	r1, r7
 8007232:	9a08      	ldr	r2, [sp, #32]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <_strtod_l+0x998>
 8007238:	f7ff fb32 	bl	80068a0 <sulp>
 800723c:	0002      	movs	r2, r0
 800723e:	000b      	movs	r3, r1
 8007240:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007242:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007244:	f7f9 f9a0 	bl	8000588 <__aeabi_dadd>
 8007248:	0006      	movs	r6, r0
 800724a:	000f      	movs	r7, r1
 800724c:	e7d2      	b.n	80071f4 <_strtod_l+0x924>
 800724e:	2601      	movs	r6, #1
 8007250:	4013      	ands	r3, r2
 8007252:	4a99      	ldr	r2, [pc, #612]	; (80074b8 <_strtod_l+0xbe8>)
 8007254:	4276      	negs	r6, r6
 8007256:	189b      	adds	r3, r3, r2
 8007258:	4a98      	ldr	r2, [pc, #608]	; (80074bc <_strtod_l+0xbec>)
 800725a:	431a      	orrs	r2, r3
 800725c:	0017      	movs	r7, r2
 800725e:	e7c9      	b.n	80071f4 <_strtod_l+0x924>
 8007260:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007262:	4233      	tst	r3, r6
 8007264:	d0c6      	beq.n	80071f4 <_strtod_l+0x924>
 8007266:	e7e1      	b.n	800722c <_strtod_l+0x95c>
 8007268:	f7ff fb1a 	bl	80068a0 <sulp>
 800726c:	0002      	movs	r2, r0
 800726e:	000b      	movs	r3, r1
 8007270:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007272:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007274:	f7fa fb32 	bl	80018dc <__aeabi_dsub>
 8007278:	2200      	movs	r2, #0
 800727a:	2300      	movs	r3, #0
 800727c:	0006      	movs	r6, r0
 800727e:	000f      	movs	r7, r1
 8007280:	f7f9 f8e4 	bl	800044c <__aeabi_dcmpeq>
 8007284:	2800      	cmp	r0, #0
 8007286:	d0b5      	beq.n	80071f4 <_strtod_l+0x924>
 8007288:	e5ff      	b.n	8006e8a <_strtod_l+0x5ba>
 800728a:	9907      	ldr	r1, [sp, #28]
 800728c:	9806      	ldr	r0, [sp, #24]
 800728e:	f002 f983 	bl	8009598 <__ratio>
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	2200      	movs	r2, #0
 8007296:	05db      	lsls	r3, r3, #23
 8007298:	0004      	movs	r4, r0
 800729a:	000d      	movs	r5, r1
 800729c:	f7f9 f8e6 	bl	800046c <__aeabi_dcmple>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d075      	beq.n	8007390 <_strtod_l+0xac0>
 80072a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d047      	beq.n	800733a <_strtod_l+0xa6a>
 80072aa:	2300      	movs	r3, #0
 80072ac:	4c84      	ldr	r4, [pc, #528]	; (80074c0 <_strtod_l+0xbf0>)
 80072ae:	2500      	movs	r5, #0
 80072b0:	9310      	str	r3, [sp, #64]	; 0x40
 80072b2:	9411      	str	r4, [sp, #68]	; 0x44
 80072b4:	4c82      	ldr	r4, [pc, #520]	; (80074c0 <_strtod_l+0xbf0>)
 80072b6:	4a83      	ldr	r2, [pc, #524]	; (80074c4 <_strtod_l+0xbf4>)
 80072b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ba:	4013      	ands	r3, r2
 80072bc:	9314      	str	r3, [sp, #80]	; 0x50
 80072be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072c0:	4b81      	ldr	r3, [pc, #516]	; (80074c8 <_strtod_l+0xbf8>)
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d000      	beq.n	80072c8 <_strtod_l+0x9f8>
 80072c6:	e0ac      	b.n	8007422 <_strtod_l+0xb52>
 80072c8:	4a80      	ldr	r2, [pc, #512]	; (80074cc <_strtod_l+0xbfc>)
 80072ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072cc:	4694      	mov	ip, r2
 80072ce:	4463      	add	r3, ip
 80072d0:	001f      	movs	r7, r3
 80072d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072d6:	0030      	movs	r0, r6
 80072d8:	0039      	movs	r1, r7
 80072da:	920c      	str	r2, [sp, #48]	; 0x30
 80072dc:	930d      	str	r3, [sp, #52]	; 0x34
 80072de:	f002 f883 	bl	80093e8 <__ulp>
 80072e2:	0002      	movs	r2, r0
 80072e4:	000b      	movs	r3, r1
 80072e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072ea:	f7fa f88b 	bl	8001404 <__aeabi_dmul>
 80072ee:	0032      	movs	r2, r6
 80072f0:	003b      	movs	r3, r7
 80072f2:	f7f9 f949 	bl	8000588 <__aeabi_dadd>
 80072f6:	4a73      	ldr	r2, [pc, #460]	; (80074c4 <_strtod_l+0xbf4>)
 80072f8:	4b75      	ldr	r3, [pc, #468]	; (80074d0 <_strtod_l+0xc00>)
 80072fa:	0006      	movs	r6, r0
 80072fc:	400a      	ands	r2, r1
 80072fe:	429a      	cmp	r2, r3
 8007300:	d95e      	bls.n	80073c0 <_strtod_l+0xaf0>
 8007302:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007304:	4b73      	ldr	r3, [pc, #460]	; (80074d4 <_strtod_l+0xc04>)
 8007306:	429a      	cmp	r2, r3
 8007308:	d103      	bne.n	8007312 <_strtod_l+0xa42>
 800730a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800730c:	3301      	adds	r3, #1
 800730e:	d100      	bne.n	8007312 <_strtod_l+0xa42>
 8007310:	e548      	b.n	8006da4 <_strtod_l+0x4d4>
 8007312:	2601      	movs	r6, #1
 8007314:	4f6f      	ldr	r7, [pc, #444]	; (80074d4 <_strtod_l+0xc04>)
 8007316:	4276      	negs	r6, r6
 8007318:	9920      	ldr	r1, [sp, #128]	; 0x80
 800731a:	9805      	ldr	r0, [sp, #20]
 800731c:	f001 fd24 	bl	8008d68 <_Bfree>
 8007320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007322:	9805      	ldr	r0, [sp, #20]
 8007324:	f001 fd20 	bl	8008d68 <_Bfree>
 8007328:	9907      	ldr	r1, [sp, #28]
 800732a:	9805      	ldr	r0, [sp, #20]
 800732c:	f001 fd1c 	bl	8008d68 <_Bfree>
 8007330:	9906      	ldr	r1, [sp, #24]
 8007332:	9805      	ldr	r0, [sp, #20]
 8007334:	f001 fd18 	bl	8008d68 <_Bfree>
 8007338:	e61d      	b.n	8006f76 <_strtod_l+0x6a6>
 800733a:	2e00      	cmp	r6, #0
 800733c:	d11c      	bne.n	8007378 <_strtod_l+0xaa8>
 800733e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007340:	031b      	lsls	r3, r3, #12
 8007342:	d11f      	bne.n	8007384 <_strtod_l+0xab4>
 8007344:	2200      	movs	r2, #0
 8007346:	0020      	movs	r0, r4
 8007348:	0029      	movs	r1, r5
 800734a:	4b5d      	ldr	r3, [pc, #372]	; (80074c0 <_strtod_l+0xbf0>)
 800734c:	f7f9 f884 	bl	8000458 <__aeabi_dcmplt>
 8007350:	2800      	cmp	r0, #0
 8007352:	d11a      	bne.n	800738a <_strtod_l+0xaba>
 8007354:	0020      	movs	r0, r4
 8007356:	0029      	movs	r1, r5
 8007358:	2200      	movs	r2, #0
 800735a:	4b5f      	ldr	r3, [pc, #380]	; (80074d8 <_strtod_l+0xc08>)
 800735c:	f7fa f852 	bl	8001404 <__aeabi_dmul>
 8007360:	0005      	movs	r5, r0
 8007362:	000c      	movs	r4, r1
 8007364:	2380      	movs	r3, #128	; 0x80
 8007366:	061b      	lsls	r3, r3, #24
 8007368:	18e3      	adds	r3, r4, r3
 800736a:	951c      	str	r5, [sp, #112]	; 0x70
 800736c:	931d      	str	r3, [sp, #116]	; 0x74
 800736e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007372:	9210      	str	r2, [sp, #64]	; 0x40
 8007374:	9311      	str	r3, [sp, #68]	; 0x44
 8007376:	e79e      	b.n	80072b6 <_strtod_l+0x9e6>
 8007378:	2e01      	cmp	r6, #1
 800737a:	d103      	bne.n	8007384 <_strtod_l+0xab4>
 800737c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	d100      	bne.n	8007384 <_strtod_l+0xab4>
 8007382:	e582      	b.n	8006e8a <_strtod_l+0x5ba>
 8007384:	2300      	movs	r3, #0
 8007386:	4c55      	ldr	r4, [pc, #340]	; (80074dc <_strtod_l+0xc0c>)
 8007388:	e791      	b.n	80072ae <_strtod_l+0x9de>
 800738a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800738c:	4c52      	ldr	r4, [pc, #328]	; (80074d8 <_strtod_l+0xc08>)
 800738e:	e7e9      	b.n	8007364 <_strtod_l+0xa94>
 8007390:	2200      	movs	r2, #0
 8007392:	0020      	movs	r0, r4
 8007394:	0029      	movs	r1, r5
 8007396:	4b50      	ldr	r3, [pc, #320]	; (80074d8 <_strtod_l+0xc08>)
 8007398:	f7fa f834 	bl	8001404 <__aeabi_dmul>
 800739c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800739e:	0005      	movs	r5, r0
 80073a0:	000b      	movs	r3, r1
 80073a2:	000c      	movs	r4, r1
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	d107      	bne.n	80073b8 <_strtod_l+0xae8>
 80073a8:	2280      	movs	r2, #128	; 0x80
 80073aa:	0612      	lsls	r2, r2, #24
 80073ac:	188b      	adds	r3, r1, r2
 80073ae:	9016      	str	r0, [sp, #88]	; 0x58
 80073b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80073b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073b6:	e7dc      	b.n	8007372 <_strtod_l+0xaa2>
 80073b8:	0002      	movs	r2, r0
 80073ba:	9216      	str	r2, [sp, #88]	; 0x58
 80073bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80073be:	e7f8      	b.n	80073b2 <_strtod_l+0xae2>
 80073c0:	23d4      	movs	r3, #212	; 0xd4
 80073c2:	049b      	lsls	r3, r3, #18
 80073c4:	18cf      	adds	r7, r1, r3
 80073c6:	9b08      	ldr	r3, [sp, #32]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1a5      	bne.n	8007318 <_strtod_l+0xa48>
 80073cc:	4b3d      	ldr	r3, [pc, #244]	; (80074c4 <_strtod_l+0xbf4>)
 80073ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073d0:	403b      	ands	r3, r7
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d1a0      	bne.n	8007318 <_strtod_l+0xa48>
 80073d6:	0028      	movs	r0, r5
 80073d8:	0021      	movs	r1, r4
 80073da:	f7f9 f883 	bl	80004e4 <__aeabi_d2lz>
 80073de:	f7f9 f8bd 	bl	800055c <__aeabi_l2d>
 80073e2:	0002      	movs	r2, r0
 80073e4:	000b      	movs	r3, r1
 80073e6:	0028      	movs	r0, r5
 80073e8:	0021      	movs	r1, r4
 80073ea:	f7fa fa77 	bl	80018dc <__aeabi_dsub>
 80073ee:	033b      	lsls	r3, r7, #12
 80073f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073f2:	0b1b      	lsrs	r3, r3, #12
 80073f4:	4333      	orrs	r3, r6
 80073f6:	4313      	orrs	r3, r2
 80073f8:	0004      	movs	r4, r0
 80073fa:	000d      	movs	r5, r1
 80073fc:	4a38      	ldr	r2, [pc, #224]	; (80074e0 <_strtod_l+0xc10>)
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d055      	beq.n	80074ae <_strtod_l+0xbde>
 8007402:	4b38      	ldr	r3, [pc, #224]	; (80074e4 <_strtod_l+0xc14>)
 8007404:	f7f9 f828 	bl	8000458 <__aeabi_dcmplt>
 8007408:	2800      	cmp	r0, #0
 800740a:	d000      	beq.n	800740e <_strtod_l+0xb3e>
 800740c:	e4d3      	b.n	8006db6 <_strtod_l+0x4e6>
 800740e:	0020      	movs	r0, r4
 8007410:	0029      	movs	r1, r5
 8007412:	4a35      	ldr	r2, [pc, #212]	; (80074e8 <_strtod_l+0xc18>)
 8007414:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <_strtod_l+0xc08>)
 8007416:	f7f9 f833 	bl	8000480 <__aeabi_dcmpgt>
 800741a:	2800      	cmp	r0, #0
 800741c:	d100      	bne.n	8007420 <_strtod_l+0xb50>
 800741e:	e77b      	b.n	8007318 <_strtod_l+0xa48>
 8007420:	e4c9      	b.n	8006db6 <_strtod_l+0x4e6>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d02b      	beq.n	8007480 <_strtod_l+0xbb0>
 8007428:	23d4      	movs	r3, #212	; 0xd4
 800742a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800742c:	04db      	lsls	r3, r3, #19
 800742e:	429a      	cmp	r2, r3
 8007430:	d826      	bhi.n	8007480 <_strtod_l+0xbb0>
 8007432:	0028      	movs	r0, r5
 8007434:	0021      	movs	r1, r4
 8007436:	4a2d      	ldr	r2, [pc, #180]	; (80074ec <_strtod_l+0xc1c>)
 8007438:	4b2d      	ldr	r3, [pc, #180]	; (80074f0 <_strtod_l+0xc20>)
 800743a:	f7f9 f817 	bl	800046c <__aeabi_dcmple>
 800743e:	2800      	cmp	r0, #0
 8007440:	d017      	beq.n	8007472 <_strtod_l+0xba2>
 8007442:	0028      	movs	r0, r5
 8007444:	0021      	movs	r1, r4
 8007446:	f7f9 f82f 	bl	80004a8 <__aeabi_d2uiz>
 800744a:	2800      	cmp	r0, #0
 800744c:	d100      	bne.n	8007450 <_strtod_l+0xb80>
 800744e:	3001      	adds	r0, #1
 8007450:	f7fa fe5a 	bl	8002108 <__aeabi_ui2d>
 8007454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007456:	0005      	movs	r5, r0
 8007458:	000b      	movs	r3, r1
 800745a:	000c      	movs	r4, r1
 800745c:	2a00      	cmp	r2, #0
 800745e:	d122      	bne.n	80074a6 <_strtod_l+0xbd6>
 8007460:	2280      	movs	r2, #128	; 0x80
 8007462:	0612      	lsls	r2, r2, #24
 8007464:	188b      	adds	r3, r1, r2
 8007466:	9018      	str	r0, [sp, #96]	; 0x60
 8007468:	9319      	str	r3, [sp, #100]	; 0x64
 800746a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800746c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800746e:	9210      	str	r2, [sp, #64]	; 0x40
 8007470:	9311      	str	r3, [sp, #68]	; 0x44
 8007472:	22d6      	movs	r2, #214	; 0xd6
 8007474:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007476:	04d2      	lsls	r2, r2, #19
 8007478:	189b      	adds	r3, r3, r2
 800747a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	9311      	str	r3, [sp, #68]	; 0x44
 8007480:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007482:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007484:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007486:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007488:	f001 ffae 	bl	80093e8 <__ulp>
 800748c:	0002      	movs	r2, r0
 800748e:	000b      	movs	r3, r1
 8007490:	0030      	movs	r0, r6
 8007492:	0039      	movs	r1, r7
 8007494:	f7f9 ffb6 	bl	8001404 <__aeabi_dmul>
 8007498:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800749a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800749c:	f7f9 f874 	bl	8000588 <__aeabi_dadd>
 80074a0:	0006      	movs	r6, r0
 80074a2:	000f      	movs	r7, r1
 80074a4:	e78f      	b.n	80073c6 <_strtod_l+0xaf6>
 80074a6:	0002      	movs	r2, r0
 80074a8:	9218      	str	r2, [sp, #96]	; 0x60
 80074aa:	9319      	str	r3, [sp, #100]	; 0x64
 80074ac:	e7dd      	b.n	800746a <_strtod_l+0xb9a>
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <_strtod_l+0xc24>)
 80074b0:	f7f8 ffd2 	bl	8000458 <__aeabi_dcmplt>
 80074b4:	e7b1      	b.n	800741a <_strtod_l+0xb4a>
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	fff00000 	.word	0xfff00000
 80074bc:	000fffff 	.word	0x000fffff
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	7ff00000 	.word	0x7ff00000
 80074c8:	7fe00000 	.word	0x7fe00000
 80074cc:	fcb00000 	.word	0xfcb00000
 80074d0:	7c9fffff 	.word	0x7c9fffff
 80074d4:	7fefffff 	.word	0x7fefffff
 80074d8:	3fe00000 	.word	0x3fe00000
 80074dc:	bff00000 	.word	0xbff00000
 80074e0:	94a03595 	.word	0x94a03595
 80074e4:	3fdfffff 	.word	0x3fdfffff
 80074e8:	35afe535 	.word	0x35afe535
 80074ec:	ffc00000 	.word	0xffc00000
 80074f0:	41dfffff 	.word	0x41dfffff
 80074f4:	3fcfffff 	.word	0x3fcfffff

080074f8 <_strtod_r>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	4b02      	ldr	r3, [pc, #8]	; (8007504 <_strtod_r+0xc>)
 80074fc:	f7ff f9e8 	bl	80068d0 <_strtod_l>
 8007500:	bd10      	pop	{r4, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	2000008c 	.word	0x2000008c

08007508 <_strtol_l.constprop.0>:
 8007508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750a:	b087      	sub	sp, #28
 800750c:	001e      	movs	r6, r3
 800750e:	9005      	str	r0, [sp, #20]
 8007510:	9101      	str	r1, [sp, #4]
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d045      	beq.n	80075a4 <_strtol_l.constprop.0+0x9c>
 8007518:	000b      	movs	r3, r1
 800751a:	2e24      	cmp	r6, #36	; 0x24
 800751c:	d842      	bhi.n	80075a4 <_strtol_l.constprop.0+0x9c>
 800751e:	4a3f      	ldr	r2, [pc, #252]	; (800761c <_strtol_l.constprop.0+0x114>)
 8007520:	2108      	movs	r1, #8
 8007522:	4694      	mov	ip, r2
 8007524:	001a      	movs	r2, r3
 8007526:	4660      	mov	r0, ip
 8007528:	7814      	ldrb	r4, [r2, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	5d00      	ldrb	r0, [r0, r4]
 800752e:	001d      	movs	r5, r3
 8007530:	0007      	movs	r7, r0
 8007532:	400f      	ands	r7, r1
 8007534:	4208      	tst	r0, r1
 8007536:	d1f5      	bne.n	8007524 <_strtol_l.constprop.0+0x1c>
 8007538:	2c2d      	cmp	r4, #45	; 0x2d
 800753a:	d13a      	bne.n	80075b2 <_strtol_l.constprop.0+0xaa>
 800753c:	2701      	movs	r7, #1
 800753e:	781c      	ldrb	r4, [r3, #0]
 8007540:	1c95      	adds	r5, r2, #2
 8007542:	2e00      	cmp	r6, #0
 8007544:	d065      	beq.n	8007612 <_strtol_l.constprop.0+0x10a>
 8007546:	2e10      	cmp	r6, #16
 8007548:	d109      	bne.n	800755e <_strtol_l.constprop.0+0x56>
 800754a:	2c30      	cmp	r4, #48	; 0x30
 800754c:	d107      	bne.n	800755e <_strtol_l.constprop.0+0x56>
 800754e:	2220      	movs	r2, #32
 8007550:	782b      	ldrb	r3, [r5, #0]
 8007552:	4393      	bics	r3, r2
 8007554:	2b58      	cmp	r3, #88	; 0x58
 8007556:	d157      	bne.n	8007608 <_strtol_l.constprop.0+0x100>
 8007558:	2610      	movs	r6, #16
 800755a:	786c      	ldrb	r4, [r5, #1]
 800755c:	3502      	adds	r5, #2
 800755e:	4b30      	ldr	r3, [pc, #192]	; (8007620 <_strtol_l.constprop.0+0x118>)
 8007560:	0031      	movs	r1, r6
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	0018      	movs	r0, r3
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	f7f8 fe70 	bl	800024c <__aeabi_uidivmod>
 800756c:	2300      	movs	r3, #0
 800756e:	2201      	movs	r2, #1
 8007570:	4684      	mov	ip, r0
 8007572:	0018      	movs	r0, r3
 8007574:	9104      	str	r1, [sp, #16]
 8007576:	4252      	negs	r2, r2
 8007578:	0021      	movs	r1, r4
 800757a:	3930      	subs	r1, #48	; 0x30
 800757c:	2909      	cmp	r1, #9
 800757e:	d81d      	bhi.n	80075bc <_strtol_l.constprop.0+0xb4>
 8007580:	000c      	movs	r4, r1
 8007582:	42a6      	cmp	r6, r4
 8007584:	dd28      	ble.n	80075d8 <_strtol_l.constprop.0+0xd0>
 8007586:	2b00      	cmp	r3, #0
 8007588:	db24      	blt.n	80075d4 <_strtol_l.constprop.0+0xcc>
 800758a:	0013      	movs	r3, r2
 800758c:	4584      	cmp	ip, r0
 800758e:	d306      	bcc.n	800759e <_strtol_l.constprop.0+0x96>
 8007590:	d102      	bne.n	8007598 <_strtol_l.constprop.0+0x90>
 8007592:	9904      	ldr	r1, [sp, #16]
 8007594:	42a1      	cmp	r1, r4
 8007596:	db02      	blt.n	800759e <_strtol_l.constprop.0+0x96>
 8007598:	2301      	movs	r3, #1
 800759a:	4370      	muls	r0, r6
 800759c:	1820      	adds	r0, r4, r0
 800759e:	782c      	ldrb	r4, [r5, #0]
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7e9      	b.n	8007578 <_strtol_l.constprop.0+0x70>
 80075a4:	f7fe f9a8 	bl	80058f8 <__errno>
 80075a8:	2316      	movs	r3, #22
 80075aa:	6003      	str	r3, [r0, #0]
 80075ac:	2000      	movs	r0, #0
 80075ae:	b007      	add	sp, #28
 80075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b2:	2c2b      	cmp	r4, #43	; 0x2b
 80075b4:	d1c5      	bne.n	8007542 <_strtol_l.constprop.0+0x3a>
 80075b6:	781c      	ldrb	r4, [r3, #0]
 80075b8:	1c95      	adds	r5, r2, #2
 80075ba:	e7c2      	b.n	8007542 <_strtol_l.constprop.0+0x3a>
 80075bc:	0021      	movs	r1, r4
 80075be:	3941      	subs	r1, #65	; 0x41
 80075c0:	2919      	cmp	r1, #25
 80075c2:	d801      	bhi.n	80075c8 <_strtol_l.constprop.0+0xc0>
 80075c4:	3c37      	subs	r4, #55	; 0x37
 80075c6:	e7dc      	b.n	8007582 <_strtol_l.constprop.0+0x7a>
 80075c8:	0021      	movs	r1, r4
 80075ca:	3961      	subs	r1, #97	; 0x61
 80075cc:	2919      	cmp	r1, #25
 80075ce:	d803      	bhi.n	80075d8 <_strtol_l.constprop.0+0xd0>
 80075d0:	3c57      	subs	r4, #87	; 0x57
 80075d2:	e7d6      	b.n	8007582 <_strtol_l.constprop.0+0x7a>
 80075d4:	0013      	movs	r3, r2
 80075d6:	e7e2      	b.n	800759e <_strtol_l.constprop.0+0x96>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da09      	bge.n	80075f0 <_strtol_l.constprop.0+0xe8>
 80075dc:	2322      	movs	r3, #34	; 0x22
 80075de:	9a05      	ldr	r2, [sp, #20]
 80075e0:	9803      	ldr	r0, [sp, #12]
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	9b02      	ldr	r3, [sp, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0e1      	beq.n	80075ae <_strtol_l.constprop.0+0xa6>
 80075ea:	1e6b      	subs	r3, r5, #1
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	e007      	b.n	8007600 <_strtol_l.constprop.0+0xf8>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	d000      	beq.n	80075f6 <_strtol_l.constprop.0+0xee>
 80075f4:	4240      	negs	r0, r0
 80075f6:	9a02      	ldr	r2, [sp, #8]
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d0d8      	beq.n	80075ae <_strtol_l.constprop.0+0xa6>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f4      	bne.n	80075ea <_strtol_l.constprop.0+0xe2>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	9a01      	ldr	r2, [sp, #4]
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	e7d2      	b.n	80075ae <_strtol_l.constprop.0+0xa6>
 8007608:	2430      	movs	r4, #48	; 0x30
 800760a:	2e00      	cmp	r6, #0
 800760c:	d1a7      	bne.n	800755e <_strtol_l.constprop.0+0x56>
 800760e:	3608      	adds	r6, #8
 8007610:	e7a5      	b.n	800755e <_strtol_l.constprop.0+0x56>
 8007612:	2c30      	cmp	r4, #48	; 0x30
 8007614:	d09b      	beq.n	800754e <_strtol_l.constprop.0+0x46>
 8007616:	260a      	movs	r6, #10
 8007618:	e7a1      	b.n	800755e <_strtol_l.constprop.0+0x56>
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	0800a751 	.word	0x0800a751
 8007620:	7fffffff 	.word	0x7fffffff

08007624 <_strtol_r>:
 8007624:	b510      	push	{r4, lr}
 8007626:	f7ff ff6f 	bl	8007508 <_strtol_l.constprop.0>
 800762a:	bd10      	pop	{r4, pc}

0800762c <quorem>:
 800762c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762e:	0006      	movs	r6, r0
 8007630:	690b      	ldr	r3, [r1, #16]
 8007632:	6932      	ldr	r2, [r6, #16]
 8007634:	b087      	sub	sp, #28
 8007636:	2000      	movs	r0, #0
 8007638:	9103      	str	r1, [sp, #12]
 800763a:	429a      	cmp	r2, r3
 800763c:	db65      	blt.n	800770a <quorem+0xde>
 800763e:	3b01      	subs	r3, #1
 8007640:	009c      	lsls	r4, r3, #2
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	000b      	movs	r3, r1
 8007646:	3314      	adds	r3, #20
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	191b      	adds	r3, r3, r4
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	0033      	movs	r3, r6
 8007650:	3314      	adds	r3, #20
 8007652:	9302      	str	r3, [sp, #8]
 8007654:	191c      	adds	r4, r3, r4
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	6827      	ldr	r7, [r4, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	0038      	movs	r0, r7
 800765e:	1c5d      	adds	r5, r3, #1
 8007660:	0029      	movs	r1, r5
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	f7f8 fd6c 	bl	8000140 <__udivsi3>
 8007668:	9001      	str	r0, [sp, #4]
 800766a:	42af      	cmp	r7, r5
 800766c:	d324      	bcc.n	80076b8 <quorem+0x8c>
 800766e:	2500      	movs	r5, #0
 8007670:	46ac      	mov	ip, r5
 8007672:	9802      	ldr	r0, [sp, #8]
 8007674:	9f05      	ldr	r7, [sp, #20]
 8007676:	cf08      	ldmia	r7!, {r3}
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	b299      	uxth	r1, r3
 800767c:	4351      	muls	r1, r2
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	4353      	muls	r3, r2
 8007682:	1949      	adds	r1, r1, r5
 8007684:	0c0a      	lsrs	r2, r1, #16
 8007686:	189b      	adds	r3, r3, r2
 8007688:	6802      	ldr	r2, [r0, #0]
 800768a:	b289      	uxth	r1, r1
 800768c:	b292      	uxth	r2, r2
 800768e:	4462      	add	r2, ip
 8007690:	1a52      	subs	r2, r2, r1
 8007692:	6801      	ldr	r1, [r0, #0]
 8007694:	0c1d      	lsrs	r5, r3, #16
 8007696:	0c09      	lsrs	r1, r1, #16
 8007698:	b29b      	uxth	r3, r3
 800769a:	1acb      	subs	r3, r1, r3
 800769c:	1411      	asrs	r1, r2, #16
 800769e:	185b      	adds	r3, r3, r1
 80076a0:	1419      	asrs	r1, r3, #16
 80076a2:	b292      	uxth	r2, r2
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	431a      	orrs	r2, r3
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	468c      	mov	ip, r1
 80076ac:	c004      	stmia	r0!, {r2}
 80076ae:	42bb      	cmp	r3, r7
 80076b0:	d2e1      	bcs.n	8007676 <quorem+0x4a>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d030      	beq.n	800771a <quorem+0xee>
 80076b8:	0030      	movs	r0, r6
 80076ba:	9903      	ldr	r1, [sp, #12]
 80076bc:	f001 fde0 	bl	8009280 <__mcmp>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	db21      	blt.n	8007708 <quorem+0xdc>
 80076c4:	0030      	movs	r0, r6
 80076c6:	2400      	movs	r4, #0
 80076c8:	9b01      	ldr	r3, [sp, #4]
 80076ca:	9903      	ldr	r1, [sp, #12]
 80076cc:	3301      	adds	r3, #1
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	3014      	adds	r0, #20
 80076d2:	3114      	adds	r1, #20
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	c920      	ldmia	r1!, {r5}
 80076d8:	b29a      	uxth	r2, r3
 80076da:	1914      	adds	r4, r2, r4
 80076dc:	b2aa      	uxth	r2, r5
 80076de:	1aa2      	subs	r2, r4, r2
 80076e0:	0c1b      	lsrs	r3, r3, #16
 80076e2:	0c2d      	lsrs	r5, r5, #16
 80076e4:	1414      	asrs	r4, r2, #16
 80076e6:	1b5b      	subs	r3, r3, r5
 80076e8:	191b      	adds	r3, r3, r4
 80076ea:	141c      	asrs	r4, r3, #16
 80076ec:	b292      	uxth	r2, r2
 80076ee:	041b      	lsls	r3, r3, #16
 80076f0:	4313      	orrs	r3, r2
 80076f2:	c008      	stmia	r0!, {r3}
 80076f4:	9b04      	ldr	r3, [sp, #16]
 80076f6:	428b      	cmp	r3, r1
 80076f8:	d2ec      	bcs.n	80076d4 <quorem+0xa8>
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	9a02      	ldr	r2, [sp, #8]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	18d3      	adds	r3, r2, r3
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	2a00      	cmp	r2, #0
 8007706:	d015      	beq.n	8007734 <quorem+0x108>
 8007708:	9801      	ldr	r0, [sp, #4]
 800770a:	b007      	add	sp, #28
 800770c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <quorem+0xf6>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	3b01      	subs	r3, #1
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	9b02      	ldr	r3, [sp, #8]
 800771c:	3c04      	subs	r4, #4
 800771e:	42a3      	cmp	r3, r4
 8007720:	d3f5      	bcc.n	800770e <quorem+0xe2>
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	6133      	str	r3, [r6, #16]
 8007726:	e7c7      	b.n	80076b8 <quorem+0x8c>
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	2a00      	cmp	r2, #0
 800772c:	d106      	bne.n	800773c <quorem+0x110>
 800772e:	9a00      	ldr	r2, [sp, #0]
 8007730:	3a01      	subs	r2, #1
 8007732:	9200      	str	r2, [sp, #0]
 8007734:	9a02      	ldr	r2, [sp, #8]
 8007736:	3b04      	subs	r3, #4
 8007738:	429a      	cmp	r2, r3
 800773a:	d3f5      	bcc.n	8007728 <quorem+0xfc>
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	6133      	str	r3, [r6, #16]
 8007740:	e7e2      	b.n	8007708 <quorem+0xdc>
	...

08007744 <_dtoa_r>:
 8007744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007746:	b09d      	sub	sp, #116	; 0x74
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	9303      	str	r3, [sp, #12]
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	9c03      	ldr	r4, [sp, #12]
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	9409      	str	r4, [sp, #36]	; 0x24
 8007754:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007756:	0007      	movs	r7, r0
 8007758:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800775a:	2c00      	cmp	r4, #0
 800775c:	d10e      	bne.n	800777c <_dtoa_r+0x38>
 800775e:	2010      	movs	r0, #16
 8007760:	f7fe f8f4 	bl	800594c <malloc>
 8007764:	1e02      	subs	r2, r0, #0
 8007766:	6278      	str	r0, [r7, #36]	; 0x24
 8007768:	d104      	bne.n	8007774 <_dtoa_r+0x30>
 800776a:	21ea      	movs	r1, #234	; 0xea
 800776c:	4bc7      	ldr	r3, [pc, #796]	; (8007a8c <_dtoa_r+0x348>)
 800776e:	48c8      	ldr	r0, [pc, #800]	; (8007a90 <_dtoa_r+0x34c>)
 8007770:	f002 fbc4 	bl	8009efc <__assert_func>
 8007774:	6044      	str	r4, [r0, #4]
 8007776:	6084      	str	r4, [r0, #8]
 8007778:	6004      	str	r4, [r0, #0]
 800777a:	60c4      	str	r4, [r0, #12]
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	2900      	cmp	r1, #0
 8007782:	d00a      	beq.n	800779a <_dtoa_r+0x56>
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	2301      	movs	r3, #1
 8007788:	4093      	lsls	r3, r2
 800778a:	604a      	str	r2, [r1, #4]
 800778c:	608b      	str	r3, [r1, #8]
 800778e:	0038      	movs	r0, r7
 8007790:	f001 faea 	bl	8008d68 <_Bfree>
 8007794:	2200      	movs	r2, #0
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	da20      	bge.n	80077e2 <_dtoa_r+0x9e>
 80077a0:	2301      	movs	r3, #1
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	9309      	str	r3, [sp, #36]	; 0x24
 80077ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077ae:	4bb9      	ldr	r3, [pc, #740]	; (8007a94 <_dtoa_r+0x350>)
 80077b0:	4ab8      	ldr	r2, [pc, #736]	; (8007a94 <_dtoa_r+0x350>)
 80077b2:	402b      	ands	r3, r5
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d117      	bne.n	80077e8 <_dtoa_r+0xa4>
 80077b8:	4bb7      	ldr	r3, [pc, #732]	; (8007a98 <_dtoa_r+0x354>)
 80077ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077bc:	0328      	lsls	r0, r5, #12
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	0b00      	lsrs	r0, r0, #12
 80077c4:	4318      	orrs	r0, r3
 80077c6:	d101      	bne.n	80077cc <_dtoa_r+0x88>
 80077c8:	f000 fdbf 	bl	800834a <_dtoa_r+0xc06>
 80077cc:	48b3      	ldr	r0, [pc, #716]	; (8007a9c <_dtoa_r+0x358>)
 80077ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077d0:	9006      	str	r0, [sp, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <_dtoa_r+0x98>
 80077d6:	4bb2      	ldr	r3, [pc, #712]	; (8007aa0 <_dtoa_r+0x35c>)
 80077d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	9806      	ldr	r0, [sp, #24]
 80077de:	b01d      	add	sp, #116	; 0x74
 80077e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e2:	2300      	movs	r3, #0
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	e7e1      	b.n	80077ac <_dtoa_r+0x68>
 80077e8:	9b08      	ldr	r3, [sp, #32]
 80077ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80077ec:	9312      	str	r3, [sp, #72]	; 0x48
 80077ee:	9413      	str	r4, [sp, #76]	; 0x4c
 80077f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	f7f8 fe28 	bl	800044c <__aeabi_dcmpeq>
 80077fc:	1e04      	subs	r4, r0, #0
 80077fe:	d009      	beq.n	8007814 <_dtoa_r+0xd0>
 8007800:	2301      	movs	r3, #1
 8007802:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	4ba7      	ldr	r3, [pc, #668]	; (8007aa4 <_dtoa_r+0x360>)
 8007808:	9306      	str	r3, [sp, #24]
 800780a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0e5      	beq.n	80077dc <_dtoa_r+0x98>
 8007810:	4ba5      	ldr	r3, [pc, #660]	; (8007aa8 <_dtoa_r+0x364>)
 8007812:	e7e1      	b.n	80077d8 <_dtoa_r+0x94>
 8007814:	ab1a      	add	r3, sp, #104	; 0x68
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	ab1b      	add	r3, sp, #108	; 0x6c
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	0038      	movs	r0, r7
 800781e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007822:	f001 fe55 	bl	80094d0 <__d2b>
 8007826:	006e      	lsls	r6, r5, #1
 8007828:	9005      	str	r0, [sp, #20]
 800782a:	0d76      	lsrs	r6, r6, #21
 800782c:	d100      	bne.n	8007830 <_dtoa_r+0xec>
 800782e:	e07c      	b.n	800792a <_dtoa_r+0x1e6>
 8007830:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007832:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007836:	4a9d      	ldr	r2, [pc, #628]	; (8007aac <_dtoa_r+0x368>)
 8007838:	031b      	lsls	r3, r3, #12
 800783a:	0b1b      	lsrs	r3, r3, #12
 800783c:	431a      	orrs	r2, r3
 800783e:	0011      	movs	r1, r2
 8007840:	4b9b      	ldr	r3, [pc, #620]	; (8007ab0 <_dtoa_r+0x36c>)
 8007842:	9418      	str	r4, [sp, #96]	; 0x60
 8007844:	18f6      	adds	r6, r6, r3
 8007846:	2200      	movs	r2, #0
 8007848:	4b9a      	ldr	r3, [pc, #616]	; (8007ab4 <_dtoa_r+0x370>)
 800784a:	f7fa f847 	bl	80018dc <__aeabi_dsub>
 800784e:	4a9a      	ldr	r2, [pc, #616]	; (8007ab8 <_dtoa_r+0x374>)
 8007850:	4b9a      	ldr	r3, [pc, #616]	; (8007abc <_dtoa_r+0x378>)
 8007852:	f7f9 fdd7 	bl	8001404 <__aeabi_dmul>
 8007856:	4a9a      	ldr	r2, [pc, #616]	; (8007ac0 <_dtoa_r+0x37c>)
 8007858:	4b9a      	ldr	r3, [pc, #616]	; (8007ac4 <_dtoa_r+0x380>)
 800785a:	f7f8 fe95 	bl	8000588 <__aeabi_dadd>
 800785e:	0004      	movs	r4, r0
 8007860:	0030      	movs	r0, r6
 8007862:	000d      	movs	r5, r1
 8007864:	f7fa fc20 	bl	80020a8 <__aeabi_i2d>
 8007868:	4a97      	ldr	r2, [pc, #604]	; (8007ac8 <_dtoa_r+0x384>)
 800786a:	4b98      	ldr	r3, [pc, #608]	; (8007acc <_dtoa_r+0x388>)
 800786c:	f7f9 fdca 	bl	8001404 <__aeabi_dmul>
 8007870:	0002      	movs	r2, r0
 8007872:	000b      	movs	r3, r1
 8007874:	0020      	movs	r0, r4
 8007876:	0029      	movs	r1, r5
 8007878:	f7f8 fe86 	bl	8000588 <__aeabi_dadd>
 800787c:	0004      	movs	r4, r0
 800787e:	000d      	movs	r5, r1
 8007880:	f7fa fbdc 	bl	800203c <__aeabi_d2iz>
 8007884:	2200      	movs	r2, #0
 8007886:	9002      	str	r0, [sp, #8]
 8007888:	2300      	movs	r3, #0
 800788a:	0020      	movs	r0, r4
 800788c:	0029      	movs	r1, r5
 800788e:	f7f8 fde3 	bl	8000458 <__aeabi_dcmplt>
 8007892:	2800      	cmp	r0, #0
 8007894:	d00b      	beq.n	80078ae <_dtoa_r+0x16a>
 8007896:	9802      	ldr	r0, [sp, #8]
 8007898:	f7fa fc06 	bl	80020a8 <__aeabi_i2d>
 800789c:	002b      	movs	r3, r5
 800789e:	0022      	movs	r2, r4
 80078a0:	f7f8 fdd4 	bl	800044c <__aeabi_dcmpeq>
 80078a4:	4243      	negs	r3, r0
 80078a6:	4158      	adcs	r0, r3
 80078a8:	9b02      	ldr	r3, [sp, #8]
 80078aa:	1a1b      	subs	r3, r3, r0
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	2301      	movs	r3, #1
 80078b0:	9316      	str	r3, [sp, #88]	; 0x58
 80078b2:	9b02      	ldr	r3, [sp, #8]
 80078b4:	2b16      	cmp	r3, #22
 80078b6:	d80f      	bhi.n	80078d8 <_dtoa_r+0x194>
 80078b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078bc:	00da      	lsls	r2, r3, #3
 80078be:	4b84      	ldr	r3, [pc, #528]	; (8007ad0 <_dtoa_r+0x38c>)
 80078c0:	189b      	adds	r3, r3, r2
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f7f8 fdc7 	bl	8000458 <__aeabi_dcmplt>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d049      	beq.n	8007962 <_dtoa_r+0x21e>
 80078ce:	9b02      	ldr	r3, [sp, #8]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	9302      	str	r3, [sp, #8]
 80078d4:	2300      	movs	r3, #0
 80078d6:	9316      	str	r3, [sp, #88]	; 0x58
 80078d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80078da:	1b9e      	subs	r6, r3, r6
 80078dc:	2300      	movs	r3, #0
 80078de:	930a      	str	r3, [sp, #40]	; 0x28
 80078e0:	0033      	movs	r3, r6
 80078e2:	3b01      	subs	r3, #1
 80078e4:	930d      	str	r3, [sp, #52]	; 0x34
 80078e6:	d504      	bpl.n	80078f2 <_dtoa_r+0x1ae>
 80078e8:	2301      	movs	r3, #1
 80078ea:	1b9b      	subs	r3, r3, r6
 80078ec:	930a      	str	r3, [sp, #40]	; 0x28
 80078ee:	2300      	movs	r3, #0
 80078f0:	930d      	str	r3, [sp, #52]	; 0x34
 80078f2:	9b02      	ldr	r3, [sp, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db36      	blt.n	8007966 <_dtoa_r+0x222>
 80078f8:	9a02      	ldr	r2, [sp, #8]
 80078fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fc:	4694      	mov	ip, r2
 80078fe:	4463      	add	r3, ip
 8007900:	930d      	str	r3, [sp, #52]	; 0x34
 8007902:	2300      	movs	r3, #0
 8007904:	9215      	str	r2, [sp, #84]	; 0x54
 8007906:	930e      	str	r3, [sp, #56]	; 0x38
 8007908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790a:	2401      	movs	r4, #1
 800790c:	2b09      	cmp	r3, #9
 800790e:	d864      	bhi.n	80079da <_dtoa_r+0x296>
 8007910:	2b05      	cmp	r3, #5
 8007912:	dd02      	ble.n	800791a <_dtoa_r+0x1d6>
 8007914:	2400      	movs	r4, #0
 8007916:	3b04      	subs	r3, #4
 8007918:	9322      	str	r3, [sp, #136]	; 0x88
 800791a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800791c:	1e98      	subs	r0, r3, #2
 800791e:	2803      	cmp	r0, #3
 8007920:	d864      	bhi.n	80079ec <_dtoa_r+0x2a8>
 8007922:	f7f8 fbf9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007926:	3829      	.short	0x3829
 8007928:	5836      	.short	0x5836
 800792a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800792c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800792e:	189e      	adds	r6, r3, r2
 8007930:	4b68      	ldr	r3, [pc, #416]	; (8007ad4 <_dtoa_r+0x390>)
 8007932:	18f2      	adds	r2, r6, r3
 8007934:	2a20      	cmp	r2, #32
 8007936:	dd0f      	ble.n	8007958 <_dtoa_r+0x214>
 8007938:	2340      	movs	r3, #64	; 0x40
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	409d      	lsls	r5, r3
 800793e:	4b66      	ldr	r3, [pc, #408]	; (8007ad8 <_dtoa_r+0x394>)
 8007940:	9802      	ldr	r0, [sp, #8]
 8007942:	18f3      	adds	r3, r6, r3
 8007944:	40d8      	lsrs	r0, r3
 8007946:	4328      	orrs	r0, r5
 8007948:	f7fa fbde 	bl	8002108 <__aeabi_ui2d>
 800794c:	2301      	movs	r3, #1
 800794e:	4c63      	ldr	r4, [pc, #396]	; (8007adc <_dtoa_r+0x398>)
 8007950:	3e01      	subs	r6, #1
 8007952:	1909      	adds	r1, r1, r4
 8007954:	9318      	str	r3, [sp, #96]	; 0x60
 8007956:	e776      	b.n	8007846 <_dtoa_r+0x102>
 8007958:	2320      	movs	r3, #32
 800795a:	9802      	ldr	r0, [sp, #8]
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	4098      	lsls	r0, r3
 8007960:	e7f2      	b.n	8007948 <_dtoa_r+0x204>
 8007962:	9016      	str	r0, [sp, #88]	; 0x58
 8007964:	e7b8      	b.n	80078d8 <_dtoa_r+0x194>
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	9a02      	ldr	r2, [sp, #8]
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	930a      	str	r3, [sp, #40]	; 0x28
 800796e:	4253      	negs	r3, r2
 8007970:	930e      	str	r3, [sp, #56]	; 0x38
 8007972:	2300      	movs	r3, #0
 8007974:	9315      	str	r3, [sp, #84]	; 0x54
 8007976:	e7c7      	b.n	8007908 <_dtoa_r+0x1c4>
 8007978:	2300      	movs	r3, #0
 800797a:	930f      	str	r3, [sp, #60]	; 0x3c
 800797c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800797e:	930c      	str	r3, [sp, #48]	; 0x30
 8007980:	9307      	str	r3, [sp, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	dc13      	bgt.n	80079ae <_dtoa_r+0x26a>
 8007986:	2301      	movs	r3, #1
 8007988:	001a      	movs	r2, r3
 800798a:	930c      	str	r3, [sp, #48]	; 0x30
 800798c:	9307      	str	r3, [sp, #28]
 800798e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007990:	e00d      	b.n	80079ae <_dtoa_r+0x26a>
 8007992:	2301      	movs	r3, #1
 8007994:	e7f1      	b.n	800797a <_dtoa_r+0x236>
 8007996:	2300      	movs	r3, #0
 8007998:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800799a:	930f      	str	r3, [sp, #60]	; 0x3c
 800799c:	4694      	mov	ip, r2
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	4463      	add	r3, ip
 80079a2:	930c      	str	r3, [sp, #48]	; 0x30
 80079a4:	3301      	adds	r3, #1
 80079a6:	9307      	str	r3, [sp, #28]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc00      	bgt.n	80079ae <_dtoa_r+0x26a>
 80079ac:	2301      	movs	r3, #1
 80079ae:	2200      	movs	r2, #0
 80079b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079b2:	6042      	str	r2, [r0, #4]
 80079b4:	3204      	adds	r2, #4
 80079b6:	0015      	movs	r5, r2
 80079b8:	3514      	adds	r5, #20
 80079ba:	6841      	ldr	r1, [r0, #4]
 80079bc:	429d      	cmp	r5, r3
 80079be:	d919      	bls.n	80079f4 <_dtoa_r+0x2b0>
 80079c0:	0038      	movs	r0, r7
 80079c2:	f001 f98d 	bl	8008ce0 <_Balloc>
 80079c6:	9006      	str	r0, [sp, #24]
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d117      	bne.n	80079fc <_dtoa_r+0x2b8>
 80079cc:	21d5      	movs	r1, #213	; 0xd5
 80079ce:	0002      	movs	r2, r0
 80079d0:	4b43      	ldr	r3, [pc, #268]	; (8007ae0 <_dtoa_r+0x39c>)
 80079d2:	0049      	lsls	r1, r1, #1
 80079d4:	e6cb      	b.n	800776e <_dtoa_r+0x2a>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e7de      	b.n	8007998 <_dtoa_r+0x254>
 80079da:	2300      	movs	r3, #0
 80079dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80079de:	9322      	str	r3, [sp, #136]	; 0x88
 80079e0:	3b01      	subs	r3, #1
 80079e2:	930c      	str	r3, [sp, #48]	; 0x30
 80079e4:	9307      	str	r3, [sp, #28]
 80079e6:	2200      	movs	r2, #0
 80079e8:	3313      	adds	r3, #19
 80079ea:	e7d0      	b.n	800798e <_dtoa_r+0x24a>
 80079ec:	2301      	movs	r3, #1
 80079ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80079f0:	3b02      	subs	r3, #2
 80079f2:	e7f6      	b.n	80079e2 <_dtoa_r+0x29e>
 80079f4:	3101      	adds	r1, #1
 80079f6:	6041      	str	r1, [r0, #4]
 80079f8:	0052      	lsls	r2, r2, #1
 80079fa:	e7dc      	b.n	80079b6 <_dtoa_r+0x272>
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	9a06      	ldr	r2, [sp, #24]
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	2b0e      	cmp	r3, #14
 8007a06:	d900      	bls.n	8007a0a <_dtoa_r+0x2c6>
 8007a08:	e0eb      	b.n	8007be2 <_dtoa_r+0x49e>
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	d100      	bne.n	8007a10 <_dtoa_r+0x2cc>
 8007a0e:	e0e8      	b.n	8007be2 <_dtoa_r+0x49e>
 8007a10:	9b02      	ldr	r3, [sp, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dd68      	ble.n	8007ae8 <_dtoa_r+0x3a4>
 8007a16:	001a      	movs	r2, r3
 8007a18:	210f      	movs	r1, #15
 8007a1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <_dtoa_r+0x38c>)
 8007a1c:	400a      	ands	r2, r1
 8007a1e:	00d2      	lsls	r2, r2, #3
 8007a20:	189b      	adds	r3, r3, r2
 8007a22:	681d      	ldr	r5, [r3, #0]
 8007a24:	685e      	ldr	r6, [r3, #4]
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	111c      	asrs	r4, r3, #4
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	9310      	str	r3, [sp, #64]	; 0x40
 8007a2e:	9b02      	ldr	r3, [sp, #8]
 8007a30:	05db      	lsls	r3, r3, #23
 8007a32:	d50b      	bpl.n	8007a4c <_dtoa_r+0x308>
 8007a34:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <_dtoa_r+0x3a0>)
 8007a36:	400c      	ands	r4, r1
 8007a38:	6a1a      	ldr	r2, [r3, #32]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a40:	f7f9 f8de 	bl	8000c00 <__aeabi_ddiv>
 8007a44:	2303      	movs	r3, #3
 8007a46:	9008      	str	r0, [sp, #32]
 8007a48:	9109      	str	r1, [sp, #36]	; 0x24
 8007a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <_dtoa_r+0x3a0>)
 8007a4e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	d108      	bne.n	8007a66 <_dtoa_r+0x322>
 8007a54:	9808      	ldr	r0, [sp, #32]
 8007a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a58:	002a      	movs	r2, r5
 8007a5a:	0033      	movs	r3, r6
 8007a5c:	f7f9 f8d0 	bl	8000c00 <__aeabi_ddiv>
 8007a60:	9008      	str	r0, [sp, #32]
 8007a62:	9109      	str	r1, [sp, #36]	; 0x24
 8007a64:	e05c      	b.n	8007b20 <_dtoa_r+0x3dc>
 8007a66:	2301      	movs	r3, #1
 8007a68:	421c      	tst	r4, r3
 8007a6a:	d00b      	beq.n	8007a84 <_dtoa_r+0x340>
 8007a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a6e:	0028      	movs	r0, r5
 8007a70:	3301      	adds	r3, #1
 8007a72:	9310      	str	r3, [sp, #64]	; 0x40
 8007a74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a76:	0031      	movs	r1, r6
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f7f9 fcc2 	bl	8001404 <__aeabi_dmul>
 8007a80:	0005      	movs	r5, r0
 8007a82:	000e      	movs	r6, r1
 8007a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a86:	1064      	asrs	r4, r4, #1
 8007a88:	3308      	adds	r3, #8
 8007a8a:	e7e0      	b.n	8007a4e <_dtoa_r+0x30a>
 8007a8c:	0800a85e 	.word	0x0800a85e
 8007a90:	0800a875 	.word	0x0800a875
 8007a94:	7ff00000 	.word	0x7ff00000
 8007a98:	0000270f 	.word	0x0000270f
 8007a9c:	0800a85a 	.word	0x0800a85a
 8007aa0:	0800a85d 	.word	0x0800a85d
 8007aa4:	0800a6d4 	.word	0x0800a6d4
 8007aa8:	0800a6d5 	.word	0x0800a6d5
 8007aac:	3ff00000 	.word	0x3ff00000
 8007ab0:	fffffc01 	.word	0xfffffc01
 8007ab4:	3ff80000 	.word	0x3ff80000
 8007ab8:	636f4361 	.word	0x636f4361
 8007abc:	3fd287a7 	.word	0x3fd287a7
 8007ac0:	8b60c8b3 	.word	0x8b60c8b3
 8007ac4:	3fc68a28 	.word	0x3fc68a28
 8007ac8:	509f79fb 	.word	0x509f79fb
 8007acc:	3fd34413 	.word	0x3fd34413
 8007ad0:	0800aa48 	.word	0x0800aa48
 8007ad4:	00000432 	.word	0x00000432
 8007ad8:	00000412 	.word	0x00000412
 8007adc:	fe100000 	.word	0xfe100000
 8007ae0:	0800a8d0 	.word	0x0800a8d0
 8007ae4:	0800aa20 	.word	0x0800aa20
 8007ae8:	2302      	movs	r3, #2
 8007aea:	9310      	str	r3, [sp, #64]	; 0x40
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <_dtoa_r+0x3dc>
 8007af2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007af4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007af6:	425c      	negs	r4, r3
 8007af8:	230f      	movs	r3, #15
 8007afa:	4ab6      	ldr	r2, [pc, #728]	; (8007dd4 <_dtoa_r+0x690>)
 8007afc:	4023      	ands	r3, r4
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	18d3      	adds	r3, r2, r3
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f7f9 fc7d 	bl	8001404 <__aeabi_dmul>
 8007b0a:	2601      	movs	r6, #1
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9008      	str	r0, [sp, #32]
 8007b10:	9109      	str	r1, [sp, #36]	; 0x24
 8007b12:	4db1      	ldr	r5, [pc, #708]	; (8007dd8 <_dtoa_r+0x694>)
 8007b14:	1124      	asrs	r4, r4, #4
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	d000      	beq.n	8007b1c <_dtoa_r+0x3d8>
 8007b1a:	e094      	b.n	8007c46 <_dtoa_r+0x502>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d19f      	bne.n	8007a60 <_dtoa_r+0x31c>
 8007b20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d100      	bne.n	8007b28 <_dtoa_r+0x3e4>
 8007b26:	e09b      	b.n	8007c60 <_dtoa_r+0x51c>
 8007b28:	9c08      	ldr	r4, [sp, #32]
 8007b2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	0020      	movs	r0, r4
 8007b30:	0029      	movs	r1, r5
 8007b32:	4baa      	ldr	r3, [pc, #680]	; (8007ddc <_dtoa_r+0x698>)
 8007b34:	f7f8 fc90 	bl	8000458 <__aeabi_dcmplt>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d100      	bne.n	8007b3e <_dtoa_r+0x3fa>
 8007b3c:	e090      	b.n	8007c60 <_dtoa_r+0x51c>
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d100      	bne.n	8007b46 <_dtoa_r+0x402>
 8007b44:	e08c      	b.n	8007c60 <_dtoa_r+0x51c>
 8007b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dd46      	ble.n	8007bda <_dtoa_r+0x496>
 8007b4c:	9b02      	ldr	r3, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	0020      	movs	r0, r4
 8007b52:	0029      	movs	r1, r5
 8007b54:	1e5e      	subs	r6, r3, #1
 8007b56:	4ba2      	ldr	r3, [pc, #648]	; (8007de0 <_dtoa_r+0x69c>)
 8007b58:	f7f9 fc54 	bl	8001404 <__aeabi_dmul>
 8007b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b5e:	9008      	str	r0, [sp, #32]
 8007b60:	9109      	str	r1, [sp, #36]	; 0x24
 8007b62:	3301      	adds	r3, #1
 8007b64:	9310      	str	r3, [sp, #64]	; 0x40
 8007b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b6a:	9c08      	ldr	r4, [sp, #32]
 8007b6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b6e:	9314      	str	r3, [sp, #80]	; 0x50
 8007b70:	f7fa fa9a 	bl	80020a8 <__aeabi_i2d>
 8007b74:	0022      	movs	r2, r4
 8007b76:	002b      	movs	r3, r5
 8007b78:	f7f9 fc44 	bl	8001404 <__aeabi_dmul>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4b99      	ldr	r3, [pc, #612]	; (8007de4 <_dtoa_r+0x6a0>)
 8007b80:	f7f8 fd02 	bl	8000588 <__aeabi_dadd>
 8007b84:	9010      	str	r0, [sp, #64]	; 0x40
 8007b86:	9111      	str	r1, [sp, #68]	; 0x44
 8007b88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b8c:	9208      	str	r2, [sp, #32]
 8007b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b90:	4a95      	ldr	r2, [pc, #596]	; (8007de8 <_dtoa_r+0x6a4>)
 8007b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b94:	4694      	mov	ip, r2
 8007b96:	4463      	add	r3, ip
 8007b98:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d161      	bne.n	8007c66 <_dtoa_r+0x522>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	0020      	movs	r0, r4
 8007ba6:	0029      	movs	r1, r5
 8007ba8:	4b90      	ldr	r3, [pc, #576]	; (8007dec <_dtoa_r+0x6a8>)
 8007baa:	f7f9 fe97 	bl	80018dc <__aeabi_dsub>
 8007bae:	9a08      	ldr	r2, [sp, #32]
 8007bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bb2:	0004      	movs	r4, r0
 8007bb4:	000d      	movs	r5, r1
 8007bb6:	f7f8 fc63 	bl	8000480 <__aeabi_dcmpgt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d000      	beq.n	8007bc0 <_dtoa_r+0x47c>
 8007bbe:	e2af      	b.n	8008120 <_dtoa_r+0x9dc>
 8007bc0:	488b      	ldr	r0, [pc, #556]	; (8007df0 <_dtoa_r+0x6ac>)
 8007bc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bc4:	4684      	mov	ip, r0
 8007bc6:	4461      	add	r1, ip
 8007bc8:	000b      	movs	r3, r1
 8007bca:	0020      	movs	r0, r4
 8007bcc:	0029      	movs	r1, r5
 8007bce:	9a08      	ldr	r2, [sp, #32]
 8007bd0:	f7f8 fc42 	bl	8000458 <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d000      	beq.n	8007bda <_dtoa_r+0x496>
 8007bd8:	e29f      	b.n	800811a <_dtoa_r+0x9d6>
 8007bda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bdc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	9409      	str	r4, [sp, #36]	; 0x24
 8007be2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	da00      	bge.n	8007bea <_dtoa_r+0x4a6>
 8007be8:	e172      	b.n	8007ed0 <_dtoa_r+0x78c>
 8007bea:	9a02      	ldr	r2, [sp, #8]
 8007bec:	2a0e      	cmp	r2, #14
 8007bee:	dd00      	ble.n	8007bf2 <_dtoa_r+0x4ae>
 8007bf0:	e16e      	b.n	8007ed0 <_dtoa_r+0x78c>
 8007bf2:	4b78      	ldr	r3, [pc, #480]	; (8007dd4 <_dtoa_r+0x690>)
 8007bf4:	00d2      	lsls	r2, r2, #3
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	685c      	ldr	r4, [r3, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bfe:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	db00      	blt.n	8007c08 <_dtoa_r+0x4c4>
 8007c06:	e0f7      	b.n	8007df8 <_dtoa_r+0x6b4>
 8007c08:	9b07      	ldr	r3, [sp, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dd00      	ble.n	8007c10 <_dtoa_r+0x4cc>
 8007c0e:	e0f3      	b.n	8007df8 <_dtoa_r+0x6b4>
 8007c10:	d000      	beq.n	8007c14 <_dtoa_r+0x4d0>
 8007c12:	e282      	b.n	800811a <_dtoa_r+0x9d6>
 8007c14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4b74      	ldr	r3, [pc, #464]	; (8007dec <_dtoa_r+0x6a8>)
 8007c1c:	f7f9 fbf2 	bl	8001404 <__aeabi_dmul>
 8007c20:	9a08      	ldr	r2, [sp, #32]
 8007c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c24:	f7f8 fc36 	bl	8000494 <__aeabi_dcmpge>
 8007c28:	9e07      	ldr	r6, [sp, #28]
 8007c2a:	0035      	movs	r5, r6
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d000      	beq.n	8007c32 <_dtoa_r+0x4ee>
 8007c30:	e259      	b.n	80080e6 <_dtoa_r+0x9a2>
 8007c32:	9b06      	ldr	r3, [sp, #24]
 8007c34:	9a06      	ldr	r2, [sp, #24]
 8007c36:	3301      	adds	r3, #1
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	2331      	movs	r3, #49	; 0x31
 8007c3c:	7013      	strb	r3, [r2, #0]
 8007c3e:	9b02      	ldr	r3, [sp, #8]
 8007c40:	3301      	adds	r3, #1
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	e254      	b.n	80080f0 <_dtoa_r+0x9ac>
 8007c46:	4234      	tst	r4, r6
 8007c48:	d007      	beq.n	8007c5a <_dtoa_r+0x516>
 8007c4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	9310      	str	r3, [sp, #64]	; 0x40
 8007c50:	682a      	ldr	r2, [r5, #0]
 8007c52:	686b      	ldr	r3, [r5, #4]
 8007c54:	f7f9 fbd6 	bl	8001404 <__aeabi_dmul>
 8007c58:	0033      	movs	r3, r6
 8007c5a:	1064      	asrs	r4, r4, #1
 8007c5c:	3508      	adds	r5, #8
 8007c5e:	e75a      	b.n	8007b16 <_dtoa_r+0x3d2>
 8007c60:	9e02      	ldr	r6, [sp, #8]
 8007c62:	9b07      	ldr	r3, [sp, #28]
 8007c64:	e780      	b.n	8007b68 <_dtoa_r+0x424>
 8007c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c6a:	1e5a      	subs	r2, r3, #1
 8007c6c:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <_dtoa_r+0x690>)
 8007c6e:	00d2      	lsls	r2, r2, #3
 8007c70:	189b      	adds	r3, r3, r2
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2900      	cmp	r1, #0
 8007c78:	d051      	beq.n	8007d1e <_dtoa_r+0x5da>
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	495d      	ldr	r1, [pc, #372]	; (8007df4 <_dtoa_r+0x6b0>)
 8007c7e:	f7f8 ffbf 	bl	8000c00 <__aeabi_ddiv>
 8007c82:	9a08      	ldr	r2, [sp, #32]
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	f7f9 fe29 	bl	80018dc <__aeabi_dsub>
 8007c8a:	9a06      	ldr	r2, [sp, #24]
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	4694      	mov	ip, r2
 8007c90:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c94:	9010      	str	r0, [sp, #64]	; 0x40
 8007c96:	9111      	str	r1, [sp, #68]	; 0x44
 8007c98:	4463      	add	r3, ip
 8007c9a:	9319      	str	r3, [sp, #100]	; 0x64
 8007c9c:	0029      	movs	r1, r5
 8007c9e:	0020      	movs	r0, r4
 8007ca0:	f7fa f9cc 	bl	800203c <__aeabi_d2iz>
 8007ca4:	9014      	str	r0, [sp, #80]	; 0x50
 8007ca6:	f7fa f9ff 	bl	80020a8 <__aeabi_i2d>
 8007caa:	0002      	movs	r2, r0
 8007cac:	000b      	movs	r3, r1
 8007cae:	0020      	movs	r0, r4
 8007cb0:	0029      	movs	r1, r5
 8007cb2:	f7f9 fe13 	bl	80018dc <__aeabi_dsub>
 8007cb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cba:	3301      	adds	r3, #1
 8007cbc:	9308      	str	r3, [sp, #32]
 8007cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cc0:	0004      	movs	r4, r0
 8007cc2:	3330      	adds	r3, #48	; 0x30
 8007cc4:	7013      	strb	r3, [r2, #0]
 8007cc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cca:	000d      	movs	r5, r1
 8007ccc:	f7f8 fbc4 	bl	8000458 <__aeabi_dcmplt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d175      	bne.n	8007dc0 <_dtoa_r+0x67c>
 8007cd4:	0022      	movs	r2, r4
 8007cd6:	002b      	movs	r3, r5
 8007cd8:	2000      	movs	r0, #0
 8007cda:	4940      	ldr	r1, [pc, #256]	; (8007ddc <_dtoa_r+0x698>)
 8007cdc:	f7f9 fdfe 	bl	80018dc <__aeabi_dsub>
 8007ce0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce4:	f7f8 fbb8 	bl	8000458 <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d000      	beq.n	8007cee <_dtoa_r+0x5aa>
 8007cec:	e0d2      	b.n	8007e94 <_dtoa_r+0x750>
 8007cee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf0:	9a08      	ldr	r2, [sp, #32]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d100      	bne.n	8007cf8 <_dtoa_r+0x5b4>
 8007cf6:	e770      	b.n	8007bda <_dtoa_r+0x496>
 8007cf8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007cfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <_dtoa_r+0x69c>)
 8007d00:	f7f9 fb80 	bl	8001404 <__aeabi_dmul>
 8007d04:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <_dtoa_r+0x69c>)
 8007d06:	9010      	str	r0, [sp, #64]	; 0x40
 8007d08:	9111      	str	r1, [sp, #68]	; 0x44
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	0020      	movs	r0, r4
 8007d0e:	0029      	movs	r1, r5
 8007d10:	f7f9 fb78 	bl	8001404 <__aeabi_dmul>
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	0004      	movs	r4, r0
 8007d18:	000d      	movs	r5, r1
 8007d1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d1c:	e7be      	b.n	8007c9c <_dtoa_r+0x558>
 8007d1e:	9808      	ldr	r0, [sp, #32]
 8007d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d22:	f7f9 fb6f 	bl	8001404 <__aeabi_dmul>
 8007d26:	9a06      	ldr	r2, [sp, #24]
 8007d28:	9b06      	ldr	r3, [sp, #24]
 8007d2a:	4694      	mov	ip, r2
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d30:	9010      	str	r0, [sp, #64]	; 0x40
 8007d32:	9111      	str	r1, [sp, #68]	; 0x44
 8007d34:	4463      	add	r3, ip
 8007d36:	9319      	str	r3, [sp, #100]	; 0x64
 8007d38:	0029      	movs	r1, r5
 8007d3a:	0020      	movs	r0, r4
 8007d3c:	f7fa f97e 	bl	800203c <__aeabi_d2iz>
 8007d40:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d42:	f7fa f9b1 	bl	80020a8 <__aeabi_i2d>
 8007d46:	0002      	movs	r2, r0
 8007d48:	000b      	movs	r3, r1
 8007d4a:	0020      	movs	r0, r4
 8007d4c:	0029      	movs	r1, r5
 8007d4e:	f7f9 fdc5 	bl	80018dc <__aeabi_dsub>
 8007d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d54:	9a08      	ldr	r2, [sp, #32]
 8007d56:	3330      	adds	r3, #48	; 0x30
 8007d58:	7013      	strb	r3, [r2, #0]
 8007d5a:	0013      	movs	r3, r2
 8007d5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d5e:	3301      	adds	r3, #1
 8007d60:	0004      	movs	r4, r0
 8007d62:	000d      	movs	r5, r1
 8007d64:	9308      	str	r3, [sp, #32]
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d12c      	bne.n	8007dc4 <_dtoa_r+0x680>
 8007d6a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d6e:	9a06      	ldr	r2, [sp, #24]
 8007d70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d72:	4694      	mov	ip, r2
 8007d74:	4463      	add	r3, ip
 8007d76:	2200      	movs	r2, #0
 8007d78:	9308      	str	r3, [sp, #32]
 8007d7a:	4b1e      	ldr	r3, [pc, #120]	; (8007df4 <_dtoa_r+0x6b0>)
 8007d7c:	f7f8 fc04 	bl	8000588 <__aeabi_dadd>
 8007d80:	0002      	movs	r2, r0
 8007d82:	000b      	movs	r3, r1
 8007d84:	0020      	movs	r0, r4
 8007d86:	0029      	movs	r1, r5
 8007d88:	f7f8 fb7a 	bl	8000480 <__aeabi_dcmpgt>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d000      	beq.n	8007d92 <_dtoa_r+0x64e>
 8007d90:	e080      	b.n	8007e94 <_dtoa_r+0x750>
 8007d92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d96:	2000      	movs	r0, #0
 8007d98:	4916      	ldr	r1, [pc, #88]	; (8007df4 <_dtoa_r+0x6b0>)
 8007d9a:	f7f9 fd9f 	bl	80018dc <__aeabi_dsub>
 8007d9e:	0002      	movs	r2, r0
 8007da0:	000b      	movs	r3, r1
 8007da2:	0020      	movs	r0, r4
 8007da4:	0029      	movs	r1, r5
 8007da6:	f7f8 fb57 	bl	8000458 <__aeabi_dcmplt>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d100      	bne.n	8007db0 <_dtoa_r+0x66c>
 8007dae:	e714      	b.n	8007bda <_dtoa_r+0x496>
 8007db0:	9b08      	ldr	r3, [sp, #32]
 8007db2:	001a      	movs	r2, r3
 8007db4:	3a01      	subs	r2, #1
 8007db6:	9208      	str	r2, [sp, #32]
 8007db8:	7812      	ldrb	r2, [r2, #0]
 8007dba:	2a30      	cmp	r2, #48	; 0x30
 8007dbc:	d0f8      	beq.n	8007db0 <_dtoa_r+0x66c>
 8007dbe:	9308      	str	r3, [sp, #32]
 8007dc0:	9602      	str	r6, [sp, #8]
 8007dc2:	e055      	b.n	8007e70 <_dtoa_r+0x72c>
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <_dtoa_r+0x69c>)
 8007dc8:	f7f9 fb1c 	bl	8001404 <__aeabi_dmul>
 8007dcc:	0004      	movs	r4, r0
 8007dce:	000d      	movs	r5, r1
 8007dd0:	e7b2      	b.n	8007d38 <_dtoa_r+0x5f4>
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	0800aa48 	.word	0x0800aa48
 8007dd8:	0800aa20 	.word	0x0800aa20
 8007ddc:	3ff00000 	.word	0x3ff00000
 8007de0:	40240000 	.word	0x40240000
 8007de4:	401c0000 	.word	0x401c0000
 8007de8:	fcc00000 	.word	0xfcc00000
 8007dec:	40140000 	.word	0x40140000
 8007df0:	7cc00000 	.word	0x7cc00000
 8007df4:	3fe00000 	.word	0x3fe00000
 8007df8:	9b07      	ldr	r3, [sp, #28]
 8007dfa:	9e06      	ldr	r6, [sp, #24]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	199b      	adds	r3, r3, r6
 8007e00:	930c      	str	r3, [sp, #48]	; 0x30
 8007e02:	9c08      	ldr	r4, [sp, #32]
 8007e04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0a:	0020      	movs	r0, r4
 8007e0c:	0029      	movs	r1, r5
 8007e0e:	f7f8 fef7 	bl	8000c00 <__aeabi_ddiv>
 8007e12:	f7fa f913 	bl	800203c <__aeabi_d2iz>
 8007e16:	9007      	str	r0, [sp, #28]
 8007e18:	f7fa f946 	bl	80020a8 <__aeabi_i2d>
 8007e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e20:	f7f9 faf0 	bl	8001404 <__aeabi_dmul>
 8007e24:	0002      	movs	r2, r0
 8007e26:	000b      	movs	r3, r1
 8007e28:	0020      	movs	r0, r4
 8007e2a:	0029      	movs	r1, r5
 8007e2c:	f7f9 fd56 	bl	80018dc <__aeabi_dsub>
 8007e30:	0033      	movs	r3, r6
 8007e32:	9a07      	ldr	r2, [sp, #28]
 8007e34:	3601      	adds	r6, #1
 8007e36:	3230      	adds	r2, #48	; 0x30
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e3c:	9608      	str	r6, [sp, #32]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d139      	bne.n	8007eb6 <_dtoa_r+0x772>
 8007e42:	0002      	movs	r2, r0
 8007e44:	000b      	movs	r3, r1
 8007e46:	f7f8 fb9f 	bl	8000588 <__aeabi_dadd>
 8007e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4e:	0004      	movs	r4, r0
 8007e50:	000d      	movs	r5, r1
 8007e52:	f7f8 fb15 	bl	8000480 <__aeabi_dcmpgt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d11b      	bne.n	8007e92 <_dtoa_r+0x74e>
 8007e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5e:	0020      	movs	r0, r4
 8007e60:	0029      	movs	r1, r5
 8007e62:	f7f8 faf3 	bl	800044c <__aeabi_dcmpeq>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d002      	beq.n	8007e70 <_dtoa_r+0x72c>
 8007e6a:	9b07      	ldr	r3, [sp, #28]
 8007e6c:	07db      	lsls	r3, r3, #31
 8007e6e:	d410      	bmi.n	8007e92 <_dtoa_r+0x74e>
 8007e70:	0038      	movs	r0, r7
 8007e72:	9905      	ldr	r1, [sp, #20]
 8007e74:	f000 ff78 	bl	8008d68 <_Bfree>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9a08      	ldr	r2, [sp, #32]
 8007e7c:	9802      	ldr	r0, [sp, #8]
 8007e7e:	7013      	strb	r3, [r2, #0]
 8007e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e82:	3001      	adds	r0, #1
 8007e84:	6018      	str	r0, [r3, #0]
 8007e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d100      	bne.n	8007e8e <_dtoa_r+0x74a>
 8007e8c:	e4a6      	b.n	80077dc <_dtoa_r+0x98>
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	e4a4      	b.n	80077dc <_dtoa_r+0x98>
 8007e92:	9e02      	ldr	r6, [sp, #8]
 8007e94:	9b08      	ldr	r3, [sp, #32]
 8007e96:	9308      	str	r3, [sp, #32]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	781a      	ldrb	r2, [r3, #0]
 8007e9c:	2a39      	cmp	r2, #57	; 0x39
 8007e9e:	d106      	bne.n	8007eae <_dtoa_r+0x76a>
 8007ea0:	9a06      	ldr	r2, [sp, #24]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d1f7      	bne.n	8007e96 <_dtoa_r+0x752>
 8007ea6:	2230      	movs	r2, #48	; 0x30
 8007ea8:	9906      	ldr	r1, [sp, #24]
 8007eaa:	3601      	adds	r6, #1
 8007eac:	700a      	strb	r2, [r1, #0]
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	3201      	adds	r2, #1
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	e784      	b.n	8007dc0 <_dtoa_r+0x67c>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4baa      	ldr	r3, [pc, #680]	; (8008164 <_dtoa_r+0xa20>)
 8007eba:	f7f9 faa3 	bl	8001404 <__aeabi_dmul>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	0004      	movs	r4, r0
 8007ec4:	000d      	movs	r5, r1
 8007ec6:	f7f8 fac1 	bl	800044c <__aeabi_dcmpeq>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d09b      	beq.n	8007e06 <_dtoa_r+0x6c2>
 8007ece:	e7cf      	b.n	8007e70 <_dtoa_r+0x72c>
 8007ed0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ed2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007ed4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	d012      	beq.n	8007f00 <_dtoa_r+0x7bc>
 8007eda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007edc:	2a01      	cmp	r2, #1
 8007ede:	dc66      	bgt.n	8007fae <_dtoa_r+0x86a>
 8007ee0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ee2:	2a00      	cmp	r2, #0
 8007ee4:	d05d      	beq.n	8007fa2 <_dtoa_r+0x85e>
 8007ee6:	4aa0      	ldr	r2, [pc, #640]	; (8008168 <_dtoa_r+0xa24>)
 8007ee8:	189b      	adds	r3, r3, r2
 8007eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eec:	2101      	movs	r1, #1
 8007eee:	18d2      	adds	r2, r2, r3
 8007ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ef4:	0038      	movs	r0, r7
 8007ef6:	18d3      	adds	r3, r2, r3
 8007ef8:	930d      	str	r3, [sp, #52]	; 0x34
 8007efa:	f001 f831 	bl	8008f60 <__i2b>
 8007efe:	0005      	movs	r5, r0
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	dd0e      	ble.n	8007f22 <_dtoa_r+0x7de>
 8007f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dd0b      	ble.n	8007f22 <_dtoa_r+0x7de>
 8007f0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f0c:	0023      	movs	r3, r4
 8007f0e:	4294      	cmp	r4, r2
 8007f10:	dd00      	ble.n	8007f14 <_dtoa_r+0x7d0>
 8007f12:	0013      	movs	r3, r2
 8007f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f16:	1ae4      	subs	r4, r4, r3
 8007f18:	1ad2      	subs	r2, r2, r3
 8007f1a:	920a      	str	r2, [sp, #40]	; 0x28
 8007f1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	930d      	str	r3, [sp, #52]	; 0x34
 8007f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01f      	beq.n	8007f68 <_dtoa_r+0x824>
 8007f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d054      	beq.n	8007fd8 <_dtoa_r+0x894>
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	dd11      	ble.n	8007f56 <_dtoa_r+0x812>
 8007f32:	0029      	movs	r1, r5
 8007f34:	0032      	movs	r2, r6
 8007f36:	0038      	movs	r0, r7
 8007f38:	f001 f8d8 	bl	80090ec <__pow5mult>
 8007f3c:	9a05      	ldr	r2, [sp, #20]
 8007f3e:	0001      	movs	r1, r0
 8007f40:	0005      	movs	r5, r0
 8007f42:	0038      	movs	r0, r7
 8007f44:	f001 f822 	bl	8008f8c <__multiply>
 8007f48:	9905      	ldr	r1, [sp, #20]
 8007f4a:	9014      	str	r0, [sp, #80]	; 0x50
 8007f4c:	0038      	movs	r0, r7
 8007f4e:	f000 ff0b 	bl	8008d68 <_Bfree>
 8007f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f58:	1b9a      	subs	r2, r3, r6
 8007f5a:	42b3      	cmp	r3, r6
 8007f5c:	d004      	beq.n	8007f68 <_dtoa_r+0x824>
 8007f5e:	0038      	movs	r0, r7
 8007f60:	9905      	ldr	r1, [sp, #20]
 8007f62:	f001 f8c3 	bl	80090ec <__pow5mult>
 8007f66:	9005      	str	r0, [sp, #20]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	0038      	movs	r0, r7
 8007f6c:	f000 fff8 	bl	8008f60 <__i2b>
 8007f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f72:	0006      	movs	r6, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd31      	ble.n	8007fdc <_dtoa_r+0x898>
 8007f78:	001a      	movs	r2, r3
 8007f7a:	0001      	movs	r1, r0
 8007f7c:	0038      	movs	r0, r7
 8007f7e:	f001 f8b5 	bl	80090ec <__pow5mult>
 8007f82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f84:	0006      	movs	r6, r0
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	dd2d      	ble.n	8007fe6 <_dtoa_r+0x8a2>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f8e:	6933      	ldr	r3, [r6, #16]
 8007f90:	3303      	adds	r3, #3
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	18f3      	adds	r3, r6, r3
 8007f96:	6858      	ldr	r0, [r3, #4]
 8007f98:	f000 ff9a 	bl	8008ed0 <__hi0bits>
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	1a18      	subs	r0, r3, r0
 8007fa0:	e039      	b.n	8008016 <_dtoa_r+0x8d2>
 8007fa2:	2336      	movs	r3, #54	; 0x36
 8007fa4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007fa6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007fa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	e79d      	b.n	8007eea <_dtoa_r+0x7a6>
 8007fae:	9b07      	ldr	r3, [sp, #28]
 8007fb0:	1e5e      	subs	r6, r3, #1
 8007fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb4:	42b3      	cmp	r3, r6
 8007fb6:	db07      	blt.n	8007fc8 <_dtoa_r+0x884>
 8007fb8:	1b9e      	subs	r6, r3, r6
 8007fba:	9b07      	ldr	r3, [sp, #28]
 8007fbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	da93      	bge.n	8007eea <_dtoa_r+0x7a6>
 8007fc2:	1ae4      	subs	r4, r4, r3
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e790      	b.n	8007eea <_dtoa_r+0x7a6>
 8007fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fcc:	1af3      	subs	r3, r6, r3
 8007fce:	18d3      	adds	r3, r2, r3
 8007fd0:	960e      	str	r6, [sp, #56]	; 0x38
 8007fd2:	9315      	str	r3, [sp, #84]	; 0x54
 8007fd4:	2600      	movs	r6, #0
 8007fd6:	e7f0      	b.n	8007fba <_dtoa_r+0x876>
 8007fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fda:	e7c0      	b.n	8007f5e <_dtoa_r+0x81a>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	dc13      	bgt.n	800800e <_dtoa_r+0x8ca>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	930e      	str	r3, [sp, #56]	; 0x38
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10e      	bne.n	800800e <_dtoa_r+0x8ca>
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	031b      	lsls	r3, r3, #12
 8007ff4:	d10b      	bne.n	800800e <_dtoa_r+0x8ca>
 8007ff6:	4b5d      	ldr	r3, [pc, #372]	; (800816c <_dtoa_r+0xa28>)
 8007ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffa:	4213      	tst	r3, r2
 8007ffc:	d007      	beq.n	800800e <_dtoa_r+0x8ca>
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008000:	3301      	adds	r3, #1
 8008002:	930a      	str	r3, [sp, #40]	; 0x28
 8008004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008006:	3301      	adds	r3, #1
 8008008:	930d      	str	r3, [sp, #52]	; 0x34
 800800a:	2301      	movs	r3, #1
 800800c:	930e      	str	r3, [sp, #56]	; 0x38
 800800e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008010:	2001      	movs	r0, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1bb      	bne.n	8007f8e <_dtoa_r+0x84a>
 8008016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008018:	221f      	movs	r2, #31
 800801a:	1818      	adds	r0, r3, r0
 800801c:	0003      	movs	r3, r0
 800801e:	4013      	ands	r3, r2
 8008020:	4210      	tst	r0, r2
 8008022:	d046      	beq.n	80080b2 <_dtoa_r+0x96e>
 8008024:	3201      	adds	r2, #1
 8008026:	1ad2      	subs	r2, r2, r3
 8008028:	2a04      	cmp	r2, #4
 800802a:	dd3f      	ble.n	80080ac <_dtoa_r+0x968>
 800802c:	221c      	movs	r2, #28
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008032:	18e4      	adds	r4, r4, r3
 8008034:	18d2      	adds	r2, r2, r3
 8008036:	920a      	str	r2, [sp, #40]	; 0x28
 8008038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800803a:	18d3      	adds	r3, r2, r3
 800803c:	930d      	str	r3, [sp, #52]	; 0x34
 800803e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008040:	2b00      	cmp	r3, #0
 8008042:	dd05      	ble.n	8008050 <_dtoa_r+0x90c>
 8008044:	001a      	movs	r2, r3
 8008046:	0038      	movs	r0, r7
 8008048:	9905      	ldr	r1, [sp, #20]
 800804a:	f001 f8ab 	bl	80091a4 <__lshift>
 800804e:	9005      	str	r0, [sp, #20]
 8008050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008052:	2b00      	cmp	r3, #0
 8008054:	dd05      	ble.n	8008062 <_dtoa_r+0x91e>
 8008056:	0031      	movs	r1, r6
 8008058:	001a      	movs	r2, r3
 800805a:	0038      	movs	r0, r7
 800805c:	f001 f8a2 	bl	80091a4 <__lshift>
 8008060:	0006      	movs	r6, r0
 8008062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008064:	2b00      	cmp	r3, #0
 8008066:	d026      	beq.n	80080b6 <_dtoa_r+0x972>
 8008068:	0031      	movs	r1, r6
 800806a:	9805      	ldr	r0, [sp, #20]
 800806c:	f001 f908 	bl	8009280 <__mcmp>
 8008070:	2800      	cmp	r0, #0
 8008072:	da20      	bge.n	80080b6 <_dtoa_r+0x972>
 8008074:	9b02      	ldr	r3, [sp, #8]
 8008076:	220a      	movs	r2, #10
 8008078:	3b01      	subs	r3, #1
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	0038      	movs	r0, r7
 800807e:	2300      	movs	r3, #0
 8008080:	9905      	ldr	r1, [sp, #20]
 8008082:	f000 fe95 	bl	8008db0 <__multadd>
 8008086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008088:	9005      	str	r0, [sp, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d100      	bne.n	8008090 <_dtoa_r+0x94c>
 800808e:	e166      	b.n	800835e <_dtoa_r+0xc1a>
 8008090:	2300      	movs	r3, #0
 8008092:	0029      	movs	r1, r5
 8008094:	220a      	movs	r2, #10
 8008096:	0038      	movs	r0, r7
 8008098:	f000 fe8a 	bl	8008db0 <__multadd>
 800809c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809e:	0005      	movs	r5, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dc47      	bgt.n	8008134 <_dtoa_r+0x9f0>
 80080a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	dc0d      	bgt.n	80080c6 <_dtoa_r+0x982>
 80080aa:	e043      	b.n	8008134 <_dtoa_r+0x9f0>
 80080ac:	2a04      	cmp	r2, #4
 80080ae:	d0c6      	beq.n	800803e <_dtoa_r+0x8fa>
 80080b0:	0013      	movs	r3, r2
 80080b2:	331c      	adds	r3, #28
 80080b4:	e7bc      	b.n	8008030 <_dtoa_r+0x8ec>
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc35      	bgt.n	8008128 <_dtoa_r+0x9e4>
 80080bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080be:	2b02      	cmp	r3, #2
 80080c0:	dd32      	ble.n	8008128 <_dtoa_r+0x9e4>
 80080c2:	9b07      	ldr	r3, [sp, #28]
 80080c4:	930c      	str	r3, [sp, #48]	; 0x30
 80080c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10c      	bne.n	80080e6 <_dtoa_r+0x9a2>
 80080cc:	0031      	movs	r1, r6
 80080ce:	2205      	movs	r2, #5
 80080d0:	0038      	movs	r0, r7
 80080d2:	f000 fe6d 	bl	8008db0 <__multadd>
 80080d6:	0006      	movs	r6, r0
 80080d8:	0001      	movs	r1, r0
 80080da:	9805      	ldr	r0, [sp, #20]
 80080dc:	f001 f8d0 	bl	8009280 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dd00      	ble.n	80080e6 <_dtoa_r+0x9a2>
 80080e4:	e5a5      	b.n	8007c32 <_dtoa_r+0x4ee>
 80080e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080e8:	43db      	mvns	r3, r3
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	9b06      	ldr	r3, [sp, #24]
 80080ee:	9308      	str	r3, [sp, #32]
 80080f0:	2400      	movs	r4, #0
 80080f2:	0031      	movs	r1, r6
 80080f4:	0038      	movs	r0, r7
 80080f6:	f000 fe37 	bl	8008d68 <_Bfree>
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	d100      	bne.n	8008100 <_dtoa_r+0x9bc>
 80080fe:	e6b7      	b.n	8007e70 <_dtoa_r+0x72c>
 8008100:	2c00      	cmp	r4, #0
 8008102:	d005      	beq.n	8008110 <_dtoa_r+0x9cc>
 8008104:	42ac      	cmp	r4, r5
 8008106:	d003      	beq.n	8008110 <_dtoa_r+0x9cc>
 8008108:	0021      	movs	r1, r4
 800810a:	0038      	movs	r0, r7
 800810c:	f000 fe2c 	bl	8008d68 <_Bfree>
 8008110:	0029      	movs	r1, r5
 8008112:	0038      	movs	r0, r7
 8008114:	f000 fe28 	bl	8008d68 <_Bfree>
 8008118:	e6aa      	b.n	8007e70 <_dtoa_r+0x72c>
 800811a:	2600      	movs	r6, #0
 800811c:	0035      	movs	r5, r6
 800811e:	e7e2      	b.n	80080e6 <_dtoa_r+0x9a2>
 8008120:	9602      	str	r6, [sp, #8]
 8008122:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008124:	0035      	movs	r5, r6
 8008126:	e584      	b.n	8007c32 <_dtoa_r+0x4ee>
 8008128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d100      	bne.n	8008130 <_dtoa_r+0x9ec>
 800812e:	e0ce      	b.n	80082ce <_dtoa_r+0xb8a>
 8008130:	9b07      	ldr	r3, [sp, #28]
 8008132:	930c      	str	r3, [sp, #48]	; 0x30
 8008134:	2c00      	cmp	r4, #0
 8008136:	dd05      	ble.n	8008144 <_dtoa_r+0xa00>
 8008138:	0029      	movs	r1, r5
 800813a:	0022      	movs	r2, r4
 800813c:	0038      	movs	r0, r7
 800813e:	f001 f831 	bl	80091a4 <__lshift>
 8008142:	0005      	movs	r5, r0
 8008144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008146:	0028      	movs	r0, r5
 8008148:	2b00      	cmp	r3, #0
 800814a:	d022      	beq.n	8008192 <_dtoa_r+0xa4e>
 800814c:	0038      	movs	r0, r7
 800814e:	6869      	ldr	r1, [r5, #4]
 8008150:	f000 fdc6 	bl	8008ce0 <_Balloc>
 8008154:	1e04      	subs	r4, r0, #0
 8008156:	d10f      	bne.n	8008178 <_dtoa_r+0xa34>
 8008158:	0002      	movs	r2, r0
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <_dtoa_r+0xa2c>)
 800815c:	4905      	ldr	r1, [pc, #20]	; (8008174 <_dtoa_r+0xa30>)
 800815e:	f7ff fb06 	bl	800776e <_dtoa_r+0x2a>
 8008162:	46c0      	nop			; (mov r8, r8)
 8008164:	40240000 	.word	0x40240000
 8008168:	00000433 	.word	0x00000433
 800816c:	7ff00000 	.word	0x7ff00000
 8008170:	0800a8d0 	.word	0x0800a8d0
 8008174:	000002ea 	.word	0x000002ea
 8008178:	0029      	movs	r1, r5
 800817a:	692b      	ldr	r3, [r5, #16]
 800817c:	310c      	adds	r1, #12
 800817e:	1c9a      	adds	r2, r3, #2
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	300c      	adds	r0, #12
 8008184:	f000 fd92 	bl	8008cac <memcpy>
 8008188:	2201      	movs	r2, #1
 800818a:	0021      	movs	r1, r4
 800818c:	0038      	movs	r0, r7
 800818e:	f001 f809 	bl	80091a4 <__lshift>
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008196:	930a      	str	r3, [sp, #40]	; 0x28
 8008198:	3b01      	subs	r3, #1
 800819a:	189b      	adds	r3, r3, r2
 800819c:	2201      	movs	r2, #1
 800819e:	002c      	movs	r4, r5
 80081a0:	0005      	movs	r5, r0
 80081a2:	9314      	str	r3, [sp, #80]	; 0x50
 80081a4:	9b08      	ldr	r3, [sp, #32]
 80081a6:	4013      	ands	r3, r2
 80081a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80081aa:	0031      	movs	r1, r6
 80081ac:	9805      	ldr	r0, [sp, #20]
 80081ae:	f7ff fa3d 	bl	800762c <quorem>
 80081b2:	0003      	movs	r3, r0
 80081b4:	0021      	movs	r1, r4
 80081b6:	3330      	adds	r3, #48	; 0x30
 80081b8:	900d      	str	r0, [sp, #52]	; 0x34
 80081ba:	9805      	ldr	r0, [sp, #20]
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	f001 f85f 	bl	8009280 <__mcmp>
 80081c2:	002a      	movs	r2, r5
 80081c4:	900e      	str	r0, [sp, #56]	; 0x38
 80081c6:	0031      	movs	r1, r6
 80081c8:	0038      	movs	r0, r7
 80081ca:	f001 f875 	bl	80092b8 <__mdiff>
 80081ce:	68c3      	ldr	r3, [r0, #12]
 80081d0:	9008      	str	r0, [sp, #32]
 80081d2:	9310      	str	r3, [sp, #64]	; 0x40
 80081d4:	2301      	movs	r3, #1
 80081d6:	930c      	str	r3, [sp, #48]	; 0x30
 80081d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <_dtoa_r+0xaa4>
 80081de:	0001      	movs	r1, r0
 80081e0:	9805      	ldr	r0, [sp, #20]
 80081e2:	f001 f84d 	bl	8009280 <__mcmp>
 80081e6:	900c      	str	r0, [sp, #48]	; 0x30
 80081e8:	0038      	movs	r0, r7
 80081ea:	9908      	ldr	r1, [sp, #32]
 80081ec:	f000 fdbc 	bl	8008d68 <_Bfree>
 80081f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f4:	3301      	adds	r3, #1
 80081f6:	9308      	str	r3, [sp, #32]
 80081f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081fa:	4313      	orrs	r3, r2
 80081fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081fe:	4313      	orrs	r3, r2
 8008200:	d10c      	bne.n	800821c <_dtoa_r+0xad8>
 8008202:	9b07      	ldr	r3, [sp, #28]
 8008204:	2b39      	cmp	r3, #57	; 0x39
 8008206:	d026      	beq.n	8008256 <_dtoa_r+0xb12>
 8008208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800820a:	2b00      	cmp	r3, #0
 800820c:	dd02      	ble.n	8008214 <_dtoa_r+0xad0>
 800820e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008210:	3331      	adds	r3, #49	; 0x31
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008216:	9a07      	ldr	r2, [sp, #28]
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e76a      	b.n	80080f2 <_dtoa_r+0x9ae>
 800821c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800821e:	2b00      	cmp	r3, #0
 8008220:	db04      	blt.n	800822c <_dtoa_r+0xae8>
 8008222:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008224:	4313      	orrs	r3, r2
 8008226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008228:	4313      	orrs	r3, r2
 800822a:	d11f      	bne.n	800826c <_dtoa_r+0xb28>
 800822c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822e:	2b00      	cmp	r3, #0
 8008230:	ddf0      	ble.n	8008214 <_dtoa_r+0xad0>
 8008232:	9905      	ldr	r1, [sp, #20]
 8008234:	2201      	movs	r2, #1
 8008236:	0038      	movs	r0, r7
 8008238:	f000 ffb4 	bl	80091a4 <__lshift>
 800823c:	0031      	movs	r1, r6
 800823e:	9005      	str	r0, [sp, #20]
 8008240:	f001 f81e 	bl	8009280 <__mcmp>
 8008244:	2800      	cmp	r0, #0
 8008246:	dc03      	bgt.n	8008250 <_dtoa_r+0xb0c>
 8008248:	d1e4      	bne.n	8008214 <_dtoa_r+0xad0>
 800824a:	9b07      	ldr	r3, [sp, #28]
 800824c:	07db      	lsls	r3, r3, #31
 800824e:	d5e1      	bpl.n	8008214 <_dtoa_r+0xad0>
 8008250:	9b07      	ldr	r3, [sp, #28]
 8008252:	2b39      	cmp	r3, #57	; 0x39
 8008254:	d1db      	bne.n	800820e <_dtoa_r+0xaca>
 8008256:	2339      	movs	r3, #57	; 0x39
 8008258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800825a:	7013      	strb	r3, [r2, #0]
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	9308      	str	r3, [sp, #32]
 8008260:	3b01      	subs	r3, #1
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	2a39      	cmp	r2, #57	; 0x39
 8008266:	d068      	beq.n	800833a <_dtoa_r+0xbf6>
 8008268:	3201      	adds	r2, #1
 800826a:	e7d5      	b.n	8008218 <_dtoa_r+0xad4>
 800826c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd07      	ble.n	8008282 <_dtoa_r+0xb3e>
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	2b39      	cmp	r3, #57	; 0x39
 8008276:	d0ee      	beq.n	8008256 <_dtoa_r+0xb12>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800827c:	3301      	adds	r3, #1
 800827e:	7013      	strb	r3, [r2, #0]
 8008280:	e737      	b.n	80080f2 <_dtoa_r+0x9ae>
 8008282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008284:	9a07      	ldr	r2, [sp, #28]
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800828a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828c:	4293      	cmp	r3, r2
 800828e:	d03e      	beq.n	800830e <_dtoa_r+0xbca>
 8008290:	2300      	movs	r3, #0
 8008292:	220a      	movs	r2, #10
 8008294:	9905      	ldr	r1, [sp, #20]
 8008296:	0038      	movs	r0, r7
 8008298:	f000 fd8a 	bl	8008db0 <__multadd>
 800829c:	2300      	movs	r3, #0
 800829e:	9005      	str	r0, [sp, #20]
 80082a0:	220a      	movs	r2, #10
 80082a2:	0021      	movs	r1, r4
 80082a4:	0038      	movs	r0, r7
 80082a6:	42ac      	cmp	r4, r5
 80082a8:	d106      	bne.n	80082b8 <_dtoa_r+0xb74>
 80082aa:	f000 fd81 	bl	8008db0 <__multadd>
 80082ae:	0004      	movs	r4, r0
 80082b0:	0005      	movs	r5, r0
 80082b2:	9b08      	ldr	r3, [sp, #32]
 80082b4:	930a      	str	r3, [sp, #40]	; 0x28
 80082b6:	e778      	b.n	80081aa <_dtoa_r+0xa66>
 80082b8:	f000 fd7a 	bl	8008db0 <__multadd>
 80082bc:	0029      	movs	r1, r5
 80082be:	0004      	movs	r4, r0
 80082c0:	2300      	movs	r3, #0
 80082c2:	220a      	movs	r2, #10
 80082c4:	0038      	movs	r0, r7
 80082c6:	f000 fd73 	bl	8008db0 <__multadd>
 80082ca:	0005      	movs	r5, r0
 80082cc:	e7f1      	b.n	80082b2 <_dtoa_r+0xb6e>
 80082ce:	9b07      	ldr	r3, [sp, #28]
 80082d0:	930c      	str	r3, [sp, #48]	; 0x30
 80082d2:	2400      	movs	r4, #0
 80082d4:	0031      	movs	r1, r6
 80082d6:	9805      	ldr	r0, [sp, #20]
 80082d8:	f7ff f9a8 	bl	800762c <quorem>
 80082dc:	9b06      	ldr	r3, [sp, #24]
 80082de:	3030      	adds	r0, #48	; 0x30
 80082e0:	5518      	strb	r0, [r3, r4]
 80082e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e4:	3401      	adds	r4, #1
 80082e6:	9007      	str	r0, [sp, #28]
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	dd07      	ble.n	80082fc <_dtoa_r+0xbb8>
 80082ec:	2300      	movs	r3, #0
 80082ee:	220a      	movs	r2, #10
 80082f0:	0038      	movs	r0, r7
 80082f2:	9905      	ldr	r1, [sp, #20]
 80082f4:	f000 fd5c 	bl	8008db0 <__multadd>
 80082f8:	9005      	str	r0, [sp, #20]
 80082fa:	e7eb      	b.n	80082d4 <_dtoa_r+0xb90>
 80082fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082fe:	2001      	movs	r0, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	dd00      	ble.n	8008306 <_dtoa_r+0xbc2>
 8008304:	0018      	movs	r0, r3
 8008306:	2400      	movs	r4, #0
 8008308:	9b06      	ldr	r3, [sp, #24]
 800830a:	181b      	adds	r3, r3, r0
 800830c:	9308      	str	r3, [sp, #32]
 800830e:	9905      	ldr	r1, [sp, #20]
 8008310:	2201      	movs	r2, #1
 8008312:	0038      	movs	r0, r7
 8008314:	f000 ff46 	bl	80091a4 <__lshift>
 8008318:	0031      	movs	r1, r6
 800831a:	9005      	str	r0, [sp, #20]
 800831c:	f000 ffb0 	bl	8009280 <__mcmp>
 8008320:	2800      	cmp	r0, #0
 8008322:	dc9b      	bgt.n	800825c <_dtoa_r+0xb18>
 8008324:	d102      	bne.n	800832c <_dtoa_r+0xbe8>
 8008326:	9b07      	ldr	r3, [sp, #28]
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d497      	bmi.n	800825c <_dtoa_r+0xb18>
 800832c:	9b08      	ldr	r3, [sp, #32]
 800832e:	9308      	str	r3, [sp, #32]
 8008330:	3b01      	subs	r3, #1
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	2a30      	cmp	r2, #48	; 0x30
 8008336:	d0fa      	beq.n	800832e <_dtoa_r+0xbea>
 8008338:	e6db      	b.n	80080f2 <_dtoa_r+0x9ae>
 800833a:	9a06      	ldr	r2, [sp, #24]
 800833c:	429a      	cmp	r2, r3
 800833e:	d18e      	bne.n	800825e <_dtoa_r+0xb1a>
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	3301      	adds	r3, #1
 8008344:	9302      	str	r3, [sp, #8]
 8008346:	2331      	movs	r3, #49	; 0x31
 8008348:	e799      	b.n	800827e <_dtoa_r+0xb3a>
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <_dtoa_r+0xc2c>)
 800834c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800834e:	9306      	str	r3, [sp, #24]
 8008350:	4b08      	ldr	r3, [pc, #32]	; (8008374 <_dtoa_r+0xc30>)
 8008352:	2a00      	cmp	r2, #0
 8008354:	d001      	beq.n	800835a <_dtoa_r+0xc16>
 8008356:	f7ff fa3f 	bl	80077d8 <_dtoa_r+0x94>
 800835a:	f7ff fa3f 	bl	80077dc <_dtoa_r+0x98>
 800835e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008360:	2b00      	cmp	r3, #0
 8008362:	dcb6      	bgt.n	80082d2 <_dtoa_r+0xb8e>
 8008364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008366:	2b02      	cmp	r3, #2
 8008368:	dd00      	ble.n	800836c <_dtoa_r+0xc28>
 800836a:	e6ac      	b.n	80080c6 <_dtoa_r+0x982>
 800836c:	e7b1      	b.n	80082d2 <_dtoa_r+0xb8e>
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	0800a851 	.word	0x0800a851
 8008374:	0800a859 	.word	0x0800a859

08008378 <std>:
 8008378:	2300      	movs	r3, #0
 800837a:	b510      	push	{r4, lr}
 800837c:	0004      	movs	r4, r0
 800837e:	6003      	str	r3, [r0, #0]
 8008380:	6043      	str	r3, [r0, #4]
 8008382:	6083      	str	r3, [r0, #8]
 8008384:	8181      	strh	r1, [r0, #12]
 8008386:	6643      	str	r3, [r0, #100]	; 0x64
 8008388:	0019      	movs	r1, r3
 800838a:	81c2      	strh	r2, [r0, #14]
 800838c:	6103      	str	r3, [r0, #16]
 800838e:	6143      	str	r3, [r0, #20]
 8008390:	6183      	str	r3, [r0, #24]
 8008392:	2208      	movs	r2, #8
 8008394:	305c      	adds	r0, #92	; 0x5c
 8008396:	f7fd faed 	bl	8005974 <memset>
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <std+0x38>)
 800839c:	6224      	str	r4, [r4, #32]
 800839e:	6263      	str	r3, [r4, #36]	; 0x24
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <std+0x3c>)
 80083a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a4:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <std+0x40>)
 80083a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <std+0x44>)
 80083aa:	6323      	str	r3, [r4, #48]	; 0x30
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	46c0      	nop			; (mov r8, r8)
 80083b0:	08009c61 	.word	0x08009c61
 80083b4:	08009c89 	.word	0x08009c89
 80083b8:	08009cc1 	.word	0x08009cc1
 80083bc:	08009ced 	.word	0x08009ced

080083c0 <_cleanup_r>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	4902      	ldr	r1, [pc, #8]	; (80083cc <_cleanup_r+0xc>)
 80083c4:	f000 f8ba 	bl	800853c <_fwalk_reent>
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	0800a075 	.word	0x0800a075

080083d0 <__sfmoreglue>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	2568      	movs	r5, #104	; 0x68
 80083d4:	1e4a      	subs	r2, r1, #1
 80083d6:	4355      	muls	r5, r2
 80083d8:	000e      	movs	r6, r1
 80083da:	0029      	movs	r1, r5
 80083dc:	3174      	adds	r1, #116	; 0x74
 80083de:	f7fd fb3d 	bl	8005a5c <_malloc_r>
 80083e2:	1e04      	subs	r4, r0, #0
 80083e4:	d008      	beq.n	80083f8 <__sfmoreglue+0x28>
 80083e6:	2100      	movs	r1, #0
 80083e8:	002a      	movs	r2, r5
 80083ea:	6001      	str	r1, [r0, #0]
 80083ec:	6046      	str	r6, [r0, #4]
 80083ee:	300c      	adds	r0, #12
 80083f0:	60a0      	str	r0, [r4, #8]
 80083f2:	3268      	adds	r2, #104	; 0x68
 80083f4:	f7fd fabe 	bl	8005974 <memset>
 80083f8:	0020      	movs	r0, r4
 80083fa:	bd70      	pop	{r4, r5, r6, pc}

080083fc <__sfp_lock_acquire>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4802      	ldr	r0, [pc, #8]	; (8008408 <__sfp_lock_acquire+0xc>)
 8008400:	f000 fc35 	bl	8008c6e <__retarget_lock_acquire_recursive>
 8008404:	bd10      	pop	{r4, pc}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	200005a9 	.word	0x200005a9

0800840c <__sfp_lock_release>:
 800840c:	b510      	push	{r4, lr}
 800840e:	4802      	ldr	r0, [pc, #8]	; (8008418 <__sfp_lock_release+0xc>)
 8008410:	f000 fc2e 	bl	8008c70 <__retarget_lock_release_recursive>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	200005a9 	.word	0x200005a9

0800841c <__sinit_lock_acquire>:
 800841c:	b510      	push	{r4, lr}
 800841e:	4802      	ldr	r0, [pc, #8]	; (8008428 <__sinit_lock_acquire+0xc>)
 8008420:	f000 fc25 	bl	8008c6e <__retarget_lock_acquire_recursive>
 8008424:	bd10      	pop	{r4, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	200005aa 	.word	0x200005aa

0800842c <__sinit_lock_release>:
 800842c:	b510      	push	{r4, lr}
 800842e:	4802      	ldr	r0, [pc, #8]	; (8008438 <__sinit_lock_release+0xc>)
 8008430:	f000 fc1e 	bl	8008c70 <__retarget_lock_release_recursive>
 8008434:	bd10      	pop	{r4, pc}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	200005aa 	.word	0x200005aa

0800843c <__sinit>:
 800843c:	b513      	push	{r0, r1, r4, lr}
 800843e:	0004      	movs	r4, r0
 8008440:	f7ff ffec 	bl	800841c <__sinit_lock_acquire>
 8008444:	69a3      	ldr	r3, [r4, #24]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <__sinit+0x14>
 800844a:	f7ff ffef 	bl	800842c <__sinit_lock_release>
 800844e:	bd13      	pop	{r0, r1, r4, pc}
 8008450:	64a3      	str	r3, [r4, #72]	; 0x48
 8008452:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008454:	6523      	str	r3, [r4, #80]	; 0x50
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <__sinit+0x68>)
 8008458:	4a13      	ldr	r2, [pc, #76]	; (80084a8 <__sinit+0x6c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	62a2      	str	r2, [r4, #40]	; 0x28
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	42a3      	cmp	r3, r4
 8008462:	d101      	bne.n	8008468 <__sinit+0x2c>
 8008464:	2301      	movs	r3, #1
 8008466:	61a3      	str	r3, [r4, #24]
 8008468:	0020      	movs	r0, r4
 800846a:	f000 f81f 	bl	80084ac <__sfp>
 800846e:	6060      	str	r0, [r4, #4]
 8008470:	0020      	movs	r0, r4
 8008472:	f000 f81b 	bl	80084ac <__sfp>
 8008476:	60a0      	str	r0, [r4, #8]
 8008478:	0020      	movs	r0, r4
 800847a:	f000 f817 	bl	80084ac <__sfp>
 800847e:	2200      	movs	r2, #0
 8008480:	2104      	movs	r1, #4
 8008482:	60e0      	str	r0, [r4, #12]
 8008484:	6860      	ldr	r0, [r4, #4]
 8008486:	f7ff ff77 	bl	8008378 <std>
 800848a:	2201      	movs	r2, #1
 800848c:	2109      	movs	r1, #9
 800848e:	68a0      	ldr	r0, [r4, #8]
 8008490:	f7ff ff72 	bl	8008378 <std>
 8008494:	2202      	movs	r2, #2
 8008496:	2112      	movs	r1, #18
 8008498:	68e0      	ldr	r0, [r4, #12]
 800849a:	f7ff ff6d 	bl	8008378 <std>
 800849e:	2301      	movs	r3, #1
 80084a0:	61a3      	str	r3, [r4, #24]
 80084a2:	e7d2      	b.n	800844a <__sinit+0xe>
 80084a4:	0800a6c0 	.word	0x0800a6c0
 80084a8:	080083c1 	.word	0x080083c1

080084ac <__sfp>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	0007      	movs	r7, r0
 80084b0:	f7ff ffa4 	bl	80083fc <__sfp_lock_acquire>
 80084b4:	4b1f      	ldr	r3, [pc, #124]	; (8008534 <__sfp+0x88>)
 80084b6:	681e      	ldr	r6, [r3, #0]
 80084b8:	69b3      	ldr	r3, [r6, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <__sfp+0x18>
 80084be:	0030      	movs	r0, r6
 80084c0:	f7ff ffbc 	bl	800843c <__sinit>
 80084c4:	3648      	adds	r6, #72	; 0x48
 80084c6:	68b4      	ldr	r4, [r6, #8]
 80084c8:	6873      	ldr	r3, [r6, #4]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	d504      	bpl.n	80084d8 <__sfp+0x2c>
 80084ce:	6833      	ldr	r3, [r6, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d022      	beq.n	800851a <__sfp+0x6e>
 80084d4:	6836      	ldr	r6, [r6, #0]
 80084d6:	e7f6      	b.n	80084c6 <__sfp+0x1a>
 80084d8:	220c      	movs	r2, #12
 80084da:	5ea5      	ldrsh	r5, [r4, r2]
 80084dc:	2d00      	cmp	r5, #0
 80084de:	d11a      	bne.n	8008516 <__sfp+0x6a>
 80084e0:	0020      	movs	r0, r4
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <__sfp+0x8c>)
 80084e4:	3058      	adds	r0, #88	; 0x58
 80084e6:	60e3      	str	r3, [r4, #12]
 80084e8:	6665      	str	r5, [r4, #100]	; 0x64
 80084ea:	f000 fbbf 	bl	8008c6c <__retarget_lock_init_recursive>
 80084ee:	f7ff ff8d 	bl	800840c <__sfp_lock_release>
 80084f2:	0020      	movs	r0, r4
 80084f4:	2208      	movs	r2, #8
 80084f6:	0029      	movs	r1, r5
 80084f8:	6025      	str	r5, [r4, #0]
 80084fa:	60a5      	str	r5, [r4, #8]
 80084fc:	6065      	str	r5, [r4, #4]
 80084fe:	6125      	str	r5, [r4, #16]
 8008500:	6165      	str	r5, [r4, #20]
 8008502:	61a5      	str	r5, [r4, #24]
 8008504:	305c      	adds	r0, #92	; 0x5c
 8008506:	f7fd fa35 	bl	8005974 <memset>
 800850a:	6365      	str	r5, [r4, #52]	; 0x34
 800850c:	63a5      	str	r5, [r4, #56]	; 0x38
 800850e:	64a5      	str	r5, [r4, #72]	; 0x48
 8008510:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008512:	0020      	movs	r0, r4
 8008514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008516:	3468      	adds	r4, #104	; 0x68
 8008518:	e7d7      	b.n	80084ca <__sfp+0x1e>
 800851a:	2104      	movs	r1, #4
 800851c:	0038      	movs	r0, r7
 800851e:	f7ff ff57 	bl	80083d0 <__sfmoreglue>
 8008522:	1e04      	subs	r4, r0, #0
 8008524:	6030      	str	r0, [r6, #0]
 8008526:	d1d5      	bne.n	80084d4 <__sfp+0x28>
 8008528:	f7ff ff70 	bl	800840c <__sfp_lock_release>
 800852c:	230c      	movs	r3, #12
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	e7ef      	b.n	8008512 <__sfp+0x66>
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	0800a6c0 	.word	0x0800a6c0
 8008538:	ffff0001 	.word	0xffff0001

0800853c <_fwalk_reent>:
 800853c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800853e:	0004      	movs	r4, r0
 8008540:	0006      	movs	r6, r0
 8008542:	2700      	movs	r7, #0
 8008544:	9101      	str	r1, [sp, #4]
 8008546:	3448      	adds	r4, #72	; 0x48
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	68a5      	ldr	r5, [r4, #8]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	9b00      	ldr	r3, [sp, #0]
 8008550:	3b01      	subs	r3, #1
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	d504      	bpl.n	8008560 <_fwalk_reent+0x24>
 8008556:	6824      	ldr	r4, [r4, #0]
 8008558:	2c00      	cmp	r4, #0
 800855a:	d1f5      	bne.n	8008548 <_fwalk_reent+0xc>
 800855c:	0038      	movs	r0, r7
 800855e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008560:	89ab      	ldrh	r3, [r5, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d908      	bls.n	8008578 <_fwalk_reent+0x3c>
 8008566:	220e      	movs	r2, #14
 8008568:	5eab      	ldrsh	r3, [r5, r2]
 800856a:	3301      	adds	r3, #1
 800856c:	d004      	beq.n	8008578 <_fwalk_reent+0x3c>
 800856e:	0029      	movs	r1, r5
 8008570:	0030      	movs	r0, r6
 8008572:	9b01      	ldr	r3, [sp, #4]
 8008574:	4798      	blx	r3
 8008576:	4307      	orrs	r7, r0
 8008578:	3568      	adds	r5, #104	; 0x68
 800857a:	e7e8      	b.n	800854e <_fwalk_reent+0x12>

0800857c <rshift>:
 800857c:	0002      	movs	r2, r0
 800857e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008580:	6904      	ldr	r4, [r0, #16]
 8008582:	3214      	adds	r2, #20
 8008584:	0013      	movs	r3, r2
 8008586:	b085      	sub	sp, #20
 8008588:	114f      	asrs	r7, r1, #5
 800858a:	42bc      	cmp	r4, r7
 800858c:	dd31      	ble.n	80085f2 <rshift+0x76>
 800858e:	00bb      	lsls	r3, r7, #2
 8008590:	18d3      	adds	r3, r2, r3
 8008592:	261f      	movs	r6, #31
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	000b      	movs	r3, r1
 8008598:	00a5      	lsls	r5, r4, #2
 800859a:	4033      	ands	r3, r6
 800859c:	1955      	adds	r5, r2, r5
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	4231      	tst	r1, r6
 80085a2:	d10c      	bne.n	80085be <rshift+0x42>
 80085a4:	0016      	movs	r6, r2
 80085a6:	9901      	ldr	r1, [sp, #4]
 80085a8:	428d      	cmp	r5, r1
 80085aa:	d838      	bhi.n	800861e <rshift+0xa2>
 80085ac:	9901      	ldr	r1, [sp, #4]
 80085ae:	2300      	movs	r3, #0
 80085b0:	3903      	subs	r1, #3
 80085b2:	428d      	cmp	r5, r1
 80085b4:	d301      	bcc.n	80085ba <rshift+0x3e>
 80085b6:	1be3      	subs	r3, r4, r7
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	18d3      	adds	r3, r2, r3
 80085bc:	e019      	b.n	80085f2 <rshift+0x76>
 80085be:	2120      	movs	r1, #32
 80085c0:	9b02      	ldr	r3, [sp, #8]
 80085c2:	9e01      	ldr	r6, [sp, #4]
 80085c4:	1acb      	subs	r3, r1, r3
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	ce02      	ldmia	r6!, {r1}
 80085ca:	9b02      	ldr	r3, [sp, #8]
 80085cc:	4694      	mov	ip, r2
 80085ce:	40d9      	lsrs	r1, r3
 80085d0:	9100      	str	r1, [sp, #0]
 80085d2:	42b5      	cmp	r5, r6
 80085d4:	d816      	bhi.n	8008604 <rshift+0x88>
 80085d6:	9e01      	ldr	r6, [sp, #4]
 80085d8:	2300      	movs	r3, #0
 80085da:	3601      	adds	r6, #1
 80085dc:	42b5      	cmp	r5, r6
 80085de:	d302      	bcc.n	80085e6 <rshift+0x6a>
 80085e0:	1be3      	subs	r3, r4, r7
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	3b04      	subs	r3, #4
 80085e6:	9900      	ldr	r1, [sp, #0]
 80085e8:	18d3      	adds	r3, r2, r3
 80085ea:	6019      	str	r1, [r3, #0]
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d000      	beq.n	80085f2 <rshift+0x76>
 80085f0:	3304      	adds	r3, #4
 80085f2:	1a99      	subs	r1, r3, r2
 80085f4:	1089      	asrs	r1, r1, #2
 80085f6:	6101      	str	r1, [r0, #16]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d101      	bne.n	8008600 <rshift+0x84>
 80085fc:	2300      	movs	r3, #0
 80085fe:	6143      	str	r3, [r0, #20]
 8008600:	b005      	add	sp, #20
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	9903      	ldr	r1, [sp, #12]
 8008608:	408b      	lsls	r3, r1
 800860a:	9900      	ldr	r1, [sp, #0]
 800860c:	4319      	orrs	r1, r3
 800860e:	4663      	mov	r3, ip
 8008610:	c302      	stmia	r3!, {r1}
 8008612:	469c      	mov	ip, r3
 8008614:	ce02      	ldmia	r6!, {r1}
 8008616:	9b02      	ldr	r3, [sp, #8]
 8008618:	40d9      	lsrs	r1, r3
 800861a:	9100      	str	r1, [sp, #0]
 800861c:	e7d9      	b.n	80085d2 <rshift+0x56>
 800861e:	c908      	ldmia	r1!, {r3}
 8008620:	c608      	stmia	r6!, {r3}
 8008622:	e7c1      	b.n	80085a8 <rshift+0x2c>

08008624 <__hexdig_fun>:
 8008624:	0002      	movs	r2, r0
 8008626:	3a30      	subs	r2, #48	; 0x30
 8008628:	0003      	movs	r3, r0
 800862a:	2a09      	cmp	r2, #9
 800862c:	d802      	bhi.n	8008634 <__hexdig_fun+0x10>
 800862e:	3b20      	subs	r3, #32
 8008630:	b2d8      	uxtb	r0, r3
 8008632:	4770      	bx	lr
 8008634:	0002      	movs	r2, r0
 8008636:	3a61      	subs	r2, #97	; 0x61
 8008638:	2a05      	cmp	r2, #5
 800863a:	d801      	bhi.n	8008640 <__hexdig_fun+0x1c>
 800863c:	3b47      	subs	r3, #71	; 0x47
 800863e:	e7f7      	b.n	8008630 <__hexdig_fun+0xc>
 8008640:	001a      	movs	r2, r3
 8008642:	3a41      	subs	r2, #65	; 0x41
 8008644:	2000      	movs	r0, #0
 8008646:	2a05      	cmp	r2, #5
 8008648:	d8f3      	bhi.n	8008632 <__hexdig_fun+0xe>
 800864a:	3b27      	subs	r3, #39	; 0x27
 800864c:	e7f0      	b.n	8008630 <__hexdig_fun+0xc>
	...

08008650 <__gethex>:
 8008650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008652:	b08d      	sub	sp, #52	; 0x34
 8008654:	930a      	str	r3, [sp, #40]	; 0x28
 8008656:	4bbf      	ldr	r3, [pc, #764]	; (8008954 <__gethex+0x304>)
 8008658:	9005      	str	r0, [sp, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	9109      	str	r1, [sp, #36]	; 0x24
 800865e:	0018      	movs	r0, r3
 8008660:	9202      	str	r2, [sp, #8]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f7f7 fd50 	bl	8000108 <strlen>
 8008668:	2202      	movs	r2, #2
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	4252      	negs	r2, r2
 800866e:	181b      	adds	r3, r3, r0
 8008670:	3b01      	subs	r3, #1
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	9003      	str	r0, [sp, #12]
 8008676:	930b      	str	r3, [sp, #44]	; 0x2c
 8008678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867a:	6819      	ldr	r1, [r3, #0]
 800867c:	1c8b      	adds	r3, r1, #2
 800867e:	1a52      	subs	r2, r2, r1
 8008680:	18d1      	adds	r1, r2, r3
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	9108      	str	r1, [sp, #32]
 8008686:	9901      	ldr	r1, [sp, #4]
 8008688:	3301      	adds	r3, #1
 800868a:	7808      	ldrb	r0, [r1, #0]
 800868c:	2830      	cmp	r0, #48	; 0x30
 800868e:	d0f7      	beq.n	8008680 <__gethex+0x30>
 8008690:	f7ff ffc8 	bl	8008624 <__hexdig_fun>
 8008694:	2300      	movs	r3, #0
 8008696:	001c      	movs	r4, r3
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	4298      	cmp	r0, r3
 800869c:	d11f      	bne.n	80086de <__gethex+0x8e>
 800869e:	9a03      	ldr	r2, [sp, #12]
 80086a0:	9907      	ldr	r1, [sp, #28]
 80086a2:	9801      	ldr	r0, [sp, #4]
 80086a4:	f001 fb28 	bl	8009cf8 <strncmp>
 80086a8:	0007      	movs	r7, r0
 80086aa:	42a0      	cmp	r0, r4
 80086ac:	d000      	beq.n	80086b0 <__gethex+0x60>
 80086ae:	e06b      	b.n	8008788 <__gethex+0x138>
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	9a03      	ldr	r2, [sp, #12]
 80086b4:	5c98      	ldrb	r0, [r3, r2]
 80086b6:	189d      	adds	r5, r3, r2
 80086b8:	f7ff ffb4 	bl	8008624 <__hexdig_fun>
 80086bc:	2301      	movs	r3, #1
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d030      	beq.n	8008726 <__gethex+0xd6>
 80086c4:	9501      	str	r5, [sp, #4]
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	7818      	ldrb	r0, [r3, #0]
 80086ca:	2830      	cmp	r0, #48	; 0x30
 80086cc:	d009      	beq.n	80086e2 <__gethex+0x92>
 80086ce:	f7ff ffa9 	bl	8008624 <__hexdig_fun>
 80086d2:	4242      	negs	r2, r0
 80086d4:	4142      	adcs	r2, r0
 80086d6:	2301      	movs	r3, #1
 80086d8:	002c      	movs	r4, r5
 80086da:	9204      	str	r2, [sp, #16]
 80086dc:	9308      	str	r3, [sp, #32]
 80086de:	9d01      	ldr	r5, [sp, #4]
 80086e0:	e004      	b.n	80086ec <__gethex+0x9c>
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	3301      	adds	r3, #1
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	e7ed      	b.n	80086c6 <__gethex+0x76>
 80086ea:	3501      	adds	r5, #1
 80086ec:	7828      	ldrb	r0, [r5, #0]
 80086ee:	f7ff ff99 	bl	8008624 <__hexdig_fun>
 80086f2:	1e07      	subs	r7, r0, #0
 80086f4:	d1f9      	bne.n	80086ea <__gethex+0x9a>
 80086f6:	0028      	movs	r0, r5
 80086f8:	9a03      	ldr	r2, [sp, #12]
 80086fa:	9907      	ldr	r1, [sp, #28]
 80086fc:	f001 fafc 	bl	8009cf8 <strncmp>
 8008700:	2800      	cmp	r0, #0
 8008702:	d10e      	bne.n	8008722 <__gethex+0xd2>
 8008704:	2c00      	cmp	r4, #0
 8008706:	d107      	bne.n	8008718 <__gethex+0xc8>
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	18ed      	adds	r5, r5, r3
 800870c:	002c      	movs	r4, r5
 800870e:	7828      	ldrb	r0, [r5, #0]
 8008710:	f7ff ff88 	bl	8008624 <__hexdig_fun>
 8008714:	2800      	cmp	r0, #0
 8008716:	d102      	bne.n	800871e <__gethex+0xce>
 8008718:	1b64      	subs	r4, r4, r5
 800871a:	00a7      	lsls	r7, r4, #2
 800871c:	e003      	b.n	8008726 <__gethex+0xd6>
 800871e:	3501      	adds	r5, #1
 8008720:	e7f5      	b.n	800870e <__gethex+0xbe>
 8008722:	2c00      	cmp	r4, #0
 8008724:	d1f8      	bne.n	8008718 <__gethex+0xc8>
 8008726:	2220      	movs	r2, #32
 8008728:	782b      	ldrb	r3, [r5, #0]
 800872a:	002e      	movs	r6, r5
 800872c:	4393      	bics	r3, r2
 800872e:	2b50      	cmp	r3, #80	; 0x50
 8008730:	d11d      	bne.n	800876e <__gethex+0x11e>
 8008732:	786b      	ldrb	r3, [r5, #1]
 8008734:	2b2b      	cmp	r3, #43	; 0x2b
 8008736:	d02c      	beq.n	8008792 <__gethex+0x142>
 8008738:	2b2d      	cmp	r3, #45	; 0x2d
 800873a:	d02e      	beq.n	800879a <__gethex+0x14a>
 800873c:	2300      	movs	r3, #0
 800873e:	1c6e      	adds	r6, r5, #1
 8008740:	9306      	str	r3, [sp, #24]
 8008742:	7830      	ldrb	r0, [r6, #0]
 8008744:	f7ff ff6e 	bl	8008624 <__hexdig_fun>
 8008748:	1e43      	subs	r3, r0, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b18      	cmp	r3, #24
 800874e:	d82b      	bhi.n	80087a8 <__gethex+0x158>
 8008750:	3810      	subs	r0, #16
 8008752:	0004      	movs	r4, r0
 8008754:	7870      	ldrb	r0, [r6, #1]
 8008756:	f7ff ff65 	bl	8008624 <__hexdig_fun>
 800875a:	1e43      	subs	r3, r0, #1
 800875c:	b2db      	uxtb	r3, r3
 800875e:	3601      	adds	r6, #1
 8008760:	2b18      	cmp	r3, #24
 8008762:	d91c      	bls.n	800879e <__gethex+0x14e>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d000      	beq.n	800876c <__gethex+0x11c>
 800876a:	4264      	negs	r4, r4
 800876c:	193f      	adds	r7, r7, r4
 800876e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008770:	601e      	str	r6, [r3, #0]
 8008772:	9b04      	ldr	r3, [sp, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d019      	beq.n	80087ac <__gethex+0x15c>
 8008778:	2600      	movs	r6, #0
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	42b3      	cmp	r3, r6
 800877e:	d100      	bne.n	8008782 <__gethex+0x132>
 8008780:	3606      	adds	r6, #6
 8008782:	0030      	movs	r0, r6
 8008784:	b00d      	add	sp, #52	; 0x34
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008788:	2301      	movs	r3, #1
 800878a:	2700      	movs	r7, #0
 800878c:	9d01      	ldr	r5, [sp, #4]
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	e7c9      	b.n	8008726 <__gethex+0xd6>
 8008792:	2300      	movs	r3, #0
 8008794:	9306      	str	r3, [sp, #24]
 8008796:	1cae      	adds	r6, r5, #2
 8008798:	e7d3      	b.n	8008742 <__gethex+0xf2>
 800879a:	2301      	movs	r3, #1
 800879c:	e7fa      	b.n	8008794 <__gethex+0x144>
 800879e:	230a      	movs	r3, #10
 80087a0:	435c      	muls	r4, r3
 80087a2:	1824      	adds	r4, r4, r0
 80087a4:	3c10      	subs	r4, #16
 80087a6:	e7d5      	b.n	8008754 <__gethex+0x104>
 80087a8:	002e      	movs	r6, r5
 80087aa:	e7e0      	b.n	800876e <__gethex+0x11e>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	9904      	ldr	r1, [sp, #16]
 80087b0:	1aeb      	subs	r3, r5, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	2b07      	cmp	r3, #7
 80087b6:	dc0a      	bgt.n	80087ce <__gethex+0x17e>
 80087b8:	9805      	ldr	r0, [sp, #20]
 80087ba:	f000 fa91 	bl	8008ce0 <_Balloc>
 80087be:	1e04      	subs	r4, r0, #0
 80087c0:	d108      	bne.n	80087d4 <__gethex+0x184>
 80087c2:	0002      	movs	r2, r0
 80087c4:	21de      	movs	r1, #222	; 0xde
 80087c6:	4b64      	ldr	r3, [pc, #400]	; (8008958 <__gethex+0x308>)
 80087c8:	4864      	ldr	r0, [pc, #400]	; (800895c <__gethex+0x30c>)
 80087ca:	f001 fb97 	bl	8009efc <__assert_func>
 80087ce:	3101      	adds	r1, #1
 80087d0:	105b      	asrs	r3, r3, #1
 80087d2:	e7ef      	b.n	80087b4 <__gethex+0x164>
 80087d4:	0003      	movs	r3, r0
 80087d6:	3314      	adds	r3, #20
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	2300      	movs	r3, #0
 80087de:	001e      	movs	r6, r3
 80087e0:	9306      	str	r3, [sp, #24]
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	d340      	bcc.n	800886a <__gethex+0x21a>
 80087e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	c540      	stmia	r5!, {r6}
 80087ee:	1aed      	subs	r5, r5, r3
 80087f0:	10ad      	asrs	r5, r5, #2
 80087f2:	0030      	movs	r0, r6
 80087f4:	6125      	str	r5, [r4, #16]
 80087f6:	f000 fb6b 	bl	8008ed0 <__hi0bits>
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	016d      	lsls	r5, r5, #5
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	1a2e      	subs	r6, r5, r0
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	429e      	cmp	r6, r3
 8008806:	dd5a      	ble.n	80088be <__gethex+0x26e>
 8008808:	1af6      	subs	r6, r6, r3
 800880a:	0031      	movs	r1, r6
 800880c:	0020      	movs	r0, r4
 800880e:	f000 ff0d 	bl	800962c <__any_on>
 8008812:	1e05      	subs	r5, r0, #0
 8008814:	d016      	beq.n	8008844 <__gethex+0x1f4>
 8008816:	2501      	movs	r5, #1
 8008818:	211f      	movs	r1, #31
 800881a:	0028      	movs	r0, r5
 800881c:	1e73      	subs	r3, r6, #1
 800881e:	4019      	ands	r1, r3
 8008820:	4088      	lsls	r0, r1
 8008822:	0001      	movs	r1, r0
 8008824:	115a      	asrs	r2, r3, #5
 8008826:	9804      	ldr	r0, [sp, #16]
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	5812      	ldr	r2, [r2, r0]
 800882c:	420a      	tst	r2, r1
 800882e:	d009      	beq.n	8008844 <__gethex+0x1f4>
 8008830:	42ab      	cmp	r3, r5
 8008832:	dd06      	ble.n	8008842 <__gethex+0x1f2>
 8008834:	0020      	movs	r0, r4
 8008836:	1eb1      	subs	r1, r6, #2
 8008838:	f000 fef8 	bl	800962c <__any_on>
 800883c:	3502      	adds	r5, #2
 800883e:	2800      	cmp	r0, #0
 8008840:	d100      	bne.n	8008844 <__gethex+0x1f4>
 8008842:	2502      	movs	r5, #2
 8008844:	0031      	movs	r1, r6
 8008846:	0020      	movs	r0, r4
 8008848:	f7ff fe98 	bl	800857c <rshift>
 800884c:	19bf      	adds	r7, r7, r6
 800884e:	9b02      	ldr	r3, [sp, #8]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	42bb      	cmp	r3, r7
 8008856:	da42      	bge.n	80088de <__gethex+0x28e>
 8008858:	0021      	movs	r1, r4
 800885a:	9805      	ldr	r0, [sp, #20]
 800885c:	f000 fa84 	bl	8008d68 <_Bfree>
 8008860:	2300      	movs	r3, #0
 8008862:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008864:	26a3      	movs	r6, #163	; 0xa3
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e78b      	b.n	8008782 <__gethex+0x132>
 800886a:	1e6b      	subs	r3, r5, #1
 800886c:	9308      	str	r3, [sp, #32]
 800886e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4293      	cmp	r3, r2
 8008874:	d014      	beq.n	80088a0 <__gethex+0x250>
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2b20      	cmp	r3, #32
 800887a:	d104      	bne.n	8008886 <__gethex+0x236>
 800887c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887e:	c340      	stmia	r3!, {r6}
 8008880:	2600      	movs	r6, #0
 8008882:	9309      	str	r3, [sp, #36]	; 0x24
 8008884:	9606      	str	r6, [sp, #24]
 8008886:	9b08      	ldr	r3, [sp, #32]
 8008888:	7818      	ldrb	r0, [r3, #0]
 800888a:	f7ff fecb 	bl	8008624 <__hexdig_fun>
 800888e:	230f      	movs	r3, #15
 8008890:	4018      	ands	r0, r3
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	9d08      	ldr	r5, [sp, #32]
 8008896:	4098      	lsls	r0, r3
 8008898:	3304      	adds	r3, #4
 800889a:	4306      	orrs	r6, r0
 800889c:	9306      	str	r3, [sp, #24]
 800889e:	e7a0      	b.n	80087e2 <__gethex+0x192>
 80088a0:	2301      	movs	r3, #1
 80088a2:	9a03      	ldr	r2, [sp, #12]
 80088a4:	1a9d      	subs	r5, r3, r2
 80088a6:	9b08      	ldr	r3, [sp, #32]
 80088a8:	195d      	adds	r5, r3, r5
 80088aa:	9b01      	ldr	r3, [sp, #4]
 80088ac:	429d      	cmp	r5, r3
 80088ae:	d3e2      	bcc.n	8008876 <__gethex+0x226>
 80088b0:	0028      	movs	r0, r5
 80088b2:	9907      	ldr	r1, [sp, #28]
 80088b4:	f001 fa20 	bl	8009cf8 <strncmp>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1dc      	bne.n	8008876 <__gethex+0x226>
 80088bc:	e791      	b.n	80087e2 <__gethex+0x192>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	2500      	movs	r5, #0
 80088c2:	429e      	cmp	r6, r3
 80088c4:	dac3      	bge.n	800884e <__gethex+0x1fe>
 80088c6:	1b9e      	subs	r6, r3, r6
 80088c8:	0021      	movs	r1, r4
 80088ca:	0032      	movs	r2, r6
 80088cc:	9805      	ldr	r0, [sp, #20]
 80088ce:	f000 fc69 	bl	80091a4 <__lshift>
 80088d2:	0003      	movs	r3, r0
 80088d4:	3314      	adds	r3, #20
 80088d6:	0004      	movs	r4, r0
 80088d8:	1bbf      	subs	r7, r7, r6
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	e7b7      	b.n	800884e <__gethex+0x1fe>
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	685e      	ldr	r6, [r3, #4]
 80088e2:	42be      	cmp	r6, r7
 80088e4:	dd71      	ble.n	80089ca <__gethex+0x37a>
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	1bf6      	subs	r6, r6, r7
 80088ea:	42b3      	cmp	r3, r6
 80088ec:	dc38      	bgt.n	8008960 <__gethex+0x310>
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d026      	beq.n	8008944 <__gethex+0x2f4>
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d028      	beq.n	800894c <__gethex+0x2fc>
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d119      	bne.n	8008932 <__gethex+0x2e2>
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	42b3      	cmp	r3, r6
 8008902:	d116      	bne.n	8008932 <__gethex+0x2e2>
 8008904:	2b01      	cmp	r3, #1
 8008906:	d10d      	bne.n	8008924 <__gethex+0x2d4>
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	2662      	movs	r6, #98	; 0x62
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	9a01      	ldr	r2, [sp, #4]
 8008912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	2301      	movs	r3, #1
 8008918:	9a04      	ldr	r2, [sp, #16]
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008920:	601c      	str	r4, [r3, #0]
 8008922:	e72e      	b.n	8008782 <__gethex+0x132>
 8008924:	9901      	ldr	r1, [sp, #4]
 8008926:	0020      	movs	r0, r4
 8008928:	3901      	subs	r1, #1
 800892a:	f000 fe7f 	bl	800962c <__any_on>
 800892e:	2800      	cmp	r0, #0
 8008930:	d1ea      	bne.n	8008908 <__gethex+0x2b8>
 8008932:	0021      	movs	r1, r4
 8008934:	9805      	ldr	r0, [sp, #20]
 8008936:	f000 fa17 	bl	8008d68 <_Bfree>
 800893a:	2300      	movs	r3, #0
 800893c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800893e:	2650      	movs	r6, #80	; 0x50
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e71e      	b.n	8008782 <__gethex+0x132>
 8008944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f3      	bne.n	8008932 <__gethex+0x2e2>
 800894a:	e7dd      	b.n	8008908 <__gethex+0x2b8>
 800894c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1da      	bne.n	8008908 <__gethex+0x2b8>
 8008952:	e7ee      	b.n	8008932 <__gethex+0x2e2>
 8008954:	0800a9ac 	.word	0x0800a9ac
 8008958:	0800a8d0 	.word	0x0800a8d0
 800895c:	0800a944 	.word	0x0800a944
 8008960:	1e77      	subs	r7, r6, #1
 8008962:	2d00      	cmp	r5, #0
 8008964:	d12f      	bne.n	80089c6 <__gethex+0x376>
 8008966:	2f00      	cmp	r7, #0
 8008968:	d004      	beq.n	8008974 <__gethex+0x324>
 800896a:	0039      	movs	r1, r7
 800896c:	0020      	movs	r0, r4
 800896e:	f000 fe5d 	bl	800962c <__any_on>
 8008972:	0005      	movs	r5, r0
 8008974:	231f      	movs	r3, #31
 8008976:	117a      	asrs	r2, r7, #5
 8008978:	401f      	ands	r7, r3
 800897a:	3b1e      	subs	r3, #30
 800897c:	40bb      	lsls	r3, r7
 800897e:	9904      	ldr	r1, [sp, #16]
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	5852      	ldr	r2, [r2, r1]
 8008984:	421a      	tst	r2, r3
 8008986:	d001      	beq.n	800898c <__gethex+0x33c>
 8008988:	2302      	movs	r3, #2
 800898a:	431d      	orrs	r5, r3
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	0031      	movs	r1, r6
 8008990:	1b9b      	subs	r3, r3, r6
 8008992:	2602      	movs	r6, #2
 8008994:	0020      	movs	r0, r4
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	f7ff fdf0 	bl	800857c <rshift>
 800899c:	9b02      	ldr	r3, [sp, #8]
 800899e:	685f      	ldr	r7, [r3, #4]
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	d041      	beq.n	8008a28 <__gethex+0x3d8>
 80089a4:	9b02      	ldr	r3, [sp, #8]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d010      	beq.n	80089ce <__gethex+0x37e>
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d012      	beq.n	80089d6 <__gethex+0x386>
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d106      	bne.n	80089c2 <__gethex+0x372>
 80089b4:	07aa      	lsls	r2, r5, #30
 80089b6:	d504      	bpl.n	80089c2 <__gethex+0x372>
 80089b8:	9a04      	ldr	r2, [sp, #16]
 80089ba:	6810      	ldr	r0, [r2, #0]
 80089bc:	4305      	orrs	r5, r0
 80089be:	421d      	tst	r5, r3
 80089c0:	d10c      	bne.n	80089dc <__gethex+0x38c>
 80089c2:	2310      	movs	r3, #16
 80089c4:	e02f      	b.n	8008a26 <__gethex+0x3d6>
 80089c6:	2501      	movs	r5, #1
 80089c8:	e7d4      	b.n	8008974 <__gethex+0x324>
 80089ca:	2601      	movs	r6, #1
 80089cc:	e7e8      	b.n	80089a0 <__gethex+0x350>
 80089ce:	2301      	movs	r3, #1
 80089d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089d2:	1a9b      	subs	r3, r3, r2
 80089d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80089d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0f2      	beq.n	80089c2 <__gethex+0x372>
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	2000      	movs	r0, #0
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	0023      	movs	r3, r4
 80089e8:	9a04      	ldr	r2, [sp, #16]
 80089ea:	3314      	adds	r3, #20
 80089ec:	1899      	adds	r1, r3, r2
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	1c55      	adds	r5, r2, #1
 80089f2:	d01e      	beq.n	8008a32 <__gethex+0x3e2>
 80089f4:	3201      	adds	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	0023      	movs	r3, r4
 80089fa:	3314      	adds	r3, #20
 80089fc:	2e02      	cmp	r6, #2
 80089fe:	d140      	bne.n	8008a82 <__gethex+0x432>
 8008a00:	9a02      	ldr	r2, [sp, #8]
 8008a02:	9901      	ldr	r1, [sp, #4]
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	3a01      	subs	r2, #1
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	d10b      	bne.n	8008a24 <__gethex+0x3d4>
 8008a0c:	114a      	asrs	r2, r1, #5
 8008a0e:	211f      	movs	r1, #31
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	0092      	lsls	r2, r2, #2
 8008a14:	4001      	ands	r1, r0
 8008a16:	2001      	movs	r0, #1
 8008a18:	0005      	movs	r5, r0
 8008a1a:	408d      	lsls	r5, r1
 8008a1c:	58d3      	ldr	r3, [r2, r3]
 8008a1e:	422b      	tst	r3, r5
 8008a20:	d000      	beq.n	8008a24 <__gethex+0x3d4>
 8008a22:	2601      	movs	r6, #1
 8008a24:	2320      	movs	r3, #32
 8008a26:	431e      	orrs	r6, r3
 8008a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a2a:	601c      	str	r4, [r3, #0]
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2e:	601f      	str	r7, [r3, #0]
 8008a30:	e6a7      	b.n	8008782 <__gethex+0x132>
 8008a32:	c301      	stmia	r3!, {r0}
 8008a34:	4299      	cmp	r1, r3
 8008a36:	d8da      	bhi.n	80089ee <__gethex+0x39e>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	68a2      	ldr	r2, [r4, #8]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	db17      	blt.n	8008a70 <__gethex+0x420>
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	9805      	ldr	r0, [sp, #20]
 8008a44:	1c59      	adds	r1, r3, #1
 8008a46:	f000 f94b 	bl	8008ce0 <_Balloc>
 8008a4a:	1e05      	subs	r5, r0, #0
 8008a4c:	d103      	bne.n	8008a56 <__gethex+0x406>
 8008a4e:	0002      	movs	r2, r0
 8008a50:	2184      	movs	r1, #132	; 0x84
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <__gethex+0x474>)
 8008a54:	e6b8      	b.n	80087c8 <__gethex+0x178>
 8008a56:	0021      	movs	r1, r4
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	310c      	adds	r1, #12
 8008a5c:	1c9a      	adds	r2, r3, #2
 8008a5e:	0092      	lsls	r2, r2, #2
 8008a60:	300c      	adds	r0, #12
 8008a62:	f000 f923 	bl	8008cac <memcpy>
 8008a66:	0021      	movs	r1, r4
 8008a68:	9805      	ldr	r0, [sp, #20]
 8008a6a:	f000 f97d 	bl	8008d68 <_Bfree>
 8008a6e:	002c      	movs	r4, r5
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	6122      	str	r2, [r4, #16]
 8008a76:	2201      	movs	r2, #1
 8008a78:	3304      	adds	r3, #4
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	18e3      	adds	r3, r4, r3
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	e7ba      	b.n	80089f8 <__gethex+0x3a8>
 8008a82:	6922      	ldr	r2, [r4, #16]
 8008a84:	9903      	ldr	r1, [sp, #12]
 8008a86:	428a      	cmp	r2, r1
 8008a88:	dd09      	ble.n	8008a9e <__gethex+0x44e>
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	0020      	movs	r0, r4
 8008a8e:	f7ff fd75 	bl	800857c <rshift>
 8008a92:	9b02      	ldr	r3, [sp, #8]
 8008a94:	3701      	adds	r7, #1
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	42bb      	cmp	r3, r7
 8008a9a:	dac2      	bge.n	8008a22 <__gethex+0x3d2>
 8008a9c:	e6dc      	b.n	8008858 <__gethex+0x208>
 8008a9e:	221f      	movs	r2, #31
 8008aa0:	9d01      	ldr	r5, [sp, #4]
 8008aa2:	9901      	ldr	r1, [sp, #4]
 8008aa4:	2601      	movs	r6, #1
 8008aa6:	4015      	ands	r5, r2
 8008aa8:	4211      	tst	r1, r2
 8008aaa:	d0bb      	beq.n	8008a24 <__gethex+0x3d4>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	f000 fa0c 	bl	8008ed0 <__hi0bits>
 8008ab8:	2320      	movs	r3, #32
 8008aba:	1b5d      	subs	r5, r3, r5
 8008abc:	42a8      	cmp	r0, r5
 8008abe:	dbe4      	blt.n	8008a8a <__gethex+0x43a>
 8008ac0:	e7b0      	b.n	8008a24 <__gethex+0x3d4>
 8008ac2:	46c0      	nop			; (mov r8, r8)
 8008ac4:	0800a8d0 	.word	0x0800a8d0

08008ac8 <L_shift>:
 8008ac8:	2308      	movs	r3, #8
 8008aca:	b570      	push	{r4, r5, r6, lr}
 8008acc:	2520      	movs	r5, #32
 8008ace:	1a9a      	subs	r2, r3, r2
 8008ad0:	0092      	lsls	r2, r2, #2
 8008ad2:	1aad      	subs	r5, r5, r2
 8008ad4:	6843      	ldr	r3, [r0, #4]
 8008ad6:	6806      	ldr	r6, [r0, #0]
 8008ad8:	001c      	movs	r4, r3
 8008ada:	40ac      	lsls	r4, r5
 8008adc:	40d3      	lsrs	r3, r2
 8008ade:	4334      	orrs	r4, r6
 8008ae0:	6004      	str	r4, [r0, #0]
 8008ae2:	6043      	str	r3, [r0, #4]
 8008ae4:	3004      	adds	r0, #4
 8008ae6:	4288      	cmp	r0, r1
 8008ae8:	d3f4      	bcc.n	8008ad4 <L_shift+0xc>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}

08008aec <__match>:
 8008aec:	b530      	push	{r4, r5, lr}
 8008aee:	6803      	ldr	r3, [r0, #0]
 8008af0:	780c      	ldrb	r4, [r1, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	2c00      	cmp	r4, #0
 8008af6:	d102      	bne.n	8008afe <__match+0x12>
 8008af8:	6003      	str	r3, [r0, #0]
 8008afa:	2001      	movs	r0, #1
 8008afc:	bd30      	pop	{r4, r5, pc}
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	0015      	movs	r5, r2
 8008b02:	3d41      	subs	r5, #65	; 0x41
 8008b04:	2d19      	cmp	r5, #25
 8008b06:	d800      	bhi.n	8008b0a <__match+0x1e>
 8008b08:	3220      	adds	r2, #32
 8008b0a:	3101      	adds	r1, #1
 8008b0c:	42a2      	cmp	r2, r4
 8008b0e:	d0ef      	beq.n	8008af0 <__match+0x4>
 8008b10:	2000      	movs	r0, #0
 8008b12:	e7f3      	b.n	8008afc <__match+0x10>

08008b14 <__hexnan>:
 8008b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b16:	680b      	ldr	r3, [r1, #0]
 8008b18:	b08b      	sub	sp, #44	; 0x2c
 8008b1a:	9201      	str	r2, [sp, #4]
 8008b1c:	9901      	ldr	r1, [sp, #4]
 8008b1e:	115a      	asrs	r2, r3, #5
 8008b20:	0092      	lsls	r2, r2, #2
 8008b22:	188a      	adds	r2, r1, r2
 8008b24:	9202      	str	r2, [sp, #8]
 8008b26:	0019      	movs	r1, r3
 8008b28:	221f      	movs	r2, #31
 8008b2a:	4011      	ands	r1, r2
 8008b2c:	9008      	str	r0, [sp, #32]
 8008b2e:	9106      	str	r1, [sp, #24]
 8008b30:	4213      	tst	r3, r2
 8008b32:	d002      	beq.n	8008b3a <__hexnan+0x26>
 8008b34:	9b02      	ldr	r3, [sp, #8]
 8008b36:	3304      	adds	r3, #4
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	2500      	movs	r5, #0
 8008b3e:	1f1e      	subs	r6, r3, #4
 8008b40:	0037      	movs	r7, r6
 8008b42:	0034      	movs	r4, r6
 8008b44:	9b08      	ldr	r3, [sp, #32]
 8008b46:	6035      	str	r5, [r6, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	9507      	str	r5, [sp, #28]
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	9503      	str	r5, [sp, #12]
 8008b50:	9b05      	ldr	r3, [sp, #20]
 8008b52:	3301      	adds	r3, #1
 8008b54:	9309      	str	r3, [sp, #36]	; 0x24
 8008b56:	9b05      	ldr	r3, [sp, #20]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d028      	beq.n	8008bb2 <__hexnan+0x9e>
 8008b60:	9804      	ldr	r0, [sp, #16]
 8008b62:	f7ff fd5f 	bl	8008624 <__hexdig_fun>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d154      	bne.n	8008c14 <__hexnan+0x100>
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d819      	bhi.n	8008ba4 <__hexnan+0x90>
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	9a07      	ldr	r2, [sp, #28]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	dd12      	ble.n	8008b9e <__hexnan+0x8a>
 8008b78:	42bc      	cmp	r4, r7
 8008b7a:	d206      	bcs.n	8008b8a <__hexnan+0x76>
 8008b7c:	2d07      	cmp	r5, #7
 8008b7e:	dc04      	bgt.n	8008b8a <__hexnan+0x76>
 8008b80:	002a      	movs	r2, r5
 8008b82:	0039      	movs	r1, r7
 8008b84:	0020      	movs	r0, r4
 8008b86:	f7ff ff9f 	bl	8008ac8 <L_shift>
 8008b8a:	9b01      	ldr	r3, [sp, #4]
 8008b8c:	2508      	movs	r5, #8
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d905      	bls.n	8008b9e <__hexnan+0x8a>
 8008b92:	1f27      	subs	r7, r4, #4
 8008b94:	2500      	movs	r5, #0
 8008b96:	003c      	movs	r4, r7
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	603d      	str	r5, [r7, #0]
 8008b9c:	9307      	str	r3, [sp, #28]
 8008b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	e7d5      	b.n	8008b50 <__hexnan+0x3c>
 8008ba4:	9b04      	ldr	r3, [sp, #16]
 8008ba6:	2b29      	cmp	r3, #41	; 0x29
 8008ba8:	d159      	bne.n	8008c5e <__hexnan+0x14a>
 8008baa:	9b05      	ldr	r3, [sp, #20]
 8008bac:	9a08      	ldr	r2, [sp, #32]
 8008bae:	3302      	adds	r3, #2
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d052      	beq.n	8008c5e <__hexnan+0x14a>
 8008bb8:	42bc      	cmp	r4, r7
 8008bba:	d206      	bcs.n	8008bca <__hexnan+0xb6>
 8008bbc:	2d07      	cmp	r5, #7
 8008bbe:	dc04      	bgt.n	8008bca <__hexnan+0xb6>
 8008bc0:	002a      	movs	r2, r5
 8008bc2:	0039      	movs	r1, r7
 8008bc4:	0020      	movs	r0, r4
 8008bc6:	f7ff ff7f 	bl	8008ac8 <L_shift>
 8008bca:	9b01      	ldr	r3, [sp, #4]
 8008bcc:	429c      	cmp	r4, r3
 8008bce:	d935      	bls.n	8008c3c <__hexnan+0x128>
 8008bd0:	001a      	movs	r2, r3
 8008bd2:	0023      	movs	r3, r4
 8008bd4:	cb02      	ldmia	r3!, {r1}
 8008bd6:	c202      	stmia	r2!, {r1}
 8008bd8:	429e      	cmp	r6, r3
 8008bda:	d2fb      	bcs.n	8008bd4 <__hexnan+0xc0>
 8008bdc:	9b02      	ldr	r3, [sp, #8]
 8008bde:	1c61      	adds	r1, r4, #1
 8008be0:	1eda      	subs	r2, r3, #3
 8008be2:	2304      	movs	r3, #4
 8008be4:	4291      	cmp	r1, r2
 8008be6:	d805      	bhi.n	8008bf4 <__hexnan+0xe0>
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	3b04      	subs	r3, #4
 8008bec:	1b1b      	subs	r3, r3, r4
 8008bee:	089b      	lsrs	r3, r3, #2
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	9a01      	ldr	r2, [sp, #4]
 8008bf6:	18d3      	adds	r3, r2, r3
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	c304      	stmia	r3!, {r2}
 8008bfc:	429e      	cmp	r6, r3
 8008bfe:	d2fc      	bcs.n	8008bfa <__hexnan+0xe6>
 8008c00:	6833      	ldr	r3, [r6, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <__hexnan+0xfc>
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	429e      	cmp	r6, r3
 8008c0a:	d126      	bne.n	8008c5a <__hexnan+0x146>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	2005      	movs	r0, #5
 8008c12:	e025      	b.n	8008c60 <__hexnan+0x14c>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	3501      	adds	r5, #1
 8008c18:	3301      	adds	r3, #1
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	2d08      	cmp	r5, #8
 8008c1e:	dd06      	ble.n	8008c2e <__hexnan+0x11a>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	429c      	cmp	r4, r3
 8008c24:	d9bb      	bls.n	8008b9e <__hexnan+0x8a>
 8008c26:	2300      	movs	r3, #0
 8008c28:	2501      	movs	r5, #1
 8008c2a:	3c04      	subs	r4, #4
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	220f      	movs	r2, #15
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	4010      	ands	r0, r2
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	4318      	orrs	r0, r3
 8008c38:	6020      	str	r0, [r4, #0]
 8008c3a:	e7b0      	b.n	8008b9e <__hexnan+0x8a>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0de      	beq.n	8008c00 <__hexnan+0xec>
 8008c42:	2120      	movs	r1, #32
 8008c44:	9a06      	ldr	r2, [sp, #24]
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	1a89      	subs	r1, r1, r2
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4252      	negs	r2, r2
 8008c4e:	40ca      	lsrs	r2, r1
 8008c50:	3b04      	subs	r3, #4
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	400a      	ands	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	e7d2      	b.n	8008c00 <__hexnan+0xec>
 8008c5a:	3e04      	subs	r6, #4
 8008c5c:	e7d0      	b.n	8008c00 <__hexnan+0xec>
 8008c5e:	2004      	movs	r0, #4
 8008c60:	b00b      	add	sp, #44	; 0x2c
 8008c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c64 <_localeconv_r>:
 8008c64:	4800      	ldr	r0, [pc, #0]	; (8008c68 <_localeconv_r+0x4>)
 8008c66:	4770      	bx	lr
 8008c68:	2000017c 	.word	0x2000017c

08008c6c <__retarget_lock_init_recursive>:
 8008c6c:	4770      	bx	lr

08008c6e <__retarget_lock_acquire_recursive>:
 8008c6e:	4770      	bx	lr

08008c70 <__retarget_lock_release_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <__ascii_mbtowc>:
 8008c72:	b082      	sub	sp, #8
 8008c74:	2900      	cmp	r1, #0
 8008c76:	d100      	bne.n	8008c7a <__ascii_mbtowc+0x8>
 8008c78:	a901      	add	r1, sp, #4
 8008c7a:	1e10      	subs	r0, r2, #0
 8008c7c:	d006      	beq.n	8008c8c <__ascii_mbtowc+0x1a>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <__ascii_mbtowc+0x1e>
 8008c82:	7813      	ldrb	r3, [r2, #0]
 8008c84:	600b      	str	r3, [r1, #0]
 8008c86:	7810      	ldrb	r0, [r2, #0]
 8008c88:	1e43      	subs	r3, r0, #1
 8008c8a:	4198      	sbcs	r0, r3
 8008c8c:	b002      	add	sp, #8
 8008c8e:	4770      	bx	lr
 8008c90:	2002      	movs	r0, #2
 8008c92:	4240      	negs	r0, r0
 8008c94:	e7fa      	b.n	8008c8c <__ascii_mbtowc+0x1a>

08008c96 <memchr>:
 8008c96:	b2c9      	uxtb	r1, r1
 8008c98:	1882      	adds	r2, r0, r2
 8008c9a:	4290      	cmp	r0, r2
 8008c9c:	d101      	bne.n	8008ca2 <memchr+0xc>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	4770      	bx	lr
 8008ca2:	7803      	ldrb	r3, [r0, #0]
 8008ca4:	428b      	cmp	r3, r1
 8008ca6:	d0fb      	beq.n	8008ca0 <memchr+0xa>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	e7f6      	b.n	8008c9a <memchr+0x4>

08008cac <memcpy>:
 8008cac:	2300      	movs	r3, #0
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d100      	bne.n	8008cb6 <memcpy+0xa>
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	5ccc      	ldrb	r4, [r1, r3]
 8008cb8:	54c4      	strb	r4, [r0, r3]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	e7f8      	b.n	8008cb0 <memcpy+0x4>
	...

08008cc0 <__malloc_lock>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	4802      	ldr	r0, [pc, #8]	; (8008ccc <__malloc_lock+0xc>)
 8008cc4:	f7ff ffd3 	bl	8008c6e <__retarget_lock_acquire_recursive>
 8008cc8:	bd10      	pop	{r4, pc}
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	200005a8 	.word	0x200005a8

08008cd0 <__malloc_unlock>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4802      	ldr	r0, [pc, #8]	; (8008cdc <__malloc_unlock+0xc>)
 8008cd4:	f7ff ffcc 	bl	8008c70 <__retarget_lock_release_recursive>
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	200005a8 	.word	0x200005a8

08008ce0 <_Balloc>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ce4:	0006      	movs	r6, r0
 8008ce6:	000c      	movs	r4, r1
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	d10e      	bne.n	8008d0a <_Balloc+0x2a>
 8008cec:	2010      	movs	r0, #16
 8008cee:	f7fc fe2d 	bl	800594c <malloc>
 8008cf2:	1e02      	subs	r2, r0, #0
 8008cf4:	6270      	str	r0, [r6, #36]	; 0x24
 8008cf6:	d104      	bne.n	8008d02 <_Balloc+0x22>
 8008cf8:	2166      	movs	r1, #102	; 0x66
 8008cfa:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <_Balloc+0x80>)
 8008cfc:	4819      	ldr	r0, [pc, #100]	; (8008d64 <_Balloc+0x84>)
 8008cfe:	f001 f8fd 	bl	8009efc <__assert_func>
 8008d02:	6045      	str	r5, [r0, #4]
 8008d04:	6085      	str	r5, [r0, #8]
 8008d06:	6005      	str	r5, [r0, #0]
 8008d08:	60c5      	str	r5, [r0, #12]
 8008d0a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008d0c:	68eb      	ldr	r3, [r5, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d013      	beq.n	8008d3a <_Balloc+0x5a>
 8008d12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d14:	00a2      	lsls	r2, r4, #2
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	189b      	adds	r3, r3, r2
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d118      	bne.n	8008d52 <_Balloc+0x72>
 8008d20:	2101      	movs	r1, #1
 8008d22:	000d      	movs	r5, r1
 8008d24:	40a5      	lsls	r5, r4
 8008d26:	1d6a      	adds	r2, r5, #5
 8008d28:	0030      	movs	r0, r6
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	f000 fca1 	bl	8009672 <_calloc_r>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d00c      	beq.n	8008d4e <_Balloc+0x6e>
 8008d34:	6044      	str	r4, [r0, #4]
 8008d36:	6085      	str	r5, [r0, #8]
 8008d38:	e00d      	b.n	8008d56 <_Balloc+0x76>
 8008d3a:	2221      	movs	r2, #33	; 0x21
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	0030      	movs	r0, r6
 8008d40:	f000 fc97 	bl	8009672 <_calloc_r>
 8008d44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d46:	60e8      	str	r0, [r5, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e1      	bne.n	8008d12 <_Balloc+0x32>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	6802      	ldr	r2, [r0, #0]
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	2300      	movs	r3, #0
 8008d58:	6103      	str	r3, [r0, #16]
 8008d5a:	60c3      	str	r3, [r0, #12]
 8008d5c:	e7f8      	b.n	8008d50 <_Balloc+0x70>
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	0800a85e 	.word	0x0800a85e
 8008d64:	0800a9c0 	.word	0x0800a9c0

08008d68 <_Bfree>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d6c:	0005      	movs	r5, r0
 8008d6e:	000c      	movs	r4, r1
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	d10e      	bne.n	8008d92 <_Bfree+0x2a>
 8008d74:	2010      	movs	r0, #16
 8008d76:	f7fc fde9 	bl	800594c <malloc>
 8008d7a:	1e02      	subs	r2, r0, #0
 8008d7c:	6268      	str	r0, [r5, #36]	; 0x24
 8008d7e:	d104      	bne.n	8008d8a <_Bfree+0x22>
 8008d80:	218a      	movs	r1, #138	; 0x8a
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <_Bfree+0x40>)
 8008d84:	4809      	ldr	r0, [pc, #36]	; (8008dac <_Bfree+0x44>)
 8008d86:	f001 f8b9 	bl	8009efc <__assert_func>
 8008d8a:	6046      	str	r6, [r0, #4]
 8008d8c:	6086      	str	r6, [r0, #8]
 8008d8e:	6006      	str	r6, [r0, #0]
 8008d90:	60c6      	str	r6, [r0, #12]
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	d007      	beq.n	8008da6 <_Bfree+0x3e>
 8008d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d98:	6862      	ldr	r2, [r4, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	0092      	lsls	r2, r2, #2
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	6022      	str	r2, [r4, #0]
 8008da4:	601c      	str	r4, [r3, #0]
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	0800a85e 	.word	0x0800a85e
 8008dac:	0800a9c0 	.word	0x0800a9c0

08008db0 <__multadd>:
 8008db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db2:	000e      	movs	r6, r1
 8008db4:	9001      	str	r0, [sp, #4]
 8008db6:	000c      	movs	r4, r1
 8008db8:	001d      	movs	r5, r3
 8008dba:	2000      	movs	r0, #0
 8008dbc:	690f      	ldr	r7, [r1, #16]
 8008dbe:	3614      	adds	r6, #20
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	b299      	uxth	r1, r3
 8008dc6:	4351      	muls	r1, r2
 8008dc8:	0c1b      	lsrs	r3, r3, #16
 8008dca:	4353      	muls	r3, r2
 8008dcc:	1949      	adds	r1, r1, r5
 8008dce:	0c0d      	lsrs	r5, r1, #16
 8008dd0:	195b      	adds	r3, r3, r5
 8008dd2:	0c1d      	lsrs	r5, r3, #16
 8008dd4:	b289      	uxth	r1, r1
 8008dd6:	041b      	lsls	r3, r3, #16
 8008dd8:	185b      	adds	r3, r3, r1
 8008dda:	c608      	stmia	r6!, {r3}
 8008ddc:	4287      	cmp	r7, r0
 8008dde:	dcef      	bgt.n	8008dc0 <__multadd+0x10>
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	d022      	beq.n	8008e2a <__multadd+0x7a>
 8008de4:	68a3      	ldr	r3, [r4, #8]
 8008de6:	42bb      	cmp	r3, r7
 8008de8:	dc19      	bgt.n	8008e1e <__multadd+0x6e>
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	9801      	ldr	r0, [sp, #4]
 8008dee:	1c59      	adds	r1, r3, #1
 8008df0:	f7ff ff76 	bl	8008ce0 <_Balloc>
 8008df4:	1e06      	subs	r6, r0, #0
 8008df6:	d105      	bne.n	8008e04 <__multadd+0x54>
 8008df8:	0002      	movs	r2, r0
 8008dfa:	21b5      	movs	r1, #181	; 0xb5
 8008dfc:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <__multadd+0x80>)
 8008dfe:	480d      	ldr	r0, [pc, #52]	; (8008e34 <__multadd+0x84>)
 8008e00:	f001 f87c 	bl	8009efc <__assert_func>
 8008e04:	0021      	movs	r1, r4
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	310c      	adds	r1, #12
 8008e0a:	1c9a      	adds	r2, r3, #2
 8008e0c:	0092      	lsls	r2, r2, #2
 8008e0e:	300c      	adds	r0, #12
 8008e10:	f7ff ff4c 	bl	8008cac <memcpy>
 8008e14:	0021      	movs	r1, r4
 8008e16:	9801      	ldr	r0, [sp, #4]
 8008e18:	f7ff ffa6 	bl	8008d68 <_Bfree>
 8008e1c:	0034      	movs	r4, r6
 8008e1e:	1d3b      	adds	r3, r7, #4
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	18e3      	adds	r3, r4, r3
 8008e24:	605d      	str	r5, [r3, #4]
 8008e26:	1c7b      	adds	r3, r7, #1
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	0020      	movs	r0, r4
 8008e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	0800a8d0 	.word	0x0800a8d0
 8008e34:	0800a9c0 	.word	0x0800a9c0

08008e38 <__s2b>:
 8008e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3a:	0006      	movs	r6, r0
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	000c      	movs	r4, r1
 8008e40:	3008      	adds	r0, #8
 8008e42:	2109      	movs	r1, #9
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	0015      	movs	r5, r2
 8008e48:	f7f7 fa04 	bl	8000254 <__divsi3>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4283      	cmp	r3, r0
 8008e52:	db0a      	blt.n	8008e6a <__s2b+0x32>
 8008e54:	0030      	movs	r0, r6
 8008e56:	f7ff ff43 	bl	8008ce0 <_Balloc>
 8008e5a:	1e01      	subs	r1, r0, #0
 8008e5c:	d108      	bne.n	8008e70 <__s2b+0x38>
 8008e5e:	0002      	movs	r2, r0
 8008e60:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <__s2b+0x90>)
 8008e62:	481a      	ldr	r0, [pc, #104]	; (8008ecc <__s2b+0x94>)
 8008e64:	31ce      	adds	r1, #206	; 0xce
 8008e66:	f001 f849 	bl	8009efc <__assert_func>
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	3101      	adds	r1, #1
 8008e6e:	e7ef      	b.n	8008e50 <__s2b+0x18>
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	6143      	str	r3, [r0, #20]
 8008e74:	2301      	movs	r3, #1
 8008e76:	6103      	str	r3, [r0, #16]
 8008e78:	2d09      	cmp	r5, #9
 8008e7a:	dd18      	ble.n	8008eae <__s2b+0x76>
 8008e7c:	0023      	movs	r3, r4
 8008e7e:	3309      	adds	r3, #9
 8008e80:	001f      	movs	r7, r3
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	1964      	adds	r4, r4, r5
 8008e86:	783b      	ldrb	r3, [r7, #0]
 8008e88:	220a      	movs	r2, #10
 8008e8a:	0030      	movs	r0, r6
 8008e8c:	3b30      	subs	r3, #48	; 0x30
 8008e8e:	f7ff ff8f 	bl	8008db0 <__multadd>
 8008e92:	3701      	adds	r7, #1
 8008e94:	0001      	movs	r1, r0
 8008e96:	42a7      	cmp	r7, r4
 8008e98:	d1f5      	bne.n	8008e86 <__s2b+0x4e>
 8008e9a:	002c      	movs	r4, r5
 8008e9c:	9b00      	ldr	r3, [sp, #0]
 8008e9e:	3c08      	subs	r4, #8
 8008ea0:	191c      	adds	r4, r3, r4
 8008ea2:	002f      	movs	r7, r5
 8008ea4:	9b01      	ldr	r3, [sp, #4]
 8008ea6:	429f      	cmp	r7, r3
 8008ea8:	db04      	blt.n	8008eb4 <__s2b+0x7c>
 8008eaa:	0008      	movs	r0, r1
 8008eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eae:	2509      	movs	r5, #9
 8008eb0:	340a      	adds	r4, #10
 8008eb2:	e7f6      	b.n	8008ea2 <__s2b+0x6a>
 8008eb4:	1b63      	subs	r3, r4, r5
 8008eb6:	5ddb      	ldrb	r3, [r3, r7]
 8008eb8:	220a      	movs	r2, #10
 8008eba:	0030      	movs	r0, r6
 8008ebc:	3b30      	subs	r3, #48	; 0x30
 8008ebe:	f7ff ff77 	bl	8008db0 <__multadd>
 8008ec2:	3701      	adds	r7, #1
 8008ec4:	0001      	movs	r1, r0
 8008ec6:	e7ed      	b.n	8008ea4 <__s2b+0x6c>
 8008ec8:	0800a8d0 	.word	0x0800a8d0
 8008ecc:	0800a9c0 	.word	0x0800a9c0

08008ed0 <__hi0bits>:
 8008ed0:	0003      	movs	r3, r0
 8008ed2:	0c02      	lsrs	r2, r0, #16
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4282      	cmp	r2, r0
 8008ed8:	d101      	bne.n	8008ede <__hi0bits+0xe>
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	3010      	adds	r0, #16
 8008ede:	0e1a      	lsrs	r2, r3, #24
 8008ee0:	d101      	bne.n	8008ee6 <__hi0bits+0x16>
 8008ee2:	3008      	adds	r0, #8
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	0f1a      	lsrs	r2, r3, #28
 8008ee8:	d101      	bne.n	8008eee <__hi0bits+0x1e>
 8008eea:	3004      	adds	r0, #4
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	0f9a      	lsrs	r2, r3, #30
 8008ef0:	d101      	bne.n	8008ef6 <__hi0bits+0x26>
 8008ef2:	3002      	adds	r0, #2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	db03      	blt.n	8008f02 <__hi0bits+0x32>
 8008efa:	3001      	adds	r0, #1
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	d400      	bmi.n	8008f02 <__hi0bits+0x32>
 8008f00:	2020      	movs	r0, #32
 8008f02:	4770      	bx	lr

08008f04 <__lo0bits>:
 8008f04:	6803      	ldr	r3, [r0, #0]
 8008f06:	0002      	movs	r2, r0
 8008f08:	2107      	movs	r1, #7
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	4008      	ands	r0, r1
 8008f0e:	420b      	tst	r3, r1
 8008f10:	d00d      	beq.n	8008f2e <__lo0bits+0x2a>
 8008f12:	3906      	subs	r1, #6
 8008f14:	2000      	movs	r0, #0
 8008f16:	420b      	tst	r3, r1
 8008f18:	d105      	bne.n	8008f26 <__lo0bits+0x22>
 8008f1a:	3002      	adds	r0, #2
 8008f1c:	4203      	tst	r3, r0
 8008f1e:	d003      	beq.n	8008f28 <__lo0bits+0x24>
 8008f20:	40cb      	lsrs	r3, r1
 8008f22:	0008      	movs	r0, r1
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4770      	bx	lr
 8008f28:	089b      	lsrs	r3, r3, #2
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e7fb      	b.n	8008f26 <__lo0bits+0x22>
 8008f2e:	b299      	uxth	r1, r3
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d101      	bne.n	8008f38 <__lo0bits+0x34>
 8008f34:	2010      	movs	r0, #16
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	b2d9      	uxtb	r1, r3
 8008f3a:	2900      	cmp	r1, #0
 8008f3c:	d101      	bne.n	8008f42 <__lo0bits+0x3e>
 8008f3e:	3008      	adds	r0, #8
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	0719      	lsls	r1, r3, #28
 8008f44:	d101      	bne.n	8008f4a <__lo0bits+0x46>
 8008f46:	3004      	adds	r0, #4
 8008f48:	091b      	lsrs	r3, r3, #4
 8008f4a:	0799      	lsls	r1, r3, #30
 8008f4c:	d101      	bne.n	8008f52 <__lo0bits+0x4e>
 8008f4e:	3002      	adds	r0, #2
 8008f50:	089b      	lsrs	r3, r3, #2
 8008f52:	07d9      	lsls	r1, r3, #31
 8008f54:	d4e9      	bmi.n	8008f2a <__lo0bits+0x26>
 8008f56:	3001      	adds	r0, #1
 8008f58:	085b      	lsrs	r3, r3, #1
 8008f5a:	d1e6      	bne.n	8008f2a <__lo0bits+0x26>
 8008f5c:	2020      	movs	r0, #32
 8008f5e:	e7e2      	b.n	8008f26 <__lo0bits+0x22>

08008f60 <__i2b>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	000c      	movs	r4, r1
 8008f64:	2101      	movs	r1, #1
 8008f66:	f7ff febb 	bl	8008ce0 <_Balloc>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d106      	bne.n	8008f7c <__i2b+0x1c>
 8008f6e:	21a0      	movs	r1, #160	; 0xa0
 8008f70:	0002      	movs	r2, r0
 8008f72:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <__i2b+0x24>)
 8008f74:	4804      	ldr	r0, [pc, #16]	; (8008f88 <__i2b+0x28>)
 8008f76:	0049      	lsls	r1, r1, #1
 8008f78:	f000 ffc0 	bl	8009efc <__assert_func>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	6144      	str	r4, [r0, #20]
 8008f80:	6103      	str	r3, [r0, #16]
 8008f82:	bd10      	pop	{r4, pc}
 8008f84:	0800a8d0 	.word	0x0800a8d0
 8008f88:	0800a9c0 	.word	0x0800a9c0

08008f8c <__multiply>:
 8008f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8e:	690b      	ldr	r3, [r1, #16]
 8008f90:	0014      	movs	r4, r2
 8008f92:	6912      	ldr	r2, [r2, #16]
 8008f94:	000d      	movs	r5, r1
 8008f96:	b089      	sub	sp, #36	; 0x24
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	da01      	bge.n	8008fa0 <__multiply+0x14>
 8008f9c:	0025      	movs	r5, r4
 8008f9e:	000c      	movs	r4, r1
 8008fa0:	692f      	ldr	r7, [r5, #16]
 8008fa2:	6926      	ldr	r6, [r4, #16]
 8008fa4:	6869      	ldr	r1, [r5, #4]
 8008fa6:	19bb      	adds	r3, r7, r6
 8008fa8:	9302      	str	r3, [sp, #8]
 8008faa:	68ab      	ldr	r3, [r5, #8]
 8008fac:	19ba      	adds	r2, r7, r6
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	da00      	bge.n	8008fb4 <__multiply+0x28>
 8008fb2:	3101      	adds	r1, #1
 8008fb4:	f7ff fe94 	bl	8008ce0 <_Balloc>
 8008fb8:	9001      	str	r0, [sp, #4]
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d106      	bne.n	8008fcc <__multiply+0x40>
 8008fbe:	215e      	movs	r1, #94	; 0x5e
 8008fc0:	0002      	movs	r2, r0
 8008fc2:	4b48      	ldr	r3, [pc, #288]	; (80090e4 <__multiply+0x158>)
 8008fc4:	4848      	ldr	r0, [pc, #288]	; (80090e8 <__multiply+0x15c>)
 8008fc6:	31ff      	adds	r1, #255	; 0xff
 8008fc8:	f000 ff98 	bl	8009efc <__assert_func>
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	3314      	adds	r3, #20
 8008fd2:	469c      	mov	ip, r3
 8008fd4:	19bb      	adds	r3, r7, r6
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4463      	add	r3, ip
 8008fda:	9303      	str	r3, [sp, #12]
 8008fdc:	4663      	mov	r3, ip
 8008fde:	9903      	ldr	r1, [sp, #12]
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	d32c      	bcc.n	800903e <__multiply+0xb2>
 8008fe4:	002b      	movs	r3, r5
 8008fe6:	0022      	movs	r2, r4
 8008fe8:	3314      	adds	r3, #20
 8008fea:	00bf      	lsls	r7, r7, #2
 8008fec:	3214      	adds	r2, #20
 8008fee:	9306      	str	r3, [sp, #24]
 8008ff0:	00b6      	lsls	r6, r6, #2
 8008ff2:	19db      	adds	r3, r3, r7
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	1993      	adds	r3, r2, r6
 8008ff8:	9307      	str	r3, [sp, #28]
 8008ffa:	2304      	movs	r3, #4
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	002b      	movs	r3, r5
 8009000:	9904      	ldr	r1, [sp, #16]
 8009002:	3315      	adds	r3, #21
 8009004:	9200      	str	r2, [sp, #0]
 8009006:	4299      	cmp	r1, r3
 8009008:	d305      	bcc.n	8009016 <__multiply+0x8a>
 800900a:	1b4b      	subs	r3, r1, r5
 800900c:	3b15      	subs	r3, #21
 800900e:	089b      	lsrs	r3, r3, #2
 8009010:	3301      	adds	r3, #1
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	9b07      	ldr	r3, [sp, #28]
 8009018:	9a00      	ldr	r2, [sp, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d311      	bcc.n	8009042 <__multiply+0xb6>
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dd06      	ble.n	8009032 <__multiply+0xa6>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	3b04      	subs	r3, #4
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d053      	beq.n	80090da <__multiply+0x14e>
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	9a02      	ldr	r2, [sp, #8]
 8009036:	0018      	movs	r0, r3
 8009038:	611a      	str	r2, [r3, #16]
 800903a:	b009      	add	sp, #36	; 0x24
 800903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903e:	c304      	stmia	r3!, {r2}
 8009040:	e7cd      	b.n	8008fde <__multiply+0x52>
 8009042:	9b00      	ldr	r3, [sp, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	b298      	uxth	r0, r3
 8009048:	2800      	cmp	r0, #0
 800904a:	d01b      	beq.n	8009084 <__multiply+0xf8>
 800904c:	4667      	mov	r7, ip
 800904e:	2400      	movs	r4, #0
 8009050:	9e06      	ldr	r6, [sp, #24]
 8009052:	ce02      	ldmia	r6!, {r1}
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	b28b      	uxth	r3, r1
 8009058:	4343      	muls	r3, r0
 800905a:	b292      	uxth	r2, r2
 800905c:	189b      	adds	r3, r3, r2
 800905e:	191b      	adds	r3, r3, r4
 8009060:	0c0c      	lsrs	r4, r1, #16
 8009062:	4344      	muls	r4, r0
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	0c11      	lsrs	r1, r2, #16
 8009068:	1861      	adds	r1, r4, r1
 800906a:	0c1c      	lsrs	r4, r3, #16
 800906c:	1909      	adds	r1, r1, r4
 800906e:	0c0c      	lsrs	r4, r1, #16
 8009070:	b29b      	uxth	r3, r3
 8009072:	0409      	lsls	r1, r1, #16
 8009074:	430b      	orrs	r3, r1
 8009076:	c708      	stmia	r7!, {r3}
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	42b3      	cmp	r3, r6
 800907c:	d8e9      	bhi.n	8009052 <__multiply+0xc6>
 800907e:	4663      	mov	r3, ip
 8009080:	9a05      	ldr	r2, [sp, #20]
 8009082:	509c      	str	r4, [r3, r2]
 8009084:	9b00      	ldr	r3, [sp, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	0c1e      	lsrs	r6, r3, #16
 800908a:	d020      	beq.n	80090ce <__multiply+0x142>
 800908c:	4663      	mov	r3, ip
 800908e:	002c      	movs	r4, r5
 8009090:	4660      	mov	r0, ip
 8009092:	2700      	movs	r7, #0
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3414      	adds	r4, #20
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	b291      	uxth	r1, r2
 800909e:	4371      	muls	r1, r6
 80090a0:	6802      	ldr	r2, [r0, #0]
 80090a2:	0c12      	lsrs	r2, r2, #16
 80090a4:	1889      	adds	r1, r1, r2
 80090a6:	19cf      	adds	r7, r1, r7
 80090a8:	0439      	lsls	r1, r7, #16
 80090aa:	430b      	orrs	r3, r1
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	cc02      	ldmia	r4!, {r1}
 80090b0:	6843      	ldr	r3, [r0, #4]
 80090b2:	0c09      	lsrs	r1, r1, #16
 80090b4:	4371      	muls	r1, r6
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	0c3f      	lsrs	r7, r7, #16
 80090ba:	18cb      	adds	r3, r1, r3
 80090bc:	9a04      	ldr	r2, [sp, #16]
 80090be:	19db      	adds	r3, r3, r7
 80090c0:	0c1f      	lsrs	r7, r3, #16
 80090c2:	3004      	adds	r0, #4
 80090c4:	42a2      	cmp	r2, r4
 80090c6:	d8e7      	bhi.n	8009098 <__multiply+0x10c>
 80090c8:	4662      	mov	r2, ip
 80090ca:	9905      	ldr	r1, [sp, #20]
 80090cc:	5053      	str	r3, [r2, r1]
 80090ce:	9b00      	ldr	r3, [sp, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2304      	movs	r3, #4
 80090d6:	449c      	add	ip, r3
 80090d8:	e79d      	b.n	8009016 <__multiply+0x8a>
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	3b01      	subs	r3, #1
 80090de:	9302      	str	r3, [sp, #8]
 80090e0:	e79d      	b.n	800901e <__multiply+0x92>
 80090e2:	46c0      	nop			; (mov r8, r8)
 80090e4:	0800a8d0 	.word	0x0800a8d0
 80090e8:	0800a9c0 	.word	0x0800a9c0

080090ec <__pow5mult>:
 80090ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ee:	2303      	movs	r3, #3
 80090f0:	0015      	movs	r5, r2
 80090f2:	0007      	movs	r7, r0
 80090f4:	000e      	movs	r6, r1
 80090f6:	401a      	ands	r2, r3
 80090f8:	421d      	tst	r5, r3
 80090fa:	d008      	beq.n	800910e <__pow5mult+0x22>
 80090fc:	4925      	ldr	r1, [pc, #148]	; (8009194 <__pow5mult+0xa8>)
 80090fe:	3a01      	subs	r2, #1
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	5852      	ldr	r2, [r2, r1]
 8009104:	2300      	movs	r3, #0
 8009106:	0031      	movs	r1, r6
 8009108:	f7ff fe52 	bl	8008db0 <__multadd>
 800910c:	0006      	movs	r6, r0
 800910e:	10ad      	asrs	r5, r5, #2
 8009110:	d03d      	beq.n	800918e <__pow5mult+0xa2>
 8009112:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009114:	2c00      	cmp	r4, #0
 8009116:	d10f      	bne.n	8009138 <__pow5mult+0x4c>
 8009118:	2010      	movs	r0, #16
 800911a:	f7fc fc17 	bl	800594c <malloc>
 800911e:	1e02      	subs	r2, r0, #0
 8009120:	6278      	str	r0, [r7, #36]	; 0x24
 8009122:	d105      	bne.n	8009130 <__pow5mult+0x44>
 8009124:	21d7      	movs	r1, #215	; 0xd7
 8009126:	4b1c      	ldr	r3, [pc, #112]	; (8009198 <__pow5mult+0xac>)
 8009128:	481c      	ldr	r0, [pc, #112]	; (800919c <__pow5mult+0xb0>)
 800912a:	0049      	lsls	r1, r1, #1
 800912c:	f000 fee6 	bl	8009efc <__assert_func>
 8009130:	6044      	str	r4, [r0, #4]
 8009132:	6084      	str	r4, [r0, #8]
 8009134:	6004      	str	r4, [r0, #0]
 8009136:	60c4      	str	r4, [r0, #12]
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	689c      	ldr	r4, [r3, #8]
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	2c00      	cmp	r4, #0
 8009140:	d108      	bne.n	8009154 <__pow5mult+0x68>
 8009142:	0038      	movs	r0, r7
 8009144:	4916      	ldr	r1, [pc, #88]	; (80091a0 <__pow5mult+0xb4>)
 8009146:	f7ff ff0b 	bl	8008f60 <__i2b>
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	0004      	movs	r4, r0
 800914e:	6098      	str	r0, [r3, #8]
 8009150:	2300      	movs	r3, #0
 8009152:	6003      	str	r3, [r0, #0]
 8009154:	2301      	movs	r3, #1
 8009156:	421d      	tst	r5, r3
 8009158:	d00a      	beq.n	8009170 <__pow5mult+0x84>
 800915a:	0031      	movs	r1, r6
 800915c:	0022      	movs	r2, r4
 800915e:	0038      	movs	r0, r7
 8009160:	f7ff ff14 	bl	8008f8c <__multiply>
 8009164:	0031      	movs	r1, r6
 8009166:	9001      	str	r0, [sp, #4]
 8009168:	0038      	movs	r0, r7
 800916a:	f7ff fdfd 	bl	8008d68 <_Bfree>
 800916e:	9e01      	ldr	r6, [sp, #4]
 8009170:	106d      	asrs	r5, r5, #1
 8009172:	d00c      	beq.n	800918e <__pow5mult+0xa2>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	2800      	cmp	r0, #0
 8009178:	d107      	bne.n	800918a <__pow5mult+0x9e>
 800917a:	0022      	movs	r2, r4
 800917c:	0021      	movs	r1, r4
 800917e:	0038      	movs	r0, r7
 8009180:	f7ff ff04 	bl	8008f8c <__multiply>
 8009184:	2300      	movs	r3, #0
 8009186:	6020      	str	r0, [r4, #0]
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	0004      	movs	r4, r0
 800918c:	e7e2      	b.n	8009154 <__pow5mult+0x68>
 800918e:	0030      	movs	r0, r6
 8009190:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	0800ab10 	.word	0x0800ab10
 8009198:	0800a85e 	.word	0x0800a85e
 800919c:	0800a9c0 	.word	0x0800a9c0
 80091a0:	00000271 	.word	0x00000271

080091a4 <__lshift>:
 80091a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a6:	000c      	movs	r4, r1
 80091a8:	0017      	movs	r7, r2
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	1155      	asrs	r5, r2, #5
 80091ae:	b087      	sub	sp, #28
 80091b0:	18eb      	adds	r3, r5, r3
 80091b2:	9302      	str	r3, [sp, #8]
 80091b4:	3301      	adds	r3, #1
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	6849      	ldr	r1, [r1, #4]
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	9004      	str	r0, [sp, #16]
 80091be:	9a01      	ldr	r2, [sp, #4]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	db10      	blt.n	80091e6 <__lshift+0x42>
 80091c4:	9804      	ldr	r0, [sp, #16]
 80091c6:	f7ff fd8b 	bl	8008ce0 <_Balloc>
 80091ca:	2300      	movs	r3, #0
 80091cc:	0002      	movs	r2, r0
 80091ce:	0006      	movs	r6, r0
 80091d0:	0019      	movs	r1, r3
 80091d2:	3214      	adds	r2, #20
 80091d4:	4298      	cmp	r0, r3
 80091d6:	d10c      	bne.n	80091f2 <__lshift+0x4e>
 80091d8:	21da      	movs	r1, #218	; 0xda
 80091da:	0002      	movs	r2, r0
 80091dc:	4b26      	ldr	r3, [pc, #152]	; (8009278 <__lshift+0xd4>)
 80091de:	4827      	ldr	r0, [pc, #156]	; (800927c <__lshift+0xd8>)
 80091e0:	31ff      	adds	r1, #255	; 0xff
 80091e2:	f000 fe8b 	bl	8009efc <__assert_func>
 80091e6:	3101      	adds	r1, #1
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	e7e8      	b.n	80091be <__lshift+0x1a>
 80091ec:	0098      	lsls	r0, r3, #2
 80091ee:	5011      	str	r1, [r2, r0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	42ab      	cmp	r3, r5
 80091f4:	dbfa      	blt.n	80091ec <__lshift+0x48>
 80091f6:	43eb      	mvns	r3, r5
 80091f8:	17db      	asrs	r3, r3, #31
 80091fa:	401d      	ands	r5, r3
 80091fc:	211f      	movs	r1, #31
 80091fe:	0023      	movs	r3, r4
 8009200:	0038      	movs	r0, r7
 8009202:	00ad      	lsls	r5, r5, #2
 8009204:	1955      	adds	r5, r2, r5
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	3314      	adds	r3, #20
 800920a:	0092      	lsls	r2, r2, #2
 800920c:	4008      	ands	r0, r1
 800920e:	4684      	mov	ip, r0
 8009210:	189a      	adds	r2, r3, r2
 8009212:	420f      	tst	r7, r1
 8009214:	d02a      	beq.n	800926c <__lshift+0xc8>
 8009216:	3101      	adds	r1, #1
 8009218:	1a09      	subs	r1, r1, r0
 800921a:	9105      	str	r1, [sp, #20]
 800921c:	2100      	movs	r1, #0
 800921e:	9503      	str	r5, [sp, #12]
 8009220:	4667      	mov	r7, ip
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	40b8      	lsls	r0, r7
 8009226:	4301      	orrs	r1, r0
 8009228:	9803      	ldr	r0, [sp, #12]
 800922a:	c002      	stmia	r0!, {r1}
 800922c:	cb02      	ldmia	r3!, {r1}
 800922e:	9003      	str	r0, [sp, #12]
 8009230:	9805      	ldr	r0, [sp, #20]
 8009232:	40c1      	lsrs	r1, r0
 8009234:	429a      	cmp	r2, r3
 8009236:	d8f3      	bhi.n	8009220 <__lshift+0x7c>
 8009238:	0020      	movs	r0, r4
 800923a:	3015      	adds	r0, #21
 800923c:	2304      	movs	r3, #4
 800923e:	4282      	cmp	r2, r0
 8009240:	d304      	bcc.n	800924c <__lshift+0xa8>
 8009242:	1b13      	subs	r3, r2, r4
 8009244:	3b15      	subs	r3, #21
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	3301      	adds	r3, #1
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	50e9      	str	r1, [r5, r3]
 800924e:	2900      	cmp	r1, #0
 8009250:	d002      	beq.n	8009258 <__lshift+0xb4>
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	3302      	adds	r3, #2
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	9804      	ldr	r0, [sp, #16]
 800925c:	3b01      	subs	r3, #1
 800925e:	0021      	movs	r1, r4
 8009260:	6133      	str	r3, [r6, #16]
 8009262:	f7ff fd81 	bl	8008d68 <_Bfree>
 8009266:	0030      	movs	r0, r6
 8009268:	b007      	add	sp, #28
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926c:	cb02      	ldmia	r3!, {r1}
 800926e:	c502      	stmia	r5!, {r1}
 8009270:	429a      	cmp	r2, r3
 8009272:	d8fb      	bhi.n	800926c <__lshift+0xc8>
 8009274:	e7f0      	b.n	8009258 <__lshift+0xb4>
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	0800a8d0 	.word	0x0800a8d0
 800927c:	0800a9c0 	.word	0x0800a9c0

08009280 <__mcmp>:
 8009280:	6902      	ldr	r2, [r0, #16]
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	b530      	push	{r4, r5, lr}
 8009286:	0004      	movs	r4, r0
 8009288:	1ad0      	subs	r0, r2, r3
 800928a:	429a      	cmp	r2, r3
 800928c:	d10d      	bne.n	80092aa <__mcmp+0x2a>
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	3414      	adds	r4, #20
 8009292:	3114      	adds	r1, #20
 8009294:	18e2      	adds	r2, r4, r3
 8009296:	18c9      	adds	r1, r1, r3
 8009298:	3a04      	subs	r2, #4
 800929a:	3904      	subs	r1, #4
 800929c:	6815      	ldr	r5, [r2, #0]
 800929e:	680b      	ldr	r3, [r1, #0]
 80092a0:	429d      	cmp	r5, r3
 80092a2:	d003      	beq.n	80092ac <__mcmp+0x2c>
 80092a4:	2001      	movs	r0, #1
 80092a6:	429d      	cmp	r5, r3
 80092a8:	d303      	bcc.n	80092b2 <__mcmp+0x32>
 80092aa:	bd30      	pop	{r4, r5, pc}
 80092ac:	4294      	cmp	r4, r2
 80092ae:	d3f3      	bcc.n	8009298 <__mcmp+0x18>
 80092b0:	e7fb      	b.n	80092aa <__mcmp+0x2a>
 80092b2:	4240      	negs	r0, r0
 80092b4:	e7f9      	b.n	80092aa <__mcmp+0x2a>
	...

080092b8 <__mdiff>:
 80092b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ba:	000e      	movs	r6, r1
 80092bc:	0007      	movs	r7, r0
 80092be:	0011      	movs	r1, r2
 80092c0:	0030      	movs	r0, r6
 80092c2:	b087      	sub	sp, #28
 80092c4:	0014      	movs	r4, r2
 80092c6:	f7ff ffdb 	bl	8009280 <__mcmp>
 80092ca:	1e05      	subs	r5, r0, #0
 80092cc:	d110      	bne.n	80092f0 <__mdiff+0x38>
 80092ce:	0001      	movs	r1, r0
 80092d0:	0038      	movs	r0, r7
 80092d2:	f7ff fd05 	bl	8008ce0 <_Balloc>
 80092d6:	1e02      	subs	r2, r0, #0
 80092d8:	d104      	bne.n	80092e4 <__mdiff+0x2c>
 80092da:	4b40      	ldr	r3, [pc, #256]	; (80093dc <__mdiff+0x124>)
 80092dc:	4940      	ldr	r1, [pc, #256]	; (80093e0 <__mdiff+0x128>)
 80092de:	4841      	ldr	r0, [pc, #260]	; (80093e4 <__mdiff+0x12c>)
 80092e0:	f000 fe0c 	bl	8009efc <__assert_func>
 80092e4:	2301      	movs	r3, #1
 80092e6:	6145      	str	r5, [r0, #20]
 80092e8:	6103      	str	r3, [r0, #16]
 80092ea:	0010      	movs	r0, r2
 80092ec:	b007      	add	sp, #28
 80092ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f0:	2301      	movs	r3, #1
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	2800      	cmp	r0, #0
 80092f6:	db04      	blt.n	8009302 <__mdiff+0x4a>
 80092f8:	0023      	movs	r3, r4
 80092fa:	0034      	movs	r4, r6
 80092fc:	001e      	movs	r6, r3
 80092fe:	2300      	movs	r3, #0
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	0038      	movs	r0, r7
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	f7ff fceb 	bl	8008ce0 <_Balloc>
 800930a:	1e02      	subs	r2, r0, #0
 800930c:	d103      	bne.n	8009316 <__mdiff+0x5e>
 800930e:	2190      	movs	r1, #144	; 0x90
 8009310:	4b32      	ldr	r3, [pc, #200]	; (80093dc <__mdiff+0x124>)
 8009312:	0089      	lsls	r1, r1, #2
 8009314:	e7e3      	b.n	80092de <__mdiff+0x26>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	2700      	movs	r7, #0
 800931a:	60c3      	str	r3, [r0, #12]
 800931c:	6920      	ldr	r0, [r4, #16]
 800931e:	3414      	adds	r4, #20
 8009320:	9401      	str	r4, [sp, #4]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	0084      	lsls	r4, r0, #2
 8009326:	191b      	adds	r3, r3, r4
 8009328:	0034      	movs	r4, r6
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	6933      	ldr	r3, [r6, #16]
 800932e:	3414      	adds	r4, #20
 8009330:	0099      	lsls	r1, r3, #2
 8009332:	1863      	adds	r3, r4, r1
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	0013      	movs	r3, r2
 8009338:	3314      	adds	r3, #20
 800933a:	469c      	mov	ip, r3
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	9b01      	ldr	r3, [sp, #4]
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	cc02      	ldmia	r4!, {r1}
 8009346:	cb20      	ldmia	r3!, {r5}
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	b2ab      	uxth	r3, r5
 800934c:	19df      	adds	r7, r3, r7
 800934e:	b28b      	uxth	r3, r1
 8009350:	1afb      	subs	r3, r7, r3
 8009352:	0c09      	lsrs	r1, r1, #16
 8009354:	0c2d      	lsrs	r5, r5, #16
 8009356:	1a6d      	subs	r5, r5, r1
 8009358:	1419      	asrs	r1, r3, #16
 800935a:	186d      	adds	r5, r5, r1
 800935c:	4661      	mov	r1, ip
 800935e:	142f      	asrs	r7, r5, #16
 8009360:	b29b      	uxth	r3, r3
 8009362:	042d      	lsls	r5, r5, #16
 8009364:	432b      	orrs	r3, r5
 8009366:	c108      	stmia	r1!, {r3}
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	468c      	mov	ip, r1
 800936c:	42a3      	cmp	r3, r4
 800936e:	d8e8      	bhi.n	8009342 <__mdiff+0x8a>
 8009370:	0031      	movs	r1, r6
 8009372:	9c03      	ldr	r4, [sp, #12]
 8009374:	3115      	adds	r1, #21
 8009376:	2304      	movs	r3, #4
 8009378:	428c      	cmp	r4, r1
 800937a:	d304      	bcc.n	8009386 <__mdiff+0xce>
 800937c:	1ba3      	subs	r3, r4, r6
 800937e:	3b15      	subs	r3, #21
 8009380:	089b      	lsrs	r3, r3, #2
 8009382:	3301      	adds	r3, #1
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	9901      	ldr	r1, [sp, #4]
 8009388:	18cc      	adds	r4, r1, r3
 800938a:	9905      	ldr	r1, [sp, #20]
 800938c:	0026      	movs	r6, r4
 800938e:	18cb      	adds	r3, r1, r3
 8009390:	469c      	mov	ip, r3
 8009392:	9902      	ldr	r1, [sp, #8]
 8009394:	428e      	cmp	r6, r1
 8009396:	d310      	bcc.n	80093ba <__mdiff+0x102>
 8009398:	9e02      	ldr	r6, [sp, #8]
 800939a:	1ee1      	subs	r1, r4, #3
 800939c:	2500      	movs	r5, #0
 800939e:	428e      	cmp	r6, r1
 80093a0:	d304      	bcc.n	80093ac <__mdiff+0xf4>
 80093a2:	0031      	movs	r1, r6
 80093a4:	3103      	adds	r1, #3
 80093a6:	1b0c      	subs	r4, r1, r4
 80093a8:	08a4      	lsrs	r4, r4, #2
 80093aa:	00a5      	lsls	r5, r4, #2
 80093ac:	195b      	adds	r3, r3, r5
 80093ae:	3b04      	subs	r3, #4
 80093b0:	6819      	ldr	r1, [r3, #0]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d00f      	beq.n	80093d6 <__mdiff+0x11e>
 80093b6:	6110      	str	r0, [r2, #16]
 80093b8:	e797      	b.n	80092ea <__mdiff+0x32>
 80093ba:	ce02      	ldmia	r6!, {r1}
 80093bc:	b28d      	uxth	r5, r1
 80093be:	19ed      	adds	r5, r5, r7
 80093c0:	0c0f      	lsrs	r7, r1, #16
 80093c2:	1429      	asrs	r1, r5, #16
 80093c4:	1879      	adds	r1, r7, r1
 80093c6:	140f      	asrs	r7, r1, #16
 80093c8:	b2ad      	uxth	r5, r5
 80093ca:	0409      	lsls	r1, r1, #16
 80093cc:	430d      	orrs	r5, r1
 80093ce:	4661      	mov	r1, ip
 80093d0:	c120      	stmia	r1!, {r5}
 80093d2:	468c      	mov	ip, r1
 80093d4:	e7dd      	b.n	8009392 <__mdiff+0xda>
 80093d6:	3801      	subs	r0, #1
 80093d8:	e7e9      	b.n	80093ae <__mdiff+0xf6>
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	0800a8d0 	.word	0x0800a8d0
 80093e0:	00000232 	.word	0x00000232
 80093e4:	0800a9c0 	.word	0x0800a9c0

080093e8 <__ulp>:
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <__ulp+0x40>)
 80093ea:	4019      	ands	r1, r3
 80093ec:	4b0f      	ldr	r3, [pc, #60]	; (800942c <__ulp+0x44>)
 80093ee:	18c9      	adds	r1, r1, r3
 80093f0:	2900      	cmp	r1, #0
 80093f2:	dd04      	ble.n	80093fe <__ulp+0x16>
 80093f4:	2200      	movs	r2, #0
 80093f6:	000b      	movs	r3, r1
 80093f8:	0010      	movs	r0, r2
 80093fa:	0019      	movs	r1, r3
 80093fc:	4770      	bx	lr
 80093fe:	4249      	negs	r1, r1
 8009400:	2200      	movs	r2, #0
 8009402:	2300      	movs	r3, #0
 8009404:	1509      	asrs	r1, r1, #20
 8009406:	2913      	cmp	r1, #19
 8009408:	dc04      	bgt.n	8009414 <__ulp+0x2c>
 800940a:	2080      	movs	r0, #128	; 0x80
 800940c:	0300      	lsls	r0, r0, #12
 800940e:	4108      	asrs	r0, r1
 8009410:	0003      	movs	r3, r0
 8009412:	e7f1      	b.n	80093f8 <__ulp+0x10>
 8009414:	3914      	subs	r1, #20
 8009416:	2001      	movs	r0, #1
 8009418:	291e      	cmp	r1, #30
 800941a:	dc02      	bgt.n	8009422 <__ulp+0x3a>
 800941c:	2080      	movs	r0, #128	; 0x80
 800941e:	0600      	lsls	r0, r0, #24
 8009420:	40c8      	lsrs	r0, r1
 8009422:	0002      	movs	r2, r0
 8009424:	e7e8      	b.n	80093f8 <__ulp+0x10>
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	7ff00000 	.word	0x7ff00000
 800942c:	fcc00000 	.word	0xfcc00000

08009430 <__b2d>:
 8009430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009432:	0006      	movs	r6, r0
 8009434:	6903      	ldr	r3, [r0, #16]
 8009436:	3614      	adds	r6, #20
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	18f3      	adds	r3, r6, r3
 800943c:	1f1d      	subs	r5, r3, #4
 800943e:	682c      	ldr	r4, [r5, #0]
 8009440:	000f      	movs	r7, r1
 8009442:	0020      	movs	r0, r4
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	f7ff fd43 	bl	8008ed0 <__hi0bits>
 800944a:	2320      	movs	r3, #32
 800944c:	1a1b      	subs	r3, r3, r0
 800944e:	491f      	ldr	r1, [pc, #124]	; (80094cc <__b2d+0x9c>)
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	280a      	cmp	r0, #10
 8009454:	dc16      	bgt.n	8009484 <__b2d+0x54>
 8009456:	230b      	movs	r3, #11
 8009458:	0027      	movs	r7, r4
 800945a:	1a1b      	subs	r3, r3, r0
 800945c:	40df      	lsrs	r7, r3
 800945e:	4339      	orrs	r1, r7
 8009460:	469c      	mov	ip, r3
 8009462:	000b      	movs	r3, r1
 8009464:	2100      	movs	r1, #0
 8009466:	42ae      	cmp	r6, r5
 8009468:	d202      	bcs.n	8009470 <__b2d+0x40>
 800946a:	9901      	ldr	r1, [sp, #4]
 800946c:	3908      	subs	r1, #8
 800946e:	6809      	ldr	r1, [r1, #0]
 8009470:	3015      	adds	r0, #21
 8009472:	4084      	lsls	r4, r0
 8009474:	4660      	mov	r0, ip
 8009476:	40c1      	lsrs	r1, r0
 8009478:	430c      	orrs	r4, r1
 800947a:	0022      	movs	r2, r4
 800947c:	0010      	movs	r0, r2
 800947e:	0019      	movs	r1, r3
 8009480:	b003      	add	sp, #12
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009484:	2700      	movs	r7, #0
 8009486:	42ae      	cmp	r6, r5
 8009488:	d202      	bcs.n	8009490 <__b2d+0x60>
 800948a:	9d01      	ldr	r5, [sp, #4]
 800948c:	3d08      	subs	r5, #8
 800948e:	682f      	ldr	r7, [r5, #0]
 8009490:	230b      	movs	r3, #11
 8009492:	425b      	negs	r3, r3
 8009494:	469c      	mov	ip, r3
 8009496:	4484      	add	ip, r0
 8009498:	280b      	cmp	r0, #11
 800949a:	d013      	beq.n	80094c4 <__b2d+0x94>
 800949c:	4663      	mov	r3, ip
 800949e:	2020      	movs	r0, #32
 80094a0:	409c      	lsls	r4, r3
 80094a2:	1ac0      	subs	r0, r0, r3
 80094a4:	003b      	movs	r3, r7
 80094a6:	40c3      	lsrs	r3, r0
 80094a8:	431c      	orrs	r4, r3
 80094aa:	4321      	orrs	r1, r4
 80094ac:	000b      	movs	r3, r1
 80094ae:	2100      	movs	r1, #0
 80094b0:	42b5      	cmp	r5, r6
 80094b2:	d901      	bls.n	80094b8 <__b2d+0x88>
 80094b4:	3d04      	subs	r5, #4
 80094b6:	6829      	ldr	r1, [r5, #0]
 80094b8:	4664      	mov	r4, ip
 80094ba:	40c1      	lsrs	r1, r0
 80094bc:	40a7      	lsls	r7, r4
 80094be:	430f      	orrs	r7, r1
 80094c0:	003a      	movs	r2, r7
 80094c2:	e7db      	b.n	800947c <__b2d+0x4c>
 80094c4:	4321      	orrs	r1, r4
 80094c6:	000b      	movs	r3, r1
 80094c8:	e7fa      	b.n	80094c0 <__b2d+0x90>
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	3ff00000 	.word	0x3ff00000

080094d0 <__d2b>:
 80094d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094d2:	2101      	movs	r1, #1
 80094d4:	0014      	movs	r4, r2
 80094d6:	001e      	movs	r6, r3
 80094d8:	9f08      	ldr	r7, [sp, #32]
 80094da:	f7ff fc01 	bl	8008ce0 <_Balloc>
 80094de:	1e05      	subs	r5, r0, #0
 80094e0:	d105      	bne.n	80094ee <__d2b+0x1e>
 80094e2:	0002      	movs	r2, r0
 80094e4:	4b26      	ldr	r3, [pc, #152]	; (8009580 <__d2b+0xb0>)
 80094e6:	4927      	ldr	r1, [pc, #156]	; (8009584 <__d2b+0xb4>)
 80094e8:	4827      	ldr	r0, [pc, #156]	; (8009588 <__d2b+0xb8>)
 80094ea:	f000 fd07 	bl	8009efc <__assert_func>
 80094ee:	0333      	lsls	r3, r6, #12
 80094f0:	0076      	lsls	r6, r6, #1
 80094f2:	0b1b      	lsrs	r3, r3, #12
 80094f4:	0d76      	lsrs	r6, r6, #21
 80094f6:	d124      	bne.n	8009542 <__d2b+0x72>
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	2c00      	cmp	r4, #0
 80094fc:	d027      	beq.n	800954e <__d2b+0x7e>
 80094fe:	4668      	mov	r0, sp
 8009500:	9400      	str	r4, [sp, #0]
 8009502:	f7ff fcff 	bl	8008f04 <__lo0bits>
 8009506:	9c00      	ldr	r4, [sp, #0]
 8009508:	2800      	cmp	r0, #0
 800950a:	d01e      	beq.n	800954a <__d2b+0x7a>
 800950c:	9b01      	ldr	r3, [sp, #4]
 800950e:	2120      	movs	r1, #32
 8009510:	001a      	movs	r2, r3
 8009512:	1a09      	subs	r1, r1, r0
 8009514:	408a      	lsls	r2, r1
 8009516:	40c3      	lsrs	r3, r0
 8009518:	4322      	orrs	r2, r4
 800951a:	616a      	str	r2, [r5, #20]
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	9c01      	ldr	r4, [sp, #4]
 8009520:	61ac      	str	r4, [r5, #24]
 8009522:	1e63      	subs	r3, r4, #1
 8009524:	419c      	sbcs	r4, r3
 8009526:	3401      	adds	r4, #1
 8009528:	612c      	str	r4, [r5, #16]
 800952a:	2e00      	cmp	r6, #0
 800952c:	d018      	beq.n	8009560 <__d2b+0x90>
 800952e:	4b17      	ldr	r3, [pc, #92]	; (800958c <__d2b+0xbc>)
 8009530:	18f6      	adds	r6, r6, r3
 8009532:	2335      	movs	r3, #53	; 0x35
 8009534:	1836      	adds	r6, r6, r0
 8009536:	1a18      	subs	r0, r3, r0
 8009538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953a:	603e      	str	r6, [r7, #0]
 800953c:	6018      	str	r0, [r3, #0]
 800953e:	0028      	movs	r0, r5
 8009540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009542:	2280      	movs	r2, #128	; 0x80
 8009544:	0352      	lsls	r2, r2, #13
 8009546:	4313      	orrs	r3, r2
 8009548:	e7d6      	b.n	80094f8 <__d2b+0x28>
 800954a:	616c      	str	r4, [r5, #20]
 800954c:	e7e7      	b.n	800951e <__d2b+0x4e>
 800954e:	a801      	add	r0, sp, #4
 8009550:	f7ff fcd8 	bl	8008f04 <__lo0bits>
 8009554:	2401      	movs	r4, #1
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	612c      	str	r4, [r5, #16]
 800955a:	616b      	str	r3, [r5, #20]
 800955c:	3020      	adds	r0, #32
 800955e:	e7e4      	b.n	800952a <__d2b+0x5a>
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <__d2b+0xc0>)
 8009562:	18c0      	adds	r0, r0, r3
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <__d2b+0xc4>)
 8009566:	6038      	str	r0, [r7, #0]
 8009568:	18e3      	adds	r3, r4, r3
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	18eb      	adds	r3, r5, r3
 800956e:	6958      	ldr	r0, [r3, #20]
 8009570:	f7ff fcae 	bl	8008ed0 <__hi0bits>
 8009574:	0164      	lsls	r4, r4, #5
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	1a24      	subs	r4, r4, r0
 800957a:	601c      	str	r4, [r3, #0]
 800957c:	e7df      	b.n	800953e <__d2b+0x6e>
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	0800a8d0 	.word	0x0800a8d0
 8009584:	0000030a 	.word	0x0000030a
 8009588:	0800a9c0 	.word	0x0800a9c0
 800958c:	fffffbcd 	.word	0xfffffbcd
 8009590:	fffffbce 	.word	0xfffffbce
 8009594:	3fffffff 	.word	0x3fffffff

08009598 <__ratio>:
 8009598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959a:	b087      	sub	sp, #28
 800959c:	000f      	movs	r7, r1
 800959e:	a904      	add	r1, sp, #16
 80095a0:	0006      	movs	r6, r0
 80095a2:	f7ff ff45 	bl	8009430 <__b2d>
 80095a6:	9000      	str	r0, [sp, #0]
 80095a8:	9101      	str	r1, [sp, #4]
 80095aa:	9c00      	ldr	r4, [sp, #0]
 80095ac:	9d01      	ldr	r5, [sp, #4]
 80095ae:	0038      	movs	r0, r7
 80095b0:	a905      	add	r1, sp, #20
 80095b2:	f7ff ff3d 	bl	8009430 <__b2d>
 80095b6:	9002      	str	r0, [sp, #8]
 80095b8:	9103      	str	r1, [sp, #12]
 80095ba:	9a02      	ldr	r2, [sp, #8]
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	6931      	ldr	r1, [r6, #16]
 80095c0:	6938      	ldr	r0, [r7, #16]
 80095c2:	9e05      	ldr	r6, [sp, #20]
 80095c4:	1a08      	subs	r0, r1, r0
 80095c6:	9904      	ldr	r1, [sp, #16]
 80095c8:	0140      	lsls	r0, r0, #5
 80095ca:	1b89      	subs	r1, r1, r6
 80095cc:	1841      	adds	r1, r0, r1
 80095ce:	0508      	lsls	r0, r1, #20
 80095d0:	2900      	cmp	r1, #0
 80095d2:	dd07      	ble.n	80095e4 <__ratio+0x4c>
 80095d4:	9901      	ldr	r1, [sp, #4]
 80095d6:	1845      	adds	r5, r0, r1
 80095d8:	0020      	movs	r0, r4
 80095da:	0029      	movs	r1, r5
 80095dc:	f7f7 fb10 	bl	8000c00 <__aeabi_ddiv>
 80095e0:	b007      	add	sp, #28
 80095e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e4:	9903      	ldr	r1, [sp, #12]
 80095e6:	1a0b      	subs	r3, r1, r0
 80095e8:	e7f6      	b.n	80095d8 <__ratio+0x40>

080095ea <__copybits>:
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	0014      	movs	r4, r2
 80095ee:	0005      	movs	r5, r0
 80095f0:	3901      	subs	r1, #1
 80095f2:	6913      	ldr	r3, [r2, #16]
 80095f4:	1149      	asrs	r1, r1, #5
 80095f6:	3101      	adds	r1, #1
 80095f8:	0089      	lsls	r1, r1, #2
 80095fa:	3414      	adds	r4, #20
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	1841      	adds	r1, r0, r1
 8009600:	18e3      	adds	r3, r4, r3
 8009602:	42a3      	cmp	r3, r4
 8009604:	d80d      	bhi.n	8009622 <__copybits+0x38>
 8009606:	0014      	movs	r4, r2
 8009608:	3411      	adds	r4, #17
 800960a:	2500      	movs	r5, #0
 800960c:	429c      	cmp	r4, r3
 800960e:	d803      	bhi.n	8009618 <__copybits+0x2e>
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	3b11      	subs	r3, #17
 8009614:	089b      	lsrs	r3, r3, #2
 8009616:	009d      	lsls	r5, r3, #2
 8009618:	2300      	movs	r3, #0
 800961a:	1940      	adds	r0, r0, r5
 800961c:	4281      	cmp	r1, r0
 800961e:	d803      	bhi.n	8009628 <__copybits+0x3e>
 8009620:	bd70      	pop	{r4, r5, r6, pc}
 8009622:	cc40      	ldmia	r4!, {r6}
 8009624:	c540      	stmia	r5!, {r6}
 8009626:	e7ec      	b.n	8009602 <__copybits+0x18>
 8009628:	c008      	stmia	r0!, {r3}
 800962a:	e7f7      	b.n	800961c <__copybits+0x32>

0800962c <__any_on>:
 800962c:	0002      	movs	r2, r0
 800962e:	6900      	ldr	r0, [r0, #16]
 8009630:	b510      	push	{r4, lr}
 8009632:	3214      	adds	r2, #20
 8009634:	114b      	asrs	r3, r1, #5
 8009636:	4298      	cmp	r0, r3
 8009638:	db13      	blt.n	8009662 <__any_on+0x36>
 800963a:	dd0c      	ble.n	8009656 <__any_on+0x2a>
 800963c:	241f      	movs	r4, #31
 800963e:	0008      	movs	r0, r1
 8009640:	4020      	ands	r0, r4
 8009642:	4221      	tst	r1, r4
 8009644:	d007      	beq.n	8009656 <__any_on+0x2a>
 8009646:	0099      	lsls	r1, r3, #2
 8009648:	588c      	ldr	r4, [r1, r2]
 800964a:	0021      	movs	r1, r4
 800964c:	40c1      	lsrs	r1, r0
 800964e:	4081      	lsls	r1, r0
 8009650:	2001      	movs	r0, #1
 8009652:	428c      	cmp	r4, r1
 8009654:	d104      	bne.n	8009660 <__any_on+0x34>
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	18d3      	adds	r3, r2, r3
 800965a:	4293      	cmp	r3, r2
 800965c:	d803      	bhi.n	8009666 <__any_on+0x3a>
 800965e:	2000      	movs	r0, #0
 8009660:	bd10      	pop	{r4, pc}
 8009662:	0003      	movs	r3, r0
 8009664:	e7f7      	b.n	8009656 <__any_on+0x2a>
 8009666:	3b04      	subs	r3, #4
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	2900      	cmp	r1, #0
 800966c:	d0f5      	beq.n	800965a <__any_on+0x2e>
 800966e:	2001      	movs	r0, #1
 8009670:	e7f6      	b.n	8009660 <__any_on+0x34>

08009672 <_calloc_r>:
 8009672:	b570      	push	{r4, r5, r6, lr}
 8009674:	0c13      	lsrs	r3, r2, #16
 8009676:	0c0d      	lsrs	r5, r1, #16
 8009678:	d11e      	bne.n	80096b8 <_calloc_r+0x46>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10c      	bne.n	8009698 <_calloc_r+0x26>
 800967e:	b289      	uxth	r1, r1
 8009680:	b294      	uxth	r4, r2
 8009682:	434c      	muls	r4, r1
 8009684:	0021      	movs	r1, r4
 8009686:	f7fc f9e9 	bl	8005a5c <_malloc_r>
 800968a:	1e05      	subs	r5, r0, #0
 800968c:	d01b      	beq.n	80096c6 <_calloc_r+0x54>
 800968e:	0022      	movs	r2, r4
 8009690:	2100      	movs	r1, #0
 8009692:	f7fc f96f 	bl	8005974 <memset>
 8009696:	e016      	b.n	80096c6 <_calloc_r+0x54>
 8009698:	1c1d      	adds	r5, r3, #0
 800969a:	1c0b      	adds	r3, r1, #0
 800969c:	b292      	uxth	r2, r2
 800969e:	b289      	uxth	r1, r1
 80096a0:	b29c      	uxth	r4, r3
 80096a2:	4351      	muls	r1, r2
 80096a4:	b2ab      	uxth	r3, r5
 80096a6:	4363      	muls	r3, r4
 80096a8:	0c0c      	lsrs	r4, r1, #16
 80096aa:	191c      	adds	r4, r3, r4
 80096ac:	0c22      	lsrs	r2, r4, #16
 80096ae:	d107      	bne.n	80096c0 <_calloc_r+0x4e>
 80096b0:	0424      	lsls	r4, r4, #16
 80096b2:	b289      	uxth	r1, r1
 80096b4:	430c      	orrs	r4, r1
 80096b6:	e7e5      	b.n	8009684 <_calloc_r+0x12>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <_calloc_r+0x4e>
 80096bc:	1c13      	adds	r3, r2, #0
 80096be:	e7ed      	b.n	800969c <_calloc_r+0x2a>
 80096c0:	230c      	movs	r3, #12
 80096c2:	2500      	movs	r5, #0
 80096c4:	6003      	str	r3, [r0, #0]
 80096c6:	0028      	movs	r0, r5
 80096c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080096cc <__ssputs_r>:
 80096cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ce:	688e      	ldr	r6, [r1, #8]
 80096d0:	b085      	sub	sp, #20
 80096d2:	0007      	movs	r7, r0
 80096d4:	000c      	movs	r4, r1
 80096d6:	9203      	str	r2, [sp, #12]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	429e      	cmp	r6, r3
 80096dc:	d83c      	bhi.n	8009758 <__ssputs_r+0x8c>
 80096de:	2390      	movs	r3, #144	; 0x90
 80096e0:	898a      	ldrh	r2, [r1, #12]
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	421a      	tst	r2, r3
 80096e6:	d034      	beq.n	8009752 <__ssputs_r+0x86>
 80096e8:	6909      	ldr	r1, [r1, #16]
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	6960      	ldr	r0, [r4, #20]
 80096ee:	1a5b      	subs	r3, r3, r1
 80096f0:	9302      	str	r3, [sp, #8]
 80096f2:	2303      	movs	r3, #3
 80096f4:	4343      	muls	r3, r0
 80096f6:	0fdd      	lsrs	r5, r3, #31
 80096f8:	18ed      	adds	r5, r5, r3
 80096fa:	9b01      	ldr	r3, [sp, #4]
 80096fc:	9802      	ldr	r0, [sp, #8]
 80096fe:	3301      	adds	r3, #1
 8009700:	181b      	adds	r3, r3, r0
 8009702:	106d      	asrs	r5, r5, #1
 8009704:	42ab      	cmp	r3, r5
 8009706:	d900      	bls.n	800970a <__ssputs_r+0x3e>
 8009708:	001d      	movs	r5, r3
 800970a:	0553      	lsls	r3, r2, #21
 800970c:	d532      	bpl.n	8009774 <__ssputs_r+0xa8>
 800970e:	0029      	movs	r1, r5
 8009710:	0038      	movs	r0, r7
 8009712:	f7fc f9a3 	bl	8005a5c <_malloc_r>
 8009716:	1e06      	subs	r6, r0, #0
 8009718:	d109      	bne.n	800972e <__ssputs_r+0x62>
 800971a:	230c      	movs	r3, #12
 800971c:	603b      	str	r3, [r7, #0]
 800971e:	2340      	movs	r3, #64	; 0x40
 8009720:	2001      	movs	r0, #1
 8009722:	89a2      	ldrh	r2, [r4, #12]
 8009724:	4240      	negs	r0, r0
 8009726:	4313      	orrs	r3, r2
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	b005      	add	sp, #20
 800972c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972e:	9a02      	ldr	r2, [sp, #8]
 8009730:	6921      	ldr	r1, [r4, #16]
 8009732:	f7ff fabb 	bl	8008cac <memcpy>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	4a14      	ldr	r2, [pc, #80]	; (800978c <__ssputs_r+0xc0>)
 800973a:	401a      	ands	r2, r3
 800973c:	2380      	movs	r3, #128	; 0x80
 800973e:	4313      	orrs	r3, r2
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	9b02      	ldr	r3, [sp, #8]
 8009744:	6126      	str	r6, [r4, #16]
 8009746:	18f6      	adds	r6, r6, r3
 8009748:	6026      	str	r6, [r4, #0]
 800974a:	6165      	str	r5, [r4, #20]
 800974c:	9e01      	ldr	r6, [sp, #4]
 800974e:	1aed      	subs	r5, r5, r3
 8009750:	60a5      	str	r5, [r4, #8]
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	429e      	cmp	r6, r3
 8009756:	d900      	bls.n	800975a <__ssputs_r+0x8e>
 8009758:	9e01      	ldr	r6, [sp, #4]
 800975a:	0032      	movs	r2, r6
 800975c:	9903      	ldr	r1, [sp, #12]
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	f000 fd58 	bl	800a214 <memmove>
 8009764:	68a3      	ldr	r3, [r4, #8]
 8009766:	2000      	movs	r0, #0
 8009768:	1b9b      	subs	r3, r3, r6
 800976a:	60a3      	str	r3, [r4, #8]
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	199e      	adds	r6, r3, r6
 8009770:	6026      	str	r6, [r4, #0]
 8009772:	e7da      	b.n	800972a <__ssputs_r+0x5e>
 8009774:	002a      	movs	r2, r5
 8009776:	0038      	movs	r0, r7
 8009778:	f000 fd5f 	bl	800a23a <_realloc_r>
 800977c:	1e06      	subs	r6, r0, #0
 800977e:	d1e0      	bne.n	8009742 <__ssputs_r+0x76>
 8009780:	0038      	movs	r0, r7
 8009782:	6921      	ldr	r1, [r4, #16]
 8009784:	f7fc f8fe 	bl	8005984 <_free_r>
 8009788:	e7c7      	b.n	800971a <__ssputs_r+0x4e>
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	fffffb7f 	.word	0xfffffb7f

08009790 <_svfiprintf_r>:
 8009790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009792:	b0a1      	sub	sp, #132	; 0x84
 8009794:	9003      	str	r0, [sp, #12]
 8009796:	001d      	movs	r5, r3
 8009798:	898b      	ldrh	r3, [r1, #12]
 800979a:	000f      	movs	r7, r1
 800979c:	0016      	movs	r6, r2
 800979e:	061b      	lsls	r3, r3, #24
 80097a0:	d511      	bpl.n	80097c6 <_svfiprintf_r+0x36>
 80097a2:	690b      	ldr	r3, [r1, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10e      	bne.n	80097c6 <_svfiprintf_r+0x36>
 80097a8:	2140      	movs	r1, #64	; 0x40
 80097aa:	f7fc f957 	bl	8005a5c <_malloc_r>
 80097ae:	6038      	str	r0, [r7, #0]
 80097b0:	6138      	str	r0, [r7, #16]
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d105      	bne.n	80097c2 <_svfiprintf_r+0x32>
 80097b6:	230c      	movs	r3, #12
 80097b8:	9a03      	ldr	r2, [sp, #12]
 80097ba:	3801      	subs	r0, #1
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	b021      	add	sp, #132	; 0x84
 80097c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	2300      	movs	r3, #0
 80097c8:	ac08      	add	r4, sp, #32
 80097ca:	6163      	str	r3, [r4, #20]
 80097cc:	3320      	adds	r3, #32
 80097ce:	7663      	strb	r3, [r4, #25]
 80097d0:	3310      	adds	r3, #16
 80097d2:	76a3      	strb	r3, [r4, #26]
 80097d4:	9507      	str	r5, [sp, #28]
 80097d6:	0035      	movs	r5, r6
 80097d8:	782b      	ldrb	r3, [r5, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <_svfiprintf_r+0x52>
 80097de:	2b25      	cmp	r3, #37	; 0x25
 80097e0:	d147      	bne.n	8009872 <_svfiprintf_r+0xe2>
 80097e2:	1bab      	subs	r3, r5, r6
 80097e4:	9305      	str	r3, [sp, #20]
 80097e6:	42b5      	cmp	r5, r6
 80097e8:	d00c      	beq.n	8009804 <_svfiprintf_r+0x74>
 80097ea:	0032      	movs	r2, r6
 80097ec:	0039      	movs	r1, r7
 80097ee:	9803      	ldr	r0, [sp, #12]
 80097f0:	f7ff ff6c 	bl	80096cc <__ssputs_r>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d100      	bne.n	80097fa <_svfiprintf_r+0x6a>
 80097f8:	e0ae      	b.n	8009958 <_svfiprintf_r+0x1c8>
 80097fa:	6962      	ldr	r2, [r4, #20]
 80097fc:	9b05      	ldr	r3, [sp, #20]
 80097fe:	4694      	mov	ip, r2
 8009800:	4463      	add	r3, ip
 8009802:	6163      	str	r3, [r4, #20]
 8009804:	782b      	ldrb	r3, [r5, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d100      	bne.n	800980c <_svfiprintf_r+0x7c>
 800980a:	e0a5      	b.n	8009958 <_svfiprintf_r+0x1c8>
 800980c:	2201      	movs	r2, #1
 800980e:	2300      	movs	r3, #0
 8009810:	4252      	negs	r2, r2
 8009812:	6062      	str	r2, [r4, #4]
 8009814:	a904      	add	r1, sp, #16
 8009816:	3254      	adds	r2, #84	; 0x54
 8009818:	1852      	adds	r2, r2, r1
 800981a:	1c6e      	adds	r6, r5, #1
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	60e3      	str	r3, [r4, #12]
 8009820:	60a3      	str	r3, [r4, #8]
 8009822:	7013      	strb	r3, [r2, #0]
 8009824:	65a3      	str	r3, [r4, #88]	; 0x58
 8009826:	2205      	movs	r2, #5
 8009828:	7831      	ldrb	r1, [r6, #0]
 800982a:	4854      	ldr	r0, [pc, #336]	; (800997c <_svfiprintf_r+0x1ec>)
 800982c:	f7ff fa33 	bl	8008c96 <memchr>
 8009830:	1c75      	adds	r5, r6, #1
 8009832:	2800      	cmp	r0, #0
 8009834:	d11f      	bne.n	8009876 <_svfiprintf_r+0xe6>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	06d3      	lsls	r3, r2, #27
 800983a:	d504      	bpl.n	8009846 <_svfiprintf_r+0xb6>
 800983c:	2353      	movs	r3, #83	; 0x53
 800983e:	a904      	add	r1, sp, #16
 8009840:	185b      	adds	r3, r3, r1
 8009842:	2120      	movs	r1, #32
 8009844:	7019      	strb	r1, [r3, #0]
 8009846:	0713      	lsls	r3, r2, #28
 8009848:	d504      	bpl.n	8009854 <_svfiprintf_r+0xc4>
 800984a:	2353      	movs	r3, #83	; 0x53
 800984c:	a904      	add	r1, sp, #16
 800984e:	185b      	adds	r3, r3, r1
 8009850:	212b      	movs	r1, #43	; 0x2b
 8009852:	7019      	strb	r1, [r3, #0]
 8009854:	7833      	ldrb	r3, [r6, #0]
 8009856:	2b2a      	cmp	r3, #42	; 0x2a
 8009858:	d016      	beq.n	8009888 <_svfiprintf_r+0xf8>
 800985a:	0035      	movs	r5, r6
 800985c:	2100      	movs	r1, #0
 800985e:	200a      	movs	r0, #10
 8009860:	68e3      	ldr	r3, [r4, #12]
 8009862:	782a      	ldrb	r2, [r5, #0]
 8009864:	1c6e      	adds	r6, r5, #1
 8009866:	3a30      	subs	r2, #48	; 0x30
 8009868:	2a09      	cmp	r2, #9
 800986a:	d94e      	bls.n	800990a <_svfiprintf_r+0x17a>
 800986c:	2900      	cmp	r1, #0
 800986e:	d111      	bne.n	8009894 <_svfiprintf_r+0x104>
 8009870:	e017      	b.n	80098a2 <_svfiprintf_r+0x112>
 8009872:	3501      	adds	r5, #1
 8009874:	e7b0      	b.n	80097d8 <_svfiprintf_r+0x48>
 8009876:	4b41      	ldr	r3, [pc, #260]	; (800997c <_svfiprintf_r+0x1ec>)
 8009878:	6822      	ldr	r2, [r4, #0]
 800987a:	1ac0      	subs	r0, r0, r3
 800987c:	2301      	movs	r3, #1
 800987e:	4083      	lsls	r3, r0
 8009880:	4313      	orrs	r3, r2
 8009882:	002e      	movs	r6, r5
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	e7ce      	b.n	8009826 <_svfiprintf_r+0x96>
 8009888:	9b07      	ldr	r3, [sp, #28]
 800988a:	1d19      	adds	r1, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9107      	str	r1, [sp, #28]
 8009890:	2b00      	cmp	r3, #0
 8009892:	db01      	blt.n	8009898 <_svfiprintf_r+0x108>
 8009894:	930b      	str	r3, [sp, #44]	; 0x2c
 8009896:	e004      	b.n	80098a2 <_svfiprintf_r+0x112>
 8009898:	425b      	negs	r3, r3
 800989a:	60e3      	str	r3, [r4, #12]
 800989c:	2302      	movs	r3, #2
 800989e:	4313      	orrs	r3, r2
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	782b      	ldrb	r3, [r5, #0]
 80098a4:	2b2e      	cmp	r3, #46	; 0x2e
 80098a6:	d10a      	bne.n	80098be <_svfiprintf_r+0x12e>
 80098a8:	786b      	ldrb	r3, [r5, #1]
 80098aa:	2b2a      	cmp	r3, #42	; 0x2a
 80098ac:	d135      	bne.n	800991a <_svfiprintf_r+0x18a>
 80098ae:	9b07      	ldr	r3, [sp, #28]
 80098b0:	3502      	adds	r5, #2
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	9207      	str	r2, [sp, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	db2b      	blt.n	8009914 <_svfiprintf_r+0x184>
 80098bc:	9309      	str	r3, [sp, #36]	; 0x24
 80098be:	4e30      	ldr	r6, [pc, #192]	; (8009980 <_svfiprintf_r+0x1f0>)
 80098c0:	2203      	movs	r2, #3
 80098c2:	0030      	movs	r0, r6
 80098c4:	7829      	ldrb	r1, [r5, #0]
 80098c6:	f7ff f9e6 	bl	8008c96 <memchr>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d006      	beq.n	80098dc <_svfiprintf_r+0x14c>
 80098ce:	2340      	movs	r3, #64	; 0x40
 80098d0:	1b80      	subs	r0, r0, r6
 80098d2:	4083      	lsls	r3, r0
 80098d4:	6822      	ldr	r2, [r4, #0]
 80098d6:	3501      	adds	r5, #1
 80098d8:	4313      	orrs	r3, r2
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	7829      	ldrb	r1, [r5, #0]
 80098de:	2206      	movs	r2, #6
 80098e0:	4828      	ldr	r0, [pc, #160]	; (8009984 <_svfiprintf_r+0x1f4>)
 80098e2:	1c6e      	adds	r6, r5, #1
 80098e4:	7621      	strb	r1, [r4, #24]
 80098e6:	f7ff f9d6 	bl	8008c96 <memchr>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d03c      	beq.n	8009968 <_svfiprintf_r+0x1d8>
 80098ee:	4b26      	ldr	r3, [pc, #152]	; (8009988 <_svfiprintf_r+0x1f8>)
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d125      	bne.n	8009940 <_svfiprintf_r+0x1b0>
 80098f4:	2207      	movs	r2, #7
 80098f6:	9b07      	ldr	r3, [sp, #28]
 80098f8:	3307      	adds	r3, #7
 80098fa:	4393      	bics	r3, r2
 80098fc:	3308      	adds	r3, #8
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	6963      	ldr	r3, [r4, #20]
 8009902:	9a04      	ldr	r2, [sp, #16]
 8009904:	189b      	adds	r3, r3, r2
 8009906:	6163      	str	r3, [r4, #20]
 8009908:	e765      	b.n	80097d6 <_svfiprintf_r+0x46>
 800990a:	4343      	muls	r3, r0
 800990c:	0035      	movs	r5, r6
 800990e:	2101      	movs	r1, #1
 8009910:	189b      	adds	r3, r3, r2
 8009912:	e7a6      	b.n	8009862 <_svfiprintf_r+0xd2>
 8009914:	2301      	movs	r3, #1
 8009916:	425b      	negs	r3, r3
 8009918:	e7d0      	b.n	80098bc <_svfiprintf_r+0x12c>
 800991a:	2300      	movs	r3, #0
 800991c:	200a      	movs	r0, #10
 800991e:	001a      	movs	r2, r3
 8009920:	3501      	adds	r5, #1
 8009922:	6063      	str	r3, [r4, #4]
 8009924:	7829      	ldrb	r1, [r5, #0]
 8009926:	1c6e      	adds	r6, r5, #1
 8009928:	3930      	subs	r1, #48	; 0x30
 800992a:	2909      	cmp	r1, #9
 800992c:	d903      	bls.n	8009936 <_svfiprintf_r+0x1a6>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c5      	beq.n	80098be <_svfiprintf_r+0x12e>
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	e7c3      	b.n	80098be <_svfiprintf_r+0x12e>
 8009936:	4342      	muls	r2, r0
 8009938:	0035      	movs	r5, r6
 800993a:	2301      	movs	r3, #1
 800993c:	1852      	adds	r2, r2, r1
 800993e:	e7f1      	b.n	8009924 <_svfiprintf_r+0x194>
 8009940:	ab07      	add	r3, sp, #28
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	003a      	movs	r2, r7
 8009946:	0021      	movs	r1, r4
 8009948:	4b10      	ldr	r3, [pc, #64]	; (800998c <_svfiprintf_r+0x1fc>)
 800994a:	9803      	ldr	r0, [sp, #12]
 800994c:	f7fc f9a6 	bl	8005c9c <_printf_float>
 8009950:	9004      	str	r0, [sp, #16]
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	3301      	adds	r3, #1
 8009956:	d1d3      	bne.n	8009900 <_svfiprintf_r+0x170>
 8009958:	89bb      	ldrh	r3, [r7, #12]
 800995a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800995c:	065b      	lsls	r3, r3, #25
 800995e:	d400      	bmi.n	8009962 <_svfiprintf_r+0x1d2>
 8009960:	e72d      	b.n	80097be <_svfiprintf_r+0x2e>
 8009962:	2001      	movs	r0, #1
 8009964:	4240      	negs	r0, r0
 8009966:	e72a      	b.n	80097be <_svfiprintf_r+0x2e>
 8009968:	ab07      	add	r3, sp, #28
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	003a      	movs	r2, r7
 800996e:	0021      	movs	r1, r4
 8009970:	4b06      	ldr	r3, [pc, #24]	; (800998c <_svfiprintf_r+0x1fc>)
 8009972:	9803      	ldr	r0, [sp, #12]
 8009974:	f7fc fc44 	bl	8006200 <_printf_i>
 8009978:	e7ea      	b.n	8009950 <_svfiprintf_r+0x1c0>
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	0800ab1c 	.word	0x0800ab1c
 8009980:	0800ab22 	.word	0x0800ab22
 8009984:	0800ab26 	.word	0x0800ab26
 8009988:	08005c9d 	.word	0x08005c9d
 800998c:	080096cd 	.word	0x080096cd

08009990 <__sfputc_r>:
 8009990:	6893      	ldr	r3, [r2, #8]
 8009992:	b510      	push	{r4, lr}
 8009994:	3b01      	subs	r3, #1
 8009996:	6093      	str	r3, [r2, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	da04      	bge.n	80099a6 <__sfputc_r+0x16>
 800999c:	6994      	ldr	r4, [r2, #24]
 800999e:	42a3      	cmp	r3, r4
 80099a0:	db07      	blt.n	80099b2 <__sfputc_r+0x22>
 80099a2:	290a      	cmp	r1, #10
 80099a4:	d005      	beq.n	80099b2 <__sfputc_r+0x22>
 80099a6:	6813      	ldr	r3, [r2, #0]
 80099a8:	1c58      	adds	r0, r3, #1
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	7019      	strb	r1, [r3, #0]
 80099ae:	0008      	movs	r0, r1
 80099b0:	bd10      	pop	{r4, pc}
 80099b2:	f000 f9b3 	bl	8009d1c <__swbuf_r>
 80099b6:	0001      	movs	r1, r0
 80099b8:	e7f9      	b.n	80099ae <__sfputc_r+0x1e>

080099ba <__sfputs_r>:
 80099ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099bc:	0006      	movs	r6, r0
 80099be:	000f      	movs	r7, r1
 80099c0:	0014      	movs	r4, r2
 80099c2:	18d5      	adds	r5, r2, r3
 80099c4:	42ac      	cmp	r4, r5
 80099c6:	d101      	bne.n	80099cc <__sfputs_r+0x12>
 80099c8:	2000      	movs	r0, #0
 80099ca:	e007      	b.n	80099dc <__sfputs_r+0x22>
 80099cc:	7821      	ldrb	r1, [r4, #0]
 80099ce:	003a      	movs	r2, r7
 80099d0:	0030      	movs	r0, r6
 80099d2:	f7ff ffdd 	bl	8009990 <__sfputc_r>
 80099d6:	3401      	adds	r4, #1
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d1f3      	bne.n	80099c4 <__sfputs_r+0xa>
 80099dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099e0 <_vfiprintf_r>:
 80099e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e2:	b0a1      	sub	sp, #132	; 0x84
 80099e4:	0006      	movs	r6, r0
 80099e6:	000c      	movs	r4, r1
 80099e8:	001f      	movs	r7, r3
 80099ea:	9203      	str	r2, [sp, #12]
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d004      	beq.n	80099fa <_vfiprintf_r+0x1a>
 80099f0:	6983      	ldr	r3, [r0, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <_vfiprintf_r+0x1a>
 80099f6:	f7fe fd21 	bl	800843c <__sinit>
 80099fa:	4b8e      	ldr	r3, [pc, #568]	; (8009c34 <_vfiprintf_r+0x254>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	d11c      	bne.n	8009a3a <_vfiprintf_r+0x5a>
 8009a00:	6874      	ldr	r4, [r6, #4]
 8009a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a04:	07db      	lsls	r3, r3, #31
 8009a06:	d405      	bmi.n	8009a14 <_vfiprintf_r+0x34>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	059b      	lsls	r3, r3, #22
 8009a0c:	d402      	bmi.n	8009a14 <_vfiprintf_r+0x34>
 8009a0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a10:	f7ff f92d 	bl	8008c6e <__retarget_lock_acquire_recursive>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	071b      	lsls	r3, r3, #28
 8009a18:	d502      	bpl.n	8009a20 <_vfiprintf_r+0x40>
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d11d      	bne.n	8009a5c <_vfiprintf_r+0x7c>
 8009a20:	0021      	movs	r1, r4
 8009a22:	0030      	movs	r0, r6
 8009a24:	f000 f9f2 	bl	8009e0c <__swsetup_r>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d017      	beq.n	8009a5c <_vfiprintf_r+0x7c>
 8009a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a2e:	07db      	lsls	r3, r3, #31
 8009a30:	d50d      	bpl.n	8009a4e <_vfiprintf_r+0x6e>
 8009a32:	2001      	movs	r0, #1
 8009a34:	4240      	negs	r0, r0
 8009a36:	b021      	add	sp, #132	; 0x84
 8009a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3a:	4b7f      	ldr	r3, [pc, #508]	; (8009c38 <_vfiprintf_r+0x258>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d101      	bne.n	8009a44 <_vfiprintf_r+0x64>
 8009a40:	68b4      	ldr	r4, [r6, #8]
 8009a42:	e7de      	b.n	8009a02 <_vfiprintf_r+0x22>
 8009a44:	4b7d      	ldr	r3, [pc, #500]	; (8009c3c <_vfiprintf_r+0x25c>)
 8009a46:	429c      	cmp	r4, r3
 8009a48:	d1db      	bne.n	8009a02 <_vfiprintf_r+0x22>
 8009a4a:	68f4      	ldr	r4, [r6, #12]
 8009a4c:	e7d9      	b.n	8009a02 <_vfiprintf_r+0x22>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	059b      	lsls	r3, r3, #22
 8009a52:	d4ee      	bmi.n	8009a32 <_vfiprintf_r+0x52>
 8009a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a56:	f7ff f90b 	bl	8008c70 <__retarget_lock_release_recursive>
 8009a5a:	e7ea      	b.n	8009a32 <_vfiprintf_r+0x52>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	ad08      	add	r5, sp, #32
 8009a60:	616b      	str	r3, [r5, #20]
 8009a62:	3320      	adds	r3, #32
 8009a64:	766b      	strb	r3, [r5, #25]
 8009a66:	3310      	adds	r3, #16
 8009a68:	76ab      	strb	r3, [r5, #26]
 8009a6a:	9707      	str	r7, [sp, #28]
 8009a6c:	9f03      	ldr	r7, [sp, #12]
 8009a6e:	783b      	ldrb	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <_vfiprintf_r+0x98>
 8009a74:	2b25      	cmp	r3, #37	; 0x25
 8009a76:	d14e      	bne.n	8009b16 <_vfiprintf_r+0x136>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	1afb      	subs	r3, r7, r3
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	429f      	cmp	r7, r3
 8009a82:	d00d      	beq.n	8009aa0 <_vfiprintf_r+0xc0>
 8009a84:	9b05      	ldr	r3, [sp, #20]
 8009a86:	0021      	movs	r1, r4
 8009a88:	0030      	movs	r0, r6
 8009a8a:	9a03      	ldr	r2, [sp, #12]
 8009a8c:	f7ff ff95 	bl	80099ba <__sfputs_r>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d100      	bne.n	8009a96 <_vfiprintf_r+0xb6>
 8009a94:	e0b5      	b.n	8009c02 <_vfiprintf_r+0x222>
 8009a96:	696a      	ldr	r2, [r5, #20]
 8009a98:	9b05      	ldr	r3, [sp, #20]
 8009a9a:	4694      	mov	ip, r2
 8009a9c:	4463      	add	r3, ip
 8009a9e:	616b      	str	r3, [r5, #20]
 8009aa0:	783b      	ldrb	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d100      	bne.n	8009aa8 <_vfiprintf_r+0xc8>
 8009aa6:	e0ac      	b.n	8009c02 <_vfiprintf_r+0x222>
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	1c7b      	adds	r3, r7, #1
 8009aac:	9303      	str	r3, [sp, #12]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4252      	negs	r2, r2
 8009ab2:	606a      	str	r2, [r5, #4]
 8009ab4:	a904      	add	r1, sp, #16
 8009ab6:	3254      	adds	r2, #84	; 0x54
 8009ab8:	1852      	adds	r2, r2, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	60eb      	str	r3, [r5, #12]
 8009abe:	60ab      	str	r3, [r5, #8]
 8009ac0:	7013      	strb	r3, [r2, #0]
 8009ac2:	65ab      	str	r3, [r5, #88]	; 0x58
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	7819      	ldrb	r1, [r3, #0]
 8009aca:	485d      	ldr	r0, [pc, #372]	; (8009c40 <_vfiprintf_r+0x260>)
 8009acc:	f7ff f8e3 	bl	8008c96 <memchr>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	1c5f      	adds	r7, r3, #1
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d120      	bne.n	8009b1a <_vfiprintf_r+0x13a>
 8009ad8:	682a      	ldr	r2, [r5, #0]
 8009ada:	06d3      	lsls	r3, r2, #27
 8009adc:	d504      	bpl.n	8009ae8 <_vfiprintf_r+0x108>
 8009ade:	2353      	movs	r3, #83	; 0x53
 8009ae0:	a904      	add	r1, sp, #16
 8009ae2:	185b      	adds	r3, r3, r1
 8009ae4:	2120      	movs	r1, #32
 8009ae6:	7019      	strb	r1, [r3, #0]
 8009ae8:	0713      	lsls	r3, r2, #28
 8009aea:	d504      	bpl.n	8009af6 <_vfiprintf_r+0x116>
 8009aec:	2353      	movs	r3, #83	; 0x53
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	185b      	adds	r3, r3, r1
 8009af2:	212b      	movs	r1, #43	; 0x2b
 8009af4:	7019      	strb	r1, [r3, #0]
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b2a      	cmp	r3, #42	; 0x2a
 8009afc:	d016      	beq.n	8009b2c <_vfiprintf_r+0x14c>
 8009afe:	2100      	movs	r1, #0
 8009b00:	68eb      	ldr	r3, [r5, #12]
 8009b02:	9f03      	ldr	r7, [sp, #12]
 8009b04:	783a      	ldrb	r2, [r7, #0]
 8009b06:	1c78      	adds	r0, r7, #1
 8009b08:	3a30      	subs	r2, #48	; 0x30
 8009b0a:	4684      	mov	ip, r0
 8009b0c:	2a09      	cmp	r2, #9
 8009b0e:	d94f      	bls.n	8009bb0 <_vfiprintf_r+0x1d0>
 8009b10:	2900      	cmp	r1, #0
 8009b12:	d111      	bne.n	8009b38 <_vfiprintf_r+0x158>
 8009b14:	e017      	b.n	8009b46 <_vfiprintf_r+0x166>
 8009b16:	3701      	adds	r7, #1
 8009b18:	e7a9      	b.n	8009a6e <_vfiprintf_r+0x8e>
 8009b1a:	4b49      	ldr	r3, [pc, #292]	; (8009c40 <_vfiprintf_r+0x260>)
 8009b1c:	682a      	ldr	r2, [r5, #0]
 8009b1e:	1ac0      	subs	r0, r0, r3
 8009b20:	2301      	movs	r3, #1
 8009b22:	4083      	lsls	r3, r0
 8009b24:	4313      	orrs	r3, r2
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	9703      	str	r7, [sp, #12]
 8009b2a:	e7cb      	b.n	8009ac4 <_vfiprintf_r+0xe4>
 8009b2c:	9b07      	ldr	r3, [sp, #28]
 8009b2e:	1d19      	adds	r1, r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	9107      	str	r1, [sp, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	db01      	blt.n	8009b3c <_vfiprintf_r+0x15c>
 8009b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3a:	e004      	b.n	8009b46 <_vfiprintf_r+0x166>
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	60eb      	str	r3, [r5, #12]
 8009b40:	2302      	movs	r3, #2
 8009b42:	4313      	orrs	r3, r2
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	783b      	ldrb	r3, [r7, #0]
 8009b48:	2b2e      	cmp	r3, #46	; 0x2e
 8009b4a:	d10a      	bne.n	8009b62 <_vfiprintf_r+0x182>
 8009b4c:	787b      	ldrb	r3, [r7, #1]
 8009b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b50:	d137      	bne.n	8009bc2 <_vfiprintf_r+0x1e2>
 8009b52:	9b07      	ldr	r3, [sp, #28]
 8009b54:	3702      	adds	r7, #2
 8009b56:	1d1a      	adds	r2, r3, #4
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	9207      	str	r2, [sp, #28]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	db2d      	blt.n	8009bbc <_vfiprintf_r+0x1dc>
 8009b60:	9309      	str	r3, [sp, #36]	; 0x24
 8009b62:	2203      	movs	r2, #3
 8009b64:	7839      	ldrb	r1, [r7, #0]
 8009b66:	4837      	ldr	r0, [pc, #220]	; (8009c44 <_vfiprintf_r+0x264>)
 8009b68:	f7ff f895 	bl	8008c96 <memchr>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d007      	beq.n	8009b80 <_vfiprintf_r+0x1a0>
 8009b70:	4b34      	ldr	r3, [pc, #208]	; (8009c44 <_vfiprintf_r+0x264>)
 8009b72:	682a      	ldr	r2, [r5, #0]
 8009b74:	1ac0      	subs	r0, r0, r3
 8009b76:	2340      	movs	r3, #64	; 0x40
 8009b78:	4083      	lsls	r3, r0
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	3701      	adds	r7, #1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	7839      	ldrb	r1, [r7, #0]
 8009b82:	1c7b      	adds	r3, r7, #1
 8009b84:	2206      	movs	r2, #6
 8009b86:	4830      	ldr	r0, [pc, #192]	; (8009c48 <_vfiprintf_r+0x268>)
 8009b88:	9303      	str	r3, [sp, #12]
 8009b8a:	7629      	strb	r1, [r5, #24]
 8009b8c:	f7ff f883 	bl	8008c96 <memchr>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d045      	beq.n	8009c20 <_vfiprintf_r+0x240>
 8009b94:	4b2d      	ldr	r3, [pc, #180]	; (8009c4c <_vfiprintf_r+0x26c>)
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d127      	bne.n	8009bea <_vfiprintf_r+0x20a>
 8009b9a:	2207      	movs	r2, #7
 8009b9c:	9b07      	ldr	r3, [sp, #28]
 8009b9e:	3307      	adds	r3, #7
 8009ba0:	4393      	bics	r3, r2
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	9307      	str	r3, [sp, #28]
 8009ba6:	696b      	ldr	r3, [r5, #20]
 8009ba8:	9a04      	ldr	r2, [sp, #16]
 8009baa:	189b      	adds	r3, r3, r2
 8009bac:	616b      	str	r3, [r5, #20]
 8009bae:	e75d      	b.n	8009a6c <_vfiprintf_r+0x8c>
 8009bb0:	210a      	movs	r1, #10
 8009bb2:	434b      	muls	r3, r1
 8009bb4:	4667      	mov	r7, ip
 8009bb6:	189b      	adds	r3, r3, r2
 8009bb8:	3909      	subs	r1, #9
 8009bba:	e7a3      	b.n	8009b04 <_vfiprintf_r+0x124>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	425b      	negs	r3, r3
 8009bc0:	e7ce      	b.n	8009b60 <_vfiprintf_r+0x180>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	001a      	movs	r2, r3
 8009bc6:	3701      	adds	r7, #1
 8009bc8:	606b      	str	r3, [r5, #4]
 8009bca:	7839      	ldrb	r1, [r7, #0]
 8009bcc:	1c78      	adds	r0, r7, #1
 8009bce:	3930      	subs	r1, #48	; 0x30
 8009bd0:	4684      	mov	ip, r0
 8009bd2:	2909      	cmp	r1, #9
 8009bd4:	d903      	bls.n	8009bde <_vfiprintf_r+0x1fe>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0c3      	beq.n	8009b62 <_vfiprintf_r+0x182>
 8009bda:	9209      	str	r2, [sp, #36]	; 0x24
 8009bdc:	e7c1      	b.n	8009b62 <_vfiprintf_r+0x182>
 8009bde:	230a      	movs	r3, #10
 8009be0:	435a      	muls	r2, r3
 8009be2:	4667      	mov	r7, ip
 8009be4:	1852      	adds	r2, r2, r1
 8009be6:	3b09      	subs	r3, #9
 8009be8:	e7ef      	b.n	8009bca <_vfiprintf_r+0x1ea>
 8009bea:	ab07      	add	r3, sp, #28
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	0022      	movs	r2, r4
 8009bf0:	0029      	movs	r1, r5
 8009bf2:	0030      	movs	r0, r6
 8009bf4:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <_vfiprintf_r+0x270>)
 8009bf6:	f7fc f851 	bl	8005c9c <_printf_float>
 8009bfa:	9004      	str	r0, [sp, #16]
 8009bfc:	9b04      	ldr	r3, [sp, #16]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	d1d1      	bne.n	8009ba6 <_vfiprintf_r+0x1c6>
 8009c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c04:	07db      	lsls	r3, r3, #31
 8009c06:	d405      	bmi.n	8009c14 <_vfiprintf_r+0x234>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	059b      	lsls	r3, r3, #22
 8009c0c:	d402      	bmi.n	8009c14 <_vfiprintf_r+0x234>
 8009c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c10:	f7ff f82e 	bl	8008c70 <__retarget_lock_release_recursive>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	065b      	lsls	r3, r3, #25
 8009c18:	d500      	bpl.n	8009c1c <_vfiprintf_r+0x23c>
 8009c1a:	e70a      	b.n	8009a32 <_vfiprintf_r+0x52>
 8009c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c1e:	e70a      	b.n	8009a36 <_vfiprintf_r+0x56>
 8009c20:	ab07      	add	r3, sp, #28
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	0022      	movs	r2, r4
 8009c26:	0029      	movs	r1, r5
 8009c28:	0030      	movs	r0, r6
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <_vfiprintf_r+0x270>)
 8009c2c:	f7fc fae8 	bl	8006200 <_printf_i>
 8009c30:	e7e3      	b.n	8009bfa <_vfiprintf_r+0x21a>
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	0800a904 	.word	0x0800a904
 8009c38:	0800a924 	.word	0x0800a924
 8009c3c:	0800a8e4 	.word	0x0800a8e4
 8009c40:	0800ab1c 	.word	0x0800ab1c
 8009c44:	0800ab22 	.word	0x0800ab22
 8009c48:	0800ab26 	.word	0x0800ab26
 8009c4c:	08005c9d 	.word	0x08005c9d
 8009c50:	080099bb 	.word	0x080099bb

08009c54 <nan>:
 8009c54:	2000      	movs	r0, #0
 8009c56:	4901      	ldr	r1, [pc, #4]	; (8009c5c <nan+0x8>)
 8009c58:	4770      	bx	lr
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	7ff80000 	.word	0x7ff80000

08009c60 <__sread>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	000c      	movs	r4, r1
 8009c64:	250e      	movs	r5, #14
 8009c66:	5f49      	ldrsh	r1, [r1, r5]
 8009c68:	f000 fb16 	bl	800a298 <_read_r>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	db03      	blt.n	8009c78 <__sread+0x18>
 8009c70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c72:	181b      	adds	r3, r3, r0
 8009c74:	6563      	str	r3, [r4, #84]	; 0x54
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	4a02      	ldr	r2, [pc, #8]	; (8009c84 <__sread+0x24>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	e7f9      	b.n	8009c76 <__sread+0x16>
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	ffffefff 	.word	0xffffefff

08009c88 <__swrite>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	001f      	movs	r7, r3
 8009c8c:	898b      	ldrh	r3, [r1, #12]
 8009c8e:	0005      	movs	r5, r0
 8009c90:	000c      	movs	r4, r1
 8009c92:	0016      	movs	r6, r2
 8009c94:	05db      	lsls	r3, r3, #23
 8009c96:	d505      	bpl.n	8009ca4 <__swrite+0x1c>
 8009c98:	230e      	movs	r3, #14
 8009c9a:	5ec9      	ldrsh	r1, [r1, r3]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	f000 fa38 	bl	800a114 <_lseek_r>
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	4a05      	ldr	r2, [pc, #20]	; (8009cbc <__swrite+0x34>)
 8009ca8:	0028      	movs	r0, r5
 8009caa:	4013      	ands	r3, r2
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	0032      	movs	r2, r6
 8009cb0:	230e      	movs	r3, #14
 8009cb2:	5ee1      	ldrsh	r1, [r4, r3]
 8009cb4:	003b      	movs	r3, r7
 8009cb6:	f000 f895 	bl	8009de4 <_write_r>
 8009cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cbc:	ffffefff 	.word	0xffffefff

08009cc0 <__sseek>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	000c      	movs	r4, r1
 8009cc4:	250e      	movs	r5, #14
 8009cc6:	5f49      	ldrsh	r1, [r1, r5]
 8009cc8:	f000 fa24 	bl	800a114 <_lseek_r>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	1c42      	adds	r2, r0, #1
 8009cd0:	d103      	bne.n	8009cda <__sseek+0x1a>
 8009cd2:	4a05      	ldr	r2, [pc, #20]	; (8009ce8 <__sseek+0x28>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	bd70      	pop	{r4, r5, r6, pc}
 8009cda:	2280      	movs	r2, #128	; 0x80
 8009cdc:	0152      	lsls	r2, r2, #5
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce4:	e7f8      	b.n	8009cd8 <__sseek+0x18>
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	ffffefff 	.word	0xffffefff

08009cec <__sclose>:
 8009cec:	b510      	push	{r4, lr}
 8009cee:	230e      	movs	r3, #14
 8009cf0:	5ec9      	ldrsh	r1, [r1, r3]
 8009cf2:	f000 f921 	bl	8009f38 <_close_r>
 8009cf6:	bd10      	pop	{r4, pc}

08009cf8 <strncmp>:
 8009cf8:	b530      	push	{r4, r5, lr}
 8009cfa:	0005      	movs	r5, r0
 8009cfc:	1e10      	subs	r0, r2, #0
 8009cfe:	d008      	beq.n	8009d12 <strncmp+0x1a>
 8009d00:	2400      	movs	r4, #0
 8009d02:	3a01      	subs	r2, #1
 8009d04:	5d2b      	ldrb	r3, [r5, r4]
 8009d06:	5d08      	ldrb	r0, [r1, r4]
 8009d08:	4283      	cmp	r3, r0
 8009d0a:	d101      	bne.n	8009d10 <strncmp+0x18>
 8009d0c:	4294      	cmp	r4, r2
 8009d0e:	d101      	bne.n	8009d14 <strncmp+0x1c>
 8009d10:	1a18      	subs	r0, r3, r0
 8009d12:	bd30      	pop	{r4, r5, pc}
 8009d14:	3401      	adds	r4, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1f4      	bne.n	8009d04 <strncmp+0xc>
 8009d1a:	e7f9      	b.n	8009d10 <strncmp+0x18>

08009d1c <__swbuf_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	0005      	movs	r5, r0
 8009d20:	000e      	movs	r6, r1
 8009d22:	0014      	movs	r4, r2
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d004      	beq.n	8009d32 <__swbuf_r+0x16>
 8009d28:	6983      	ldr	r3, [r0, #24]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <__swbuf_r+0x16>
 8009d2e:	f7fe fb85 	bl	800843c <__sinit>
 8009d32:	4b22      	ldr	r3, [pc, #136]	; (8009dbc <__swbuf_r+0xa0>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	d12e      	bne.n	8009d96 <__swbuf_r+0x7a>
 8009d38:	686c      	ldr	r4, [r5, #4]
 8009d3a:	69a3      	ldr	r3, [r4, #24]
 8009d3c:	60a3      	str	r3, [r4, #8]
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	071b      	lsls	r3, r3, #28
 8009d42:	d532      	bpl.n	8009daa <__swbuf_r+0x8e>
 8009d44:	6923      	ldr	r3, [r4, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d02f      	beq.n	8009daa <__swbuf_r+0x8e>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	6922      	ldr	r2, [r4, #16]
 8009d4e:	b2f7      	uxtb	r7, r6
 8009d50:	1a98      	subs	r0, r3, r2
 8009d52:	6963      	ldr	r3, [r4, #20]
 8009d54:	b2f6      	uxtb	r6, r6
 8009d56:	4283      	cmp	r3, r0
 8009d58:	dc05      	bgt.n	8009d66 <__swbuf_r+0x4a>
 8009d5a:	0021      	movs	r1, r4
 8009d5c:	0028      	movs	r0, r5
 8009d5e:	f000 f989 	bl	800a074 <_fflush_r>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d127      	bne.n	8009db6 <__swbuf_r+0x9a>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	3001      	adds	r0, #1
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	6022      	str	r2, [r4, #0]
 8009d74:	701f      	strb	r7, [r3, #0]
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d004      	beq.n	8009d86 <__swbuf_r+0x6a>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	07db      	lsls	r3, r3, #31
 8009d80:	d507      	bpl.n	8009d92 <__swbuf_r+0x76>
 8009d82:	2e0a      	cmp	r6, #10
 8009d84:	d105      	bne.n	8009d92 <__swbuf_r+0x76>
 8009d86:	0021      	movs	r1, r4
 8009d88:	0028      	movs	r0, r5
 8009d8a:	f000 f973 	bl	800a074 <_fflush_r>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d111      	bne.n	8009db6 <__swbuf_r+0x9a>
 8009d92:	0030      	movs	r0, r6
 8009d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d96:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <__swbuf_r+0xa4>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	d101      	bne.n	8009da0 <__swbuf_r+0x84>
 8009d9c:	68ac      	ldr	r4, [r5, #8]
 8009d9e:	e7cc      	b.n	8009d3a <__swbuf_r+0x1e>
 8009da0:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <__swbuf_r+0xa8>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	d1c9      	bne.n	8009d3a <__swbuf_r+0x1e>
 8009da6:	68ec      	ldr	r4, [r5, #12]
 8009da8:	e7c7      	b.n	8009d3a <__swbuf_r+0x1e>
 8009daa:	0021      	movs	r1, r4
 8009dac:	0028      	movs	r0, r5
 8009dae:	f000 f82d 	bl	8009e0c <__swsetup_r>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0c9      	beq.n	8009d4a <__swbuf_r+0x2e>
 8009db6:	2601      	movs	r6, #1
 8009db8:	4276      	negs	r6, r6
 8009dba:	e7ea      	b.n	8009d92 <__swbuf_r+0x76>
 8009dbc:	0800a904 	.word	0x0800a904
 8009dc0:	0800a924 	.word	0x0800a924
 8009dc4:	0800a8e4 	.word	0x0800a8e4

08009dc8 <__ascii_wctomb>:
 8009dc8:	0003      	movs	r3, r0
 8009dca:	1e08      	subs	r0, r1, #0
 8009dcc:	d005      	beq.n	8009dda <__ascii_wctomb+0x12>
 8009dce:	2aff      	cmp	r2, #255	; 0xff
 8009dd0:	d904      	bls.n	8009ddc <__ascii_wctomb+0x14>
 8009dd2:	228a      	movs	r2, #138	; 0x8a
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	4240      	negs	r0, r0
 8009dda:	4770      	bx	lr
 8009ddc:	2001      	movs	r0, #1
 8009dde:	700a      	strb	r2, [r1, #0]
 8009de0:	e7fb      	b.n	8009dda <__ascii_wctomb+0x12>
	...

08009de4 <_write_r>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	0004      	movs	r4, r0
 8009de8:	0008      	movs	r0, r1
 8009dea:	0011      	movs	r1, r2
 8009dec:	001a      	movs	r2, r3
 8009dee:	2300      	movs	r3, #0
 8009df0:	4d05      	ldr	r5, [pc, #20]	; (8009e08 <_write_r+0x24>)
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f9 fa97 	bl	8003326 <_write>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d103      	bne.n	8009e04 <_write_r+0x20>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d000      	beq.n	8009e04 <_write_r+0x20>
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	bd70      	pop	{r4, r5, r6, pc}
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	200005ac 	.word	0x200005ac

08009e0c <__swsetup_r>:
 8009e0c:	4b37      	ldr	r3, [pc, #220]	; (8009eec <__swsetup_r+0xe0>)
 8009e0e:	b570      	push	{r4, r5, r6, lr}
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	0006      	movs	r6, r0
 8009e14:	000c      	movs	r4, r1
 8009e16:	2d00      	cmp	r5, #0
 8009e18:	d005      	beq.n	8009e26 <__swsetup_r+0x1a>
 8009e1a:	69ab      	ldr	r3, [r5, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <__swsetup_r+0x1a>
 8009e20:	0028      	movs	r0, r5
 8009e22:	f7fe fb0b 	bl	800843c <__sinit>
 8009e26:	4b32      	ldr	r3, [pc, #200]	; (8009ef0 <__swsetup_r+0xe4>)
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	d10f      	bne.n	8009e4c <__swsetup_r+0x40>
 8009e2c:	686c      	ldr	r4, [r5, #4]
 8009e2e:	230c      	movs	r3, #12
 8009e30:	5ee2      	ldrsh	r2, [r4, r3]
 8009e32:	b293      	uxth	r3, r2
 8009e34:	0711      	lsls	r1, r2, #28
 8009e36:	d42d      	bmi.n	8009e94 <__swsetup_r+0x88>
 8009e38:	06d9      	lsls	r1, r3, #27
 8009e3a:	d411      	bmi.n	8009e60 <__swsetup_r+0x54>
 8009e3c:	2309      	movs	r3, #9
 8009e3e:	2001      	movs	r0, #1
 8009e40:	6033      	str	r3, [r6, #0]
 8009e42:	3337      	adds	r3, #55	; 0x37
 8009e44:	4313      	orrs	r3, r2
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	4240      	negs	r0, r0
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}
 8009e4c:	4b29      	ldr	r3, [pc, #164]	; (8009ef4 <__swsetup_r+0xe8>)
 8009e4e:	429c      	cmp	r4, r3
 8009e50:	d101      	bne.n	8009e56 <__swsetup_r+0x4a>
 8009e52:	68ac      	ldr	r4, [r5, #8]
 8009e54:	e7eb      	b.n	8009e2e <__swsetup_r+0x22>
 8009e56:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <__swsetup_r+0xec>)
 8009e58:	429c      	cmp	r4, r3
 8009e5a:	d1e8      	bne.n	8009e2e <__swsetup_r+0x22>
 8009e5c:	68ec      	ldr	r4, [r5, #12]
 8009e5e:	e7e6      	b.n	8009e2e <__swsetup_r+0x22>
 8009e60:	075b      	lsls	r3, r3, #29
 8009e62:	d513      	bpl.n	8009e8c <__swsetup_r+0x80>
 8009e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e66:	2900      	cmp	r1, #0
 8009e68:	d008      	beq.n	8009e7c <__swsetup_r+0x70>
 8009e6a:	0023      	movs	r3, r4
 8009e6c:	3344      	adds	r3, #68	; 0x44
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d002      	beq.n	8009e78 <__swsetup_r+0x6c>
 8009e72:	0030      	movs	r0, r6
 8009e74:	f7fb fd86 	bl	8005984 <_free_r>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7c:	2224      	movs	r2, #36	; 0x24
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	4393      	bics	r3, r2
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	2300      	movs	r3, #0
 8009e86:	6063      	str	r3, [r4, #4]
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	89a2      	ldrh	r2, [r4, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	81a3      	strh	r3, [r4, #12]
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <__swsetup_r+0xa6>
 8009e9a:	21a0      	movs	r1, #160	; 0xa0
 8009e9c:	2280      	movs	r2, #128	; 0x80
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	0089      	lsls	r1, r1, #2
 8009ea2:	0092      	lsls	r2, r2, #2
 8009ea4:	400b      	ands	r3, r1
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d003      	beq.n	8009eb2 <__swsetup_r+0xa6>
 8009eaa:	0021      	movs	r1, r4
 8009eac:	0030      	movs	r0, r6
 8009eae:	f000 f96d 	bl	800a18c <__smakebuf_r>
 8009eb2:	220c      	movs	r2, #12
 8009eb4:	5ea3      	ldrsh	r3, [r4, r2]
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	001a      	movs	r2, r3
 8009eba:	b299      	uxth	r1, r3
 8009ebc:	4002      	ands	r2, r0
 8009ebe:	4203      	tst	r3, r0
 8009ec0:	d00f      	beq.n	8009ee2 <__swsetup_r+0xd6>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	60a2      	str	r2, [r4, #8]
 8009ec6:	6962      	ldr	r2, [r4, #20]
 8009ec8:	4252      	negs	r2, r2
 8009eca:	61a2      	str	r2, [r4, #24]
 8009ecc:	2000      	movs	r0, #0
 8009ece:	6922      	ldr	r2, [r4, #16]
 8009ed0:	4282      	cmp	r2, r0
 8009ed2:	d1ba      	bne.n	8009e4a <__swsetup_r+0x3e>
 8009ed4:	060a      	lsls	r2, r1, #24
 8009ed6:	d5b8      	bpl.n	8009e4a <__swsetup_r+0x3e>
 8009ed8:	2240      	movs	r2, #64	; 0x40
 8009eda:	4313      	orrs	r3, r2
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	3801      	subs	r0, #1
 8009ee0:	e7b3      	b.n	8009e4a <__swsetup_r+0x3e>
 8009ee2:	0788      	lsls	r0, r1, #30
 8009ee4:	d400      	bmi.n	8009ee8 <__swsetup_r+0xdc>
 8009ee6:	6962      	ldr	r2, [r4, #20]
 8009ee8:	60a2      	str	r2, [r4, #8]
 8009eea:	e7ef      	b.n	8009ecc <__swsetup_r+0xc0>
 8009eec:	20000024 	.word	0x20000024
 8009ef0:	0800a904 	.word	0x0800a904
 8009ef4:	0800a924 	.word	0x0800a924
 8009ef8:	0800a8e4 	.word	0x0800a8e4

08009efc <__assert_func>:
 8009efc:	b530      	push	{r4, r5, lr}
 8009efe:	0014      	movs	r4, r2
 8009f00:	001a      	movs	r2, r3
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <__assert_func+0x2c>)
 8009f04:	0005      	movs	r5, r0
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	b085      	sub	sp, #20
 8009f0a:	68d8      	ldr	r0, [r3, #12]
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <__assert_func+0x30>)
 8009f0e:	2c00      	cmp	r4, #0
 8009f10:	d101      	bne.n	8009f16 <__assert_func+0x1a>
 8009f12:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <__assert_func+0x34>)
 8009f14:	001c      	movs	r4, r3
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	9100      	str	r1, [sp, #0]
 8009f1a:	002b      	movs	r3, r5
 8009f1c:	4905      	ldr	r1, [pc, #20]	; (8009f34 <__assert_func+0x38>)
 8009f1e:	9402      	str	r4, [sp, #8]
 8009f20:	f000 f8e8 	bl	800a0f4 <fiprintf>
 8009f24:	f000 f9cc 	bl	800a2c0 <abort>
 8009f28:	20000024 	.word	0x20000024
 8009f2c:	0800ab2d 	.word	0x0800ab2d
 8009f30:	0800ab68 	.word	0x0800ab68
 8009f34:	0800ab3a 	.word	0x0800ab3a

08009f38 <_close_r>:
 8009f38:	2300      	movs	r3, #0
 8009f3a:	b570      	push	{r4, r5, r6, lr}
 8009f3c:	4d06      	ldr	r5, [pc, #24]	; (8009f58 <_close_r+0x20>)
 8009f3e:	0004      	movs	r4, r0
 8009f40:	0008      	movs	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f9 fa0b 	bl	800335e <_close>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d103      	bne.n	8009f54 <_close_r+0x1c>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d000      	beq.n	8009f54 <_close_r+0x1c>
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	200005ac 	.word	0x200005ac

08009f5c <__sflush_r>:
 8009f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f5e:	898b      	ldrh	r3, [r1, #12]
 8009f60:	0005      	movs	r5, r0
 8009f62:	000c      	movs	r4, r1
 8009f64:	071a      	lsls	r2, r3, #28
 8009f66:	d45f      	bmi.n	800a028 <__sflush_r+0xcc>
 8009f68:	684a      	ldr	r2, [r1, #4]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	dc04      	bgt.n	8009f78 <__sflush_r+0x1c>
 8009f6e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	dc01      	bgt.n	8009f78 <__sflush_r+0x1c>
 8009f74:	2000      	movs	r0, #0
 8009f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f78:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009f7a:	2f00      	cmp	r7, #0
 8009f7c:	d0fa      	beq.n	8009f74 <__sflush_r+0x18>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2180      	movs	r1, #128	; 0x80
 8009f82:	682e      	ldr	r6, [r5, #0]
 8009f84:	602a      	str	r2, [r5, #0]
 8009f86:	001a      	movs	r2, r3
 8009f88:	0149      	lsls	r1, r1, #5
 8009f8a:	400a      	ands	r2, r1
 8009f8c:	420b      	tst	r3, r1
 8009f8e:	d034      	beq.n	8009ffa <__sflush_r+0x9e>
 8009f90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	075b      	lsls	r3, r3, #29
 8009f96:	d506      	bpl.n	8009fa6 <__sflush_r+0x4a>
 8009f98:	6863      	ldr	r3, [r4, #4]
 8009f9a:	1ac0      	subs	r0, r0, r3
 8009f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <__sflush_r+0x4a>
 8009fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fa4:	1ac0      	subs	r0, r0, r3
 8009fa6:	0002      	movs	r2, r0
 8009fa8:	6a21      	ldr	r1, [r4, #32]
 8009faa:	2300      	movs	r3, #0
 8009fac:	0028      	movs	r0, r5
 8009fae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009fb0:	47b8      	blx	r7
 8009fb2:	89a1      	ldrh	r1, [r4, #12]
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d106      	bne.n	8009fc6 <__sflush_r+0x6a>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	2b1d      	cmp	r3, #29
 8009fbc:	d831      	bhi.n	800a022 <__sflush_r+0xc6>
 8009fbe:	4a2c      	ldr	r2, [pc, #176]	; (800a070 <__sflush_r+0x114>)
 8009fc0:	40da      	lsrs	r2, r3
 8009fc2:	07d3      	lsls	r3, r2, #31
 8009fc4:	d52d      	bpl.n	800a022 <__sflush_r+0xc6>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	04cb      	lsls	r3, r1, #19
 8009fd0:	d505      	bpl.n	8009fde <__sflush_r+0x82>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d102      	bne.n	8009fdc <__sflush_r+0x80>
 8009fd6:	682b      	ldr	r3, [r5, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d100      	bne.n	8009fde <__sflush_r+0x82>
 8009fdc:	6560      	str	r0, [r4, #84]	; 0x54
 8009fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fe0:	602e      	str	r6, [r5, #0]
 8009fe2:	2900      	cmp	r1, #0
 8009fe4:	d0c6      	beq.n	8009f74 <__sflush_r+0x18>
 8009fe6:	0023      	movs	r3, r4
 8009fe8:	3344      	adds	r3, #68	; 0x44
 8009fea:	4299      	cmp	r1, r3
 8009fec:	d002      	beq.n	8009ff4 <__sflush_r+0x98>
 8009fee:	0028      	movs	r0, r5
 8009ff0:	f7fb fcc8 	bl	8005984 <_free_r>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	6360      	str	r0, [r4, #52]	; 0x34
 8009ff8:	e7bd      	b.n	8009f76 <__sflush_r+0x1a>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	0028      	movs	r0, r5
 8009ffe:	6a21      	ldr	r1, [r4, #32]
 800a000:	47b8      	blx	r7
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d1c5      	bne.n	8009f92 <__sflush_r+0x36>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0c2      	beq.n	8009f92 <__sflush_r+0x36>
 800a00c:	2b1d      	cmp	r3, #29
 800a00e:	d001      	beq.n	800a014 <__sflush_r+0xb8>
 800a010:	2b16      	cmp	r3, #22
 800a012:	d101      	bne.n	800a018 <__sflush_r+0xbc>
 800a014:	602e      	str	r6, [r5, #0]
 800a016:	e7ad      	b.n	8009f74 <__sflush_r+0x18>
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	89a2      	ldrh	r2, [r4, #12]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	e7a9      	b.n	8009f76 <__sflush_r+0x1a>
 800a022:	2340      	movs	r3, #64	; 0x40
 800a024:	430b      	orrs	r3, r1
 800a026:	e7fa      	b.n	800a01e <__sflush_r+0xc2>
 800a028:	690f      	ldr	r7, [r1, #16]
 800a02a:	2f00      	cmp	r7, #0
 800a02c:	d0a2      	beq.n	8009f74 <__sflush_r+0x18>
 800a02e:	680a      	ldr	r2, [r1, #0]
 800a030:	600f      	str	r7, [r1, #0]
 800a032:	1bd2      	subs	r2, r2, r7
 800a034:	9201      	str	r2, [sp, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	079b      	lsls	r3, r3, #30
 800a03a:	d100      	bne.n	800a03e <__sflush_r+0xe2>
 800a03c:	694a      	ldr	r2, [r1, #20]
 800a03e:	60a2      	str	r2, [r4, #8]
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	dc00      	bgt.n	800a048 <__sflush_r+0xec>
 800a046:	e795      	b.n	8009f74 <__sflush_r+0x18>
 800a048:	003a      	movs	r2, r7
 800a04a:	0028      	movs	r0, r5
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	6a21      	ldr	r1, [r4, #32]
 800a050:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a052:	47b0      	blx	r6
 800a054:	2800      	cmp	r0, #0
 800a056:	dc06      	bgt.n	800a066 <__sflush_r+0x10a>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	2001      	movs	r0, #1
 800a05c:	89a2      	ldrh	r2, [r4, #12]
 800a05e:	4240      	negs	r0, r0
 800a060:	4313      	orrs	r3, r2
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	e787      	b.n	8009f76 <__sflush_r+0x1a>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	183f      	adds	r7, r7, r0
 800a06a:	1a1b      	subs	r3, r3, r0
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	e7e7      	b.n	800a040 <__sflush_r+0xe4>
 800a070:	20400001 	.word	0x20400001

0800a074 <_fflush_r>:
 800a074:	690b      	ldr	r3, [r1, #16]
 800a076:	b570      	push	{r4, r5, r6, lr}
 800a078:	0005      	movs	r5, r0
 800a07a:	000c      	movs	r4, r1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d102      	bne.n	800a086 <_fflush_r+0x12>
 800a080:	2500      	movs	r5, #0
 800a082:	0028      	movs	r0, r5
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	2800      	cmp	r0, #0
 800a088:	d004      	beq.n	800a094 <_fflush_r+0x20>
 800a08a:	6983      	ldr	r3, [r0, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <_fflush_r+0x20>
 800a090:	f7fe f9d4 	bl	800843c <__sinit>
 800a094:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <_fflush_r+0x74>)
 800a096:	429c      	cmp	r4, r3
 800a098:	d11b      	bne.n	800a0d2 <_fflush_r+0x5e>
 800a09a:	686c      	ldr	r4, [r5, #4]
 800a09c:	220c      	movs	r2, #12
 800a09e:	5ea3      	ldrsh	r3, [r4, r2]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0ed      	beq.n	800a080 <_fflush_r+0xc>
 800a0a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0a6:	07d2      	lsls	r2, r2, #31
 800a0a8:	d404      	bmi.n	800a0b4 <_fflush_r+0x40>
 800a0aa:	059b      	lsls	r3, r3, #22
 800a0ac:	d402      	bmi.n	800a0b4 <_fflush_r+0x40>
 800a0ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0b0:	f7fe fddd 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800a0b4:	0028      	movs	r0, r5
 800a0b6:	0021      	movs	r1, r4
 800a0b8:	f7ff ff50 	bl	8009f5c <__sflush_r>
 800a0bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0be:	0005      	movs	r5, r0
 800a0c0:	07db      	lsls	r3, r3, #31
 800a0c2:	d4de      	bmi.n	800a082 <_fflush_r+0xe>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	059b      	lsls	r3, r3, #22
 800a0c8:	d4db      	bmi.n	800a082 <_fflush_r+0xe>
 800a0ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0cc:	f7fe fdd0 	bl	8008c70 <__retarget_lock_release_recursive>
 800a0d0:	e7d7      	b.n	800a082 <_fflush_r+0xe>
 800a0d2:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <_fflush_r+0x78>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	d101      	bne.n	800a0dc <_fflush_r+0x68>
 800a0d8:	68ac      	ldr	r4, [r5, #8]
 800a0da:	e7df      	b.n	800a09c <_fflush_r+0x28>
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <_fflush_r+0x7c>)
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	d1dc      	bne.n	800a09c <_fflush_r+0x28>
 800a0e2:	68ec      	ldr	r4, [r5, #12]
 800a0e4:	e7da      	b.n	800a09c <_fflush_r+0x28>
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	0800a904 	.word	0x0800a904
 800a0ec:	0800a924 	.word	0x0800a924
 800a0f0:	0800a8e4 	.word	0x0800a8e4

0800a0f4 <fiprintf>:
 800a0f4:	b40e      	push	{r1, r2, r3}
 800a0f6:	b503      	push	{r0, r1, lr}
 800a0f8:	0001      	movs	r1, r0
 800a0fa:	ab03      	add	r3, sp, #12
 800a0fc:	4804      	ldr	r0, [pc, #16]	; (800a110 <fiprintf+0x1c>)
 800a0fe:	cb04      	ldmia	r3!, {r2}
 800a100:	6800      	ldr	r0, [r0, #0]
 800a102:	9301      	str	r3, [sp, #4]
 800a104:	f7ff fc6c 	bl	80099e0 <_vfiprintf_r>
 800a108:	b002      	add	sp, #8
 800a10a:	bc08      	pop	{r3}
 800a10c:	b003      	add	sp, #12
 800a10e:	4718      	bx	r3
 800a110:	20000024 	.word	0x20000024

0800a114 <_lseek_r>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	0004      	movs	r4, r0
 800a118:	0008      	movs	r0, r1
 800a11a:	0011      	movs	r1, r2
 800a11c:	001a      	movs	r2, r3
 800a11e:	2300      	movs	r3, #0
 800a120:	4d05      	ldr	r5, [pc, #20]	; (800a138 <_lseek_r+0x24>)
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f9 f93c 	bl	80033a0 <_lseek>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d103      	bne.n	800a134 <_lseek_r+0x20>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d000      	beq.n	800a134 <_lseek_r+0x20>
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	bd70      	pop	{r4, r5, r6, pc}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	200005ac 	.word	0x200005ac

0800a13c <__swhatbuf_r>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	000e      	movs	r6, r1
 800a140:	001d      	movs	r5, r3
 800a142:	230e      	movs	r3, #14
 800a144:	5ec9      	ldrsh	r1, [r1, r3]
 800a146:	0014      	movs	r4, r2
 800a148:	b096      	sub	sp, #88	; 0x58
 800a14a:	2900      	cmp	r1, #0
 800a14c:	da08      	bge.n	800a160 <__swhatbuf_r+0x24>
 800a14e:	220c      	movs	r2, #12
 800a150:	5eb3      	ldrsh	r3, [r6, r2]
 800a152:	2200      	movs	r2, #0
 800a154:	602a      	str	r2, [r5, #0]
 800a156:	061b      	lsls	r3, r3, #24
 800a158:	d411      	bmi.n	800a17e <__swhatbuf_r+0x42>
 800a15a:	2380      	movs	r3, #128	; 0x80
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	e00f      	b.n	800a180 <__swhatbuf_r+0x44>
 800a160:	466a      	mov	r2, sp
 800a162:	f000 f8b5 	bl	800a2d0 <_fstat_r>
 800a166:	2800      	cmp	r0, #0
 800a168:	dbf1      	blt.n	800a14e <__swhatbuf_r+0x12>
 800a16a:	23f0      	movs	r3, #240	; 0xf0
 800a16c:	9901      	ldr	r1, [sp, #4]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	4019      	ands	r1, r3
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <__swhatbuf_r+0x4c>)
 800a174:	18c9      	adds	r1, r1, r3
 800a176:	424b      	negs	r3, r1
 800a178:	4159      	adcs	r1, r3
 800a17a:	6029      	str	r1, [r5, #0]
 800a17c:	e7ed      	b.n	800a15a <__swhatbuf_r+0x1e>
 800a17e:	2340      	movs	r3, #64	; 0x40
 800a180:	2000      	movs	r0, #0
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	b016      	add	sp, #88	; 0x58
 800a186:	bd70      	pop	{r4, r5, r6, pc}
 800a188:	ffffe000 	.word	0xffffe000

0800a18c <__smakebuf_r>:
 800a18c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a18e:	2602      	movs	r6, #2
 800a190:	898b      	ldrh	r3, [r1, #12]
 800a192:	0005      	movs	r5, r0
 800a194:	000c      	movs	r4, r1
 800a196:	4233      	tst	r3, r6
 800a198:	d006      	beq.n	800a1a8 <__smakebuf_r+0x1c>
 800a19a:	0023      	movs	r3, r4
 800a19c:	3347      	adds	r3, #71	; 0x47
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	6123      	str	r3, [r4, #16]
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	6163      	str	r3, [r4, #20]
 800a1a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a1a8:	466a      	mov	r2, sp
 800a1aa:	ab01      	add	r3, sp, #4
 800a1ac:	f7ff ffc6 	bl	800a13c <__swhatbuf_r>
 800a1b0:	9900      	ldr	r1, [sp, #0]
 800a1b2:	0007      	movs	r7, r0
 800a1b4:	0028      	movs	r0, r5
 800a1b6:	f7fb fc51 	bl	8005a5c <_malloc_r>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d108      	bne.n	800a1d0 <__smakebuf_r+0x44>
 800a1be:	220c      	movs	r2, #12
 800a1c0:	5ea3      	ldrsh	r3, [r4, r2]
 800a1c2:	059a      	lsls	r2, r3, #22
 800a1c4:	d4ef      	bmi.n	800a1a6 <__smakebuf_r+0x1a>
 800a1c6:	2203      	movs	r2, #3
 800a1c8:	4393      	bics	r3, r2
 800a1ca:	431e      	orrs	r6, r3
 800a1cc:	81a6      	strh	r6, [r4, #12]
 800a1ce:	e7e4      	b.n	800a19a <__smakebuf_r+0xe>
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <__smakebuf_r+0x84>)
 800a1d2:	62ab      	str	r3, [r5, #40]	; 0x28
 800a1d4:	2380      	movs	r3, #128	; 0x80
 800a1d6:	89a2      	ldrh	r2, [r4, #12]
 800a1d8:	6020      	str	r0, [r4, #0]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	6120      	str	r0, [r4, #16]
 800a1e2:	6163      	str	r3, [r4, #20]
 800a1e4:	9b01      	ldr	r3, [sp, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00d      	beq.n	800a206 <__smakebuf_r+0x7a>
 800a1ea:	0028      	movs	r0, r5
 800a1ec:	230e      	movs	r3, #14
 800a1ee:	5ee1      	ldrsh	r1, [r4, r3]
 800a1f0:	f000 f880 	bl	800a2f4 <_isatty_r>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d006      	beq.n	800a206 <__smakebuf_r+0x7a>
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	4393      	bics	r3, r2
 800a1fe:	001a      	movs	r2, r3
 800a200:	2301      	movs	r3, #1
 800a202:	4313      	orrs	r3, r2
 800a204:	81a3      	strh	r3, [r4, #12]
 800a206:	89a0      	ldrh	r0, [r4, #12]
 800a208:	4307      	orrs	r7, r0
 800a20a:	81a7      	strh	r7, [r4, #12]
 800a20c:	e7cb      	b.n	800a1a6 <__smakebuf_r+0x1a>
 800a20e:	46c0      	nop			; (mov r8, r8)
 800a210:	080083c1 	.word	0x080083c1

0800a214 <memmove>:
 800a214:	b510      	push	{r4, lr}
 800a216:	4288      	cmp	r0, r1
 800a218:	d902      	bls.n	800a220 <memmove+0xc>
 800a21a:	188b      	adds	r3, r1, r2
 800a21c:	4298      	cmp	r0, r3
 800a21e:	d303      	bcc.n	800a228 <memmove+0x14>
 800a220:	2300      	movs	r3, #0
 800a222:	e007      	b.n	800a234 <memmove+0x20>
 800a224:	5c8b      	ldrb	r3, [r1, r2]
 800a226:	5483      	strb	r3, [r0, r2]
 800a228:	3a01      	subs	r2, #1
 800a22a:	d2fb      	bcs.n	800a224 <memmove+0x10>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	5ccc      	ldrb	r4, [r1, r3]
 800a230:	54c4      	strb	r4, [r0, r3]
 800a232:	3301      	adds	r3, #1
 800a234:	429a      	cmp	r2, r3
 800a236:	d1fa      	bne.n	800a22e <memmove+0x1a>
 800a238:	e7f8      	b.n	800a22c <memmove+0x18>

0800a23a <_realloc_r>:
 800a23a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a23c:	0007      	movs	r7, r0
 800a23e:	000e      	movs	r6, r1
 800a240:	0014      	movs	r4, r2
 800a242:	2900      	cmp	r1, #0
 800a244:	d105      	bne.n	800a252 <_realloc_r+0x18>
 800a246:	0011      	movs	r1, r2
 800a248:	f7fb fc08 	bl	8005a5c <_malloc_r>
 800a24c:	0005      	movs	r5, r0
 800a24e:	0028      	movs	r0, r5
 800a250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a252:	2a00      	cmp	r2, #0
 800a254:	d103      	bne.n	800a25e <_realloc_r+0x24>
 800a256:	f7fb fb95 	bl	8005984 <_free_r>
 800a25a:	0025      	movs	r5, r4
 800a25c:	e7f7      	b.n	800a24e <_realloc_r+0x14>
 800a25e:	f000 f85b 	bl	800a318 <_malloc_usable_size_r>
 800a262:	9001      	str	r0, [sp, #4]
 800a264:	4284      	cmp	r4, r0
 800a266:	d803      	bhi.n	800a270 <_realloc_r+0x36>
 800a268:	0035      	movs	r5, r6
 800a26a:	0843      	lsrs	r3, r0, #1
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d3ee      	bcc.n	800a24e <_realloc_r+0x14>
 800a270:	0021      	movs	r1, r4
 800a272:	0038      	movs	r0, r7
 800a274:	f7fb fbf2 	bl	8005a5c <_malloc_r>
 800a278:	1e05      	subs	r5, r0, #0
 800a27a:	d0e8      	beq.n	800a24e <_realloc_r+0x14>
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	0022      	movs	r2, r4
 800a280:	429c      	cmp	r4, r3
 800a282:	d900      	bls.n	800a286 <_realloc_r+0x4c>
 800a284:	001a      	movs	r2, r3
 800a286:	0031      	movs	r1, r6
 800a288:	0028      	movs	r0, r5
 800a28a:	f7fe fd0f 	bl	8008cac <memcpy>
 800a28e:	0031      	movs	r1, r6
 800a290:	0038      	movs	r0, r7
 800a292:	f7fb fb77 	bl	8005984 <_free_r>
 800a296:	e7da      	b.n	800a24e <_realloc_r+0x14>

0800a298 <_read_r>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	0004      	movs	r4, r0
 800a29c:	0008      	movs	r0, r1
 800a29e:	0011      	movs	r1, r2
 800a2a0:	001a      	movs	r2, r3
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4d05      	ldr	r5, [pc, #20]	; (800a2bc <_read_r+0x24>)
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f9 f820 	bl	80032ec <_read>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d103      	bne.n	800a2b8 <_read_r+0x20>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d000      	beq.n	800a2b8 <_read_r+0x20>
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	200005ac 	.word	0x200005ac

0800a2c0 <abort>:
 800a2c0:	2006      	movs	r0, #6
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	f000 f85a 	bl	800a37c <raise>
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	f7f9 f803 	bl	80032d4 <_exit>
	...

0800a2d0 <_fstat_r>:
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	b570      	push	{r4, r5, r6, lr}
 800a2d4:	4d06      	ldr	r5, [pc, #24]	; (800a2f0 <_fstat_r+0x20>)
 800a2d6:	0004      	movs	r4, r0
 800a2d8:	0008      	movs	r0, r1
 800a2da:	0011      	movs	r1, r2
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	f7f9 f848 	bl	8003372 <_fstat>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d103      	bne.n	800a2ee <_fstat_r+0x1e>
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d000      	beq.n	800a2ee <_fstat_r+0x1e>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	200005ac 	.word	0x200005ac

0800a2f4 <_isatty_r>:
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	b570      	push	{r4, r5, r6, lr}
 800a2f8:	4d06      	ldr	r5, [pc, #24]	; (800a314 <_isatty_r+0x20>)
 800a2fa:	0004      	movs	r4, r0
 800a2fc:	0008      	movs	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7f9 f845 	bl	800338e <_isatty>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d103      	bne.n	800a310 <_isatty_r+0x1c>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d000      	beq.n	800a310 <_isatty_r+0x1c>
 800a30e:	6023      	str	r3, [r4, #0]
 800a310:	bd70      	pop	{r4, r5, r6, pc}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	200005ac 	.word	0x200005ac

0800a318 <_malloc_usable_size_r>:
 800a318:	1f0b      	subs	r3, r1, #4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	1f18      	subs	r0, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	da01      	bge.n	800a326 <_malloc_usable_size_r+0xe>
 800a322:	580b      	ldr	r3, [r1, r0]
 800a324:	18c0      	adds	r0, r0, r3
 800a326:	4770      	bx	lr

0800a328 <_raise_r>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	0004      	movs	r4, r0
 800a32c:	000d      	movs	r5, r1
 800a32e:	291f      	cmp	r1, #31
 800a330:	d904      	bls.n	800a33c <_raise_r+0x14>
 800a332:	2316      	movs	r3, #22
 800a334:	6003      	str	r3, [r0, #0]
 800a336:	2001      	movs	r0, #1
 800a338:	4240      	negs	r0, r0
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <_raise_r+0x24>
 800a342:	008a      	lsls	r2, r1, #2
 800a344:	189b      	adds	r3, r3, r2
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	2a00      	cmp	r2, #0
 800a34a:	d108      	bne.n	800a35e <_raise_r+0x36>
 800a34c:	0020      	movs	r0, r4
 800a34e:	f000 f831 	bl	800a3b4 <_getpid_r>
 800a352:	002a      	movs	r2, r5
 800a354:	0001      	movs	r1, r0
 800a356:	0020      	movs	r0, r4
 800a358:	f000 f81a 	bl	800a390 <_kill_r>
 800a35c:	e7ed      	b.n	800a33a <_raise_r+0x12>
 800a35e:	2000      	movs	r0, #0
 800a360:	2a01      	cmp	r2, #1
 800a362:	d0ea      	beq.n	800a33a <_raise_r+0x12>
 800a364:	1c51      	adds	r1, r2, #1
 800a366:	d103      	bne.n	800a370 <_raise_r+0x48>
 800a368:	2316      	movs	r3, #22
 800a36a:	3001      	adds	r0, #1
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	e7e4      	b.n	800a33a <_raise_r+0x12>
 800a370:	2400      	movs	r4, #0
 800a372:	0028      	movs	r0, r5
 800a374:	601c      	str	r4, [r3, #0]
 800a376:	4790      	blx	r2
 800a378:	0020      	movs	r0, r4
 800a37a:	e7de      	b.n	800a33a <_raise_r+0x12>

0800a37c <raise>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	4b03      	ldr	r3, [pc, #12]	; (800a38c <raise+0x10>)
 800a380:	0001      	movs	r1, r0
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	f7ff ffd0 	bl	800a328 <_raise_r>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	20000024 	.word	0x20000024

0800a390 <_kill_r>:
 800a390:	2300      	movs	r3, #0
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	4d06      	ldr	r5, [pc, #24]	; (800a3b0 <_kill_r+0x20>)
 800a396:	0004      	movs	r4, r0
 800a398:	0008      	movs	r0, r1
 800a39a:	0011      	movs	r1, r2
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	f7f8 ff89 	bl	80032b4 <_kill>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d103      	bne.n	800a3ae <_kill_r+0x1e>
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d000      	beq.n	800a3ae <_kill_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	200005ac 	.word	0x200005ac

0800a3b4 <_getpid_r>:
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	f7f8 ff77 	bl	80032a8 <_getpid>
 800a3ba:	bd10      	pop	{r4, pc}

0800a3bc <_init>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_fini>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr
