
FlashFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a318  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800a3d8  0800a3d8  0001a3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab6c  0800ab6c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab6c  0800ab6c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab6c  0800ab6c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab6c  0800ab6c  0001ab6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab70  0800ab70  0001ab70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ab74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001f8  0800ad6c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800ad6c  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d4  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab6  00000000  00000000  0002c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014226  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb72  00000000  00000000  0004438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bc7e  00000000  00000000  00053f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfb7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  000bfbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a3c0 	.word	0x0800a3c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	0800a3c0 	.word	0x0800a3c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7d 	bl	800133c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecd 	bl	80011ec <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff6f 	bl	800133c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff65 	bl	800133c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef5 	bl	8001270 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feeb 	bl	8001270 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdbd 	bl	800203c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa06 	bl	80018dc <__aeabi_dsub>
 80004d0:	f001 fdb4 	bl	800203c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff6b 	bl	8001404 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fde8 	bl	8002108 <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff62 	bl	8001404 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9c8 	bl	80018dc <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fda1 	bl	80020a8 <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff4b 	bl	8001404 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdc8 	bl	8002108 <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	000d      	movs	r5, r1
 8000592:	0004      	movs	r4, r0
 8000594:	b5c0      	push	{r6, r7, lr}
 8000596:	001f      	movs	r7, r3
 8000598:	0011      	movs	r1, r2
 800059a:	0328      	lsls	r0, r5, #12
 800059c:	0f62      	lsrs	r2, r4, #29
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	4310      	orrs	r0, r2
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	0d52      	lsrs	r2, r2, #21
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	4691      	mov	r9, r2
 80005ac:	0a64      	lsrs	r4, r4, #9
 80005ae:	0ffa      	lsrs	r2, r7, #31
 80005b0:	0f4f      	lsrs	r7, r1, #29
 80005b2:	006e      	lsls	r6, r5, #1
 80005b4:	4327      	orrs	r7, r4
 80005b6:	4692      	mov	sl, r2
 80005b8:	46b8      	mov	r8, r7
 80005ba:	0d76      	lsrs	r6, r6, #21
 80005bc:	0fed      	lsrs	r5, r5, #31
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	4295      	cmp	r5, r2
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e099      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c6:	464c      	mov	r4, r9
 80005c8:	1b34      	subs	r4, r6, r4
 80005ca:	46a4      	mov	ip, r4
 80005cc:	2c00      	cmp	r4, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e07c      	b.n	80006cc <__aeabi_dadd+0x144>
 80005d2:	464a      	mov	r2, r9
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x1c4>
 80005da:	4ac5      	ldr	r2, [pc, #788]	; (80008f0 <__aeabi_dadd+0x368>)
 80005dc:	4296      	cmp	r6, r2
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x5a>
 80005e0:	e11c      	b.n	800081c <__aeabi_dadd+0x294>
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	003c      	movs	r4, r7
 80005e6:	0412      	lsls	r2, r2, #16
 80005e8:	4314      	orrs	r4, r2
 80005ea:	46a0      	mov	r8, r4
 80005ec:	4662      	mov	r2, ip
 80005ee:	2a38      	cmp	r2, #56	; 0x38
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x6c>
 80005f2:	e161      	b.n	80008b8 <__aeabi_dadd+0x330>
 80005f4:	2a1f      	cmp	r2, #31
 80005f6:	dd00      	ble.n	80005fa <__aeabi_dadd+0x72>
 80005f8:	e1cc      	b.n	8000994 <__aeabi_dadd+0x40c>
 80005fa:	4664      	mov	r4, ip
 80005fc:	2220      	movs	r2, #32
 80005fe:	1b12      	subs	r2, r2, r4
 8000600:	4644      	mov	r4, r8
 8000602:	4094      	lsls	r4, r2
 8000604:	000f      	movs	r7, r1
 8000606:	46a1      	mov	r9, r4
 8000608:	4664      	mov	r4, ip
 800060a:	4091      	lsls	r1, r2
 800060c:	40e7      	lsrs	r7, r4
 800060e:	464c      	mov	r4, r9
 8000610:	1e4a      	subs	r2, r1, #1
 8000612:	4191      	sbcs	r1, r2
 8000614:	433c      	orrs	r4, r7
 8000616:	4642      	mov	r2, r8
 8000618:	4321      	orrs	r1, r4
 800061a:	4664      	mov	r4, ip
 800061c:	40e2      	lsrs	r2, r4
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	1a5c      	subs	r4, r3, r1
 8000622:	42a3      	cmp	r3, r4
 8000624:	419b      	sbcs	r3, r3
 8000626:	425f      	negs	r7, r3
 8000628:	1bc7      	subs	r7, r0, r7
 800062a:	023b      	lsls	r3, r7, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0xa8>
 800062e:	e0d0      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000630:	027f      	lsls	r7, r7, #9
 8000632:	0a7f      	lsrs	r7, r7, #9
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0xb2>
 8000638:	e0ff      	b.n	800083a <__aeabi_dadd+0x2b2>
 800063a:	0038      	movs	r0, r7
 800063c:	f001 fe12 	bl	8002264 <__clzsi2>
 8000640:	0001      	movs	r1, r0
 8000642:	3908      	subs	r1, #8
 8000644:	2320      	movs	r3, #32
 8000646:	0022      	movs	r2, r4
 8000648:	1a5b      	subs	r3, r3, r1
 800064a:	408f      	lsls	r7, r1
 800064c:	40da      	lsrs	r2, r3
 800064e:	408c      	lsls	r4, r1
 8000650:	4317      	orrs	r7, r2
 8000652:	42b1      	cmp	r1, r6
 8000654:	da00      	bge.n	8000658 <__aeabi_dadd+0xd0>
 8000656:	e0ff      	b.n	8000858 <__aeabi_dadd+0x2d0>
 8000658:	1b89      	subs	r1, r1, r6
 800065a:	1c4b      	adds	r3, r1, #1
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd00      	ble.n	8000662 <__aeabi_dadd+0xda>
 8000660:	e0a8      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000662:	2220      	movs	r2, #32
 8000664:	0039      	movs	r1, r7
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0020      	movs	r0, r4
 800066a:	4094      	lsls	r4, r2
 800066c:	4091      	lsls	r1, r2
 800066e:	40d8      	lsrs	r0, r3
 8000670:	1e62      	subs	r2, r4, #1
 8000672:	4194      	sbcs	r4, r2
 8000674:	40df      	lsrs	r7, r3
 8000676:	2600      	movs	r6, #0
 8000678:	4301      	orrs	r1, r0
 800067a:	430c      	orrs	r4, r1
 800067c:	0763      	lsls	r3, r4, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d23      	adds	r3, r4, #4
 800068a:	42a3      	cmp	r3, r4
 800068c:	41a4      	sbcs	r4, r4
 800068e:	4264      	negs	r4, r4
 8000690:	193f      	adds	r7, r7, r4
 8000692:	001c      	movs	r4, r3
 8000694:	023b      	lsls	r3, r7, #8
 8000696:	d400      	bmi.n	800069a <__aeabi_dadd+0x112>
 8000698:	e09e      	b.n	80007d8 <__aeabi_dadd+0x250>
 800069a:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <__aeabi_dadd+0x368>)
 800069c:	3601      	adds	r6, #1
 800069e:	429e      	cmp	r6, r3
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x11c>
 80006a2:	e0b7      	b.n	8000814 <__aeabi_dadd+0x28c>
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a6:	08e4      	lsrs	r4, r4, #3
 80006a8:	4017      	ands	r7, r2
 80006aa:	077b      	lsls	r3, r7, #29
 80006ac:	0571      	lsls	r1, r6, #21
 80006ae:	027f      	lsls	r7, r7, #9
 80006b0:	4323      	orrs	r3, r4
 80006b2:	0b3f      	lsrs	r7, r7, #12
 80006b4:	0d4a      	lsrs	r2, r1, #21
 80006b6:	0512      	lsls	r2, r2, #20
 80006b8:	433a      	orrs	r2, r7
 80006ba:	07ed      	lsls	r5, r5, #31
 80006bc:	432a      	orrs	r2, r5
 80006be:	0018      	movs	r0, r3
 80006c0:	0011      	movs	r1, r2
 80006c2:	bce0      	pop	{r5, r6, r7}
 80006c4:	46ba      	mov	sl, r7
 80006c6:	46b1      	mov	r9, r6
 80006c8:	46a8      	mov	r8, r5
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d04b      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 80006d0:	464c      	mov	r4, r9
 80006d2:	1ba4      	subs	r4, r4, r6
 80006d4:	46a4      	mov	ip, r4
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x154>
 80006da:	e123      	b.n	8000924 <__aeabi_dadd+0x39c>
 80006dc:	0004      	movs	r4, r0
 80006de:	431c      	orrs	r4, r3
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x15c>
 80006e2:	e1af      	b.n	8000a44 <__aeabi_dadd+0x4bc>
 80006e4:	4662      	mov	r2, ip
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e215      	b.n	8000b1a <__aeabi_dadd+0x592>
 80006ee:	4d80      	ldr	r5, [pc, #512]	; (80008f0 <__aeabi_dadd+0x368>)
 80006f0:	45ac      	cmp	ip, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e1c8      	b.n	8000a88 <__aeabi_dadd+0x500>
 80006f6:	46a4      	mov	ip, r4
 80006f8:	e11b      	b.n	8000932 <__aeabi_dadd+0x3aa>
 80006fa:	464a      	mov	r2, r9
 80006fc:	1ab2      	subs	r2, r6, r2
 80006fe:	4694      	mov	ip, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x17e>
 8000704:	e0ac      	b.n	8000860 <__aeabi_dadd+0x2d8>
 8000706:	464a      	mov	r2, r9
 8000708:	2a00      	cmp	r2, #0
 800070a:	d043      	beq.n	8000794 <__aeabi_dadd+0x20c>
 800070c:	4a78      	ldr	r2, [pc, #480]	; (80008f0 <__aeabi_dadd+0x368>)
 800070e:	4296      	cmp	r6, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x18c>
 8000712:	e1af      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	003c      	movs	r4, r7
 8000718:	0412      	lsls	r2, r2, #16
 800071a:	4314      	orrs	r4, r2
 800071c:	46a0      	mov	r8, r4
 800071e:	4662      	mov	r2, ip
 8000720:	2a38      	cmp	r2, #56	; 0x38
 8000722:	dc67      	bgt.n	80007f4 <__aeabi_dadd+0x26c>
 8000724:	2a1f      	cmp	r2, #31
 8000726:	dc00      	bgt.n	800072a <__aeabi_dadd+0x1a2>
 8000728:	e15f      	b.n	80009ea <__aeabi_dadd+0x462>
 800072a:	4647      	mov	r7, r8
 800072c:	3a20      	subs	r2, #32
 800072e:	40d7      	lsrs	r7, r2
 8000730:	4662      	mov	r2, ip
 8000732:	2a20      	cmp	r2, #32
 8000734:	d005      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000736:	4664      	mov	r4, ip
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4644      	mov	r4, r8
 800073e:	4094      	lsls	r4, r2
 8000740:	4321      	orrs	r1, r4
 8000742:	1e4a      	subs	r2, r1, #1
 8000744:	4191      	sbcs	r1, r2
 8000746:	000c      	movs	r4, r1
 8000748:	433c      	orrs	r4, r7
 800074a:	e057      	b.n	80007fc <__aeabi_dadd+0x274>
 800074c:	003a      	movs	r2, r7
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x1cc>
 8000752:	e105      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000754:	0022      	movs	r2, r4
 8000756:	3a01      	subs	r2, #1
 8000758:	2c01      	cmp	r4, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x1d6>
 800075c:	e182      	b.n	8000a64 <__aeabi_dadd+0x4dc>
 800075e:	4c64      	ldr	r4, [pc, #400]	; (80008f0 <__aeabi_dadd+0x368>)
 8000760:	45a4      	cmp	ip, r4
 8000762:	d05b      	beq.n	800081c <__aeabi_dadd+0x294>
 8000764:	4694      	mov	ip, r2
 8000766:	e741      	b.n	80005ec <__aeabi_dadd+0x64>
 8000768:	4c63      	ldr	r4, [pc, #396]	; (80008f8 <__aeabi_dadd+0x370>)
 800076a:	1c77      	adds	r7, r6, #1
 800076c:	4227      	tst	r7, r4
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x1ea>
 8000770:	e0c4      	b.n	80008fc <__aeabi_dadd+0x374>
 8000772:	0004      	movs	r4, r0
 8000774:	431c      	orrs	r4, r3
 8000776:	2e00      	cmp	r6, #0
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x1f4>
 800077a:	e169      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x1fa>
 8000780:	e1bf      	b.n	8000b02 <__aeabi_dadd+0x57a>
 8000782:	4644      	mov	r4, r8
 8000784:	430c      	orrs	r4, r1
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x202>
 8000788:	e1d0      	b.n	8000b2c <__aeabi_dadd+0x5a4>
 800078a:	0742      	lsls	r2, r0, #29
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	4313      	orrs	r3, r2
 8000790:	08c0      	lsrs	r0, r0, #3
 8000792:	e029      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000794:	003a      	movs	r2, r7
 8000796:	430a      	orrs	r2, r1
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x214>
 800079a:	e170      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 800079c:	4662      	mov	r2, ip
 800079e:	4664      	mov	r4, ip
 80007a0:	3a01      	subs	r2, #1
 80007a2:	2c01      	cmp	r4, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c51      	ldr	r4, [pc, #324]	; (80008f0 <__aeabi_dadd+0x368>)
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e161      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 80007b0:	4694      	mov	ip, r2
 80007b2:	e7b4      	b.n	800071e <__aeabi_dadd+0x196>
 80007b4:	003a      	movs	r2, r7
 80007b6:	391f      	subs	r1, #31
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d003      	beq.n	80007c8 <__aeabi_dadd+0x240>
 80007c0:	2240      	movs	r2, #64	; 0x40
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	409f      	lsls	r7, r3
 80007c6:	433c      	orrs	r4, r7
 80007c8:	1e63      	subs	r3, r4, #1
 80007ca:	419c      	sbcs	r4, r3
 80007cc:	2700      	movs	r7, #0
 80007ce:	2600      	movs	r6, #0
 80007d0:	430c      	orrs	r4, r1
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e753      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007d8:	46b4      	mov	ip, r6
 80007da:	08e4      	lsrs	r4, r4, #3
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	4323      	orrs	r3, r4
 80007e0:	08f8      	lsrs	r0, r7, #3
 80007e2:	4a43      	ldr	r2, [pc, #268]	; (80008f0 <__aeabi_dadd+0x368>)
 80007e4:	4594      	cmp	ip, r2
 80007e6:	d01d      	beq.n	8000824 <__aeabi_dadd+0x29c>
 80007e8:	4662      	mov	r2, ip
 80007ea:	0307      	lsls	r7, r0, #12
 80007ec:	0552      	lsls	r2, r2, #21
 80007ee:	0b3f      	lsrs	r7, r7, #12
 80007f0:	0d52      	lsrs	r2, r2, #21
 80007f2:	e760      	b.n	80006b6 <__aeabi_dadd+0x12e>
 80007f4:	4644      	mov	r4, r8
 80007f6:	430c      	orrs	r4, r1
 80007f8:	1e62      	subs	r2, r4, #1
 80007fa:	4194      	sbcs	r4, r2
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	429c      	cmp	r4, r3
 8000800:	419b      	sbcs	r3, r3
 8000802:	425f      	negs	r7, r3
 8000804:	183f      	adds	r7, r7, r0
 8000806:	023b      	lsls	r3, r7, #8
 8000808:	d5e3      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <__aeabi_dadd+0x368>)
 800080c:	3601      	adds	r6, #1
 800080e:	429e      	cmp	r6, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x28c>
 8000812:	e0b5      	b.n	8000980 <__aeabi_dadd+0x3f8>
 8000814:	0032      	movs	r2, r6
 8000816:	2700      	movs	r7, #0
 8000818:	2300      	movs	r3, #0
 800081a:	e74c      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800081c:	0742      	lsls	r2, r0, #29
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	001a      	movs	r2, r3
 8000826:	4302      	orrs	r2, r0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2a4>
 800082a:	e1e1      	b.n	8000bf0 <__aeabi_dadd+0x668>
 800082c:	2780      	movs	r7, #128	; 0x80
 800082e:	033f      	lsls	r7, r7, #12
 8000830:	4307      	orrs	r7, r0
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <__aeabi_dadd+0x368>)
 8000836:	0b3f      	lsrs	r7, r7, #12
 8000838:	e73d      	b.n	80006b6 <__aeabi_dadd+0x12e>
 800083a:	0020      	movs	r0, r4
 800083c:	f001 fd12 	bl	8002264 <__clzsi2>
 8000840:	0001      	movs	r1, r0
 8000842:	3118      	adds	r1, #24
 8000844:	291f      	cmp	r1, #31
 8000846:	dc00      	bgt.n	800084a <__aeabi_dadd+0x2c2>
 8000848:	e6fc      	b.n	8000644 <__aeabi_dadd+0xbc>
 800084a:	3808      	subs	r0, #8
 800084c:	4084      	lsls	r4, r0
 800084e:	0027      	movs	r7, r4
 8000850:	2400      	movs	r4, #0
 8000852:	42b1      	cmp	r1, r6
 8000854:	db00      	blt.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e6ff      	b.n	8000658 <__aeabi_dadd+0xd0>
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <__aeabi_dadd+0x36c>)
 800085a:	1a76      	subs	r6, r6, r1
 800085c:	4017      	ands	r7, r2
 800085e:	e70d      	b.n	800067c <__aeabi_dadd+0xf4>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d02f      	beq.n	80008c4 <__aeabi_dadd+0x33c>
 8000864:	464a      	mov	r2, r9
 8000866:	1b92      	subs	r2, r2, r6
 8000868:	4694      	mov	ip, r2
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x2e8>
 800086e:	e0ad      	b.n	80009cc <__aeabi_dadd+0x444>
 8000870:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <__aeabi_dadd+0x368>)
 8000872:	4591      	cmp	r9, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x2f0>
 8000876:	e10f      	b.n	8000a98 <__aeabi_dadd+0x510>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0412      	lsls	r2, r2, #16
 800087c:	4310      	orrs	r0, r2
 800087e:	4662      	mov	r2, ip
 8000880:	2a38      	cmp	r2, #56	; 0x38
 8000882:	dd00      	ble.n	8000886 <__aeabi_dadd+0x2fe>
 8000884:	e10f      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000886:	2a1f      	cmp	r2, #31
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x304>
 800088a:	e180      	b.n	8000b8e <__aeabi_dadd+0x606>
 800088c:	4664      	mov	r4, ip
 800088e:	2220      	movs	r2, #32
 8000890:	001e      	movs	r6, r3
 8000892:	1b12      	subs	r2, r2, r4
 8000894:	4667      	mov	r7, ip
 8000896:	0004      	movs	r4, r0
 8000898:	4093      	lsls	r3, r2
 800089a:	4094      	lsls	r4, r2
 800089c:	40fe      	lsrs	r6, r7
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4193      	sbcs	r3, r2
 80008a2:	40f8      	lsrs	r0, r7
 80008a4:	4334      	orrs	r4, r6
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4480      	add	r8, r0
 80008aa:	1864      	adds	r4, r4, r1
 80008ac:	428c      	cmp	r4, r1
 80008ae:	41bf      	sbcs	r7, r7
 80008b0:	427f      	negs	r7, r7
 80008b2:	464e      	mov	r6, r9
 80008b4:	4447      	add	r7, r8
 80008b6:	e7a6      	b.n	8000806 <__aeabi_dadd+0x27e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	430a      	orrs	r2, r1
 80008bc:	0011      	movs	r1, r2
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	4191      	sbcs	r1, r2
 80008c2:	e6ad      	b.n	8000620 <__aeabi_dadd+0x98>
 80008c4:	4c0c      	ldr	r4, [pc, #48]	; (80008f8 <__aeabi_dadd+0x370>)
 80008c6:	1c72      	adds	r2, r6, #1
 80008c8:	4222      	tst	r2, r4
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x346>
 80008cc:	e0a1      	b.n	8000a12 <__aeabi_dadd+0x48a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_dadd+0x546>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e145      	b.n	8000b6a <__aeabi_dadd+0x5e2>
 80008de:	003a      	movs	r2, r7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e146      	b.n	8000b74 <__aeabi_dadd+0x5ec>
 80008e6:	0742      	lsls	r2, r0, #29
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	e77b      	b.n	80007e8 <__aeabi_dadd+0x260>
 80008f0:	000007ff 	.word	0x000007ff
 80008f4:	ff7fffff 	.word	0xff7fffff
 80008f8:	000007fe 	.word	0x000007fe
 80008fc:	4647      	mov	r7, r8
 80008fe:	1a5c      	subs	r4, r3, r1
 8000900:	1bc2      	subs	r2, r0, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	41bf      	sbcs	r7, r7
 8000906:	427f      	negs	r7, r7
 8000908:	46b9      	mov	r9, r7
 800090a:	0017      	movs	r7, r2
 800090c:	464a      	mov	r2, r9
 800090e:	1abf      	subs	r7, r7, r2
 8000910:	023a      	lsls	r2, r7, #8
 8000912:	d500      	bpl.n	8000916 <__aeabi_dadd+0x38e>
 8000914:	e08d      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000916:	0023      	movs	r3, r4
 8000918:	433b      	orrs	r3, r7
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x396>
 800091c:	e68a      	b.n	8000634 <__aeabi_dadd+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e761      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000924:	4cb4      	ldr	r4, [pc, #720]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000926:	45a1      	cmp	r9, r4
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x3a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x500>
 800092c:	2480      	movs	r4, #128	; 0x80
 800092e:	0424      	lsls	r4, r4, #16
 8000930:	4320      	orrs	r0, r4
 8000932:	4664      	mov	r4, ip
 8000934:	2c38      	cmp	r4, #56	; 0x38
 8000936:	dc3d      	bgt.n	80009b4 <__aeabi_dadd+0x42c>
 8000938:	4662      	mov	r2, ip
 800093a:	2c1f      	cmp	r4, #31
 800093c:	dd00      	ble.n	8000940 <__aeabi_dadd+0x3b8>
 800093e:	e0b7      	b.n	8000ab0 <__aeabi_dadd+0x528>
 8000940:	2520      	movs	r5, #32
 8000942:	001e      	movs	r6, r3
 8000944:	1b2d      	subs	r5, r5, r4
 8000946:	0004      	movs	r4, r0
 8000948:	40ab      	lsls	r3, r5
 800094a:	40ac      	lsls	r4, r5
 800094c:	40d6      	lsrs	r6, r2
 800094e:	40d0      	lsrs	r0, r2
 8000950:	4642      	mov	r2, r8
 8000952:	1e5d      	subs	r5, r3, #1
 8000954:	41ab      	sbcs	r3, r5
 8000956:	4334      	orrs	r4, r6
 8000958:	1a12      	subs	r2, r2, r0
 800095a:	4690      	mov	r8, r2
 800095c:	4323      	orrs	r3, r4
 800095e:	e02c      	b.n	80009ba <__aeabi_dadd+0x432>
 8000960:	0742      	lsls	r2, r0, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c0      	lsrs	r0, r0, #3
 8000968:	e73b      	b.n	80007e2 <__aeabi_dadd+0x25a>
 800096a:	185c      	adds	r4, r3, r1
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4440      	add	r0, r8
 8000972:	425b      	negs	r3, r3
 8000974:	18c7      	adds	r7, r0, r3
 8000976:	2601      	movs	r6, #1
 8000978:	023b      	lsls	r3, r7, #8
 800097a:	d400      	bmi.n	800097e <__aeabi_dadd+0x3f6>
 800097c:	e729      	b.n	80007d2 <__aeabi_dadd+0x24a>
 800097e:	2602      	movs	r6, #2
 8000980:	4a9e      	ldr	r2, [pc, #632]	; (8000bfc <__aeabi_dadd+0x674>)
 8000982:	0863      	lsrs	r3, r4, #1
 8000984:	4017      	ands	r7, r2
 8000986:	2201      	movs	r2, #1
 8000988:	4014      	ands	r4, r2
 800098a:	431c      	orrs	r4, r3
 800098c:	07fb      	lsls	r3, r7, #31
 800098e:	431c      	orrs	r4, r3
 8000990:	087f      	lsrs	r7, r7, #1
 8000992:	e673      	b.n	800067c <__aeabi_dadd+0xf4>
 8000994:	4644      	mov	r4, r8
 8000996:	3a20      	subs	r2, #32
 8000998:	40d4      	lsrs	r4, r2
 800099a:	4662      	mov	r2, ip
 800099c:	2a20      	cmp	r2, #32
 800099e:	d005      	beq.n	80009ac <__aeabi_dadd+0x424>
 80009a0:	4667      	mov	r7, ip
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	1bd2      	subs	r2, r2, r7
 80009a6:	4647      	mov	r7, r8
 80009a8:	4097      	lsls	r7, r2
 80009aa:	4339      	orrs	r1, r7
 80009ac:	1e4a      	subs	r2, r1, #1
 80009ae:	4191      	sbcs	r1, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	e635      	b.n	8000620 <__aeabi_dadd+0x98>
 80009b4:	4303      	orrs	r3, r0
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	4183      	sbcs	r3, r0
 80009ba:	1acc      	subs	r4, r1, r3
 80009bc:	42a1      	cmp	r1, r4
 80009be:	41bf      	sbcs	r7, r7
 80009c0:	4643      	mov	r3, r8
 80009c2:	427f      	negs	r7, r7
 80009c4:	4655      	mov	r5, sl
 80009c6:	464e      	mov	r6, r9
 80009c8:	1bdf      	subs	r7, r3, r7
 80009ca:	e62e      	b.n	800062a <__aeabi_dadd+0xa2>
 80009cc:	0002      	movs	r2, r0
 80009ce:	431a      	orrs	r2, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x44c>
 80009d2:	e0bd      	b.n	8000b50 <__aeabi_dadd+0x5c8>
 80009d4:	4662      	mov	r2, ip
 80009d6:	4664      	mov	r4, ip
 80009d8:	3a01      	subs	r2, #1
 80009da:	2c01      	cmp	r4, #1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x458>
 80009de:	e0e5      	b.n	8000bac <__aeabi_dadd+0x624>
 80009e0:	4c85      	ldr	r4, [pc, #532]	; (8000bf8 <__aeabi_dadd+0x670>)
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d058      	beq.n	8000a98 <__aeabi_dadd+0x510>
 80009e6:	4694      	mov	ip, r2
 80009e8:	e749      	b.n	800087e <__aeabi_dadd+0x2f6>
 80009ea:	4664      	mov	r4, ip
 80009ec:	2220      	movs	r2, #32
 80009ee:	1b12      	subs	r2, r2, r4
 80009f0:	4644      	mov	r4, r8
 80009f2:	4094      	lsls	r4, r2
 80009f4:	000f      	movs	r7, r1
 80009f6:	46a1      	mov	r9, r4
 80009f8:	4664      	mov	r4, ip
 80009fa:	4091      	lsls	r1, r2
 80009fc:	40e7      	lsrs	r7, r4
 80009fe:	464c      	mov	r4, r9
 8000a00:	1e4a      	subs	r2, r1, #1
 8000a02:	4191      	sbcs	r1, r2
 8000a04:	433c      	orrs	r4, r7
 8000a06:	4642      	mov	r2, r8
 8000a08:	430c      	orrs	r4, r1
 8000a0a:	4661      	mov	r1, ip
 8000a0c:	40ca      	lsrs	r2, r1
 8000a0e:	1880      	adds	r0, r0, r2
 8000a10:	e6f4      	b.n	80007fc <__aeabi_dadd+0x274>
 8000a12:	4c79      	ldr	r4, [pc, #484]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000a14:	42a2      	cmp	r2, r4
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x492>
 8000a18:	e6fd      	b.n	8000816 <__aeabi_dadd+0x28e>
 8000a1a:	1859      	adds	r1, r3, r1
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	4440      	add	r0, r8
 8000a22:	425f      	negs	r7, r3
 8000a24:	19c7      	adds	r7, r0, r7
 8000a26:	07fc      	lsls	r4, r7, #31
 8000a28:	0849      	lsrs	r1, r1, #1
 8000a2a:	0016      	movs	r6, r2
 8000a2c:	430c      	orrs	r4, r1
 8000a2e:	087f      	lsrs	r7, r7, #1
 8000a30:	e6cf      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	41bf      	sbcs	r7, r7
 8000a38:	4643      	mov	r3, r8
 8000a3a:	427f      	negs	r7, r7
 8000a3c:	1a18      	subs	r0, r3, r0
 8000a3e:	4655      	mov	r5, sl
 8000a40:	1bc7      	subs	r7, r0, r7
 8000a42:	e5f7      	b.n	8000634 <__aeabi_dadd+0xac>
 8000a44:	08c9      	lsrs	r1, r1, #3
 8000a46:	077b      	lsls	r3, r7, #29
 8000a48:	4655      	mov	r5, sl
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	08f8      	lsrs	r0, r7, #3
 8000a4e:	e6c8      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a50:	2c00      	cmp	r4, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_dadd+0x4ce>
 8000a54:	e081      	b.n	8000b5a <__aeabi_dadd+0x5d2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	d115      	bne.n	8000a88 <__aeabi_dadd+0x500>
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	2500      	movs	r5, #0
 8000a60:	0300      	lsls	r0, r0, #12
 8000a62:	e6e3      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a64:	1a5c      	subs	r4, r3, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	419b      	sbcs	r3, r3
 8000a6a:	1bc7      	subs	r7, r0, r7
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	1aff      	subs	r7, r7, r3
 8000a72:	e5da      	b.n	800062a <__aeabi_dadd+0xa2>
 8000a74:	0742      	lsls	r2, r0, #29
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e6d2      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c0      	lsrs	r0, r0, #3
 8000a86:	e6ac      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	075b      	lsls	r3, r3, #29
 8000a90:	4655      	mov	r5, sl
 8000a92:	430b      	orrs	r3, r1
 8000a94:	08d0      	lsrs	r0, r2, #3
 8000a96:	e6c5      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	075b      	lsls	r3, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	08d0      	lsrs	r0, r2, #3
 8000aa4:	e6be      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aa6:	4303      	orrs	r3, r0
 8000aa8:	001c      	movs	r4, r3
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	e6fc      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	3c20      	subs	r4, #32
 8000ab4:	40e2      	lsrs	r2, r4
 8000ab6:	0014      	movs	r4, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d003      	beq.n	8000ac6 <__aeabi_dadd+0x53e>
 8000abe:	2540      	movs	r5, #64	; 0x40
 8000ac0:	1aad      	subs	r5, r5, r2
 8000ac2:	40a8      	lsls	r0, r5
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	1e58      	subs	r0, r3, #1
 8000ac8:	4183      	sbcs	r3, r0
 8000aca:	4323      	orrs	r3, r4
 8000acc:	e775      	b.n	80009ba <__aeabi_dadd+0x432>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d0e2      	beq.n	8000a98 <__aeabi_dadd+0x510>
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	d0cd      	beq.n	8000a74 <__aeabi_dadd+0x4ec>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	0312      	lsls	r2, r2, #12
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d006      	beq.n	8000af6 <__aeabi_dadd+0x56e>
 8000ae8:	08fc      	lsrs	r4, r7, #3
 8000aea:	4214      	tst	r4, r2
 8000aec:	d103      	bne.n	8000af6 <__aeabi_dadd+0x56e>
 8000aee:	0020      	movs	r0, r4
 8000af0:	08cb      	lsrs	r3, r1, #3
 8000af2:	077a      	lsls	r2, r7, #29
 8000af4:	4313      	orrs	r3, r2
 8000af6:	0f5a      	lsrs	r2, r3, #29
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	e690      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b02:	4643      	mov	r3, r8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x582>
 8000b08:	e709      	b.n	800091e <__aeabi_dadd+0x396>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	075b      	lsls	r3, r3, #29
 8000b12:	4655      	mov	r5, sl
 8000b14:	430b      	orrs	r3, r1
 8000b16:	08d0      	lsrs	r0, r2, #3
 8000b18:	e666      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b1a:	1acc      	subs	r4, r1, r3
 8000b1c:	42a1      	cmp	r1, r4
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	1a3f      	subs	r7, r7, r0
 8000b22:	4249      	negs	r1, r1
 8000b24:	4655      	mov	r5, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	1a7f      	subs	r7, r7, r1
 8000b2a:	e57e      	b.n	800062a <__aeabi_dadd+0xa2>
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	1a5c      	subs	r4, r3, r1
 8000b30:	1a87      	subs	r7, r0, r2
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	4252      	negs	r2, r2
 8000b38:	1abf      	subs	r7, r7, r2
 8000b3a:	023a      	lsls	r2, r7, #8
 8000b3c:	d53d      	bpl.n	8000bba <__aeabi_dadd+0x632>
 8000b3e:	1acc      	subs	r4, r1, r3
 8000b40:	42a1      	cmp	r1, r4
 8000b42:	4189      	sbcs	r1, r1
 8000b44:	4643      	mov	r3, r8
 8000b46:	4249      	negs	r1, r1
 8000b48:	1a1f      	subs	r7, r3, r0
 8000b4a:	4655      	mov	r5, sl
 8000b4c:	1a7f      	subs	r7, r7, r1
 8000b4e:	e595      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b50:	077b      	lsls	r3, r7, #29
 8000b52:	08c9      	lsrs	r1, r1, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	08f8      	lsrs	r0, r7, #3
 8000b58:	e643      	b.n	80007e2 <__aeabi_dadd+0x25a>
 8000b5a:	4644      	mov	r4, r8
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	430c      	orrs	r4, r1
 8000b60:	d130      	bne.n	8000bc4 <__aeabi_dadd+0x63c>
 8000b62:	0742      	lsls	r2, r0, #29
 8000b64:	4313      	orrs	r3, r2
 8000b66:	08c0      	lsrs	r0, r0, #3
 8000b68:	e65c      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000b6a:	077b      	lsls	r3, r7, #29
 8000b6c:	08c9      	lsrs	r1, r1, #3
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	08f8      	lsrs	r0, r7, #3
 8000b72:	e639      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b74:	185c      	adds	r4, r3, r1
 8000b76:	429c      	cmp	r4, r3
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4440      	add	r0, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c7      	adds	r7, r0, r3
 8000b80:	023b      	lsls	r3, r7, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x5fe>
 8000b84:	e625      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <__aeabi_dadd+0x674>)
 8000b88:	2601      	movs	r6, #1
 8000b8a:	401f      	ands	r7, r3
 8000b8c:	e621      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b8e:	0004      	movs	r4, r0
 8000b90:	3a20      	subs	r2, #32
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	2a20      	cmp	r2, #32
 8000b98:	d004      	beq.n	8000ba4 <__aeabi_dadd+0x61c>
 8000b9a:	2240      	movs	r2, #64	; 0x40
 8000b9c:	4666      	mov	r6, ip
 8000b9e:	1b92      	subs	r2, r2, r6
 8000ba0:	4090      	lsls	r0, r2
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	4193      	sbcs	r3, r2
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	e67e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bac:	185c      	adds	r4, r3, r1
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	4189      	sbcs	r1, r1
 8000bb2:	4440      	add	r0, r8
 8000bb4:	4249      	negs	r1, r1
 8000bb6:	1847      	adds	r7, r0, r1
 8000bb8:	e6dd      	b.n	8000976 <__aeabi_dadd+0x3ee>
 8000bba:	0023      	movs	r3, r4
 8000bbc:	433b      	orrs	r3, r7
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e6ad      	b.n	800091e <__aeabi_dadd+0x396>
 8000bc2:	e606      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc4:	0744      	lsls	r4, r0, #29
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	08c0      	lsrs	r0, r0, #3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4220      	tst	r0, r4
 8000bd0:	d008      	beq.n	8000be4 <__aeabi_dadd+0x65c>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	08d6      	lsrs	r6, r2, #3
 8000bd6:	4226      	tst	r6, r4
 8000bd8:	d104      	bne.n	8000be4 <__aeabi_dadd+0x65c>
 8000bda:	4655      	mov	r5, sl
 8000bdc:	0030      	movs	r0, r6
 8000bde:	08cb      	lsrs	r3, r1, #3
 8000be0:	0751      	lsls	r1, r2, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	0f5a      	lsrs	r2, r3, #29
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	e619      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <__aeabi_dadd+0x670>)
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	e55e      	b.n	80006b6 <__aeabi_dadd+0x12e>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_ddiv>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	464e      	mov	r6, r9
 8000c06:	4645      	mov	r5, r8
 8000c08:	46de      	mov	lr, fp
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	0005      	movs	r5, r0
 8000c10:	030c      	lsls	r4, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	4692      	mov	sl, r2
 8000c16:	001f      	movs	r7, r3
 8000c18:	b085      	sub	sp, #20
 8000c1a:	0b24      	lsrs	r4, r4, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fce      	lsrs	r6, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0x26>
 8000c24:	e156      	b.n	8000ed4 <__aeabi_ddiv+0x2d4>
 8000c26:	4bd4      	ldr	r3, [pc, #848]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0x2e>
 8000c2c:	e172      	b.n	8000f14 <__aeabi_ddiv+0x314>
 8000c2e:	0f6b      	lsrs	r3, r5, #29
 8000c30:	00e4      	lsls	r4, r4, #3
 8000c32:	431c      	orrs	r4, r3
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4bcf      	ldr	r3, [pc, #828]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c3e:	00ed      	lsls	r5, r5, #3
 8000c40:	469b      	mov	fp, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	4699      	mov	r9, r3
 8000c46:	4483      	add	fp, r0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	007b      	lsls	r3, r7, #1
 8000c4e:	4650      	mov	r0, sl
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	0d5b      	lsrs	r3, r3, #21
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x5c>
 8000c5a:	e11f      	b.n	8000e9c <__aeabi_ddiv+0x29c>
 8000c5c:	4ac6      	ldr	r2, [pc, #792]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0x64>
 8000c62:	e162      	b.n	8000f2a <__aeabi_ddiv+0x32a>
 8000c64:	49c5      	ldr	r1, [pc, #788]	; (8000f7c <__aeabi_ddiv+0x37c>)
 8000c66:	0f42      	lsrs	r2, r0, #29
 8000c68:	468c      	mov	ip, r1
 8000c6a:	00e4      	lsls	r4, r4, #3
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4463      	add	r3, ip
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	1acb      	subs	r3, r1, r3
 8000c78:	4314      	orrs	r4, r2
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	00c2      	lsls	r2, r0, #3
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0033      	movs	r3, r6
 8000c82:	407b      	eors	r3, r7
 8000c84:	469a      	mov	sl, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d827      	bhi.n	8000cdc <__aeabi_ddiv+0xdc>
 8000c8c:	49bc      	ldr	r1, [pc, #752]	; (8000f80 <__aeabi_ddiv+0x380>)
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58cb      	ldr	r3, [r1, r3]
 8000c92:	469f      	mov	pc, r3
 8000c94:	46b2      	mov	sl, r6
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d016      	beq.n	8000cca <__aeabi_ddiv+0xca>
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xa2>
 8000ca0:	e28e      	b.n	80011c0 <__aeabi_ddiv+0x5c0>
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000ca6:	e0d9      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4652      	mov	r2, sl
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	07d2      	lsls	r2, r2, #31
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	0028      	movs	r0, r5
 8000cba:	0019      	movs	r1, r3
 8000cbc:	b005      	add	sp, #20
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	46bb      	mov	fp, r7
 8000cc2:	46b2      	mov	sl, r6
 8000cc4:	46a9      	mov	r9, r5
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2500      	movs	r5, #0
 8000cce:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <__aeabi_ddiv+0x378>)
 8000cd0:	e7ed      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7dc      	b.n	8000c96 <__aeabi_ddiv+0x96>
 8000cdc:	4544      	cmp	r4, r8
 8000cde:	d200      	bcs.n	8000ce2 <__aeabi_ddiv+0xe2>
 8000ce0:	e1c7      	b.n	8001072 <__aeabi_ddiv+0x472>
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_ddiv+0xe6>
 8000ce4:	e1c2      	b.n	800106c <__aeabi_ddiv+0x46c>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	002e      	movs	r6, r5
 8000cee:	4640      	mov	r0, r8
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	44e3      	add	fp, ip
 8000cf4:	0223      	lsls	r3, r4, #8
 8000cf6:	0e14      	lsrs	r4, r2, #24
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	0423      	lsls	r3, r4, #16
 8000d00:	0c1f      	lsrs	r7, r3, #16
 8000d02:	0212      	lsls	r2, r2, #8
 8000d04:	4649      	mov	r1, r9
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	9701      	str	r7, [sp, #4]
 8000d0a:	f7ff fa9f 	bl	800024c <__aeabi_uidivmod>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	437a      	muls	r2, r7
 8000d12:	040b      	lsls	r3, r1, #16
 8000d14:	0c31      	lsrs	r1, r6, #16
 8000d16:	4680      	mov	r8, r0
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	d907      	bls.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	425b      	negs	r3, r3
 8000d22:	469c      	mov	ip, r3
 8000d24:	1909      	adds	r1, r1, r4
 8000d26:	44e0      	add	r8, ip
 8000d28:	428c      	cmp	r4, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x12e>
 8000d2c:	e207      	b.n	800113e <__aeabi_ddiv+0x53e>
 8000d2e:	1a88      	subs	r0, r1, r2
 8000d30:	4649      	mov	r1, r9
 8000d32:	f7ff fa8b 	bl	800024c <__aeabi_uidivmod>
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	468c      	mov	ip, r1
 8000d3a:	0431      	lsls	r1, r6, #16
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	0c09      	lsrs	r1, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0003      	movs	r3, r0
 8000d46:	4331      	orrs	r1, r6
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	d904      	bls.n	8000d56 <__aeabi_ddiv+0x156>
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	428c      	cmp	r4, r1
 8000d52:	d800      	bhi.n	8000d56 <__aeabi_ddiv+0x156>
 8000d54:	e1ed      	b.n	8001132 <__aeabi_ddiv+0x532>
 8000d56:	1a88      	subs	r0, r1, r2
 8000d58:	4642      	mov	r2, r8
 8000d5a:	0412      	lsls	r2, r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4641      	mov	r1, r8
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	040e      	lsls	r6, r1, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	001f      	movs	r7, r3
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c19      	lsrs	r1, r3, #16
 8000d74:	000b      	movs	r3, r1
 8000d76:	4373      	muls	r3, r6
 8000d78:	0c12      	lsrs	r2, r2, #16
 8000d7a:	437e      	muls	r6, r7
 8000d7c:	9103      	str	r1, [sp, #12]
 8000d7e:	4351      	muls	r1, r2
 8000d80:	437a      	muls	r2, r7
 8000d82:	0c1f      	lsrs	r7, r3, #16
 8000d84:	46bc      	mov	ip, r7
 8000d86:	1876      	adds	r6, r6, r1
 8000d88:	4466      	add	r6, ip
 8000d8a:	42b1      	cmp	r1, r6
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x196>
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4462      	add	r2, ip
 8000d96:	0c31      	lsrs	r1, r6, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	0431      	lsls	r1, r6, #16
 8000d9c:	041e      	lsls	r6, r3, #16
 8000d9e:	0c36      	lsrs	r6, r6, #16
 8000da0:	198e      	adds	r6, r1, r6
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d302      	bcc.n	8000dac <__aeabi_ddiv+0x1ac>
 8000da6:	d112      	bne.n	8000dce <__aeabi_ddiv+0x1ce>
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d210      	bcs.n	8000dce <__aeabi_ddiv+0x1ce>
 8000dac:	4643      	mov	r3, r8
 8000dae:	1e59      	subs	r1, r3, #1
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	469c      	mov	ip, r3
 8000db4:	4465      	add	r5, ip
 8000db6:	001f      	movs	r7, r3
 8000db8:	429d      	cmp	r5, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	191b      	adds	r3, r3, r4
 8000dc0:	18c0      	adds	r0, r0, r3
 8000dc2:	4284      	cmp	r4, r0
 8000dc4:	d200      	bcs.n	8000dc8 <__aeabi_ddiv+0x1c8>
 8000dc6:	e1a0      	b.n	800110a <__aeabi_ddiv+0x50a>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x1cc>
 8000dca:	e19b      	b.n	8001104 <__aeabi_ddiv+0x504>
 8000dcc:	4688      	mov	r8, r1
 8000dce:	1bae      	subs	r6, r5, r6
 8000dd0:	42b5      	cmp	r5, r6
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1a80      	subs	r0, r0, r2
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	1b40      	subs	r0, r0, r5
 8000dda:	4284      	cmp	r4, r0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x1e0>
 8000dde:	e1d5      	b.n	800118c <__aeabi_ddiv+0x58c>
 8000de0:	4649      	mov	r1, r9
 8000de2:	f7ff fa33 	bl	800024c <__aeabi_uidivmod>
 8000de6:	9a01      	ldr	r2, [sp, #4]
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c31      	lsrs	r1, r6, #16
 8000dee:	0005      	movs	r5, r0
 8000df0:	4319      	orrs	r1, r3
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d900      	bls.n	8000df8 <__aeabi_ddiv+0x1f8>
 8000df6:	e16c      	b.n	80010d2 <__aeabi_ddiv+0x4d2>
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fa26 	bl	800024c <__aeabi_uidivmod>
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	0436      	lsls	r6, r6, #16
 8000e04:	4342      	muls	r2, r0
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	0c36      	lsrs	r6, r6, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	430e      	orrs	r6, r1
 8000e0e:	42b2      	cmp	r2, r6
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x214>
 8000e12:	e153      	b.n	80010bc <__aeabi_ddiv+0x4bc>
 8000e14:	9803      	ldr	r0, [sp, #12]
 8000e16:	1ab6      	subs	r6, r6, r2
 8000e18:	0002      	movs	r2, r0
 8000e1a:	042d      	lsls	r5, r5, #16
 8000e1c:	431d      	orrs	r5, r3
 8000e1e:	9f02      	ldr	r7, [sp, #8]
 8000e20:	042b      	lsls	r3, r5, #16
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	435a      	muls	r2, r3
 8000e26:	437b      	muls	r3, r7
 8000e28:	469c      	mov	ip, r3
 8000e2a:	0c29      	lsrs	r1, r5, #16
 8000e2c:	4348      	muls	r0, r1
 8000e2e:	0c13      	lsrs	r3, r2, #16
 8000e30:	4484      	add	ip, r0
 8000e32:	4463      	add	r3, ip
 8000e34:	4379      	muls	r1, r7
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d903      	bls.n	8000e42 <__aeabi_ddiv+0x242>
 8000e3a:	2080      	movs	r0, #128	; 0x80
 8000e3c:	0240      	lsls	r0, r0, #9
 8000e3e:	4684      	mov	ip, r0
 8000e40:	4461      	add	r1, ip
 8000e42:	0c18      	lsrs	r0, r3, #16
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	041b      	lsls	r3, r3, #16
 8000e48:	0c12      	lsrs	r2, r2, #16
 8000e4a:	1841      	adds	r1, r0, r1
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d200      	bcs.n	8000e54 <__aeabi_ddiv+0x254>
 8000e52:	e0ff      	b.n	8001054 <__aeabi_ddiv+0x454>
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x258>
 8000e56:	e0fa      	b.n	800104e <__aeabi_ddiv+0x44e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	431d      	orrs	r5, r3
 8000e5c:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <__aeabi_ddiv+0x384>)
 8000e5e:	445a      	add	r2, fp
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_ddiv+0x266>
 8000e64:	e0aa      	b.n	8000fbc <__aeabi_ddiv+0x3bc>
 8000e66:	076b      	lsls	r3, r5, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x26c>
 8000e6a:	e13d      	b.n	80010e8 <__aeabi_ddiv+0x4e8>
 8000e6c:	08ed      	lsrs	r5, r5, #3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	d506      	bpl.n	8000e82 <__aeabi_ddiv+0x282>
 8000e74:	4642      	mov	r2, r8
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <__aeabi_ddiv+0x388>)
 8000e78:	401a      	ands	r2, r3
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	445a      	add	r2, fp
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <__aeabi_ddiv+0x38c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x28a>
 8000e88:	e71f      	b.n	8000cca <__aeabi_ddiv+0xca>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	075b      	lsls	r3, r3, #29
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	4643      	mov	r3, r8
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	025c      	lsls	r4, r3, #9
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d53      	lsrs	r3, r2, #21
 8000e9a:	e708      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x2a4>
 8000ea2:	e07b      	b.n	8000f9c <__aeabi_ddiv+0x39c>
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2aa>
 8000ea8:	e0fa      	b.n	80010a0 <__aeabi_ddiv+0x4a0>
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f001 f9da 	bl	8002264 <__clzsi2>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	3a0b      	subs	r2, #11
 8000eb4:	231d      	movs	r3, #29
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	4652      	mov	r2, sl
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	408c      	lsls	r4, r1
 8000ec2:	4314      	orrs	r4, r2
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	408a      	lsls	r2, r1
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <__aeabi_ddiv+0x390>)
 8000eca:	4458      	add	r0, fp
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4483      	add	fp, r0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e6d5      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	4698      	mov	r8, r3
 8000eda:	d044      	beq.n	8000f66 <__aeabi_ddiv+0x366>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x2e2>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x480>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f001 f9be 	bl	8002264 <__clzsi2>
 8000ee8:	0001      	movs	r1, r0
 8000eea:	0002      	movs	r2, r0
 8000eec:	390b      	subs	r1, #11
 8000eee:	231d      	movs	r3, #29
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	3808      	subs	r0, #8
 8000efa:	4084      	lsls	r4, r0
 8000efc:	000b      	movs	r3, r1
 8000efe:	464d      	mov	r5, r9
 8000f00:	4323      	orrs	r3, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	4085      	lsls	r5, r0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <__aeabi_ddiv+0x394>)
 8000f08:	1a83      	subs	r3, r0, r2
 8000f0a:	469b      	mov	fp, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4699      	mov	r9, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	e69a      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d11d      	bne.n	8000f58 <__aeabi_ddiv+0x358>
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	4699      	mov	r9, r3
 8000f20:	3b06      	subs	r3, #6
 8000f22:	2500      	movs	r5, #0
 8000f24:	4683      	mov	fp, r0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	e68f      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d109      	bne.n	8000f44 <__aeabi_ddiv+0x344>
 8000f30:	2302      	movs	r3, #2
 8000f32:	4649      	mov	r1, r9
 8000f34:	4319      	orrs	r1, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f38:	4689      	mov	r9, r1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	44e3      	add	fp, ip
 8000f42:	e69d      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f44:	2303      	movs	r3, #3
 8000f46:	464a      	mov	r2, r9
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <__aeabi_ddiv+0x398>)
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4652      	mov	r2, sl
 8000f52:	2003      	movs	r0, #3
 8000f54:	44e3      	add	fp, ip
 8000f56:	e693      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4683      	mov	fp, r0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	e671      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f66:	2304      	movs	r3, #4
 8000f68:	4699      	mov	r9, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	2500      	movs	r5, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	e669      	b.n	8000c4a <__aeabi_ddiv+0x4a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	fffffc01 	.word	0xfffffc01
 8000f80:	0800a3f8 	.word	0x0800a3f8
 8000f84:	000003ff 	.word	0x000003ff
 8000f88:	feffffff 	.word	0xfeffffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	000003f3 	.word	0x000003f3
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	fffff801 	.word	0xfffff801
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	4689      	mov	r9, r1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e66a      	b.n	8000c80 <__aeabi_ddiv+0x80>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	469a      	mov	sl, r3
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	e67a      	b.n	8000cae <__aeabi_ddiv+0xae>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	426d      	negs	r5, r5
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	2b38      	cmp	r3, #56	; 0x38
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_ddiv+0x3c6>
 8000fc4:	e670      	b.n	8000ca8 <__aeabi_ddiv+0xa8>
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	dc00      	bgt.n	8000fcc <__aeabi_ddiv+0x3cc>
 8000fca:	e0bf      	b.n	800114c <__aeabi_ddiv+0x54c>
 8000fcc:	211f      	movs	r1, #31
 8000fce:	4249      	negs	r1, r1
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	40d1      	lsrs	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_ddiv+0x3e6>
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <__aeabi_ddiv+0x5e0>)
 8000fe0:	445b      	add	r3, fp
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	430d      	orrs	r5, r1
 8000fe6:	1e6b      	subs	r3, r5, #1
 8000fe8:	419d      	sbcs	r5, r3
 8000fea:	2307      	movs	r3, #7
 8000fec:	432a      	orrs	r2, r5
 8000fee:	001d      	movs	r5, r3
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4015      	ands	r5, r2
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x3fa>
 8000ff8:	e0d4      	b.n	80011a4 <__aeabi_ddiv+0x5a4>
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4011      	ands	r1, r2
 8001000:	2904      	cmp	r1, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x406>
 8001004:	e0cb      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001006:	1d11      	adds	r1, r2, #4
 8001008:	4291      	cmp	r1, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4252      	negs	r2, r2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	000a      	movs	r2, r1
 8001012:	0219      	lsls	r1, r3, #8
 8001014:	d400      	bmi.n	8001018 <__aeabi_ddiv+0x418>
 8001016:	e0c2      	b.n	800119e <__aeabi_ddiv+0x59e>
 8001018:	2301      	movs	r3, #1
 800101a:	2400      	movs	r4, #0
 800101c:	2500      	movs	r5, #0
 800101e:	e646      	b.n	8000cae <__aeabi_ddiv+0xae>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	4641      	mov	r1, r8
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	4219      	tst	r1, r3
 8001028:	d008      	beq.n	800103c <__aeabi_ddiv+0x43c>
 800102a:	421c      	tst	r4, r3
 800102c:	d106      	bne.n	800103c <__aeabi_ddiv+0x43c>
 800102e:	431c      	orrs	r4, r3
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	46ba      	mov	sl, r7
 8001034:	0015      	movs	r5, r2
 8001036:	4b69      	ldr	r3, [pc, #420]	; (80011dc <__aeabi_ddiv+0x5dc>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e638      	b.n	8000cae <__aeabi_ddiv+0xae>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	4643      	mov	r3, r8
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	431c      	orrs	r4, r3
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	46b2      	mov	sl, r6
 8001048:	4b64      	ldr	r3, [pc, #400]	; (80011dc <__aeabi_ddiv+0x5dc>)
 800104a:	0b24      	lsrs	r4, r4, #12
 800104c:	e62f      	b.n	8000cae <__aeabi_ddiv+0xae>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x454>
 8001052:	e703      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 8001054:	19a6      	adds	r6, r4, r6
 8001056:	1e68      	subs	r0, r5, #1
 8001058:	42a6      	cmp	r6, r4
 800105a:	d200      	bcs.n	800105e <__aeabi_ddiv+0x45e>
 800105c:	e08d      	b.n	800117a <__aeabi_ddiv+0x57a>
 800105e:	428e      	cmp	r6, r1
 8001060:	d200      	bcs.n	8001064 <__aeabi_ddiv+0x464>
 8001062:	e0a3      	b.n	80011ac <__aeabi_ddiv+0x5ac>
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x468>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x5d0>
 8001068:	0005      	movs	r5, r0
 800106a:	e6f5      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800106c:	42aa      	cmp	r2, r5
 800106e:	d900      	bls.n	8001072 <__aeabi_ddiv+0x472>
 8001070:	e639      	b.n	8000ce6 <__aeabi_ddiv+0xe6>
 8001072:	4643      	mov	r3, r8
 8001074:	07de      	lsls	r6, r3, #31
 8001076:	0858      	lsrs	r0, r3, #1
 8001078:	086b      	lsrs	r3, r5, #1
 800107a:	431e      	orrs	r6, r3
 800107c:	07ed      	lsls	r5, r5, #31
 800107e:	e639      	b.n	8000cf4 <__aeabi_ddiv+0xf4>
 8001080:	4648      	mov	r0, r9
 8001082:	f001 f8ef 	bl	8002264 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0002      	movs	r2, r0
 800108a:	3115      	adds	r1, #21
 800108c:	3220      	adds	r2, #32
 800108e:	291c      	cmp	r1, #28
 8001090:	dc00      	bgt.n	8001094 <__aeabi_ddiv+0x494>
 8001092:	e72c      	b.n	8000eee <__aeabi_ddiv+0x2ee>
 8001094:	464b      	mov	r3, r9
 8001096:	3808      	subs	r0, #8
 8001098:	4083      	lsls	r3, r0
 800109a:	2500      	movs	r5, #0
 800109c:	4698      	mov	r8, r3
 800109e:	e732      	b.n	8000f06 <__aeabi_ddiv+0x306>
 80010a0:	f001 f8e0 	bl	8002264 <__clzsi2>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	3215      	adds	r2, #21
 80010aa:	3020      	adds	r0, #32
 80010ac:	2a1c      	cmp	r2, #28
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x4b2>
 80010b0:	e700      	b.n	8000eb4 <__aeabi_ddiv+0x2b4>
 80010b2:	4654      	mov	r4, sl
 80010b4:	3b08      	subs	r3, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	409c      	lsls	r4, r3
 80010ba:	e705      	b.n	8000ec8 <__aeabi_ddiv+0x2c8>
 80010bc:	1936      	adds	r6, r6, r4
 80010be:	3b01      	subs	r3, #1
 80010c0:	42b4      	cmp	r4, r6
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4c6>
 80010c4:	e6a6      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010c6:	42b2      	cmp	r2, r6
 80010c8:	d800      	bhi.n	80010cc <__aeabi_ddiv+0x4cc>
 80010ca:	e6a3      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010cc:	1e83      	subs	r3, r0, #2
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	e6a0      	b.n	8000e14 <__aeabi_ddiv+0x214>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3d01      	subs	r5, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d900      	bls.n	80010dc <__aeabi_ddiv+0x4dc>
 80010da:	e68d      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010dc:	428a      	cmp	r2, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x4e2>
 80010e0:	e68a      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e2:	1e85      	subs	r5, r0, #2
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	e687      	b.n	8000df8 <__aeabi_ddiv+0x1f8>
 80010e8:	230f      	movs	r3, #15
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x4f2>
 80010f0:	e6bc      	b.n	8000e6c <__aeabi_ddiv+0x26c>
 80010f2:	2305      	movs	r3, #5
 80010f4:	425b      	negs	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	419b      	sbcs	r3, r3
 80010fa:	3504      	adds	r5, #4
 80010fc:	425b      	negs	r3, r3
 80010fe:	08ed      	lsrs	r5, r5, #3
 8001100:	4498      	add	r8, r3
 8001102:	e6b4      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 8001104:	42af      	cmp	r7, r5
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x50a>
 8001108:	e660      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 800110a:	4282      	cmp	r2, r0
 800110c:	d804      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 800110e:	d000      	beq.n	8001112 <__aeabi_ddiv+0x512>
 8001110:	e65c      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001112:	42ae      	cmp	r6, r5
 8001114:	d800      	bhi.n	8001118 <__aeabi_ddiv+0x518>
 8001116:	e659      	b.n	8000dcc <__aeabi_ddiv+0x1cc>
 8001118:	2302      	movs	r3, #2
 800111a:	425b      	negs	r3, r3
 800111c:	469c      	mov	ip, r3
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	44e0      	add	r8, ip
 8001122:	469c      	mov	ip, r3
 8001124:	4465      	add	r5, ip
 8001126:	429d      	cmp	r5, r3
 8001128:	419b      	sbcs	r3, r3
 800112a:	425b      	negs	r3, r3
 800112c:	191b      	adds	r3, r3, r4
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	e64d      	b.n	8000dce <__aeabi_ddiv+0x1ce>
 8001132:	428a      	cmp	r2, r1
 8001134:	d800      	bhi.n	8001138 <__aeabi_ddiv+0x538>
 8001136:	e60e      	b.n	8000d56 <__aeabi_ddiv+0x156>
 8001138:	1e83      	subs	r3, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	e60b      	b.n	8000d56 <__aeabi_ddiv+0x156>
 800113e:	428a      	cmp	r2, r1
 8001140:	d800      	bhi.n	8001144 <__aeabi_ddiv+0x544>
 8001142:	e5f4      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	4698      	mov	r8, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	e5f0      	b.n	8000d2e <__aeabi_ddiv+0x12e>
 800114c:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x5e4>)
 800114e:	0028      	movs	r0, r5
 8001150:	4459      	add	r1, fp
 8001152:	408d      	lsls	r5, r1
 8001154:	4642      	mov	r2, r8
 8001156:	408a      	lsls	r2, r1
 8001158:	1e69      	subs	r1, r5, #1
 800115a:	418d      	sbcs	r5, r1
 800115c:	4641      	mov	r1, r8
 800115e:	40d8      	lsrs	r0, r3
 8001160:	40d9      	lsrs	r1, r3
 8001162:	4302      	orrs	r2, r0
 8001164:	432a      	orrs	r2, r5
 8001166:	000b      	movs	r3, r1
 8001168:	0751      	lsls	r1, r2, #29
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x56e>
 800116c:	e751      	b.n	8001012 <__aeabi_ddiv+0x412>
 800116e:	210f      	movs	r1, #15
 8001170:	4011      	ands	r1, r2
 8001172:	2904      	cmp	r1, #4
 8001174:	d000      	beq.n	8001178 <__aeabi_ddiv+0x578>
 8001176:	e746      	b.n	8001006 <__aeabi_ddiv+0x406>
 8001178:	e74b      	b.n	8001012 <__aeabi_ddiv+0x412>
 800117a:	0005      	movs	r5, r0
 800117c:	428e      	cmp	r6, r1
 800117e:	d000      	beq.n	8001182 <__aeabi_ddiv+0x582>
 8001180:	e66a      	b.n	8000e58 <__aeabi_ddiv+0x258>
 8001182:	9a00      	ldr	r2, [sp, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d000      	beq.n	800118a <__aeabi_ddiv+0x58a>
 8001188:	e666      	b.n	8000e58 <__aeabi_ddiv+0x258>
 800118a:	e667      	b.n	8000e5c <__aeabi_ddiv+0x25c>
 800118c:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <__aeabi_ddiv+0x5e8>)
 800118e:	445a      	add	r2, fp
 8001190:	2a00      	cmp	r2, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_ddiv+0x596>
 8001194:	e710      	b.n	8000fb8 <__aeabi_ddiv+0x3b8>
 8001196:	2301      	movs	r3, #1
 8001198:	2500      	movs	r5, #0
 800119a:	4498      	add	r8, r3
 800119c:	e667      	b.n	8000e6e <__aeabi_ddiv+0x26e>
 800119e:	075d      	lsls	r5, r3, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	0b1c      	lsrs	r4, r3, #12
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	2300      	movs	r3, #0
 80011a8:	4315      	orrs	r5, r2
 80011aa:	e580      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011ac:	9800      	ldr	r0, [sp, #0]
 80011ae:	3d02      	subs	r5, #2
 80011b0:	0042      	lsls	r2, r0, #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	41bf      	sbcs	r7, r7
 80011b6:	427f      	negs	r7, r7
 80011b8:	193c      	adds	r4, r7, r4
 80011ba:	1936      	adds	r6, r6, r4
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	e7dd      	b.n	800117c <__aeabi_ddiv+0x57c>
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	4643      	mov	r3, r8
 80011c4:	0324      	lsls	r4, r4, #12
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__aeabi_ddiv+0x5dc>)
 80011cc:	0b24      	lsrs	r4, r4, #12
 80011ce:	e56e      	b.n	8000cae <__aeabi_ddiv+0xae>
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3ea      	bcc.n	80011ac <__aeabi_ddiv+0x5ac>
 80011d6:	0005      	movs	r5, r0
 80011d8:	e7d3      	b.n	8001182 <__aeabi_ddiv+0x582>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	0000043e 	.word	0x0000043e
 80011e4:	0000041e 	.word	0x0000041e
 80011e8:	000003ff 	.word	0x000003ff

080011ec <__eqdf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464e      	mov	r6, r9
 80011f0:	4645      	mov	r5, r8
 80011f2:	46de      	mov	lr, fp
 80011f4:	4657      	mov	r7, sl
 80011f6:	4690      	mov	r8, r2
 80011f8:	b5e0      	push	{r5, r6, r7, lr}
 80011fa:	0017      	movs	r7, r2
 80011fc:	031a      	lsls	r2, r3, #12
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0005      	movs	r5, r0
 8001202:	4684      	mov	ip, r0
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <__eqdf2+0x80>)
 8001206:	030e      	lsls	r6, r1, #12
 8001208:	004c      	lsls	r4, r1, #1
 800120a:	4691      	mov	r9, r2
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	0fdb      	lsrs	r3, r3, #31
 8001210:	469b      	mov	fp, r3
 8001212:	0b36      	lsrs	r6, r6, #12
 8001214:	0d64      	lsrs	r4, r4, #21
 8001216:	0fc9      	lsrs	r1, r1, #31
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	4284      	cmp	r4, r0
 800121c:	d019      	beq.n	8001252 <__eqdf2+0x66>
 800121e:	4282      	cmp	r2, r0
 8001220:	d010      	beq.n	8001244 <__eqdf2+0x58>
 8001222:	2001      	movs	r0, #1
 8001224:	4294      	cmp	r4, r2
 8001226:	d10e      	bne.n	8001246 <__eqdf2+0x5a>
 8001228:	454e      	cmp	r6, r9
 800122a:	d10c      	bne.n	8001246 <__eqdf2+0x5a>
 800122c:	2001      	movs	r0, #1
 800122e:	45c4      	cmp	ip, r8
 8001230:	d109      	bne.n	8001246 <__eqdf2+0x5a>
 8001232:	4559      	cmp	r1, fp
 8001234:	d017      	beq.n	8001266 <__eqdf2+0x7a>
 8001236:	2c00      	cmp	r4, #0
 8001238:	d105      	bne.n	8001246 <__eqdf2+0x5a>
 800123a:	0030      	movs	r0, r6
 800123c:	4328      	orrs	r0, r5
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e000      	b.n	8001246 <__eqdf2+0x5a>
 8001244:	2001      	movs	r0, #1
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	0033      	movs	r3, r6
 8001254:	2001      	movs	r0, #1
 8001256:	432b      	orrs	r3, r5
 8001258:	d1f5      	bne.n	8001246 <__eqdf2+0x5a>
 800125a:	42a2      	cmp	r2, r4
 800125c:	d1f3      	bne.n	8001246 <__eqdf2+0x5a>
 800125e:	464b      	mov	r3, r9
 8001260:	433b      	orrs	r3, r7
 8001262:	d1f0      	bne.n	8001246 <__eqdf2+0x5a>
 8001264:	e7e2      	b.n	800122c <__eqdf2+0x40>
 8001266:	2000      	movs	r0, #0
 8001268:	e7ed      	b.n	8001246 <__eqdf2+0x5a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__gedf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2d      	ldr	r5, [pc, #180]	; (8001338 <__gedf2+0xc8>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d021      	beq.n	80012e2 <__gedf2+0x72>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d013      	beq.n	80012ca <__gedf2+0x5a>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d122      	bne.n	80012ec <__gedf2+0x7c>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <__gedf2+0x42>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d022      	beq.n	80012f8 <__gedf2+0x88>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d010      	beq.n	80012d8 <__gedf2+0x68>
 80012b6:	4281      	cmp	r1, r0
 80012b8:	d022      	beq.n	8001300 <__gedf2+0x90>
 80012ba:	2002      	movs	r0, #2
 80012bc:	3901      	subs	r1, #1
 80012be:	4008      	ands	r0, r1
 80012c0:	3801      	subs	r0, #1
 80012c2:	bcc0      	pop	{r6, r7}
 80012c4:	46b9      	mov	r9, r7
 80012c6:	46b0      	mov	r8, r6
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	464d      	mov	r5, r9
 80012cc:	432e      	orrs	r6, r5
 80012ce:	d129      	bne.n	8001324 <__gedf2+0xb4>
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1f0      	bne.n	80012b6 <__gedf2+0x46>
 80012d4:	433c      	orrs	r4, r7
 80012d6:	d1ee      	bne.n	80012b6 <__gedf2+0x46>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f2      	bne.n	80012c2 <__gedf2+0x52>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7ef      	b.n	80012c2 <__gedf2+0x52>
 80012e2:	003d      	movs	r5, r7
 80012e4:	4325      	orrs	r5, r4
 80012e6:	d11d      	bne.n	8001324 <__gedf2+0xb4>
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0ee      	beq.n	80012ca <__gedf2+0x5a>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e2      	bne.n	80012b6 <__gedf2+0x46>
 80012f0:	464c      	mov	r4, r9
 80012f2:	4326      	orrs	r6, r4
 80012f4:	d1df      	bne.n	80012b6 <__gedf2+0x46>
 80012f6:	e7e0      	b.n	80012ba <__gedf2+0x4a>
 80012f8:	2000      	movs	r0, #0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d0e1      	beq.n	80012c2 <__gedf2+0x52>
 80012fe:	e7dc      	b.n	80012ba <__gedf2+0x4a>
 8001300:	429a      	cmp	r2, r3
 8001302:	dc0a      	bgt.n	800131a <__gedf2+0xaa>
 8001304:	dbe8      	blt.n	80012d8 <__gedf2+0x68>
 8001306:	454f      	cmp	r7, r9
 8001308:	d8d7      	bhi.n	80012ba <__gedf2+0x4a>
 800130a:	d00e      	beq.n	800132a <__gedf2+0xba>
 800130c:	2000      	movs	r0, #0
 800130e:	454f      	cmp	r7, r9
 8001310:	d2d7      	bcs.n	80012c2 <__gedf2+0x52>
 8001312:	2900      	cmp	r1, #0
 8001314:	d0e2      	beq.n	80012dc <__gedf2+0x6c>
 8001316:	0008      	movs	r0, r1
 8001318:	e7d3      	b.n	80012c2 <__gedf2+0x52>
 800131a:	4243      	negs	r3, r0
 800131c:	4158      	adcs	r0, r3
 800131e:	0040      	lsls	r0, r0, #1
 8001320:	3801      	subs	r0, #1
 8001322:	e7ce      	b.n	80012c2 <__gedf2+0x52>
 8001324:	2002      	movs	r0, #2
 8001326:	4240      	negs	r0, r0
 8001328:	e7cb      	b.n	80012c2 <__gedf2+0x52>
 800132a:	45c4      	cmp	ip, r8
 800132c:	d8c5      	bhi.n	80012ba <__gedf2+0x4a>
 800132e:	2000      	movs	r0, #0
 8001330:	45c4      	cmp	ip, r8
 8001332:	d2c6      	bcs.n	80012c2 <__gedf2+0x52>
 8001334:	e7ed      	b.n	8001312 <__gedf2+0xa2>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	000007ff 	.word	0x000007ff

0800133c <__ledf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	4647      	mov	r7, r8
 8001340:	46ce      	mov	lr, r9
 8001342:	0004      	movs	r4, r0
 8001344:	0018      	movs	r0, r3
 8001346:	0016      	movs	r6, r2
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4d2c      	ldr	r5, [pc, #176]	; (8001400 <__ledf2+0xc4>)
 800134e:	004a      	lsls	r2, r1, #1
 8001350:	4699      	mov	r9, r3
 8001352:	b580      	push	{r7, lr}
 8001354:	0043      	lsls	r3, r0, #1
 8001356:	030f      	lsls	r7, r1, #12
 8001358:	46a4      	mov	ip, r4
 800135a:	46b0      	mov	r8, r6
 800135c:	0b3f      	lsrs	r7, r7, #12
 800135e:	0d52      	lsrs	r2, r2, #21
 8001360:	0fc9      	lsrs	r1, r1, #31
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fc0      	lsrs	r0, r0, #31
 8001366:	42aa      	cmp	r2, r5
 8001368:	d00d      	beq.n	8001386 <__ledf2+0x4a>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d010      	beq.n	8001390 <__ledf2+0x54>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d127      	bne.n	80013c2 <__ledf2+0x86>
 8001372:	433c      	orrs	r4, r7
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <__ledf2+0x60>
 8001378:	464d      	mov	r5, r9
 800137a:	432e      	orrs	r6, r5
 800137c:	d10e      	bne.n	800139c <__ledf2+0x60>
 800137e:	2000      	movs	r0, #0
 8001380:	2c00      	cmp	r4, #0
 8001382:	d015      	beq.n	80013b0 <__ledf2+0x74>
 8001384:	e00e      	b.n	80013a4 <__ledf2+0x68>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d110      	bne.n	80013ae <__ledf2+0x72>
 800138c:	4293      	cmp	r3, r2
 800138e:	d118      	bne.n	80013c2 <__ledf2+0x86>
 8001390:	464d      	mov	r5, r9
 8001392:	432e      	orrs	r6, r5
 8001394:	d10b      	bne.n	80013ae <__ledf2+0x72>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d102      	bne.n	80013a0 <__ledf2+0x64>
 800139a:	433c      	orrs	r4, r7
 800139c:	2c00      	cmp	r4, #0
 800139e:	d00b      	beq.n	80013b8 <__ledf2+0x7c>
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d014      	beq.n	80013ce <__ledf2+0x92>
 80013a4:	2002      	movs	r0, #2
 80013a6:	3901      	subs	r1, #1
 80013a8:	4008      	ands	r0, r1
 80013aa:	3801      	subs	r0, #1
 80013ac:	e000      	b.n	80013b0 <__ledf2+0x74>
 80013ae:	2002      	movs	r0, #2
 80013b0:	bcc0      	pop	{r6, r7}
 80013b2:	46b9      	mov	r9, r7
 80013b4:	46b0      	mov	r8, r6
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1f9      	bne.n	80013b0 <__ledf2+0x74>
 80013bc:	2001      	movs	r0, #1
 80013be:	4240      	negs	r0, r0
 80013c0:	e7f6      	b.n	80013b0 <__ledf2+0x74>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1ec      	bne.n	80013a0 <__ledf2+0x64>
 80013c6:	464c      	mov	r4, r9
 80013c8:	4326      	orrs	r6, r4
 80013ca:	d1e9      	bne.n	80013a0 <__ledf2+0x64>
 80013cc:	e7ea      	b.n	80013a4 <__ledf2+0x68>
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd04      	ble.n	80013dc <__ledf2+0xa0>
 80013d2:	4243      	negs	r3, r0
 80013d4:	4158      	adcs	r0, r3
 80013d6:	0040      	lsls	r0, r0, #1
 80013d8:	3801      	subs	r0, #1
 80013da:	e7e9      	b.n	80013b0 <__ledf2+0x74>
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbeb      	blt.n	80013b8 <__ledf2+0x7c>
 80013e0:	454f      	cmp	r7, r9
 80013e2:	d8df      	bhi.n	80013a4 <__ledf2+0x68>
 80013e4:	d006      	beq.n	80013f4 <__ledf2+0xb8>
 80013e6:	2000      	movs	r0, #0
 80013e8:	454f      	cmp	r7, r9
 80013ea:	d2e1      	bcs.n	80013b0 <__ledf2+0x74>
 80013ec:	2900      	cmp	r1, #0
 80013ee:	d0e5      	beq.n	80013bc <__ledf2+0x80>
 80013f0:	0008      	movs	r0, r1
 80013f2:	e7dd      	b.n	80013b0 <__ledf2+0x74>
 80013f4:	45c4      	cmp	ip, r8
 80013f6:	d8d5      	bhi.n	80013a4 <__ledf2+0x68>
 80013f8:	2000      	movs	r0, #0
 80013fa:	45c4      	cmp	ip, r8
 80013fc:	d2d8      	bcs.n	80013b0 <__ledf2+0x74>
 80013fe:	e7f5      	b.n	80013ec <__ledf2+0xb0>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__aeabi_dmul>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4698      	mov	r8, r3
 8001412:	030c      	lsls	r4, r1, #12
 8001414:	004b      	lsls	r3, r1, #1
 8001416:	0006      	movs	r6, r0
 8001418:	4692      	mov	sl, r2
 800141a:	b087      	sub	sp, #28
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fcf      	lsrs	r7, r1, #31
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x24>
 8001426:	e15c      	b.n	80016e2 <__aeabi_dmul+0x2de>
 8001428:	4ad9      	ldr	r2, [pc, #868]	; (8001790 <__aeabi_dmul+0x38c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x2c>
 800142e:	e175      	b.n	800171c <__aeabi_dmul+0x318>
 8001430:	0f42      	lsrs	r2, r0, #29
 8001432:	00e4      	lsls	r4, r4, #3
 8001434:	4314      	orrs	r4, r2
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0412      	lsls	r2, r2, #16
 800143a:	4314      	orrs	r4, r2
 800143c:	4ad5      	ldr	r2, [pc, #852]	; (8001794 <__aeabi_dmul+0x390>)
 800143e:	00c5      	lsls	r5, r0, #3
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	469b      	mov	fp, r3
 800144c:	4643      	mov	r3, r8
 800144e:	4642      	mov	r2, r8
 8001450:	031e      	lsls	r6, r3, #12
 8001452:	0fd2      	lsrs	r2, r2, #31
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4650      	mov	r0, sl
 8001458:	4690      	mov	r8, r2
 800145a:	0b36      	lsrs	r6, r6, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x5e>
 8001460:	e120      	b.n	80016a4 <__aeabi_dmul+0x2a0>
 8001462:	4acb      	ldr	r2, [pc, #812]	; (8001790 <__aeabi_dmul+0x38c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x66>
 8001468:	e162      	b.n	8001730 <__aeabi_dmul+0x32c>
 800146a:	49ca      	ldr	r1, [pc, #808]	; (8001794 <__aeabi_dmul+0x390>)
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	468c      	mov	ip, r1
 8001470:	9900      	ldr	r1, [sp, #0]
 8001472:	4463      	add	r3, ip
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	468c      	mov	ip, r1
 8001478:	4316      	orrs	r6, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	449c      	add	ip, r3
 800147e:	0412      	lsls	r2, r2, #16
 8001480:	4663      	mov	r3, ip
 8001482:	4316      	orrs	r6, r2
 8001484:	00c2      	lsls	r2, r0, #3
 8001486:	2000      	movs	r0, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	9900      	ldr	r1, [sp, #0]
 800148c:	4643      	mov	r3, r8
 800148e:	3101      	adds	r1, #1
 8001490:	468c      	mov	ip, r1
 8001492:	4649      	mov	r1, r9
 8001494:	407b      	eors	r3, r7
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	290f      	cmp	r1, #15
 800149a:	d826      	bhi.n	80014ea <__aeabi_dmul+0xe6>
 800149c:	4bbe      	ldr	r3, [pc, #760]	; (8001798 <__aeabi_dmul+0x394>)
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	5859      	ldr	r1, [r3, r1]
 80014a2:	468f      	mov	pc, r1
 80014a4:	4643      	mov	r3, r8
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	0034      	movs	r4, r6
 80014aa:	0015      	movs	r5, r2
 80014ac:	4683      	mov	fp, r0
 80014ae:	465b      	mov	r3, fp
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d016      	beq.n	80014e2 <__aeabi_dmul+0xde>
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xb6>
 80014b8:	e203      	b.n	80018c2 <__aeabi_dmul+0x4be>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dmul+0xbc>
 80014be:	e0cd      	b.n	800165c <__aeabi_dmul+0x258>
 80014c0:	2200      	movs	r2, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4322      	orrs	r2, r4
 80014cc:	07db      	lsls	r3, r3, #31
 80014ce:	431a      	orrs	r2, r3
 80014d0:	0028      	movs	r0, r5
 80014d2:	0011      	movs	r1, r2
 80014d4:	b007      	add	sp, #28
 80014d6:	bcf0      	pop	{r4, r5, r6, r7}
 80014d8:	46bb      	mov	fp, r7
 80014da:	46b2      	mov	sl, r6
 80014dc:	46a9      	mov	r9, r5
 80014de:	46a0      	mov	r8, r4
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	2400      	movs	r4, #0
 80014e4:	2500      	movs	r5, #0
 80014e6:	4aaa      	ldr	r2, [pc, #680]	; (8001790 <__aeabi_dmul+0x38c>)
 80014e8:	e7ed      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	0c2d      	lsrs	r5, r5, #16
 80014f0:	002b      	movs	r3, r5
 80014f2:	0c11      	lsrs	r1, r2, #16
 80014f4:	0412      	lsls	r2, r2, #16
 80014f6:	0c12      	lsrs	r2, r2, #16
 80014f8:	4353      	muls	r3, r2
 80014fa:	4698      	mov	r8, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	002f      	movs	r7, r5
 8001500:	4343      	muls	r3, r0
 8001502:	4699      	mov	r9, r3
 8001504:	434f      	muls	r7, r1
 8001506:	444f      	add	r7, r9
 8001508:	46bb      	mov	fp, r7
 800150a:	4647      	mov	r7, r8
 800150c:	000b      	movs	r3, r1
 800150e:	0c3f      	lsrs	r7, r7, #16
 8001510:	46ba      	mov	sl, r7
 8001512:	4343      	muls	r3, r0
 8001514:	44da      	add	sl, fp
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	45d1      	cmp	r9, sl
 800151a:	d904      	bls.n	8001526 <__aeabi_dmul+0x122>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	027f      	lsls	r7, r7, #9
 8001520:	46b9      	mov	r9, r7
 8001522:	444b      	add	r3, r9
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4653      	mov	r3, sl
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	469b      	mov	fp, r3
 800152c:	4653      	mov	r3, sl
 800152e:	041f      	lsls	r7, r3, #16
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	003b      	movs	r3, r7
 800153a:	4443      	add	r3, r8
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	0c33      	lsrs	r3, r6, #16
 8001540:	0436      	lsls	r6, r6, #16
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	4698      	mov	r8, r3
 8001546:	0033      	movs	r3, r6
 8001548:	4343      	muls	r3, r0
 800154a:	4699      	mov	r9, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4343      	muls	r3, r0
 8001550:	002f      	movs	r7, r5
 8001552:	469a      	mov	sl, r3
 8001554:	4643      	mov	r3, r8
 8001556:	4377      	muls	r7, r6
 8001558:	435d      	muls	r5, r3
 800155a:	0c38      	lsrs	r0, r7, #16
 800155c:	444d      	add	r5, r9
 800155e:	1945      	adds	r5, r0, r5
 8001560:	45a9      	cmp	r9, r5
 8001562:	d903      	bls.n	800156c <__aeabi_dmul+0x168>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4699      	mov	r9, r3
 800156a:	44ca      	add	sl, r9
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	0c28      	lsrs	r0, r5, #16
 8001570:	0c3f      	lsrs	r7, r7, #16
 8001572:	042d      	lsls	r5, r5, #16
 8001574:	19ed      	adds	r5, r5, r7
 8001576:	0c27      	lsrs	r7, r4, #16
 8001578:	0424      	lsls	r4, r4, #16
 800157a:	0c24      	lsrs	r4, r4, #16
 800157c:	0003      	movs	r3, r0
 800157e:	0020      	movs	r0, r4
 8001580:	4350      	muls	r0, r2
 8001582:	437a      	muls	r2, r7
 8001584:	4691      	mov	r9, r2
 8001586:	003a      	movs	r2, r7
 8001588:	4453      	add	r3, sl
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	0c03      	lsrs	r3, r0, #16
 800158e:	469a      	mov	sl, r3
 8001590:	434a      	muls	r2, r1
 8001592:	4361      	muls	r1, r4
 8001594:	4449      	add	r1, r9
 8001596:	4451      	add	r1, sl
 8001598:	44ab      	add	fp, r5
 800159a:	4589      	cmp	r9, r1
 800159c:	d903      	bls.n	80015a6 <__aeabi_dmul+0x1a2>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	4699      	mov	r9, r3
 80015a4:	444a      	add	r2, r9
 80015a6:	0400      	lsls	r0, r0, #16
 80015a8:	0c0b      	lsrs	r3, r1, #16
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	1809      	adds	r1, r1, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	4699      	mov	r9, r3
 80015b4:	4643      	mov	r3, r8
 80015b6:	4370      	muls	r0, r6
 80015b8:	435c      	muls	r4, r3
 80015ba:	437e      	muls	r6, r7
 80015bc:	435f      	muls	r7, r3
 80015be:	0c03      	lsrs	r3, r0, #16
 80015c0:	4698      	mov	r8, r3
 80015c2:	19a4      	adds	r4, r4, r6
 80015c4:	4444      	add	r4, r8
 80015c6:	444a      	add	r2, r9
 80015c8:	9703      	str	r7, [sp, #12]
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d904      	bls.n	80015d8 <__aeabi_dmul+0x1d4>
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	4698      	mov	r8, r3
 80015d4:	4447      	add	r7, r8
 80015d6:	9703      	str	r7, [sp, #12]
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	9e02      	ldr	r6, [sp, #8]
 80015dc:	469a      	mov	sl, r3
 80015de:	9b05      	ldr	r3, [sp, #20]
 80015e0:	445e      	add	r6, fp
 80015e2:	4698      	mov	r8, r3
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	41ad      	sbcs	r5, r5
 80015e8:	1876      	adds	r6, r6, r1
 80015ea:	428e      	cmp	r6, r1
 80015ec:	4189      	sbcs	r1, r1
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4450      	add	r0, sl
 80015f4:	4440      	add	r0, r8
 80015f6:	426d      	negs	r5, r5
 80015f8:	1947      	adds	r7, r0, r5
 80015fa:	46b8      	mov	r8, r7
 80015fc:	4693      	mov	fp, r2
 80015fe:	4249      	negs	r1, r1
 8001600:	4689      	mov	r9, r1
 8001602:	44c3      	add	fp, r8
 8001604:	44d9      	add	r9, fp
 8001606:	4298      	cmp	r0, r3
 8001608:	4180      	sbcs	r0, r0
 800160a:	45a8      	cmp	r8, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	4593      	cmp	fp, r2
 8001610:	4192      	sbcs	r2, r2
 8001612:	4589      	cmp	r9, r1
 8001614:	4189      	sbcs	r1, r1
 8001616:	426d      	negs	r5, r5
 8001618:	4240      	negs	r0, r0
 800161a:	4328      	orrs	r0, r5
 800161c:	0c24      	lsrs	r4, r4, #16
 800161e:	4252      	negs	r2, r2
 8001620:	4249      	negs	r1, r1
 8001622:	430a      	orrs	r2, r1
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1900      	adds	r0, r0, r4
 8001628:	1880      	adds	r0, r0, r2
 800162a:	18c7      	adds	r7, r0, r3
 800162c:	464b      	mov	r3, r9
 800162e:	0ddc      	lsrs	r4, r3, #23
 8001630:	9b04      	ldr	r3, [sp, #16]
 8001632:	0275      	lsls	r5, r6, #9
 8001634:	431d      	orrs	r5, r3
 8001636:	1e6a      	subs	r2, r5, #1
 8001638:	4195      	sbcs	r5, r2
 800163a:	464b      	mov	r3, r9
 800163c:	0df6      	lsrs	r6, r6, #23
 800163e:	027f      	lsls	r7, r7, #9
 8001640:	4335      	orrs	r5, r6
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	433c      	orrs	r4, r7
 8001646:	4315      	orrs	r5, r2
 8001648:	01fb      	lsls	r3, r7, #7
 800164a:	d400      	bmi.n	800164e <__aeabi_dmul+0x24a>
 800164c:	e11c      	b.n	8001888 <__aeabi_dmul+0x484>
 800164e:	2101      	movs	r1, #1
 8001650:	086a      	lsrs	r2, r5, #1
 8001652:	400d      	ands	r5, r1
 8001654:	4315      	orrs	r5, r2
 8001656:	07e2      	lsls	r2, r4, #31
 8001658:	4315      	orrs	r5, r2
 800165a:	0864      	lsrs	r4, r4, #1
 800165c:	494f      	ldr	r1, [pc, #316]	; (800179c <__aeabi_dmul+0x398>)
 800165e:	4461      	add	r1, ip
 8001660:	2900      	cmp	r1, #0
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dmul+0x262>
 8001664:	e0b0      	b.n	80017c8 <__aeabi_dmul+0x3c4>
 8001666:	076b      	lsls	r3, r5, #29
 8001668:	d009      	beq.n	800167e <__aeabi_dmul+0x27a>
 800166a:	220f      	movs	r2, #15
 800166c:	402a      	ands	r2, r5
 800166e:	2a04      	cmp	r2, #4
 8001670:	d005      	beq.n	800167e <__aeabi_dmul+0x27a>
 8001672:	1d2a      	adds	r2, r5, #4
 8001674:	42aa      	cmp	r2, r5
 8001676:	41ad      	sbcs	r5, r5
 8001678:	426d      	negs	r5, r5
 800167a:	1964      	adds	r4, r4, r5
 800167c:	0015      	movs	r5, r2
 800167e:	01e3      	lsls	r3, r4, #7
 8001680:	d504      	bpl.n	800168c <__aeabi_dmul+0x288>
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <__aeabi_dmul+0x39c>)
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	4014      	ands	r4, r2
 800168a:	4461      	add	r1, ip
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <__aeabi_dmul+0x3a0>)
 800168e:	4291      	cmp	r1, r2
 8001690:	dd00      	ble.n	8001694 <__aeabi_dmul+0x290>
 8001692:	e726      	b.n	80014e2 <__aeabi_dmul+0xde>
 8001694:	0762      	lsls	r2, r4, #29
 8001696:	08ed      	lsrs	r5, r5, #3
 8001698:	0264      	lsls	r4, r4, #9
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	4315      	orrs	r5, r2
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d4a      	lsrs	r2, r1, #21
 80016a2:	e710      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80016a4:	4652      	mov	r2, sl
 80016a6:	4332      	orrs	r2, r6
 80016a8:	d100      	bne.n	80016ac <__aeabi_dmul+0x2a8>
 80016aa:	e07f      	b.n	80017ac <__aeabi_dmul+0x3a8>
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x2ae>
 80016b0:	e0dc      	b.n	800186c <__aeabi_dmul+0x468>
 80016b2:	0030      	movs	r0, r6
 80016b4:	f000 fdd6 	bl	8002264 <__clzsi2>
 80016b8:	0002      	movs	r2, r0
 80016ba:	3a0b      	subs	r2, #11
 80016bc:	231d      	movs	r3, #29
 80016be:	0001      	movs	r1, r0
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	4652      	mov	r2, sl
 80016c4:	3908      	subs	r1, #8
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	408e      	lsls	r6, r1
 80016ca:	4316      	orrs	r6, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	408a      	lsls	r2, r1
 80016d0:	9b00      	ldr	r3, [sp, #0]
 80016d2:	4935      	ldr	r1, [pc, #212]	; (80017a8 <__aeabi_dmul+0x3a4>)
 80016d4:	1a18      	subs	r0, r3, r0
 80016d6:	0003      	movs	r3, r0
 80016d8:	468c      	mov	ip, r1
 80016da:	4463      	add	r3, ip
 80016dc:	2000      	movs	r0, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	e6d3      	b.n	800148a <__aeabi_dmul+0x86>
 80016e2:	0025      	movs	r5, r4
 80016e4:	4305      	orrs	r5, r0
 80016e6:	d04a      	beq.n	800177e <__aeabi_dmul+0x37a>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2ea>
 80016ec:	e0b0      	b.n	8001850 <__aeabi_dmul+0x44c>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 fdb8 	bl	8002264 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	390b      	subs	r1, #11
 80016fa:	231d      	movs	r3, #29
 80016fc:	0010      	movs	r0, r2
 80016fe:	1a5b      	subs	r3, r3, r1
 8001700:	0031      	movs	r1, r6
 8001702:	0035      	movs	r5, r6
 8001704:	3808      	subs	r0, #8
 8001706:	4084      	lsls	r4, r0
 8001708:	40d9      	lsrs	r1, r3
 800170a:	4085      	lsls	r5, r0
 800170c:	430c      	orrs	r4, r1
 800170e:	4826      	ldr	r0, [pc, #152]	; (80017a8 <__aeabi_dmul+0x3a4>)
 8001710:	1a83      	subs	r3, r0, r2
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	4699      	mov	r9, r3
 8001718:	469b      	mov	fp, r3
 800171a:	e697      	b.n	800144c <__aeabi_dmul+0x48>
 800171c:	0005      	movs	r5, r0
 800171e:	4325      	orrs	r5, r4
 8001720:	d126      	bne.n	8001770 <__aeabi_dmul+0x36c>
 8001722:	2208      	movs	r2, #8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2302      	movs	r3, #2
 8001728:	2400      	movs	r4, #0
 800172a:	4691      	mov	r9, r2
 800172c:	469b      	mov	fp, r3
 800172e:	e68d      	b.n	800144c <__aeabi_dmul+0x48>
 8001730:	4652      	mov	r2, sl
 8001732:	9b00      	ldr	r3, [sp, #0]
 8001734:	4332      	orrs	r2, r6
 8001736:	d110      	bne.n	800175a <__aeabi_dmul+0x356>
 8001738:	4915      	ldr	r1, [pc, #84]	; (8001790 <__aeabi_dmul+0x38c>)
 800173a:	2600      	movs	r6, #0
 800173c:	468c      	mov	ip, r1
 800173e:	4463      	add	r3, ip
 8001740:	4649      	mov	r1, r9
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2302      	movs	r3, #2
 8001746:	4319      	orrs	r1, r3
 8001748:	4689      	mov	r9, r1
 800174a:	2002      	movs	r0, #2
 800174c:	e69d      	b.n	800148a <__aeabi_dmul+0x86>
 800174e:	465b      	mov	r3, fp
 8001750:	9701      	str	r7, [sp, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d000      	beq.n	8001758 <__aeabi_dmul+0x354>
 8001756:	e6ad      	b.n	80014b4 <__aeabi_dmul+0xb0>
 8001758:	e6c3      	b.n	80014e2 <__aeabi_dmul+0xde>
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <__aeabi_dmul+0x38c>)
 800175c:	2003      	movs	r0, #3
 800175e:	4694      	mov	ip, r2
 8001760:	4463      	add	r3, ip
 8001762:	464a      	mov	r2, r9
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2303      	movs	r3, #3
 8001768:	431a      	orrs	r2, r3
 800176a:	4691      	mov	r9, r2
 800176c:	4652      	mov	r2, sl
 800176e:	e68c      	b.n	800148a <__aeabi_dmul+0x86>
 8001770:	220c      	movs	r2, #12
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	0005      	movs	r5, r0
 8001778:	4691      	mov	r9, r2
 800177a:	469b      	mov	fp, r3
 800177c:	e666      	b.n	800144c <__aeabi_dmul+0x48>
 800177e:	2304      	movs	r3, #4
 8001780:	4699      	mov	r9, r3
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	2400      	movs	r4, #0
 800178a:	469b      	mov	fp, r3
 800178c:	e65e      	b.n	800144c <__aeabi_dmul+0x48>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	0800a438 	.word	0x0800a438
 800179c:	000003ff 	.word	0x000003ff
 80017a0:	feffffff 	.word	0xfeffffff
 80017a4:	000007fe 	.word	0x000007fe
 80017a8:	fffffc0d 	.word	0xfffffc0d
 80017ac:	4649      	mov	r1, r9
 80017ae:	2301      	movs	r3, #1
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4689      	mov	r9, r1
 80017b4:	2600      	movs	r6, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	e667      	b.n	800148a <__aeabi_dmul+0x86>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2500      	movs	r5, #0
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	e67e      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80017c8:	2001      	movs	r0, #1
 80017ca:	1a40      	subs	r0, r0, r1
 80017cc:	2838      	cmp	r0, #56	; 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dmul+0x3ce>
 80017d0:	e676      	b.n	80014c0 <__aeabi_dmul+0xbc>
 80017d2:	281f      	cmp	r0, #31
 80017d4:	dd5b      	ble.n	800188e <__aeabi_dmul+0x48a>
 80017d6:	221f      	movs	r2, #31
 80017d8:	0023      	movs	r3, r4
 80017da:	4252      	negs	r2, r2
 80017dc:	1a51      	subs	r1, r2, r1
 80017de:	40cb      	lsrs	r3, r1
 80017e0:	0019      	movs	r1, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dmul+0x3ea>
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <__aeabi_dmul+0x4d0>)
 80017e8:	4462      	add	r2, ip
 80017ea:	4094      	lsls	r4, r2
 80017ec:	4325      	orrs	r5, r4
 80017ee:	1e6a      	subs	r2, r5, #1
 80017f0:	4195      	sbcs	r5, r2
 80017f2:	002a      	movs	r2, r5
 80017f4:	430a      	orrs	r2, r1
 80017f6:	2107      	movs	r1, #7
 80017f8:	000d      	movs	r5, r1
 80017fa:	2400      	movs	r4, #0
 80017fc:	4015      	ands	r5, r2
 80017fe:	4211      	tst	r1, r2
 8001800:	d05b      	beq.n	80018ba <__aeabi_dmul+0x4b6>
 8001802:	210f      	movs	r1, #15
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	2904      	cmp	r1, #4
 800180a:	d053      	beq.n	80018b4 <__aeabi_dmul+0x4b0>
 800180c:	1d11      	adds	r1, r2, #4
 800180e:	4291      	cmp	r1, r2
 8001810:	4192      	sbcs	r2, r2
 8001812:	4252      	negs	r2, r2
 8001814:	18a4      	adds	r4, r4, r2
 8001816:	000a      	movs	r2, r1
 8001818:	0223      	lsls	r3, r4, #8
 800181a:	d54b      	bpl.n	80018b4 <__aeabi_dmul+0x4b0>
 800181c:	2201      	movs	r2, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e650      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	421c      	tst	r4, r3
 800182a:	d009      	beq.n	8001840 <__aeabi_dmul+0x43c>
 800182c:	421e      	tst	r6, r3
 800182e:	d107      	bne.n	8001840 <__aeabi_dmul+0x43c>
 8001830:	4333      	orrs	r3, r6
 8001832:	031c      	lsls	r4, r3, #12
 8001834:	4643      	mov	r3, r8
 8001836:	0015      	movs	r5, r2
 8001838:	0b24      	lsrs	r4, r4, #12
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	e642      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	0312      	lsls	r2, r2, #12
 8001844:	4314      	orrs	r4, r2
 8001846:	0324      	lsls	r4, r4, #12
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <__aeabi_dmul+0x4cc>)
 800184a:	0b24      	lsrs	r4, r4, #12
 800184c:	9701      	str	r7, [sp, #4]
 800184e:	e63a      	b.n	80014c6 <__aeabi_dmul+0xc2>
 8001850:	f000 fd08 	bl	8002264 <__clzsi2>
 8001854:	0001      	movs	r1, r0
 8001856:	0002      	movs	r2, r0
 8001858:	3115      	adds	r1, #21
 800185a:	3220      	adds	r2, #32
 800185c:	291c      	cmp	r1, #28
 800185e:	dc00      	bgt.n	8001862 <__aeabi_dmul+0x45e>
 8001860:	e74b      	b.n	80016fa <__aeabi_dmul+0x2f6>
 8001862:	0034      	movs	r4, r6
 8001864:	3808      	subs	r0, #8
 8001866:	2500      	movs	r5, #0
 8001868:	4084      	lsls	r4, r0
 800186a:	e750      	b.n	800170e <__aeabi_dmul+0x30a>
 800186c:	f000 fcfa 	bl	8002264 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	3215      	adds	r2, #21
 8001876:	3020      	adds	r0, #32
 8001878:	2a1c      	cmp	r2, #28
 800187a:	dc00      	bgt.n	800187e <__aeabi_dmul+0x47a>
 800187c:	e71e      	b.n	80016bc <__aeabi_dmul+0x2b8>
 800187e:	4656      	mov	r6, sl
 8001880:	3b08      	subs	r3, #8
 8001882:	2200      	movs	r2, #0
 8001884:	409e      	lsls	r6, r3
 8001886:	e723      	b.n	80016d0 <__aeabi_dmul+0x2cc>
 8001888:	9b00      	ldr	r3, [sp, #0]
 800188a:	469c      	mov	ip, r3
 800188c:	e6e6      	b.n	800165c <__aeabi_dmul+0x258>
 800188e:	4912      	ldr	r1, [pc, #72]	; (80018d8 <__aeabi_dmul+0x4d4>)
 8001890:	0022      	movs	r2, r4
 8001892:	4461      	add	r1, ip
 8001894:	002e      	movs	r6, r5
 8001896:	408d      	lsls	r5, r1
 8001898:	408a      	lsls	r2, r1
 800189a:	40c6      	lsrs	r6, r0
 800189c:	1e69      	subs	r1, r5, #1
 800189e:	418d      	sbcs	r5, r1
 80018a0:	4332      	orrs	r2, r6
 80018a2:	432a      	orrs	r2, r5
 80018a4:	40c4      	lsrs	r4, r0
 80018a6:	0753      	lsls	r3, r2, #29
 80018a8:	d0b6      	beq.n	8001818 <__aeabi_dmul+0x414>
 80018aa:	210f      	movs	r1, #15
 80018ac:	4011      	ands	r1, r2
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d1ac      	bne.n	800180c <__aeabi_dmul+0x408>
 80018b2:	e7b1      	b.n	8001818 <__aeabi_dmul+0x414>
 80018b4:	0765      	lsls	r5, r4, #29
 80018b6:	0264      	lsls	r4, r4, #9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	08d2      	lsrs	r2, r2, #3
 80018bc:	4315      	orrs	r5, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	e601      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0312      	lsls	r2, r2, #12
 80018c6:	4314      	orrs	r4, r2
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	4a01      	ldr	r2, [pc, #4]	; (80018d0 <__aeabi_dmul+0x4cc>)
 80018cc:	0b24      	lsrs	r4, r4, #12
 80018ce:	e5fa      	b.n	80014c6 <__aeabi_dmul+0xc2>
 80018d0:	000007ff 	.word	0x000007ff
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e

080018dc <__aeabi_dsub>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	001e      	movs	r6, r3
 80018ea:	0017      	movs	r7, r2
 80018ec:	004a      	lsls	r2, r1, #1
 80018ee:	030b      	lsls	r3, r1, #12
 80018f0:	0d52      	lsrs	r2, r2, #21
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	4690      	mov	r8, r2
 80018f6:	0f42      	lsrs	r2, r0, #29
 80018f8:	431a      	orrs	r2, r3
 80018fa:	0fcd      	lsrs	r5, r1, #31
 80018fc:	4ccd      	ldr	r4, [pc, #820]	; (8001c34 <__aeabi_dsub+0x358>)
 80018fe:	0331      	lsls	r1, r6, #12
 8001900:	00c3      	lsls	r3, r0, #3
 8001902:	4694      	mov	ip, r2
 8001904:	0070      	lsls	r0, r6, #1
 8001906:	0f7a      	lsrs	r2, r7, #29
 8001908:	0a49      	lsrs	r1, r1, #9
 800190a:	00ff      	lsls	r7, r7, #3
 800190c:	469a      	mov	sl, r3
 800190e:	46b9      	mov	r9, r7
 8001910:	0d40      	lsrs	r0, r0, #21
 8001912:	0ff6      	lsrs	r6, r6, #31
 8001914:	4311      	orrs	r1, r2
 8001916:	42a0      	cmp	r0, r4
 8001918:	d100      	bne.n	800191c <__aeabi_dsub+0x40>
 800191a:	e0b1      	b.n	8001a80 <__aeabi_dsub+0x1a4>
 800191c:	2201      	movs	r2, #1
 800191e:	4056      	eors	r6, r2
 8001920:	46b3      	mov	fp, r6
 8001922:	42b5      	cmp	r5, r6
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x4c>
 8001926:	e088      	b.n	8001a3a <__aeabi_dsub+0x15e>
 8001928:	4642      	mov	r2, r8
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	2a00      	cmp	r2, #0
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x56>
 8001930:	e0ae      	b.n	8001a90 <__aeabi_dsub+0x1b4>
 8001932:	2800      	cmp	r0, #0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0c1      	b.n	8001abc <__aeabi_dsub+0x1e0>
 8001938:	48be      	ldr	r0, [pc, #760]	; (8001c34 <__aeabi_dsub+0x358>)
 800193a:	4580      	cmp	r8, r0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x64>
 800193e:	e151      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001940:	2080      	movs	r0, #128	; 0x80
 8001942:	0400      	lsls	r0, r0, #16
 8001944:	4301      	orrs	r1, r0
 8001946:	2a38      	cmp	r2, #56	; 0x38
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0x70>
 800194a:	e17b      	b.n	8001c44 <__aeabi_dsub+0x368>
 800194c:	2a1f      	cmp	r2, #31
 800194e:	dd00      	ble.n	8001952 <__aeabi_dsub+0x76>
 8001950:	e1ee      	b.n	8001d30 <__aeabi_dsub+0x454>
 8001952:	2020      	movs	r0, #32
 8001954:	003e      	movs	r6, r7
 8001956:	1a80      	subs	r0, r0, r2
 8001958:	000c      	movs	r4, r1
 800195a:	40d6      	lsrs	r6, r2
 800195c:	40d1      	lsrs	r1, r2
 800195e:	4087      	lsls	r7, r0
 8001960:	4662      	mov	r2, ip
 8001962:	4084      	lsls	r4, r0
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	1e78      	subs	r0, r7, #1
 8001968:	4187      	sbcs	r7, r0
 800196a:	4694      	mov	ip, r2
 800196c:	4334      	orrs	r4, r6
 800196e:	4327      	orrs	r7, r4
 8001970:	1bdc      	subs	r4, r3, r7
 8001972:	42a3      	cmp	r3, r4
 8001974:	419b      	sbcs	r3, r3
 8001976:	4662      	mov	r2, ip
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4699      	mov	r9, r3
 800197e:	464b      	mov	r3, r9
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0xaa>
 8001984:	e118      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001986:	464b      	mov	r3, r9
 8001988:	0258      	lsls	r0, r3, #9
 800198a:	0a43      	lsrs	r3, r0, #9
 800198c:	4699      	mov	r9, r3
 800198e:	464b      	mov	r3, r9
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0xba>
 8001994:	e137      	b.n	8001c06 <__aeabi_dsub+0x32a>
 8001996:	4648      	mov	r0, r9
 8001998:	f000 fc64 	bl	8002264 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	3908      	subs	r1, #8
 80019a0:	2320      	movs	r3, #32
 80019a2:	0022      	movs	r2, r4
 80019a4:	4648      	mov	r0, r9
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	40da      	lsrs	r2, r3
 80019aa:	4088      	lsls	r0, r1
 80019ac:	408c      	lsls	r4, r1
 80019ae:	4643      	mov	r3, r8
 80019b0:	4310      	orrs	r0, r2
 80019b2:	4588      	cmp	r8, r1
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0xdc>
 80019b6:	e136      	b.n	8001c26 <__aeabi_dsub+0x34a>
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	1c4b      	adds	r3, r1, #1
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dsub+0xe6>
 80019c0:	e0ea      	b.n	8001b98 <__aeabi_dsub+0x2bc>
 80019c2:	2220      	movs	r2, #32
 80019c4:	0026      	movs	r6, r4
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	0001      	movs	r1, r0
 80019ca:	4094      	lsls	r4, r2
 80019cc:	40de      	lsrs	r6, r3
 80019ce:	40d8      	lsrs	r0, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4091      	lsls	r1, r2
 80019d4:	1e62      	subs	r2, r4, #1
 80019d6:	4194      	sbcs	r4, r2
 80019d8:	4681      	mov	r9, r0
 80019da:	4698      	mov	r8, r3
 80019dc:	4331      	orrs	r1, r6
 80019de:	430c      	orrs	r4, r1
 80019e0:	0763      	lsls	r3, r4, #29
 80019e2:	d009      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019e4:	230f      	movs	r3, #15
 80019e6:	4023      	ands	r3, r4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <__aeabi_dsub+0x11c>
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	41a4      	sbcs	r4, r4
 80019f2:	4264      	negs	r4, r4
 80019f4:	44a1      	add	r9, r4
 80019f6:	001c      	movs	r4, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	d400      	bmi.n	8001a00 <__aeabi_dsub+0x124>
 80019fe:	e0de      	b.n	8001bbe <__aeabi_dsub+0x2e2>
 8001a00:	4641      	mov	r1, r8
 8001a02:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <__aeabi_dsub+0x358>)
 8001a04:	3101      	adds	r1, #1
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x130>
 8001a0a:	e0e7      	b.n	8001bdc <__aeabi_dsub+0x300>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001a10:	08e4      	lsrs	r4, r4, #3
 8001a12:	4003      	ands	r3, r0
 8001a14:	0018      	movs	r0, r3
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	075b      	lsls	r3, r3, #29
 8001a1a:	0240      	lsls	r0, r0, #9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	0d4a      	lsrs	r2, r1, #21
 8001a20:	0b04      	lsrs	r4, r0, #12
 8001a22:	0512      	lsls	r2, r2, #20
 8001a24:	07ed      	lsls	r5, r5, #31
 8001a26:	4322      	orrs	r2, r4
 8001a28:	432a      	orrs	r2, r5
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a30:	46bb      	mov	fp, r7
 8001a32:	46b2      	mov	sl, r6
 8001a34:	46a9      	mov	r9, r5
 8001a36:	46a0      	mov	r8, r4
 8001a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	dd52      	ble.n	8001ae8 <__aeabi_dsub+0x20c>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x16c>
 8001a46:	e09c      	b.n	8001b82 <__aeabi_dsub+0x2a6>
 8001a48:	45a0      	cmp	r8, r4
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x172>
 8001a4c:	e0ca      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	0400      	lsls	r0, r0, #16
 8001a52:	4301      	orrs	r1, r0
 8001a54:	2a38      	cmp	r2, #56	; 0x38
 8001a56:	dd00      	ble.n	8001a5a <__aeabi_dsub+0x17e>
 8001a58:	e149      	b.n	8001cee <__aeabi_dsub+0x412>
 8001a5a:	2a1f      	cmp	r2, #31
 8001a5c:	dc00      	bgt.n	8001a60 <__aeabi_dsub+0x184>
 8001a5e:	e197      	b.n	8001d90 <__aeabi_dsub+0x4b4>
 8001a60:	0010      	movs	r0, r2
 8001a62:	000e      	movs	r6, r1
 8001a64:	3820      	subs	r0, #32
 8001a66:	40c6      	lsrs	r6, r0
 8001a68:	2a20      	cmp	r2, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x19a>
 8001a6c:	2040      	movs	r0, #64	; 0x40
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	4091      	lsls	r1, r2
 8001a72:	430f      	orrs	r7, r1
 8001a74:	46b9      	mov	r9, r7
 8001a76:	464c      	mov	r4, r9
 8001a78:	1e62      	subs	r2, r4, #1
 8001a7a:	4194      	sbcs	r4, r2
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	e13a      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001a80:	000a      	movs	r2, r1
 8001a82:	433a      	orrs	r2, r7
 8001a84:	d028      	beq.n	8001ad8 <__aeabi_dsub+0x1fc>
 8001a86:	46b3      	mov	fp, r6
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	d02b      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <__aeabi_dsub+0x360>)
 8001a8e:	4442      	add	r2, r8
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d05d      	beq.n	8001b50 <__aeabi_dsub+0x274>
 8001a94:	4642      	mov	r2, r8
 8001a96:	4644      	mov	r4, r8
 8001a98:	1a82      	subs	r2, r0, r2
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x1c4>
 8001a9e:	e0f5      	b.n	8001c8c <__aeabi_dsub+0x3b0>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	431d      	orrs	r5, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001aa6:	e19c      	b.n	8001de2 <__aeabi_dsub+0x506>
 8001aa8:	1e55      	subs	r5, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x1d4>
 8001aae:	e1fb      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001ab0:	4c60      	ldr	r4, [pc, #384]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ab2:	42a2      	cmp	r2, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e1bd      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001ab8:	002a      	movs	r2, r5
 8001aba:	e0f0      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001abc:	0008      	movs	r0, r1
 8001abe:	4338      	orrs	r0, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e8>
 8001ac2:	e0c3      	b.n	8001c4c <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x1f0>
 8001aca:	e1a8      	b.n	8001e1e <__aeabi_dsub+0x542>
 8001acc:	4c59      	ldr	r4, [pc, #356]	; (8001c34 <__aeabi_dsub+0x358>)
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1f8>
 8001ad2:	e087      	b.n	8001be4 <__aeabi_dsub+0x308>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	e736      	b.n	8001946 <__aeabi_dsub+0x6a>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4056      	eors	r6, r2
 8001adc:	46b3      	mov	fp, r6
 8001ade:	42b5      	cmp	r5, r6
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dsub+0x208>
 8001ae2:	e721      	b.n	8001928 <__aeabi_dsub+0x4c>
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <__aeabi_dsub+0x360>)
 8001ae6:	4442      	add	r2, r8
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x212>
 8001aec:	e0b5      	b.n	8001c5a <__aeabi_dsub+0x37e>
 8001aee:	4642      	mov	r2, r8
 8001af0:	4644      	mov	r4, r8
 8001af2:	1a82      	subs	r2, r0, r2
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x21e>
 8001af8:	e138      	b.n	8001d6c <__aeabi_dsub+0x490>
 8001afa:	4e4e      	ldr	r6, [pc, #312]	; (8001c34 <__aeabi_dsub+0x358>)
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x226>
 8001b00:	e1de      	b.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001b02:	2680      	movs	r6, #128	; 0x80
 8001b04:	4664      	mov	r4, ip
 8001b06:	0436      	lsls	r6, r6, #16
 8001b08:	4334      	orrs	r4, r6
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	2a38      	cmp	r2, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x236>
 8001b10:	e196      	b.n	8001e40 <__aeabi_dsub+0x564>
 8001b12:	2a1f      	cmp	r2, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e224      	b.n	8001f62 <__aeabi_dsub+0x686>
 8001b18:	2620      	movs	r6, #32
 8001b1a:	1ab4      	subs	r4, r6, r2
 8001b1c:	46a2      	mov	sl, r4
 8001b1e:	4664      	mov	r4, ip
 8001b20:	4656      	mov	r6, sl
 8001b22:	40b4      	lsls	r4, r6
 8001b24:	46a1      	mov	r9, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	464e      	mov	r6, r9
 8001b2a:	40d4      	lsrs	r4, r2
 8001b2c:	4326      	orrs	r6, r4
 8001b2e:	0034      	movs	r4, r6
 8001b30:	4656      	mov	r6, sl
 8001b32:	40b3      	lsls	r3, r6
 8001b34:	1e5e      	subs	r6, r3, #1
 8001b36:	41b3      	sbcs	r3, r6
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	19e4      	adds	r4, r4, r7
 8001b42:	42bc      	cmp	r4, r7
 8001b44:	41bf      	sbcs	r7, r7
 8001b46:	427f      	negs	r7, r7
 8001b48:	46b9      	mov	r9, r7
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4489      	add	r9, r1
 8001b4e:	e0d8      	b.n	8001d02 <__aeabi_dsub+0x426>
 8001b50:	4640      	mov	r0, r8
 8001b52:	4c3b      	ldr	r4, [pc, #236]	; (8001c40 <__aeabi_dsub+0x364>)
 8001b54:	3001      	adds	r0, #1
 8001b56:	4220      	tst	r0, r4
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x280>
 8001b5a:	e0b4      	b.n	8001cc6 <__aeabi_dsub+0x3ea>
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x288>
 8001b62:	e144      	b.n	8001dee <__aeabi_dsub+0x512>
 8001b64:	4660      	mov	r0, ip
 8001b66:	4318      	orrs	r0, r3
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0x290>
 8001b6a:	e190      	b.n	8001e8e <__aeabi_dsub+0x5b2>
 8001b6c:	0008      	movs	r0, r1
 8001b6e:	4338      	orrs	r0, r7
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dsub+0x298>
 8001b72:	e1aa      	b.n	8001eca <__aeabi_dsub+0x5ee>
 8001b74:	4661      	mov	r1, ip
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	08cc      	lsrs	r4, r1, #3
 8001b80:	e027      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d061      	beq.n	8001c4c <__aeabi_dsub+0x370>
 8001b88:	1e50      	subs	r0, r2, #1
 8001b8a:	2a01      	cmp	r2, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e139      	b.n	8001e04 <__aeabi_dsub+0x528>
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d027      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001b94:	0002      	movs	r2, r0
 8001b96:	e75d      	b.n	8001a54 <__aeabi_dsub+0x178>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	391f      	subs	r1, #31
 8001b9c:	40ca      	lsrs	r2, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d003      	beq.n	8001bac <__aeabi_dsub+0x2d0>
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4098      	lsls	r0, r3
 8001baa:	4304      	orrs	r4, r0
 8001bac:	1e63      	subs	r3, r4, #1
 8001bae:	419c      	sbcs	r4, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	430c      	orrs	r4, r1
 8001bb8:	0763      	lsls	r3, r4, #29
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2e2>
 8001bbc:	e712      	b.n	80019e4 <__aeabi_dsub+0x108>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	08e4      	lsrs	r4, r4, #3
 8001bc4:	075b      	lsls	r3, r3, #29
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	08d4      	lsrs	r4, r2, #3
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4919      	ldr	r1, [pc, #100]	; (8001c34 <__aeabi_dsub+0x358>)
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	d00e      	beq.n	8001bf0 <__aeabi_dsub+0x314>
 8001bd2:	0324      	lsls	r4, r4, #12
 8001bd4:	0552      	lsls	r2, r2, #21
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d52      	lsrs	r2, r2, #21
 8001bda:	e722      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001bdc:	000a      	movs	r2, r1
 8001bde:	2400      	movs	r4, #0
 8001be0:	2300      	movs	r3, #0
 8001be2:	e71e      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	4662      	mov	r2, ip
 8001be8:	0752      	lsls	r2, r2, #29
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4662      	mov	r2, ip
 8001bee:	08d4      	lsrs	r4, r2, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x31c>
 8001bf6:	e1fc      	b.n	8001ff2 <__aeabi_dsub+0x716>
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0312      	lsls	r2, r2, #12
 8001bfc:	4314      	orrs	r4, r2
 8001bfe:	0324      	lsls	r4, r4, #12
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <__aeabi_dsub+0x358>)
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e70d      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001c06:	0020      	movs	r0, r4
 8001c08:	f000 fb2c 	bl	8002264 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3118      	adds	r1, #24
 8001c10:	291f      	cmp	r1, #31
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_dsub+0x33a>
 8001c14:	e6c4      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001c16:	3808      	subs	r0, #8
 8001c18:	4084      	lsls	r4, r0
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	2400      	movs	r4, #0
 8001c20:	4588      	cmp	r8, r1
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dsub+0x34a>
 8001c24:	e6c8      	b.n	80019b8 <__aeabi_dsub+0xdc>
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__aeabi_dsub+0x35c>)
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	4681      	mov	r9, r0
 8001c30:	e6d6      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	ff7fffff 	.word	0xff7fffff
 8001c3c:	fffff801 	.word	0xfffff801
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	430f      	orrs	r7, r1
 8001c46:	1e7a      	subs	r2, r7, #1
 8001c48:	4197      	sbcs	r7, r2
 8001c4a:	e691      	b.n	8001970 <__aeabi_dsub+0x94>
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	0749      	lsls	r1, r1, #29
 8001c52:	430b      	orrs	r3, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	08cc      	lsrs	r4, r1, #3
 8001c58:	e7b8      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4cd3      	ldr	r4, [pc, #844]	; (8001fac <__aeabi_dsub+0x6d0>)
 8001c5e:	3001      	adds	r0, #1
 8001c60:	4220      	tst	r0, r4
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x38a>
 8001c64:	e0a2      	b.n	8001dac <__aeabi_dsub+0x4d0>
 8001c66:	4640      	mov	r0, r8
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x392>
 8001c6c:	e101      	b.n	8001e72 <__aeabi_dsub+0x596>
 8001c6e:	4660      	mov	r0, ip
 8001c70:	4318      	orrs	r0, r3
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x39a>
 8001c74:	e15e      	b.n	8001f34 <__aeabi_dsub+0x658>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x3a2>
 8001c7c:	e15f      	b.n	8001f3e <__aeabi_dsub+0x662>
 8001c7e:	4661      	mov	r1, ip
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	0749      	lsls	r1, r1, #29
 8001c84:	430b      	orrs	r3, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	08cc      	lsrs	r4, r1, #3
 8001c8a:	e7a2      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001c8c:	4dc8      	ldr	r5, [pc, #800]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e0cf      	b.n	8001e34 <__aeabi_dsub+0x558>
 8001c94:	2580      	movs	r5, #128	; 0x80
 8001c96:	4664      	mov	r4, ip
 8001c98:	042d      	lsls	r5, r5, #16
 8001c9a:	432c      	orrs	r4, r5
 8001c9c:	46a4      	mov	ip, r4
 8001c9e:	2a38      	cmp	r2, #56	; 0x38
 8001ca0:	dc56      	bgt.n	8001d50 <__aeabi_dsub+0x474>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ca6:	e0d1      	b.n	8001e4c <__aeabi_dsub+0x570>
 8001ca8:	2520      	movs	r5, #32
 8001caa:	001e      	movs	r6, r3
 8001cac:	1aad      	subs	r5, r5, r2
 8001cae:	4664      	mov	r4, ip
 8001cb0:	40ab      	lsls	r3, r5
 8001cb2:	40ac      	lsls	r4, r5
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e5d      	subs	r5, r3, #1
 8001cb8:	41ab      	sbcs	r3, r5
 8001cba:	4334      	orrs	r4, r6
 8001cbc:	4323      	orrs	r3, r4
 8001cbe:	4664      	mov	r4, ip
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1b09      	subs	r1, r1, r4
 8001cc4:	e049      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001cc6:	4660      	mov	r0, ip
 8001cc8:	1bdc      	subs	r4, r3, r7
 8001cca:	1a46      	subs	r6, r0, r1
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	4180      	sbcs	r0, r0
 8001cd0:	4240      	negs	r0, r0
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	0030      	movs	r0, r6
 8001cd6:	464e      	mov	r6, r9
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	4681      	mov	r9, r0
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	d476      	bmi.n	8001dce <__aeabi_dsub+0x4f2>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x40c>
 8001ce6:	e652      	b.n	800198e <__aeabi_dsub+0xb2>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2500      	movs	r5, #0
 8001cec:	e771      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001cee:	4339      	orrs	r1, r7
 8001cf0:	000c      	movs	r4, r1
 8001cf2:	1e62      	subs	r2, r4, #1
 8001cf4:	4194      	sbcs	r4, r2
 8001cf6:	18e4      	adds	r4, r4, r3
 8001cf8:	429c      	cmp	r4, r3
 8001cfa:	419b      	sbcs	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4463      	add	r3, ip
 8001d00:	4699      	mov	r9, r3
 8001d02:	464b      	mov	r3, r9
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	d400      	bmi.n	8001d0a <__aeabi_dsub+0x42e>
 8001d08:	e756      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4ba8      	ldr	r3, [pc, #672]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d10:	44e0      	add	r8, ip
 8001d12:	4598      	cmp	r8, r3
 8001d14:	d038      	beq.n	8001d88 <__aeabi_dsub+0x4ac>
 8001d16:	464b      	mov	r3, r9
 8001d18:	48a6      	ldr	r0, [pc, #664]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4003      	ands	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0863      	lsrs	r3, r4, #1
 8001d22:	4014      	ands	r4, r2
 8001d24:	431c      	orrs	r4, r3
 8001d26:	07c3      	lsls	r3, r0, #31
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0843      	lsrs	r3, r0, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	e657      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001d30:	0010      	movs	r0, r2
 8001d32:	000e      	movs	r6, r1
 8001d34:	3820      	subs	r0, #32
 8001d36:	40c6      	lsrs	r6, r0
 8001d38:	2a20      	cmp	r2, #32
 8001d3a:	d004      	beq.n	8001d46 <__aeabi_dsub+0x46a>
 8001d3c:	2040      	movs	r0, #64	; 0x40
 8001d3e:	1a82      	subs	r2, r0, r2
 8001d40:	4091      	lsls	r1, r2
 8001d42:	430f      	orrs	r7, r1
 8001d44:	46b9      	mov	r9, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	1e7a      	subs	r2, r7, #1
 8001d4a:	4197      	sbcs	r7, r2
 8001d4c:	4337      	orrs	r7, r6
 8001d4e:	e60f      	b.n	8001970 <__aeabi_dsub+0x94>
 8001d50:	4662      	mov	r2, ip
 8001d52:	431a      	orrs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4193      	sbcs	r3, r2
 8001d5a:	1afc      	subs	r4, r7, r3
 8001d5c:	42a7      	cmp	r7, r4
 8001d5e:	41bf      	sbcs	r7, r7
 8001d60:	427f      	negs	r7, r7
 8001d62:	1bcb      	subs	r3, r1, r7
 8001d64:	4699      	mov	r9, r3
 8001d66:	465d      	mov	r5, fp
 8001d68:	4680      	mov	r8, r0
 8001d6a:	e608      	b.n	800197e <__aeabi_dsub+0xa2>
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	431e      	orrs	r6, r3
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x498>
 8001d72:	e0be      	b.n	8001ef2 <__aeabi_dsub+0x616>
 8001d74:	1e56      	subs	r6, r2, #1
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4a0>
 8001d7a:	e109      	b.n	8001f90 <__aeabi_dsub+0x6b4>
 8001d7c:	4c8c      	ldr	r4, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x4a8>
 8001d82:	e119      	b.n	8001fb8 <__aeabi_dsub+0x6dc>
 8001d84:	0032      	movs	r2, r6
 8001d86:	e6c1      	b.n	8001b0c <__aeabi_dsub+0x230>
 8001d88:	4642      	mov	r2, r8
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e648      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001d90:	2020      	movs	r0, #32
 8001d92:	000c      	movs	r4, r1
 8001d94:	1a80      	subs	r0, r0, r2
 8001d96:	003e      	movs	r6, r7
 8001d98:	4087      	lsls	r7, r0
 8001d9a:	4084      	lsls	r4, r0
 8001d9c:	40d6      	lsrs	r6, r2
 8001d9e:	1e78      	subs	r0, r7, #1
 8001da0:	4187      	sbcs	r7, r0
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	4334      	orrs	r4, r6
 8001da6:	433c      	orrs	r4, r7
 8001da8:	448c      	add	ip, r1
 8001daa:	e7a4      	b.n	8001cf6 <__aeabi_dsub+0x41a>
 8001dac:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <__aeabi_dsub+0x6d4>)
 8001dae:	4290      	cmp	r0, r2
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x4d8>
 8001db2:	e0e9      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001db4:	19df      	adds	r7, r3, r7
 8001db6:	429f      	cmp	r7, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4461      	add	r1, ip
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	07cc      	lsls	r4, r1, #31
 8001dc2:	087f      	lsrs	r7, r7, #1
 8001dc4:	084b      	lsrs	r3, r1, #1
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4680      	mov	r8, r0
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	e6f4      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	4663      	mov	r3, ip
 8001dd6:	427f      	negs	r7, r7
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	1bcb      	subs	r3, r1, r7
 8001ddc:	4699      	mov	r9, r3
 8001dde:	465d      	mov	r5, fp
 8001de0:	e5d5      	b.n	800198e <__aeabi_dsub+0xb2>
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	074b      	lsls	r3, r1, #29
 8001de6:	465d      	mov	r5, fp
 8001de8:	433b      	orrs	r3, r7
 8001dea:	08cc      	lsrs	r4, r1, #3
 8001dec:	e6ee      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x51a>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x620>
 8001df6:	000b      	movs	r3, r1
 8001df8:	433b      	orrs	r3, r7
 8001dfa:	d11b      	bne.n	8001e34 <__aeabi_dsub+0x558>
 8001dfc:	2480      	movs	r4, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	0324      	lsls	r4, r4, #12
 8001e02:	e6f9      	b.n	8001bf8 <__aeabi_dsub+0x31c>
 8001e04:	19dc      	adds	r4, r3, r7
 8001e06:	429c      	cmp	r4, r3
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	4461      	add	r1, ip
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4499      	add	r9, r3
 8001e12:	464b      	mov	r3, r9
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	d444      	bmi.n	8001ea2 <__aeabi_dsub+0x5c6>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	e6cc      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001e1e:	1bdc      	subs	r4, r3, r7
 8001e20:	4662      	mov	r2, ip
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	1acb      	subs	r3, r1, r3
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4698      	mov	r8, r3
 8001e32:	e5a4      	b.n	800197e <__aeabi_dsub+0xa2>
 8001e34:	08ff      	lsrs	r7, r7, #3
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	465d      	mov	r5, fp
 8001e3a:	433b      	orrs	r3, r7
 8001e3c:	08cc      	lsrs	r4, r1, #3
 8001e3e:	e6d7      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0014      	movs	r4, r2
 8001e46:	1e63      	subs	r3, r4, #1
 8001e48:	419c      	sbcs	r4, r3
 8001e4a:	e679      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001e4c:	0015      	movs	r5, r2
 8001e4e:	4664      	mov	r4, ip
 8001e50:	3d20      	subs	r5, #32
 8001e52:	40ec      	lsrs	r4, r5
 8001e54:	46a0      	mov	r8, r4
 8001e56:	2a20      	cmp	r2, #32
 8001e58:	d005      	beq.n	8001e66 <__aeabi_dsub+0x58a>
 8001e5a:	2540      	movs	r5, #64	; 0x40
 8001e5c:	4664      	mov	r4, ip
 8001e5e:	1aaa      	subs	r2, r5, r2
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4323      	orrs	r3, r4
 8001e64:	469a      	mov	sl, r3
 8001e66:	4654      	mov	r4, sl
 8001e68:	1e63      	subs	r3, r4, #1
 8001e6a:	419c      	sbcs	r4, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4323      	orrs	r3, r4
 8001e70:	e773      	b.n	8001d5a <__aeabi_dsub+0x47e>
 8001e72:	4662      	mov	r2, ip
 8001e74:	431a      	orrs	r2, r3
 8001e76:	d023      	beq.n	8001ec0 <__aeabi_dsub+0x5e4>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	433a      	orrs	r2, r7
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dsub+0x5a4>
 8001e7e:	e0a0      	b.n	8001fc2 <__aeabi_dsub+0x6e6>
 8001e80:	4662      	mov	r2, ip
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	e6b0      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e8e:	000b      	movs	r3, r1
 8001e90:	433b      	orrs	r3, r7
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x5ba>
 8001e94:	e728      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	074b      	lsls	r3, r1, #29
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	433b      	orrs	r3, r7
 8001e9e:	08cc      	lsrs	r4, r1, #3
 8001ea0:	e697      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e736      	b.n	8001d16 <__aeabi_dsub+0x43a>
 8001ea8:	1afc      	subs	r4, r7, r3
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4663      	mov	r3, ip
 8001eb0:	427f      	negs	r7, r7
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	1bcb      	subs	r3, r1, r7
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	465d      	mov	r5, fp
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	e55e      	b.n	800197e <__aeabi_dsub+0xa2>
 8001ec0:	074b      	lsls	r3, r1, #29
 8001ec2:	08ff      	lsrs	r7, r7, #3
 8001ec4:	433b      	orrs	r3, r7
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e692      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4660      	mov	r0, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	41b6      	sbcs	r6, r6
 8001ed2:	1a40      	subs	r0, r0, r1
 8001ed4:	4276      	negs	r6, r6
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4681      	mov	r9, r0
 8001eda:	0200      	lsls	r0, r0, #8
 8001edc:	d560      	bpl.n	8001fa0 <__aeabi_dsub+0x6c4>
 8001ede:	1afc      	subs	r4, r7, r3
 8001ee0:	42a7      	cmp	r7, r4
 8001ee2:	41bf      	sbcs	r7, r7
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	1bcb      	subs	r3, r1, r7
 8001eec:	4699      	mov	r9, r3
 8001eee:	465d      	mov	r5, fp
 8001ef0:	e576      	b.n	80019e0 <__aeabi_dsub+0x104>
 8001ef2:	08ff      	lsrs	r7, r7, #3
 8001ef4:	074b      	lsls	r3, r1, #29
 8001ef6:	433b      	orrs	r3, r7
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e667      	b.n	8001bcc <__aeabi_dsub+0x2f0>
 8001efc:	000a      	movs	r2, r1
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	433a      	orrs	r2, r7
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001f04:	e66f      	b.n	8001be6 <__aeabi_dsub+0x30a>
 8001f06:	4662      	mov	r2, ip
 8001f08:	0752      	lsls	r2, r2, #29
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	08d4      	lsrs	r4, r2, #3
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0312      	lsls	r2, r2, #12
 8001f14:	4214      	tst	r4, r2
 8001f16:	d007      	beq.n	8001f28 <__aeabi_dsub+0x64c>
 8001f18:	08c8      	lsrs	r0, r1, #3
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d104      	bne.n	8001f28 <__aeabi_dsub+0x64c>
 8001f1e:	465d      	mov	r5, fp
 8001f20:	0004      	movs	r4, r0
 8001f22:	08fb      	lsrs	r3, r7, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0f5a      	lsrs	r2, r3, #29
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	08db      	lsrs	r3, r3, #3
 8001f2e:	0752      	lsls	r2, r2, #29
 8001f30:	4313      	orrs	r3, r2
 8001f32:	e65d      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e649      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 8001f3e:	19dc      	adds	r4, r3, r7
 8001f40:	429c      	cmp	r4, r3
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	4461      	add	r1, ip
 8001f46:	4689      	mov	r9, r1
 8001f48:	425b      	negs	r3, r3
 8001f4a:	4499      	add	r9, r3
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x678>
 8001f52:	e631      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f54:	464a      	mov	r2, r9
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <__aeabi_dsub+0x6d8>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	4698      	mov	r8, r3
 8001f60:	e62a      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001f62:	0016      	movs	r6, r2
 8001f64:	4664      	mov	r4, ip
 8001f66:	3e20      	subs	r6, #32
 8001f68:	40f4      	lsrs	r4, r6
 8001f6a:	46a0      	mov	r8, r4
 8001f6c:	2a20      	cmp	r2, #32
 8001f6e:	d005      	beq.n	8001f7c <__aeabi_dsub+0x6a0>
 8001f70:	2640      	movs	r6, #64	; 0x40
 8001f72:	4664      	mov	r4, ip
 8001f74:	1ab2      	subs	r2, r6, r2
 8001f76:	4094      	lsls	r4, r2
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4654      	mov	r4, sl
 8001f7e:	1e63      	subs	r3, r4, #1
 8001f80:	419c      	sbcs	r4, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	431c      	orrs	r4, r3
 8001f86:	e5db      	b.n	8001b40 <__aeabi_dsub+0x264>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e548      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001f90:	19dc      	adds	r4, r3, r7
 8001f92:	42bc      	cmp	r4, r7
 8001f94:	41bf      	sbcs	r7, r7
 8001f96:	4461      	add	r1, ip
 8001f98:	4689      	mov	r9, r1
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	44b9      	add	r9, r7
 8001f9e:	e738      	b.n	8001e12 <__aeabi_dsub+0x536>
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x6cc>
 8001fa6:	e69f      	b.n	8001ce8 <__aeabi_dsub+0x40c>
 8001fa8:	e606      	b.n	8001bb8 <__aeabi_dsub+0x2dc>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007fe 	.word	0x000007fe
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff
 8001fb8:	08ff      	lsrs	r7, r7, #3
 8001fba:	074b      	lsls	r3, r1, #29
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e616      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	0752      	lsls	r2, r2, #29
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	08d4      	lsrs	r4, r2, #3
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0312      	lsls	r2, r2, #12
 8001fd2:	4214      	tst	r4, r2
 8001fd4:	d007      	beq.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fd6:	08c8      	lsrs	r0, r1, #3
 8001fd8:	4210      	tst	r0, r2
 8001fda:	d104      	bne.n	8001fe6 <__aeabi_dsub+0x70a>
 8001fdc:	465d      	mov	r5, fp
 8001fde:	0004      	movs	r4, r0
 8001fe0:	08fb      	lsrs	r3, r7, #3
 8001fe2:	0749      	lsls	r1, r1, #29
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	0f5a      	lsrs	r2, r3, #29
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	0752      	lsls	r2, r2, #29
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	e5fe      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4a01      	ldr	r2, [pc, #4]	; (8001ffc <__aeabi_dsub+0x720>)
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e513      	b.n	8001a22 <__aeabi_dsub+0x146>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	000007ff 	.word	0x000007ff

08002000 <__aeabi_dcmpun>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	0005      	movs	r5, r0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <__aeabi_dcmpun+0x38>)
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	0016      	movs	r6, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	030a      	lsls	r2, r1, #12
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	0b12      	lsrs	r2, r2, #12
 8002012:	0d49      	lsrs	r1, r1, #21
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	4281      	cmp	r1, r0
 800201a:	d008      	beq.n	800202e <__aeabi_dcmpun+0x2e>
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <__aeabi_dcmpun+0x38>)
 800201e:	2000      	movs	r0, #0
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002024:	0020      	movs	r0, r4
 8002026:	4330      	orrs	r0, r6
 8002028:	1e43      	subs	r3, r0, #1
 800202a:	4198      	sbcs	r0, r3
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	2001      	movs	r0, #1
 8002030:	432a      	orrs	r2, r5
 8002032:	d1fb      	bne.n	800202c <__aeabi_dcmpun+0x2c>
 8002034:	e7f2      	b.n	800201c <__aeabi_dcmpun+0x1c>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000007ff 	.word	0x000007ff

0800203c <__aeabi_d2iz>:
 800203c:	000a      	movs	r2, r1
 800203e:	b530      	push	{r4, r5, lr}
 8002040:	4c13      	ldr	r4, [pc, #76]	; (8002090 <__aeabi_d2iz+0x54>)
 8002042:	0053      	lsls	r3, r2, #1
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	0005      	movs	r5, r0
 8002048:	0b09      	lsrs	r1, r1, #12
 800204a:	2000      	movs	r0, #0
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	0fd2      	lsrs	r2, r2, #31
 8002050:	42a3      	cmp	r3, r4
 8002052:	dd04      	ble.n	800205e <__aeabi_d2iz+0x22>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__aeabi_d2iz+0x58>)
 8002056:	4283      	cmp	r3, r0
 8002058:	dd02      	ble.n	8002060 <__aeabi_d2iz+0x24>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_d2iz+0x5c>)
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	bd30      	pop	{r4, r5, pc}
 8002060:	2080      	movs	r0, #128	; 0x80
 8002062:	0340      	lsls	r0, r0, #13
 8002064:	4301      	orrs	r1, r0
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <__aeabi_d2iz+0x60>)
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	281f      	cmp	r0, #31
 800206c:	dd08      	ble.n	8002080 <__aeabi_d2iz+0x44>
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <__aeabi_d2iz+0x64>)
 8002070:	1ac3      	subs	r3, r0, r3
 8002072:	40d9      	lsrs	r1, r3
 8002074:	000b      	movs	r3, r1
 8002076:	4258      	negs	r0, r3
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__aeabi_d2iz+0x22>
 800207c:	0018      	movs	r0, r3
 800207e:	e7ee      	b.n	800205e <__aeabi_d2iz+0x22>
 8002080:	4c08      	ldr	r4, [pc, #32]	; (80020a4 <__aeabi_d2iz+0x68>)
 8002082:	40c5      	lsrs	r5, r0
 8002084:	46a4      	mov	ip, r4
 8002086:	4463      	add	r3, ip
 8002088:	4099      	lsls	r1, r3
 800208a:	000b      	movs	r3, r1
 800208c:	432b      	orrs	r3, r5
 800208e:	e7f2      	b.n	8002076 <__aeabi_d2iz+0x3a>
 8002090:	000003fe 	.word	0x000003fe
 8002094:	0000041d 	.word	0x0000041d
 8002098:	7fffffff 	.word	0x7fffffff
 800209c:	00000433 	.word	0x00000433
 80020a0:	00000413 	.word	0x00000413
 80020a4:	fffffbed 	.word	0xfffffbed

080020a8 <__aeabi_i2d>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d016      	beq.n	80020dc <__aeabi_i2d+0x34>
 80020ae:	17c3      	asrs	r3, r0, #31
 80020b0:	18c5      	adds	r5, r0, r3
 80020b2:	405d      	eors	r5, r3
 80020b4:	0fc4      	lsrs	r4, r0, #31
 80020b6:	0028      	movs	r0, r5
 80020b8:	f000 f8d4 	bl	8002264 <__clzsi2>
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <__aeabi_i2d+0x5c>)
 80020be:	1a12      	subs	r2, r2, r0
 80020c0:	280a      	cmp	r0, #10
 80020c2:	dc16      	bgt.n	80020f2 <__aeabi_i2d+0x4a>
 80020c4:	0003      	movs	r3, r0
 80020c6:	002e      	movs	r6, r5
 80020c8:	3315      	adds	r3, #21
 80020ca:	409e      	lsls	r6, r3
 80020cc:	230b      	movs	r3, #11
 80020ce:	1a18      	subs	r0, r3, r0
 80020d0:	40c5      	lsrs	r5, r0
 80020d2:	0552      	lsls	r2, r2, #21
 80020d4:	032d      	lsls	r5, r5, #12
 80020d6:	0b2d      	lsrs	r5, r5, #12
 80020d8:	0d53      	lsrs	r3, r2, #21
 80020da:	e003      	b.n	80020e4 <__aeabi_i2d+0x3c>
 80020dc:	2400      	movs	r4, #0
 80020de:	2300      	movs	r3, #0
 80020e0:	2500      	movs	r5, #0
 80020e2:	2600      	movs	r6, #0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	432b      	orrs	r3, r5
 80020e8:	07e4      	lsls	r4, r4, #31
 80020ea:	4323      	orrs	r3, r4
 80020ec:	0030      	movs	r0, r6
 80020ee:	0019      	movs	r1, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	380b      	subs	r0, #11
 80020f4:	4085      	lsls	r5, r0
 80020f6:	0552      	lsls	r2, r2, #21
 80020f8:	032d      	lsls	r5, r5, #12
 80020fa:	2600      	movs	r6, #0
 80020fc:	0b2d      	lsrs	r5, r5, #12
 80020fe:	0d53      	lsrs	r3, r2, #21
 8002100:	e7f0      	b.n	80020e4 <__aeabi_i2d+0x3c>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	0000041e 	.word	0x0000041e

08002108 <__aeabi_ui2d>:
 8002108:	b510      	push	{r4, lr}
 800210a:	1e04      	subs	r4, r0, #0
 800210c:	d010      	beq.n	8002130 <__aeabi_ui2d+0x28>
 800210e:	f000 f8a9 	bl	8002264 <__clzsi2>
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <__aeabi_ui2d+0x48>)
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	280a      	cmp	r0, #10
 8002118:	dc11      	bgt.n	800213e <__aeabi_ui2d+0x36>
 800211a:	220b      	movs	r2, #11
 800211c:	0021      	movs	r1, r4
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	40d1      	lsrs	r1, r2
 8002122:	3015      	adds	r0, #21
 8002124:	030a      	lsls	r2, r1, #12
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4084      	lsls	r4, r0
 800212a:	0b12      	lsrs	r2, r2, #12
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	e001      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002130:	2300      	movs	r3, #0
 8002132:	2200      	movs	r2, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4313      	orrs	r3, r2
 8002138:	0020      	movs	r0, r4
 800213a:	0019      	movs	r1, r3
 800213c:	bd10      	pop	{r4, pc}
 800213e:	0022      	movs	r2, r4
 8002140:	380b      	subs	r0, #11
 8002142:	4082      	lsls	r2, r0
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	0312      	lsls	r2, r2, #12
 8002148:	2400      	movs	r4, #0
 800214a:	0b12      	lsrs	r2, r2, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	e7f1      	b.n	8002134 <__aeabi_ui2d+0x2c>
 8002150:	0000041e 	.word	0x0000041e

08002154 <__aeabi_d2f>:
 8002154:	0002      	movs	r2, r0
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	030c      	lsls	r4, r1, #12
 800215e:	4e3d      	ldr	r6, [pc, #244]	; (8002254 <__aeabi_d2f+0x100>)
 8002160:	0a64      	lsrs	r4, r4, #9
 8002162:	0f40      	lsrs	r0, r0, #29
 8002164:	1c5f      	adds	r7, r3, #1
 8002166:	0fc9      	lsrs	r1, r1, #31
 8002168:	4304      	orrs	r4, r0
 800216a:	00d5      	lsls	r5, r2, #3
 800216c:	4237      	tst	r7, r6
 800216e:	d00a      	beq.n	8002186 <__aeabi_d2f+0x32>
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <__aeabi_d2f+0x104>)
 8002172:	181e      	adds	r6, r3, r0
 8002174:	2efe      	cmp	r6, #254	; 0xfe
 8002176:	dd16      	ble.n	80021a6 <__aeabi_d2f+0x52>
 8002178:	20ff      	movs	r0, #255	; 0xff
 800217a:	2400      	movs	r4, #0
 800217c:	05c0      	lsls	r0, r0, #23
 800217e:	4320      	orrs	r0, r4
 8002180:	07c9      	lsls	r1, r1, #31
 8002182:	4308      	orrs	r0, r1
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <__aeabi_d2f+0x44>
 800218a:	432c      	orrs	r4, r5
 800218c:	d026      	beq.n	80021dc <__aeabi_d2f+0x88>
 800218e:	2205      	movs	r2, #5
 8002190:	0192      	lsls	r2, r2, #6
 8002192:	0a54      	lsrs	r4, r2, #9
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	e7f1      	b.n	800217c <__aeabi_d2f+0x28>
 8002198:	4325      	orrs	r5, r4
 800219a:	d0ed      	beq.n	8002178 <__aeabi_d2f+0x24>
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	03c0      	lsls	r0, r0, #15
 80021a0:	4304      	orrs	r4, r0
 80021a2:	20ff      	movs	r0, #255	; 0xff
 80021a4:	e7ea      	b.n	800217c <__aeabi_d2f+0x28>
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	dd1b      	ble.n	80021e2 <__aeabi_d2f+0x8e>
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	1e53      	subs	r3, r2, #1
 80021ae:	419a      	sbcs	r2, r3
 80021b0:	00e4      	lsls	r4, r4, #3
 80021b2:	0f6d      	lsrs	r5, r5, #29
 80021b4:	4322      	orrs	r2, r4
 80021b6:	432a      	orrs	r2, r5
 80021b8:	0753      	lsls	r3, r2, #29
 80021ba:	d048      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021bc:	230f      	movs	r3, #15
 80021be:	4013      	ands	r3, r2
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d000      	beq.n	80021c6 <__aeabi_d2f+0x72>
 80021c4:	3204      	adds	r2, #4
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	04db      	lsls	r3, r3, #19
 80021ca:	4013      	ands	r3, r2
 80021cc:	d03f      	beq.n	800224e <__aeabi_d2f+0xfa>
 80021ce:	1c70      	adds	r0, r6, #1
 80021d0:	2efe      	cmp	r6, #254	; 0xfe
 80021d2:	d0d1      	beq.n	8002178 <__aeabi_d2f+0x24>
 80021d4:	0192      	lsls	r2, r2, #6
 80021d6:	0a54      	lsrs	r4, r2, #9
 80021d8:	b2c0      	uxtb	r0, r0
 80021da:	e7cf      	b.n	800217c <__aeabi_d2f+0x28>
 80021dc:	2000      	movs	r0, #0
 80021de:	2400      	movs	r4, #0
 80021e0:	e7cc      	b.n	800217c <__aeabi_d2f+0x28>
 80021e2:	0032      	movs	r2, r6
 80021e4:	3217      	adds	r2, #23
 80021e6:	db22      	blt.n	800222e <__aeabi_d2f+0xda>
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	4320      	orrs	r0, r4
 80021ee:	241e      	movs	r4, #30
 80021f0:	1ba4      	subs	r4, r4, r6
 80021f2:	2c1f      	cmp	r4, #31
 80021f4:	dd1d      	ble.n	8002232 <__aeabi_d2f+0xde>
 80021f6:	2202      	movs	r2, #2
 80021f8:	4252      	negs	r2, r2
 80021fa:	1b96      	subs	r6, r2, r6
 80021fc:	0002      	movs	r2, r0
 80021fe:	40f2      	lsrs	r2, r6
 8002200:	0016      	movs	r6, r2
 8002202:	2c20      	cmp	r4, #32
 8002204:	d004      	beq.n	8002210 <__aeabi_d2f+0xbc>
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <__aeabi_d2f+0x108>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	4098      	lsls	r0, r3
 800220e:	4305      	orrs	r5, r0
 8002210:	002a      	movs	r2, r5
 8002212:	1e53      	subs	r3, r2, #1
 8002214:	419a      	sbcs	r2, r3
 8002216:	4332      	orrs	r2, r6
 8002218:	2600      	movs	r6, #0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d1ce      	bne.n	80021bc <__aeabi_d2f+0x68>
 800221e:	2480      	movs	r4, #128	; 0x80
 8002220:	0013      	movs	r3, r2
 8002222:	04e4      	lsls	r4, r4, #19
 8002224:	2001      	movs	r0, #1
 8002226:	4023      	ands	r3, r4
 8002228:	4222      	tst	r2, r4
 800222a:	d1d3      	bne.n	80021d4 <__aeabi_d2f+0x80>
 800222c:	e7b0      	b.n	8002190 <__aeabi_d2f+0x3c>
 800222e:	2300      	movs	r3, #0
 8002230:	e7ad      	b.n	800218e <__aeabi_d2f+0x3a>
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <__aeabi_d2f+0x10c>)
 8002234:	4694      	mov	ip, r2
 8002236:	002a      	movs	r2, r5
 8002238:	40e2      	lsrs	r2, r4
 800223a:	0014      	movs	r4, r2
 800223c:	002a      	movs	r2, r5
 800223e:	4463      	add	r3, ip
 8002240:	409a      	lsls	r2, r3
 8002242:	4098      	lsls	r0, r3
 8002244:	1e55      	subs	r5, r2, #1
 8002246:	41aa      	sbcs	r2, r5
 8002248:	4302      	orrs	r2, r0
 800224a:	4322      	orrs	r2, r4
 800224c:	e7e4      	b.n	8002218 <__aeabi_d2f+0xc4>
 800224e:	0033      	movs	r3, r6
 8002250:	e79e      	b.n	8002190 <__aeabi_d2f+0x3c>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	000007fe 	.word	0x000007fe
 8002258:	fffffc80 	.word	0xfffffc80
 800225c:	fffffca2 	.word	0xfffffca2
 8002260:	fffffc82 	.word	0xfffffc82

08002264 <__clzsi2>:
 8002264:	211c      	movs	r1, #28
 8002266:	2301      	movs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0xe>
 800226e:	0c00      	lsrs	r0, r0, #16
 8002270:	3910      	subs	r1, #16
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	4298      	cmp	r0, r3
 8002276:	d301      	bcc.n	800227c <__clzsi2+0x18>
 8002278:	0a00      	lsrs	r0, r0, #8
 800227a:	3908      	subs	r1, #8
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	4298      	cmp	r0, r3
 8002280:	d301      	bcc.n	8002286 <__clzsi2+0x22>
 8002282:	0900      	lsrs	r0, r0, #4
 8002284:	3904      	subs	r1, #4
 8002286:	a202      	add	r2, pc, #8	; (adr r2, 8002290 <__clzsi2+0x2c>)
 8002288:	5c10      	ldrb	r0, [r2, r0]
 800228a:	1840      	adds	r0, r0, r1
 800228c:	4770      	bx	lr
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	02020304 	.word	0x02020304
 8002294:	01010101 	.word	0x01010101
	...

080022a0 <check_new_firmware>:
#include "fota.h"
Ring_Buffer_t firmware_buffer;

uint16_t firmware_size = 1024;

uint8_t check_new_firmware() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
	uint32_t check_firmware = flash_read(FIRMWARE_AVAILABLE_ADDR);
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fb8c 	bl	80029c8 <flash_read>
 80022b0:	0003      	movs	r3, r0
 80022b2:	607b      	str	r3, [r7, #4]
	if(check_firmware == (uint32_t)0x01){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <check_new_firmware+0x1e>
		return 1; // firmware available
 80022ba:	2301      	movs	r3, #1
 80022bc:	e005      	b.n	80022ca <check_new_firmware+0x2a>
	}
	else if(check_firmware == (uint32_t)0x02){
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d101      	bne.n	80022c8 <check_new_firmware+0x28>
		return 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	e000      	b.n	80022ca <check_new_firmware+0x2a>
	}

	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <flash_firmware_process>:
void flash_firmware_process() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
	if (check_new_firmware() == 1) {
 80022da:	f7ff ffe1 	bl	80022a0 <check_new_firmware>
 80022de:	0003      	movs	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d11a      	bne.n	800231a <flash_firmware_process+0x46>
		fota_init(&fota);
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <flash_firmware_process+0x64>)
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f89e 	bl	8002428 <fota_init>
		int result = fota.poll(&fota);
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <flash_firmware_process+0x64>)
 80022ee:	23a6      	movs	r3, #166	; 0xa6
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	58d3      	ldr	r3, [r2, r3]
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <flash_firmware_process+0x64>)
 80022f6:	0010      	movs	r0, r2
 80022f8:	4798      	blx	r3
 80022fa:	0003      	movs	r3, r0
 80022fc:	607b      	str	r3, [r7, #4]
		if(result == 2){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d103      	bne.n	800230c <flash_firmware_process+0x38>
			checkout_firmware(app_firmware);
 8002304:	2002      	movs	r0, #2
 8002306:	f000 f819 	bl	800233c <checkout_firmware>
 800230a:	e00e      	b.n	800232a <flash_firmware_process+0x56>
		}
		else if(result == -1){
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3301      	adds	r3, #1
 8002310:	d10b      	bne.n	800232a <flash_firmware_process+0x56>
			checkout_firmware(factory_firmware);
 8002312:	2003      	movs	r0, #3
 8002314:	f000 f812 	bl	800233c <checkout_firmware>
 8002318:	e007      	b.n	800232a <flash_firmware_process+0x56>
		}
	}
	else if(check_new_firmware() == 2){
 800231a:	f7ff ffc1 	bl	80022a0 <check_new_firmware>
 800231e:	0003      	movs	r3, r0
 8002320:	2b02      	cmp	r3, #2
 8002322:	d102      	bne.n	800232a <flash_firmware_process+0x56>
		checkout_firmware(factory_firmware);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f809 	bl	800233c <checkout_firmware>
	}
	checkout_firmware(app_firmware);
 800232a:	2002      	movs	r0, #2
 800232c:	f000 f806 	bl	800233c <checkout_firmware>
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000248 	.word	0x20000248

0800233c <checkout_firmware>:
void checkout_firmware(firmware_type_t firmware) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	0002      	movs	r2, r0
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	701a      	strb	r2, [r3, #0]
	switch (firmware) {
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d01a      	beq.n	8002386 <checkout_firmware+0x4a>
 8002350:	dc1f      	bgt.n	8002392 <checkout_firmware+0x56>
 8002352:	2b02      	cmp	r3, #2
 8002354:	d011      	beq.n	800237a <checkout_firmware+0x3e>
 8002356:	dc1c      	bgt.n	8002392 <checkout_firmware+0x56>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <checkout_firmware+0x26>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d006      	beq.n	800236e <checkout_firmware+0x32>
		break;
	case factory_firmware:
		jump_app(FACTORY_FIRMWARE_ADDR);
		break;
	default:
		break;
 8002360:	e017      	b.n	8002392 <checkout_firmware+0x56>
		jump_app(BOOTLOADER_ADDR);
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	051b      	lsls	r3, r3, #20
 8002366:	0018      	movs	r0, r3
 8002368:	f000 fb58 	bl	8002a1c <jump_app>
		break;
 800236c:	e012      	b.n	8002394 <checkout_firmware+0x58>
		jump_app(FLASH_FIRMWARE_ADDR);
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	051b      	lsls	r3, r3, #20
 8002372:	0018      	movs	r0, r3
 8002374:	f000 fb52 	bl	8002a1c <jump_app>
		break;
 8002378:	e00c      	b.n	8002394 <checkout_firmware+0x58>
		jump_app(APP_FIRMWARE_ADDR);
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fb4c 	bl	8002a1c <jump_app>
		break;
 8002384:	e006      	b.n	8002394 <checkout_firmware+0x58>
		jump_app(FACTORY_FIRMWARE_ADDR);
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	051b      	lsls	r3, r3, #20
 800238a:	0018      	movs	r0, r3
 800238c:	f000 fb46 	bl	8002a1c <jump_app>
		break;
 8002390:	e000      	b.n	8002394 <checkout_firmware+0x58>
		break;
 8002392:	46c0      	nop			; (mov r8, r8)
	}
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <fota_checksum>:
		0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };
/**
 *
 */
uint16_t fota_checksum(uint8_t *data, uint16_t length) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	000a      	movs	r2, r1
 80023a6:	1cbb      	adds	r3, r7, #2
 80023a8:	801a      	strh	r2, [r3, #0]
	uint8_t ucCRCHi = 0xFF;
 80023aa:	230f      	movs	r3, #15
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	701a      	strb	r2, [r3, #0]
	uint8_t ucCRCLo = 0xFF;
 80023b2:	230e      	movs	r3, #14
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	701a      	strb	r2, [r3, #0]
	int iIndex;

	while (length--) {
 80023ba:	e019      	b.n	80023f0 <fota_checksum+0x54>
		iIndex = ucCRCLo ^ *(data++);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	200e      	movs	r0, #14
 80023c6:	183b      	adds	r3, r7, r0
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4053      	eors	r3, r2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	60bb      	str	r3, [r7, #8]
		ucCRCLo = (uint8_t) (ucCRCHi ^ aucCRCHi[iIndex]);
 80023d0:	4a13      	ldr	r2, [pc, #76]	; (8002420 <fota_checksum+0x84>)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	7819      	ldrb	r1, [r3, #0]
 80023d8:	183b      	adds	r3, r7, r0
 80023da:	200f      	movs	r0, #15
 80023dc:	183a      	adds	r2, r7, r0
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	404a      	eors	r2, r1
 80023e2:	701a      	strb	r2, [r3, #0]
		ucCRCHi = aucCRCLo[iIndex];
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	490f      	ldr	r1, [pc, #60]	; (8002424 <fota_checksum+0x88>)
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	188a      	adds	r2, r1, r2
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	701a      	strb	r2, [r3, #0]
	while (length--) {
 80023f0:	1cbb      	adds	r3, r7, #2
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	1cba      	adds	r2, r7, #2
 80023f6:	1e59      	subs	r1, r3, #1
 80023f8:	8011      	strh	r1, [r2, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1de      	bne.n	80023bc <fota_checksum+0x20>
	}
	return (uint16_t) (ucCRCHi << 8 | ucCRCLo);
 80023fe:	230f      	movs	r3, #15
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	b21a      	sxth	r2, r3
 8002408:	230e      	movs	r3, #14
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b21b      	sxth	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	b29b      	uxth	r3, r3
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b004      	add	sp, #16
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	0800a478 	.word	0x0800a478
 8002424:	0800a578 	.word	0x0800a578

08002428 <fota_init>:
/**
 *
 */
void fota_init(fota_class *p_fota) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	p_fota->status = FOTA_ST_IDLE;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	23a2      	movs	r3, #162	; 0xa2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	2100      	movs	r1, #0
 8002438:	54d1      	strb	r1, [r2, r3]
	p_fota->get_status = fota_get_status;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	23a9      	movs	r3, #169	; 0xa9
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4913      	ldr	r1, [pc, #76]	; (8002490 <fota_init+0x68>)
 8002442:	50d1      	str	r1, [r2, r3]
	p_fota->poll = fota_poll;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	23a6      	movs	r3, #166	; 0xa6
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4912      	ldr	r1, [pc, #72]	; (8002494 <fota_init+0x6c>)
 800244c:	50d1      	str	r1, [r2, r3]
	p_fota->process = fota_process;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	23a7      	movs	r3, #167	; 0xa7
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4910      	ldr	r1, [pc, #64]	; (8002498 <fota_init+0x70>)
 8002456:	50d1      	str	r1, [r2, r3]
	p_fota->set_satus = fota_set_satus;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	23a8      	movs	r3, #168	; 0xa8
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	490f      	ldr	r1, [pc, #60]	; (800249c <fota_init+0x74>)
 8002460:	50d1      	str	r1, [r2, r3]
	ring_init(&p_fota->fota_fifo, MAX_RING_BUFFER);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3378      	adds	r3, #120	; 0x78
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f000 fbed 	bl	8002c4c <ring_init>
	fota_event_creat(&p_fota->event);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fa52 	bl	8002920 <fota_event_creat>
	p_fota->is_push_fifo = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
	p_fota->last_data = 0;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}
 8002490:	080024c3 	.word	0x080024c3
 8002494:	080024dd 	.word	0x080024dd
 8002498:	08002839 	.word	0x08002839
 800249c:	080024a1 	.word	0x080024a1

080024a0 <fota_set_satus>:

void fota_set_satus(fota_class *p_fota, FOTA_STATUS_t status) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	000a      	movs	r2, r1
 80024aa:	1cfb      	adds	r3, r7, #3
 80024ac:	701a      	strb	r2, [r3, #0]
	p_fota->status = status;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	1cf9      	adds	r1, r7, #3
 80024b2:	23a2      	movs	r3, #162	; 0xa2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	7809      	ldrb	r1, [r1, #0]
 80024b8:	54d1      	strb	r1, [r2, r3]
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <fota_get_status>:
FOTA_STATUS_t fota_get_status(fota_class *p_fota) {
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	return p_fota->status;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	23a2      	movs	r3, #162	; 0xa2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <fota_poll>:

int fota_poll(fota_class *p_fota) {
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	4c7f      	ldr	r4, [pc, #508]	; (80026dc <fota_poll+0x200>)
 80024e0:	44a5      	add	sp, r4
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	int result = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	2283      	movs	r2, #131	; 0x83
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	18ba      	adds	r2, r7, r2
 80024ee:	6013      	str	r3, [r2, #0]
	fota_event_t event = fota_no_message;
 80024f0:	4c7b      	ldr	r4, [pc, #492]	; (80026e0 <fota_poll+0x204>)
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
	if (fota_event_pop_tail(&p_fota->event, &event) == true)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	193a      	adds	r2, r7, r4
 80024fe:	0011      	movs	r1, r2
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fa27 	bl	8002954 <fota_event_pop_tail>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d100      	bne.n	800250c <fota_poll+0x30>
 800250a:	e081      	b.n	8002610 <fota_poll+0x134>
		if (event == fota_new_message) {
 800250c:	193b      	adds	r3, r7, r4
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d000      	beq.n	8002516 <fota_poll+0x3a>
 8002514:	e07c      	b.n	8002610 <fota_poll+0x134>
			uint8_t data[512];
			uint16_t p_data = 0;
 8002516:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <fota_poll+0x208>)
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]
			while (1) {
				if (ring_pop_tail(&p_fota->fota_fifo, data + p_data) == true
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3378      	adds	r3, #120	; 0x78
 8002522:	0018      	movs	r0, r3
 8002524:	4c6f      	ldr	r4, [pc, #444]	; (80026e4 <fota_poll+0x208>)
 8002526:	193b      	adds	r3, r7, r4
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	18ba      	adds	r2, r7, r2
 800252e:	18d3      	adds	r3, r2, r3
 8002530:	0019      	movs	r1, r3
 8002532:	f000 fba8 	bl	8002c86 <ring_pop_tail>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d00c      	beq.n	8002554 <fota_poll+0x78>
						&& data[0] == FOTA_HEAD) {
 800253a:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <fota_poll+0x20c>)
 800253c:	2284      	movs	r2, #132	; 0x84
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	189b      	adds	r3, r3, r2
 8002542:	19db      	adds	r3, r3, r7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b7e      	cmp	r3, #126	; 0x7e
 8002548:	d104      	bne.n	8002554 <fota_poll+0x78>
					p_data++;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	193b      	adds	r3, r7, r4
 8002550:	3201      	adds	r2, #1
 8002552:	801a      	strh	r2, [r3, #0]
				}
				if (data[p_data - 1] == '\n' && data[p_data - 2] == '\r') {
 8002554:	4963      	ldr	r1, [pc, #396]	; (80026e4 <fota_poll+0x208>)
 8002556:	187b      	adds	r3, r7, r1
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a62      	ldr	r2, [pc, #392]	; (80026e8 <fota_poll+0x20c>)
 800255e:	2084      	movs	r0, #132	; 0x84
 8002560:	0080      	lsls	r0, r0, #2
 8002562:	1812      	adds	r2, r2, r0
 8002564:	19d2      	adds	r2, r2, r7
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	2b0a      	cmp	r3, #10
 800256a:	d1d8      	bne.n	800251e <fota_poll+0x42>
 800256c:	187b      	adds	r3, r7, r1
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	3b02      	subs	r3, #2
 8002572:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <fota_poll+0x20c>)
 8002574:	1812      	adds	r2, r2, r0
 8002576:	19d2      	adds	r2, r2, r7
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	2b0d      	cmp	r3, #13
 800257c:	d000      	beq.n	8002580 <fota_poll+0xa4>
				if (ring_pop_tail(&p_fota->fota_fifo, data + p_data) == true
 800257e:	e7ce      	b.n	800251e <fota_poll+0x42>
					break;
 8002580:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (p_fota->process(p_fota, data, p_data) == 1) {
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	23a7      	movs	r3, #167	; 0xa7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	58d3      	ldr	r3, [r2, r3]
 800258a:	4a56      	ldr	r2, [pc, #344]	; (80026e4 <fota_poll+0x208>)
 800258c:	18ba      	adds	r2, r7, r2
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	2108      	movs	r1, #8
 8002592:	1879      	adds	r1, r7, r1
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	0003      	movs	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d12f      	bne.n	80025fe <fota_poll+0x122>
				//debug_printf("%s\r\n", p_fota->commands.data);
				switch (p_fota->commands.commands) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <fota_poll+0x210>)
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d017      	beq.n	80025d8 <fota_poll+0xfc>
 80025a8:	dc2b      	bgt.n	8002602 <fota_poll+0x126>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d02b      	beq.n	8002606 <fota_poll+0x12a>
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d000      	beq.n	80025b4 <fota_poll+0xd8>
				case FOTA_WRITE:
					if (p_fota->get_status(p_fota) == FOTA_ST_BEGIN)
						p_fota->set_satus(p_fota, FOTA_ST_PROCESS);
					break;
				default:
					break;
 80025b2:	e026      	b.n	8002602 <fota_poll+0x126>
					if (p_fota->get_status(p_fota) == FOTA_ST_IDLE)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	23a9      	movs	r3, #169	; 0xa9
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	58d3      	ldr	r3, [r2, r3]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	0010      	movs	r0, r2
 80025c0:	4798      	blx	r3
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d121      	bne.n	800260a <fota_poll+0x12e>
						p_fota->set_satus(p_fota, FOTA_ST_BEGIN);
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	23a8      	movs	r3, #168	; 0xa8
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	58d3      	ldr	r3, [r2, r3]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	2101      	movs	r1, #1
 80025d2:	0010      	movs	r0, r2
 80025d4:	4798      	blx	r3
					break;
 80025d6:	e018      	b.n	800260a <fota_poll+0x12e>
					if (p_fota->get_status(p_fota) == FOTA_ST_BEGIN)
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	23a9      	movs	r3, #169	; 0xa9
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	58d3      	ldr	r3, [r2, r3]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	0010      	movs	r0, r2
 80025e4:	4798      	blx	r3
 80025e6:	0003      	movs	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d110      	bne.n	800260e <fota_poll+0x132>
						p_fota->set_satus(p_fota, FOTA_ST_PROCESS);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	23a8      	movs	r3, #168	; 0xa8
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	58d3      	ldr	r3, [r2, r3]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	2102      	movs	r1, #2
 80025f8:	0010      	movs	r0, r2
 80025fa:	4798      	blx	r3
					break;
 80025fc:	e007      	b.n	800260e <fota_poll+0x132>
				}
			}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	e006      	b.n	8002610 <fota_poll+0x134>
					break;
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	e004      	b.n	8002610 <fota_poll+0x134>
					break;
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	e002      	b.n	8002610 <fota_poll+0x134>
					break;
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	e000      	b.n	8002610 <fota_poll+0x134>
					break;
 800260e:	46c0      	nop			; (mov r8, r8)

		}
	switch (p_fota->get_status(p_fota)) {
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	23a9      	movs	r3, #169	; 0xa9
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	58d3      	ldr	r3, [r2, r3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	0010      	movs	r0, r2
 800261c:	4798      	blx	r3
 800261e:	0003      	movs	r3, r0
 8002620:	2b05      	cmp	r3, #5
 8002622:	d842      	bhi.n	80026aa <fota_poll+0x1ce>
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <fota_poll+0x214>)
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	469f      	mov	pc, r3
	case FOTA_ST_IDLE:
		break;
	case FOTA_ST_BEGIN:
		break;
	case FOTA_ST_PROCESS:
		if (fota_flash_firmware(p_fota) == 0) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f85f 	bl	80026f4 <fota_flash_firmware>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d108      	bne.n	800264c <fota_poll+0x170>
			p_fota->set_satus(p_fota, FOTA_ST_ERROR);
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	23a8      	movs	r3, #168	; 0xa8
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	58d3      	ldr	r3, [r2, r3]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	2105      	movs	r1, #5
 8002646:	0010      	movs	r0, r2
 8002648:	4798      	blx	r3
			p_fota->set_satus(p_fota, FOTA_ST_SUCCESS);
		}
		else{
			p_fota->set_satus(p_fota, FOTA_ST_END);
		}
		break;
 800264a:	e031      	b.n	80026b0 <fota_poll+0x1d4>
		} else if(fota_flash_firmware(p_fota) == 1) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f850 	bl	80026f4 <fota_flash_firmware>
 8002654:	0003      	movs	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <fota_poll+0x190>
			p_fota->set_satus(p_fota, FOTA_ST_SUCCESS);
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	23a8      	movs	r3, #168	; 0xa8
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	58d3      	ldr	r3, [r2, r3]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	2103      	movs	r1, #3
 8002666:	0010      	movs	r0, r2
 8002668:	4798      	blx	r3
		break;
 800266a:	e021      	b.n	80026b0 <fota_poll+0x1d4>
			p_fota->set_satus(p_fota, FOTA_ST_END);
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	23a8      	movs	r3, #168	; 0xa8
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	58d3      	ldr	r3, [r2, r3]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	2104      	movs	r1, #4
 8002678:	0010      	movs	r0, r2
 800267a:	4798      	blx	r3
		break;
 800267c:	e018      	b.n	80026b0 <fota_poll+0x1d4>
	case FOTA_ST_SUCCESS:
		p_fota->set_satus(p_fota, FOTA_ST_BEGIN);
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	23a8      	movs	r3, #168	; 0xa8
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	58d3      	ldr	r3, [r2, r3]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	2101      	movs	r1, #1
 800268a:	0010      	movs	r0, r2
 800268c:	4798      	blx	r3
		break;
 800268e:	e00f      	b.n	80026b0 <fota_poll+0x1d4>
	case FOTA_ST_END:
		result = 2;
 8002690:	2302      	movs	r3, #2
 8002692:	2283      	movs	r2, #131	; 0x83
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	18ba      	adds	r2, r7, r2
 8002698:	6013      	str	r3, [r2, #0]
		break;
 800269a:	e009      	b.n	80026b0 <fota_poll+0x1d4>
	case FOTA_ST_ERROR:
		result = -1;
 800269c:	2301      	movs	r3, #1
 800269e:	425b      	negs	r3, r3
 80026a0:	2283      	movs	r2, #131	; 0x83
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	18ba      	adds	r2, r7, r2
 80026a6:	6013      	str	r3, [r2, #0]
		break;
 80026a8:	e002      	b.n	80026b0 <fota_poll+0x1d4>
	default:
		break;
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	e000      	b.n	80026b0 <fota_poll+0x1d4>
		break;
 80026ae:	46c0      	nop			; (mov r8, r8)
	}

	if(result == 1){
 80026b0:	2383      	movs	r3, #131	; 0x83
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <fota_poll+0x1ec>
		return fota_poll(p_fota);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff ff0c 	bl	80024dc <fota_poll>
 80026c4:	0003      	movs	r3, r0
 80026c6:	e003      	b.n	80026d0 <fota_poll+0x1f4>
	}
	return result;
 80026c8:	2383      	movs	r3, #131	; 0x83
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	2385      	movs	r3, #133	; 0x85
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	449d      	add	sp, r3
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	fffffdec 	.word	0xfffffdec
 80026e0:	00000209 	.word	0x00000209
 80026e4:	0000020a 	.word	0x0000020a
 80026e8:	fffffdf8 	.word	0xfffffdf8
 80026ec:	00000292 	.word	0x00000292
 80026f0:	0800a678 	.word	0x0800a678

080026f4 <fota_flash_firmware>:
uint8_t fota_flash_firmware(fota_class *p_fota) {
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	static uint32_t addr_write;
	uint32_t data_write;
	intel_hex *p_hex_data;
	uint16_t length = byte_to_hardword((uint8_t*)p_fota->commands.byte_count.byte);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a4b      	ldr	r2, [pc, #300]	; (800282c <fota_flash_firmware+0x138>)
 8002700:	4694      	mov	ip, r2
 8002702:	4463      	add	r3, ip
 8002704:	2514      	movs	r5, #20
 8002706:	197c      	adds	r4, r7, r5
 8002708:	0018      	movs	r0, r3
 800270a:	f000 fbe8 	bl	8002ede <byte_to_hardword>
 800270e:	0003      	movs	r3, r0
 8002710:	8023      	strh	r3, [r4, #0]
	uint8_t *p_data_line = string_to_hex((char*)p_fota->commands.data,length);
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	23a5      	movs	r3, #165	; 0xa5
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	58d2      	ldr	r2, [r2, r3]
 800271a:	197b      	adds	r3, r7, r5
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	0019      	movs	r1, r3
 8002720:	0010      	movs	r0, r2
 8002722:	f000 fb33 	bl	8002d8c <string_to_hex>
 8002726:	0003      	movs	r3, r0
 8002728:	613b      	str	r3, [r7, #16]
	p_hex_data = intel_hex_process(p_data_line,length);
 800272a:	197b      	adds	r3, r7, r5
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f9e1 	bl	8002afa <intel_hex_process>
 8002738:	0003      	movs	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
	if (p_hex_data == NULL) {
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <fota_flash_firmware+0x52>
		return 0;
 8002742:	2300      	movs	r3, #0
 8002744:	e06e      	b.n	8002824 <fota_flash_firmware+0x130>
	} else {
		switch (p_hex_data->record_type) {
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	791b      	ldrb	r3, [r3, #4]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d866      	bhi.n	800281c <fota_flash_firmware+0x128>
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <fota_flash_firmware+0x13c>)
 8002752:	18d3      	adds	r3, r2, r3
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	469f      	mov	pc, r3
			case Data_rec:
				addr_write += (uint32_t) byte_to_hardword(p_hex_data->addr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3302      	adds	r3, #2
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fbbe 	bl	8002ede <byte_to_hardword>
 8002762:	0003      	movs	r3, r0
 8002764:	001a      	movs	r2, r3
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <fota_flash_firmware+0x140>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	18d2      	adds	r2, r2, r3
 800276c:	4b31      	ldr	r3, [pc, #196]	; (8002834 <fota_flash_firmware+0x140>)
 800276e:	601a      	str	r2, [r3, #0]
				/*Flash write*/
				for(uint16_t i = 0;i<4;i++){
 8002770:	2316      	movs	r3, #22
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e02c      	b.n	80027d4 <fota_flash_firmware+0xe0>
					data_write = byte_to_word_cr(p_hex_data->data+i*4);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2416      	movs	r4, #22
 8002780:	193a      	adds	r2, r7, r4
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	189b      	adds	r3, r3, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fbbb 	bl	8002f04 <byte_to_word_cr>
 800278e:	0003      	movs	r3, r0
 8002790:	60bb      	str	r3, [r7, #8]
					addr_write=addr_write + i*4;
 8002792:	193b      	adds	r3, r7, r4
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	001a      	movs	r2, r3
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <fota_flash_firmware+0x140>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	18d2      	adds	r2, r2, r3
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <fota_flash_firmware+0x140>)
 80027a2:	601a      	str	r2, [r3, #0]
					flash_write(addr_write, data_write);
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <fota_flash_firmware+0x140>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 f918 	bl	80029e2 <flash_write>
					if(flash_read(addr_write) != data_write){
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <fota_flash_firmware+0x140>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f906 	bl	80029c8 <flash_read>
 80027bc:	0002      	movs	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d001      	beq.n	80027c8 <fota_flash_firmware+0xd4>
						return 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e02d      	b.n	8002824 <fota_flash_firmware+0x130>
				for(uint16_t i = 0;i<4;i++){
 80027c8:	2116      	movs	r1, #22
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	3201      	adds	r2, #1
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	2316      	movs	r3, #22
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d9cd      	bls.n	800277a <fota_flash_firmware+0x86>
					}
				}
				break;
 80027de:	e020      	b.n	8002822 <fota_flash_firmware+0x12e>
			case EndFile_rec:
				/*Flash Lock*/
				flash_lock();
 80027e0:	f000 f915 	bl	8002a0e <flash_lock>
				return 2;
 80027e4:	2302      	movs	r3, #2
 80027e6:	e01d      	b.n	8002824 <fota_flash_firmware+0x130>
				break;
			case Start_Segment_Address_rec:

				break;
			case Extended_Linear_Address_rec:
				addr_write = (uint32_t) byte_to_hardword(p_hex_data->data)<<16 |(uint32_t) byte_to_hardword(p_hex_data->addr);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fb76 	bl	8002ede <byte_to_hardword>
 80027f2:	0003      	movs	r3, r0
 80027f4:	041c      	lsls	r4, r3, #16
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3302      	adds	r3, #2
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fb6f 	bl	8002ede <byte_to_hardword>
 8002800:	0003      	movs	r3, r0
 8002802:	0022      	movs	r2, r4
 8002804:	431a      	orrs	r2, r3
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <fota_flash_firmware+0x140>)
 8002808:	601a      	str	r2, [r3, #0]
				/*Unlock Flash*/
				flash_unlock();
 800280a:	f000 f8f9 	bl	8002a00 <flash_unlock>
				/*Erase Flash*/
				flash_erase(addr_write,5);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <fota_flash_firmware+0x140>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2105      	movs	r1, #5
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f8c7 	bl	80029a8 <flash_erase>
				break;
 800281a:	e002      	b.n	8002822 <fota_flash_firmware+0x12e>
			case Start_Linear_Address_rec:

				break;
			default:
				break;
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	e000      	b.n	8002822 <fota_flash_firmware+0x12e>
				break;
 8002820:	46c0      	nop			; (mov r8, r8)
		}
		return 1;
 8002822:	2301      	movs	r3, #1
	}
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b006      	add	sp, #24
 800282a:	bdb0      	pop	{r4, r5, r7, pc}
 800282c:	0000028e 	.word	0x0000028e
 8002830:	0800a690 	.word	0x0800a690
 8002834:	200004f0 	.word	0x200004f0

08002838 <fota_process>:
uint8_t fota_process(fota_class *p_fota, uint8_t *data, uint16_t length) {
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	801a      	strh	r2, [r3, #0]
	p_fota->commands.checksum.byte[0] = data[length - 2];
 8002846:	1dbb      	adds	r3, r7, #6
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	3b02      	subs	r3, #2
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	18d3      	adds	r3, r2, r3
 8002850:	7819      	ldrb	r1, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	23a4      	movs	r3, #164	; 0xa4
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	54d1      	strb	r1, [r2, r3]
	p_fota->commands.checksum.byte[0] = data[length - 1];
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	3b01      	subs	r3, #1
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	18d3      	adds	r3, r2, r3
 8002864:	7819      	ldrb	r1, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	23a4      	movs	r3, #164	; 0xa4
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	54d1      	strb	r1, [r2, r3]
	if (p_fota->commands.checksum.haftword != fota_checksum(data, length - 2)) {
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	23a4      	movs	r3, #164	; 0xa4
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	5ad4      	ldrh	r4, [r2, r3]
 8002876:	1dbb      	adds	r3, r7, #6
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	3b02      	subs	r3, #2
 800287c:	b29a      	uxth	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff fd8a 	bl	800239c <fota_checksum>
 8002888:	0003      	movs	r3, r0
 800288a:	429c      	cmp	r4, r3
 800288c:	d001      	beq.n	8002892 <fota_process+0x5a>
		return 0;
 800288e:	2300      	movs	r3, #0
 8002890:	e039      	b.n	8002906 <fota_process+0xce>
	}
	p_fota->commands.header = data[0];
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	23a3      	movs	r3, #163	; 0xa3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	54d1      	strb	r1, [r2, r3]
	p_fota->commands.commands = data[1];
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	7859      	ldrb	r1, [r3, #1]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <fota_process+0xd8>)
 80028a6:	5499      	strb	r1, [r3, r2]
	p_fota->commands.byte_count.byte[0] = data[2];
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	7899      	ldrb	r1, [r3, #2]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <fota_process+0xdc>)
 80028b0:	5499      	strb	r1, [r3, r2]
	p_fota->commands.byte_count.byte[1] = data[3];
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	78d9      	ldrb	r1, [r3, #3]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <fota_process+0xe0>)
 80028ba:	5499      	strb	r1, [r3, r2]
	for (uint16_t i = 0; i < p_fota->commands.byte_count.haftword; i++) {
 80028bc:	2316      	movs	r3, #22
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	e011      	b.n	80028ea <fota_process+0xb2>
		fota_buffer[i] = data[4 + i];
 80028c6:	2116      	movs	r1, #22
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	3304      	adds	r3, #4
 80028ce:	001a      	movs	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	189a      	adds	r2, r3, r2
 80028d4:	0008      	movs	r0, r1
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	7811      	ldrb	r1, [r2, #0]
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <fota_process+0xe4>)
 80028de:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < p_fota->commands.byte_count.haftword; i++) {
 80028e0:	183b      	adds	r3, r7, r0
 80028e2:	881a      	ldrh	r2, [r3, #0]
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	3201      	adds	r2, #1
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <fota_process+0xdc>)
 80028ee:	5a9b      	ldrh	r3, [r3, r2]
 80028f0:	2216      	movs	r2, #22
 80028f2:	18ba      	adds	r2, r7, r2
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3e5      	bcc.n	80028c6 <fota_process+0x8e>
	}
	p_fota->commands.data = fota_buffer;
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	23a5      	movs	r3, #165	; 0xa5
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4906      	ldr	r1, [pc, #24]	; (800291c <fota_process+0xe4>)
 8002902:	50d1      	str	r1, [r2, r3]
	return 1;
 8002904:	2301      	movs	r3, #1
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b007      	add	sp, #28
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	00000292 	.word	0x00000292
 8002914:	0000028e 	.word	0x0000028e
 8002918:	0000028f 	.word	0x0000028f
 800291c:	20000214 	.word	0x20000214

08002920 <fota_event_creat>:


#include "fota_event.h"


void fota_event_creat(fota_event_queue_handle *p_fota_event){
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	memset(p_fota_event->buff,fota_no_message,MAX_FOTA_EVENT_QUEUE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2264      	movs	r2, #100	; 0x64
 800292c:	2100      	movs	r1, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f003 f822 	bl	8005978 <memset>
	p_fota_event->head = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	66da      	str	r2, [r3, #108]	; 0x6c
	p_fota_event->tail = 0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	669a      	str	r2, [r3, #104]	; 0x68
	p_fota_event->count = 0;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	671a      	str	r2, [r3, #112]	; 0x70
	p_fota_event->size = MAX_FOTA_EVENT_QUEUE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2264      	movs	r2, #100	; 0x64
 800294a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <fota_event_pop_tail>:
		p_fota_event->count += 1;
		return true;
	}
	return false;
}
bool fota_event_pop_tail(fota_event_queue_handle *p_fota_event, fota_event_t* data){
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	if (p_fota_event->head != p_fota_event->tail) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002966:	429a      	cmp	r2, r3
 8002968:	d019      	beq.n	800299e <fota_event_pop_tail+0x4a>
		data[0] = p_fota_event->buff[p_fota_event->tail];
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	5cd2      	ldrb	r2, [r2, r3]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	701a      	strb	r2, [r3, #0]
		p_fota_event->tail = (unsigned int) (p_fota_event->tail + 1) % p_fota_event->size;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002980:	0019      	movs	r1, r3
 8002982:	0010      	movs	r0, r2
 8002984:	f7fd fc62 	bl	800024c <__aeabi_uidivmod>
 8002988:	000b      	movs	r3, r1
 800298a:	001a      	movs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	669a      	str	r2, [r3, #104]	; 0x68
		p_fota_event->count -= 1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	671a      	str	r2, [r3, #112]	; 0x70
		return true;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <fota_event_pop_tail+0x4c>
	}
	return false;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <flash_erase>:


#include "flash.h"


uint8_t flash_erase(uint32_t page_or_sector_addr, uint32_t nb_page_or_sector){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
	return flash_hw_erase(page_or_sector_addr,nb_page_or_sector);
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0011      	movs	r1, r2
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f83b 	bl	8002a34 <flash_hw_erase>
 80029be:	0003      	movs	r3, r0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <flash_read>:
uint32_t flash_read(uint32_t addr){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	return flash_hw_read(addr);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f84d 	bl	8002a72 <flash_hw_read>
 80029d8:	0003      	movs	r3, r0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <flash_write>:
void flash_write(uint32_t addr,uint32_t data){
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
	flash_hw_write(addr, data);
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f847 	bl	8002a86 <flash_hw_write>
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <flash_unlock>:
void flash_unlock(void){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	flash_hw_unlock();
 8002a04:	f000 f850 	bl	8002aa8 <flash_hw_unlock>
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <flash_lock>:
void flash_lock(void){
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
	flash_hw_lock();
 8002a12:	f000 f850 	bl	8002ab6 <flash_hw_lock>
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <jump_app>:
void jump_app(uint32_t addr){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	jump_hw_app(addr);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f84c 	bl	8002ac4 <jump_hw_app>
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <flash_hw_erase>:

#include "flash_hw.h"

#define PAGE_ADDR_BEGIN (uint32_t)0x800c000

uint8_t flash_hw_erase(uint32_t page_or_sector_addr, uint32_t nb_page_or_sector){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef flash_erase;
	flash_erase.PageAddress = page_or_sector_addr;
 8002a3e:	210c      	movs	r1, #12
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	605a      	str	r2, [r3, #4]
	flash_erase.NbPages = nb_page_or_sector;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	609a      	str	r2, [r3, #8]
	flash_erase.TypeErase =  FLASH_TYPEERASE_PAGES;
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
	uint32_t page_error;
	if(HAL_FLASHEx_Erase(&flash_erase,&page_error) == HAL_OK){
 8002a52:	2308      	movs	r3, #8
 8002a54:	18fa      	adds	r2, r7, r3
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 f850 	bl	8003b00 <HAL_FLASHEx_Erase>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d101      	bne.n	8002a68 <flash_hw_erase+0x34>
		return 1;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <flash_hw_erase+0x36>
	}
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b006      	add	sp, #24
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <flash_hw_read>:
uint32_t flash_hw_read(uint32_t addr){
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t *)(addr);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b002      	add	sp, #8
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <flash_hw_write>:
void flash_hw_write(uint32_t addr,uint32_t data){
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, data);
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	000a      	movs	r2, r1
 8002a94:	2100      	movs	r1, #0
 8002a96:	000b      	movs	r3, r1
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f000 feda 	bl	8003854 <HAL_FLASH_Program>
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <flash_hw_unlock>:
void flash_hw_unlock(void){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002aac:	f000 ff68 	bl	8003980 <HAL_FLASH_Unlock>
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <flash_hw_lock>:
void flash_hw_lock(void){
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8002aba:	f000 ff87 	bl	80039cc <HAL_FLASH_Lock>
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <jump_hw_app>:
void jump_hw_app(uint32_t addr){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	HAL_RCC_DeInit();
 8002acc:	f001 fa52 	bl	8003f74 <HAL_RCC_DeInit>
	HAL_DeInit();
 8002ad0:	f000 fcee 	bl	80034b0 <HAL_DeInit>
	//SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |SCB_SHCSR_BUSFAULTENA_Msk |SCB_SHCSR_MEMFAULTENA_Msk ) ;
	__set_MSP(*((volatile uint32_t*) addr));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f383 8808 	msr	MSP, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
	uint32_t JumpAddress = *((volatile uint32_t*) (addr + 4));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	617b      	str	r3, [r7, #20]
	void (*reset_handler)(void) = (void*)JumpAddress;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	613b      	str	r3, [r7, #16]
	reset_handler();
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4798      	blx	r3
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b006      	add	sp, #24
 8002af8:	bd80      	pop	{r7, pc}

08002afa <intel_hex_process>:

#include "intelhex.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
intel_hex* intel_hex_process(uint8_t* data, uint16_t length){
 8002afa:	b590      	push	{r4, r7, lr}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	000a      	movs	r2, r1
 8002b04:	1cbb      	adds	r3, r7, #2
 8002b06:	801a      	strh	r2, [r3, #0]
	intel_hex* result = (intel_hex*)malloc(length);
 8002b08:	1cbb      	adds	r3, r7, #2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f002 ff1f 	bl	8005950 <malloc>
 8002b12:	0003      	movs	r3, r0
 8002b14:	60bb      	str	r3, [r7, #8]
	if(data[0] == ':'){
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b3a      	cmp	r3, #58	; 0x3a
 8002b1c:	d157      	bne.n	8002bce <intel_hex_process+0xd4>
		result->start_code = data[0];
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	701a      	strb	r2, [r3, #0]
		result->byte_count = data[1];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	785a      	ldrb	r2, [r3, #1]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	705a      	strb	r2, [r3, #1]
		result->addr[0] = data[2];
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	789a      	ldrb	r2, [r3, #2]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	709a      	strb	r2, [r3, #2]
		result->addr[1] = data[3];
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	78da      	ldrb	r2, [r3, #3]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	70da      	strb	r2, [r3, #3]
		result->record_type = data[4];
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	791a      	ldrb	r2, [r3, #4]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	711a      	strb	r2, [r3, #4]
		result->data = malloc(result->byte_count);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f002 ff00 	bl	8005950 <malloc>
 8002b50:	0003      	movs	r3, r0
 8002b52:	001a      	movs	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
		for(uint16_t i = 0;i<result->byte_count;i++){
 8002b58:	230e      	movs	r3, #14
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	801a      	strh	r2, [r3, #0]
 8002b60:	e012      	b.n	8002b88 <intel_hex_process+0x8e>
			result->data[i] = data[5+i];
 8002b62:	200e      	movs	r0, #14
 8002b64:	183b      	adds	r3, r7, r0
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	3305      	adds	r3, #5
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	189a      	adds	r2, r3, r2
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	183b      	adds	r3, r7, r0
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	18cb      	adds	r3, r1, r3
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0;i<result->byte_count;i++){
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	881a      	ldrh	r2, [r3, #0]
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	3201      	adds	r2, #1
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	220e      	movs	r2, #14
 8002b90:	18ba      	adds	r2, r7, r2
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3e4      	bcc.n	8002b62 <intel_hex_process+0x68>
		}
		result->checksum = data[5+result->byte_count];
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	3305      	adds	r3, #5
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	731a      	strb	r2, [r3, #12]
		if(result->checksum != intel_hex_checksum(data, length)){
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	7b1c      	ldrb	r4, [r3, #12]
 8002bae:	1cbb      	adds	r3, r7, #2
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0011      	movs	r1, r2
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 f80e 	bl	8002bd8 <intel_hex_checksum>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	429c      	cmp	r4, r3
 8002bc0:	d005      	beq.n	8002bce <intel_hex_process+0xd4>
			free(result);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f002 fecd 	bl	8005964 <free>
			return NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <intel_hex_process+0xd6>
		}
	}
	return result;
 8002bce:	68bb      	ldr	r3, [r7, #8]
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b005      	add	sp, #20
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <intel_hex_checksum>:
uint8_t intel_hex_checksum(uint8_t* data, uint16_t length){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	000a      	movs	r2, r1
 8002be2:	1cbb      	adds	r3, r7, #2
 8002be4:	801a      	strh	r2, [r3, #0]
	uint8_t intel_crc = 0;
 8002be6:	230f      	movs	r3, #15
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1;i<length-1;i++){
 8002bee:	230c      	movs	r3, #12
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	e010      	b.n	8002c1a <intel_hex_checksum+0x42>
		intel_crc = intel_crc + data[i];
 8002bf8:	200c      	movs	r0, #12
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	18d3      	adds	r3, r2, r3
 8002c02:	7819      	ldrb	r1, [r3, #0]
 8002c04:	220f      	movs	r2, #15
 8002c06:	18bb      	adds	r3, r7, r2
 8002c08:	18ba      	adds	r2, r7, r2
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	188a      	adds	r2, r1, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1;i<length-1;i++){
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	3201      	adds	r2, #1
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	1cbb      	adds	r3, r7, #2
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dbe6      	blt.n	8002bf8 <intel_hex_checksum+0x20>
	}
	intel_crc = !intel_crc + 1;
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <intel_hex_checksum+0x60>
 8002c34:	2202      	movs	r2, #2
 8002c36:	e000      	b.n	8002c3a <intel_hex_checksum+0x62>
 8002c38:	2201      	movs	r2, #1
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
	return intel_crc;
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	781b      	ldrb	r3, [r3, #0]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ring_init>:
 *      Author: Admin
 */

#include "ringbuffer.h"

void ring_init(Ring_Buffer_t *ringbuf, unsigned int size) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
	ringbuf->count = 0;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	2383      	movs	r3, #131	; 0x83
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	50d1      	str	r1, [r2, r3]
	ringbuf->head = 0;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	2382      	movs	r3, #130	; 0x82
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	2100      	movs	r1, #0
 8002c68:	50d1      	str	r1, [r2, r3]
	ringbuf->tail = 0;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	2381      	movs	r3, #129	; 0x81
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	2100      	movs	r1, #0
 8002c72:	50d1      	str	r1, [r2, r3]
	ringbuf->size = size;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	50d1      	str	r1, [r2, r3]
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <ring_pop_tail>:
		return true;
	}
	return false;
}

bool ring_pop_tail(Ring_Buffer_t *ring, uint8_t* data) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
	if (ring->head != ring->tail) {
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	2382      	movs	r3, #130	; 0x82
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	58d2      	ldr	r2, [r2, r3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	2381      	movs	r3, #129	; 0x81
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	58cb      	ldr	r3, [r1, r3]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d024      	beq.n	8002cee <ring_pop_tail+0x68>
		data[0] = ring->buff[ring->tail];
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	2381      	movs	r3, #129	; 0x81
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	58d3      	ldr	r3, [r2, r3]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	5cd2      	ldrb	r2, [r2, r3]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
		ring->tail = (unsigned int) (ring->tail + 1) % ring->size;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	2381      	movs	r3, #129	; 0x81
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	58d3      	ldr	r3, [r2, r3]
 8002cbc:	1c58      	adds	r0, r3, #1
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	58d3      	ldr	r3, [r2, r3]
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	f7fd fac0 	bl	800024c <__aeabi_uidivmod>
 8002ccc:	000b      	movs	r3, r1
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	2381      	movs	r3, #129	; 0x81
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	50d1      	str	r1, [r2, r3]
		ring->count -= 1;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	2383      	movs	r3, #131	; 0x83
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	58d3      	ldr	r3, [r2, r3]
 8002ce0:	1e59      	subs	r1, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	2383      	movs	r3, #131	; 0x83
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	50d1      	str	r1, [r2, r3]
		return true;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <ring_pop_tail+0x6a>
	}
	return false;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <byte_to_hex>:
#include "utils.h"

uint8_t hex[22] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
		'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f' };
uint8_t byte_to_hex(uint8_t byte);
uint8_t byte_to_hex(uint8_t byte) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	0002      	movs	r2, r0
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	701a      	strb	r2, [r3, #0]
	uint8_t _hex;
	for (uint16_t i = 0; i < 22; i++) {
 8002d04:	230c      	movs	r3, #12
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e02f      	b.n	8002d6e <byte_to_hex+0x76>
		if (byte == hex[i]) {
 8002d0e:	210c      	movs	r1, #12
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <byte_to_hex+0x90>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	1dfa      	adds	r2, r7, #7
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d120      	bne.n	8002d62 <byte_to_hex+0x6a>
			if (i < 10) {
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d806      	bhi.n	8002d36 <byte_to_hex+0x3e>
				_hex = byte - 48;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	1dfa      	adds	r2, r7, #7
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	3a30      	subs	r2, #48	; 0x30
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e015      	b.n	8002d62 <byte_to_hex+0x6a>
			} else if (i >= 10 && i < 16) {
 8002d36:	220c      	movs	r2, #12
 8002d38:	18bb      	adds	r3, r7, r2
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	2b09      	cmp	r3, #9
 8002d3e:	d90a      	bls.n	8002d56 <byte_to_hex+0x5e>
 8002d40:	18bb      	adds	r3, r7, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d806      	bhi.n	8002d56 <byte_to_hex+0x5e>
				_hex = byte - 55;
 8002d48:	230f      	movs	r3, #15
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	1dfa      	adds	r2, r7, #7
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	3a37      	subs	r2, #55	; 0x37
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e005      	b.n	8002d62 <byte_to_hex+0x6a>
			} else {
				_hex = byte - 87;
 8002d56:	230f      	movs	r3, #15
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	1dfa      	adds	r2, r7, #7
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	3a57      	subs	r2, #87	; 0x57
 8002d60:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < 22; i++) {
 8002d62:	210c      	movs	r1, #12
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	3201      	adds	r2, #1
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	230c      	movs	r3, #12
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b15      	cmp	r3, #21
 8002d76:	d9ca      	bls.n	8002d0e <byte_to_hex+0x16>
			}
		}
	}
	return _hex;
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000000 	.word	0x20000000

08002d8c <string_to_hex>:

uint8_t* string_to_hex(char* data, uint16_t length) {
 8002d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	000a      	movs	r2, r1
 8002d96:	1cbb      	adds	r3, r7, #2
 8002d98:	801a      	strh	r2, [r3, #0]
	uint8_t *result = (uint8_t*) malloc(length / 2 + 1);
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	0018      	movs	r0, r3
 8002da6:	f002 fdd3 	bl	8005950 <malloc>
 8002daa:	0003      	movs	r3, r0
 8002dac:	60fb      	str	r3, [r7, #12]
	if (length % 2 != 0) {
 8002dae:	1cbb      	adds	r3, r7, #2
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d046      	beq.n	8002e4a <string_to_hex+0xbe>
		uint16_t p_result = 0;
 8002dbc:	2316      	movs	r3, #22
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length - 1; i = i + 2) {
 8002dc4:	2314      	movs	r3, #20
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	e034      	b.n	8002e38 <string_to_hex+0xac>
			uint8_t high_byte = byte_to_hex((uint8_t)data[i]);
 8002dce:	2514      	movs	r5, #20
 8002dd0:	197b      	adds	r3, r7, r5
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	18d3      	adds	r3, r2, r3
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2609      	movs	r6, #9
 8002ddc:	19bc      	adds	r4, r7, r6
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff ff8a 	bl	8002cf8 <byte_to_hex>
 8002de4:	0003      	movs	r3, r0
 8002de6:	7023      	strb	r3, [r4, #0]
			uint8_t low_byte = byte_to_hex((uint8_t)data[i + 1]);
 8002de8:	197b      	adds	r3, r7, r5
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2208      	movs	r2, #8
 8002df6:	18bc      	adds	r4, r7, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ff7d 	bl	8002cf8 <byte_to_hex>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	7023      	strb	r3, [r4, #0]
			result[p_result] = (uint8_t) (high_byte << 4 | low_byte);
 8002e02:	19bb      	adds	r3, r7, r6
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	b25a      	sxtb	r2, r3
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b259      	sxtb	r1, r3
 8002e16:	2016      	movs	r0, #22
 8002e18:	183b      	adds	r3, r7, r0
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	b2ca      	uxtb	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
			p_result++;
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	183b      	adds	r3, r7, r0
 8002e2a:	3201      	adds	r2, #1
 8002e2c:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length - 1; i = i + 2) {
 8002e2e:	197b      	adds	r3, r7, r5
 8002e30:	197a      	adds	r2, r7, r5
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	3202      	adds	r2, #2
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	2314      	movs	r3, #20
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	1cbb      	adds	r3, r7, #2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbc2      	blt.n	8002dce <string_to_hex+0x42>
 8002e48:	e044      	b.n	8002ed4 <string_to_hex+0x148>
		}
	} else {
		uint16_t p_result = 0;
 8002e4a:	2312      	movs	r3, #18
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2200      	movs	r2, #0
 8002e50:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length; i = i + 2) {
 8002e52:	2310      	movs	r3, #16
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	e034      	b.n	8002ec6 <string_to_hex+0x13a>
			uint8_t high_byte = byte_to_hex((uint8_t)data[i]);
 8002e5c:	2510      	movs	r5, #16
 8002e5e:	197b      	adds	r3, r7, r5
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	18d3      	adds	r3, r2, r3
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	260b      	movs	r6, #11
 8002e6a:	19bc      	adds	r4, r7, r6
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff ff43 	bl	8002cf8 <byte_to_hex>
 8002e72:	0003      	movs	r3, r0
 8002e74:	7023      	strb	r3, [r4, #0]
			uint8_t low_byte = byte_to_hex((uint8_t)data[i + 1]);
 8002e76:	197b      	adds	r3, r7, r5
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	18d3      	adds	r3, r2, r3
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	220a      	movs	r2, #10
 8002e84:	18bc      	adds	r4, r7, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff ff36 	bl	8002cf8 <byte_to_hex>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	7023      	strb	r3, [r4, #0]
			result[p_result] = (uint8_t) (high_byte << 4 | low_byte);
 8002e90:	19bb      	adds	r3, r7, r6
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	b25a      	sxtb	r2, r3
 8002e98:	230a      	movs	r3, #10
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b259      	sxtb	r1, r3
 8002ea4:	2012      	movs	r0, #18
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	b2ca      	uxtb	r2, r1
 8002eb0:	701a      	strb	r2, [r3, #0]
			p_result++;
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	183b      	adds	r3, r7, r0
 8002eb8:	3201      	adds	r2, #1
 8002eba:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0; i < length; i = i + 2) {
 8002ebc:	197b      	adds	r3, r7, r5
 8002ebe:	197a      	adds	r2, r7, r5
 8002ec0:	8812      	ldrh	r2, [r2, #0]
 8002ec2:	3202      	adds	r2, #2
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	18fa      	adds	r2, r7, r3
 8002eca:	1cbb      	adds	r3, r7, #2
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3c3      	bcc.n	8002e5c <string_to_hex+0xd0>
		}
	}
	return result;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b007      	add	sp, #28
 8002edc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ede <byte_to_hardword>:
uint16_t byte_to_hardword(uint8_t* src){
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
	return (uint16_t)((uint16_t)src[0]<<8 | (uint16_t)src[1]);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b21b      	sxth	r3, r3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	b29b      	uxth	r3, r3
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <byte_to_word_cr>:
	for(uint16_t i = 0;i<4;i++){
		result = result | (uint32_t)src[i]<< 8*(3-i);
	}
	return result;
}
uint32_t byte_to_word_cr(uint8_t* src){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0;i<4;i++){
 8002f10:	230a      	movs	r3, #10
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e013      	b.n	8002f42 <byte_to_word_cr+0x3e>
		result = result | (uint32_t)src[i]<< 8*(i);
 8002f1a:	210a      	movs	r1, #10
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	18d3      	adds	r3, r2, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	001a      	movs	r2, r3
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	0013      	movs	r3, r2
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0;i<4;i++){
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	3201      	adds	r2, #1
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	230a      	movs	r3, #10
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d9e6      	bls.n	8002f1a <byte_to_word_cr+0x16>
	}
	return result;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5a:	f000 fa95 	bl	8003488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f5e:	f000 f807 	bl	8002f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f62:	f000 f895 	bl	8003090 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002f66:	f000 f863 	bl	8003030 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  flash_firmware_process();
 8002f6a:	f7ff f9b3 	bl	80022d4 <flash_firmware_process>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <main+0x18>

08002f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b097      	sub	sp, #92	; 0x5c
 8002f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f76:	2428      	movs	r4, #40	; 0x28
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	2330      	movs	r3, #48	; 0x30
 8002f7e:	001a      	movs	r2, r3
 8002f80:	2100      	movs	r1, #0
 8002f82:	f002 fcf9 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f86:	2318      	movs	r3, #24
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	001a      	movs	r2, r3
 8002f90:	2100      	movs	r1, #0
 8002f92:	f002 fcf1 	bl	8005978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f96:	1d3b      	adds	r3, r7, #4
 8002f98:	0018      	movs	r0, r3
 8002f9a:	2314      	movs	r3, #20
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	f002 fcea 	bl	8005978 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa4:	0021      	movs	r1, r4
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	2201      	movs	r2, #1
 8002fb0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	0252      	lsls	r2, r2, #9
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0352      	lsls	r2, r2, #13
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f001 f855 	bl	8004080 <HAL_RCC_OscConfig>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d001      	beq.n	8002fde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002fda:	f000 f8c3 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fde:	2118      	movs	r1, #24
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2202      	movs	r2, #2
 8002fea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f001 fb59 	bl	80046b4 <HAL_RCC_ClockConfig>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d001      	beq.n	800300a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003006:	f000 f8ad 	bl	8003164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	0018      	movs	r0, r3
 800301a:	f001 fc9d 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d001      	beq.n	8003026 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003022:	f000 f89f 	bl	8003164 <Error_Handler>
  }
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	b017      	add	sp, #92	; 0x5c
 800302c:	bd90      	pop	{r4, r7, pc}
	...

08003030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <MX_USART1_UART_Init+0x5c>)
 8003038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <MX_USART1_UART_Init+0x58>)
 800303c:	22e1      	movs	r2, #225	; 0xe1
 800303e:	0252      	lsls	r2, r2, #9
 8003040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_USART1_UART_Init+0x58>)
 800304a:	2200      	movs	r2, #0
 800304c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003050:	2200      	movs	r2, #0
 8003052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003056:	220c      	movs	r2, #12
 8003058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <MX_USART1_UART_Init+0x58>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003068:	2200      	movs	r2, #0
 800306a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_USART1_UART_Init+0x58>)
 800306e:	2200      	movs	r2, #0
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <MX_USART1_UART_Init+0x58>)
 8003074:	0018      	movs	r0, r3
 8003076:	f001 fd4d 	bl	8004b14 <HAL_UART_Init>
 800307a:	1e03      	subs	r3, r0, #0
 800307c:	d001      	beq.n	8003082 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800307e:	f000 f871 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200004f4 	.word	0x200004f4
 800308c:	40013800 	.word	0x40013800

08003090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003096:	240c      	movs	r4, #12
 8003098:	193b      	adds	r3, r7, r4
 800309a:	0018      	movs	r0, r3
 800309c:	2314      	movs	r3, #20
 800309e:	001a      	movs	r2, r3
 80030a0:	2100      	movs	r1, #0
 80030a2:	f002 fc69 	bl	8005978 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <MX_GPIO_Init+0xcc>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <MX_GPIO_Init+0xcc>)
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	03c9      	lsls	r1, r1, #15
 80030b0:	430a      	orrs	r2, r1
 80030b2:	615a      	str	r2, [r3, #20]
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <MX_GPIO_Init+0xcc>)
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	03db      	lsls	r3, r3, #15
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <MX_GPIO_Init+0xcc>)
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <MX_GPIO_Init+0xcc>)
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0289      	lsls	r1, r1, #10
 80030cc:	430a      	orrs	r2, r1
 80030ce:	615a      	str	r2, [r3, #20]
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <MX_GPIO_Init+0xcc>)
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	029b      	lsls	r3, r3, #10
 80030d8:	4013      	ands	r3, r2
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <MX_GPIO_Init+0xcc>)
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <MX_GPIO_Init+0xcc>)
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	0309      	lsls	r1, r1, #12
 80030e8:	430a      	orrs	r2, r1
 80030ea:	615a      	str	r2, [r3, #20]
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <MX_GPIO_Init+0xcc>)
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	031b      	lsls	r3, r3, #12
 80030f4:	4013      	ands	r3, r2
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80030fa:	23c0      	movs	r3, #192	; 0xc0
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4818      	ldr	r0, [pc, #96]	; (8003160 <MX_GPIO_Init+0xd0>)
 8003100:	2200      	movs	r2, #0
 8003102:	0019      	movs	r1, r3
 8003104:	f000 ff18 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2290      	movs	r2, #144	; 0x90
 8003112:	0352      	lsls	r2, r2, #13
 8003114:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	193b      	adds	r3, r7, r4
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800311c:	193a      	adds	r2, r7, r4
 800311e:	2390      	movs	r3, #144	; 0x90
 8003120:	05db      	lsls	r3, r3, #23
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f000 fd97 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800312a:	0021      	movs	r1, r4
 800312c:	187b      	adds	r3, r7, r1
 800312e:	22c0      	movs	r2, #192	; 0xc0
 8003130:	0092      	lsls	r2, r2, #2
 8003132:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003134:	187b      	adds	r3, r7, r1
 8003136:	2201      	movs	r2, #1
 8003138:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003146:	187b      	adds	r3, r7, r1
 8003148:	4a05      	ldr	r2, [pc, #20]	; (8003160 <MX_GPIO_Init+0xd0>)
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f000 fd83 	bl	8003c58 <HAL_GPIO_Init>

}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b009      	add	sp, #36	; 0x24
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40021000 	.word	0x40021000
 8003160:	48000800 	.word	0x48000800

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>
	...

08003170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_MspInit+0x44>)
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_MspInit+0x44>)
 800317c:	2101      	movs	r1, #1
 800317e:	430a      	orrs	r2, r1
 8003180:	619a      	str	r2, [r3, #24]
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_MspInit+0x44>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2201      	movs	r2, #1
 8003188:	4013      	ands	r3, r2
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_MspInit+0x44>)
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_MspInit+0x44>)
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	0549      	lsls	r1, r1, #21
 8003198:	430a      	orrs	r2, r1
 800319a:	61da      	str	r2, [r3, #28]
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_MspInit+0x44>)
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	055b      	lsls	r3, r3, #21
 80031a4:	4013      	ands	r3, r2
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b002      	add	sp, #8
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	2414      	movs	r4, #20
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	0018      	movs	r0, r3
 80031c6:	2314      	movs	r3, #20
 80031c8:	001a      	movs	r2, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	f002 fbd4 	bl	8005978 <memset>
  if(huart->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_UART_MspInit+0xa4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d13b      	bne.n	8003252 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_UART_MspInit+0xa8>)
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_UART_MspInit+0xa8>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	01c9      	lsls	r1, r1, #7
 80031e4:	430a      	orrs	r2, r1
 80031e6:	619a      	str	r2, [r3, #24]
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_UART_MspInit+0xa8>)
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_UART_MspInit+0xa8>)
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_UART_MspInit+0xa8>)
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	0289      	lsls	r1, r1, #10
 8003200:	430a      	orrs	r2, r1
 8003202:	615a      	str	r2, [r3, #20]
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_UART_MspInit+0xa8>)
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	029b      	lsls	r3, r3, #10
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003212:	193b      	adds	r3, r7, r4
 8003214:	22c0      	movs	r2, #192	; 0xc0
 8003216:	00d2      	lsls	r2, r2, #3
 8003218:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	0021      	movs	r1, r4
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2202      	movs	r2, #2
 8003220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003228:	187b      	adds	r3, r7, r1
 800322a:	2203      	movs	r2, #3
 800322c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800322e:	187b      	adds	r3, r7, r1
 8003230:	2201      	movs	r2, #1
 8003232:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	187a      	adds	r2, r7, r1
 8003236:	2390      	movs	r3, #144	; 0x90
 8003238:	05db      	lsls	r3, r3, #23
 800323a:	0011      	movs	r1, r2
 800323c:	0018      	movs	r0, r3
 800323e:	f000 fd0b 	bl	8003c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	201b      	movs	r0, #27
 8003248:	f000 fa54 	bl	80036f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800324c:	201b      	movs	r0, #27
 800324e:	f000 fa66 	bl	800371e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b00b      	add	sp, #44	; 0x2c
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40013800 	.word	0x40013800
 8003260:	40021000 	.word	0x40021000

08003264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <NMI_Handler+0x4>

0800326a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <HardFault_Handler+0x4>

08003270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003288:	f000 f96c 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <USART1_IRQHandler+0x14>)
 800329a:	0018      	movs	r0, r3
 800329c:	f001 fc8e 	bl	8004bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	200004f4 	.word	0x200004f4

080032ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	return 1;
 80032b0:	2301      	movs	r3, #1
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_kill>:

int _kill(int pid, int sig)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032c2:	f002 fb1b 	bl	80058fc <__errno>
 80032c6:	0003      	movs	r3, r0
 80032c8:	2216      	movs	r2, #22
 80032ca:	601a      	str	r2, [r3, #0]
	return -1;
 80032cc:	2301      	movs	r3, #1
 80032ce:	425b      	negs	r3, r3
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_exit>:

void _exit (int status)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032e0:	2301      	movs	r3, #1
 80032e2:	425a      	negs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ffe5 	bl	80032b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ee:	e7fe      	b.n	80032ee <_exit+0x16>

080032f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e00a      	b.n	8003318 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003302:	e000      	b.n	8003306 <_read+0x16>
 8003304:	bf00      	nop
 8003306:	0001      	movs	r1, r0
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	60ba      	str	r2, [r7, #8]
 800330e:	b2ca      	uxtb	r2, r1
 8003310:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3301      	adds	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	dbf0      	blt.n	8003302 <_read+0x12>
	}

return len;
 8003320:	687b      	ldr	r3, [r7, #4]
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b006      	add	sp, #24
 8003328:	bd80      	pop	{r7, pc}

0800332a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e009      	b.n	8003350 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	60ba      	str	r2, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	0018      	movs	r0, r3
 8003346:	e000      	b.n	800334a <_write+0x20>
 8003348:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	dbf1      	blt.n	800333c <_write+0x12>
	}
	return len;
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}

08003362 <_close>:

int _close(int file)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
	return -1;
 800336a:	2301      	movs	r3, #1
 800336c:	425b      	negs	r3, r3
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b002      	add	sp, #8
 8003374:	bd80      	pop	{r7, pc}

08003376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	0192      	lsls	r2, r2, #6
 8003386:	605a      	str	r2, [r3, #4]
	return 0;
 8003388:	2300      	movs	r3, #0
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}

08003392 <_isatty>:

int _isatty(int file)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
	return 1;
 800339a:	2301      	movs	r3, #1
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	return 0;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b004      	add	sp, #16
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <_sbrk+0x5c>)
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <_sbrk+0x60>)
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <_sbrk+0x64>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <_sbrk+0x64>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <_sbrk+0x68>)
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ec:	f002 fa86 	bl	80058fc <__errno>
 80033f0:	0003      	movs	r3, r0
 80033f2:	220c      	movs	r2, #12
 80033f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	425b      	negs	r3, r3
 80033fa:	e009      	b.n	8003410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	18d2      	adds	r2, r2, r3
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <_sbrk+0x64>)
 800340c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b006      	add	sp, #24
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20002000 	.word	0x20002000
 800341c:	00000400 	.word	0x00000400
 8003420:	20000578 	.word	0x20000578
 8003424:	200005b0 	.word	0x200005b0

08003428 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003434:	480d      	ldr	r0, [pc, #52]	; (800346c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003436:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003438:	480d      	ldr	r0, [pc, #52]	; (8003470 <LoopForever+0x6>)
  ldr r1, =_edata
 800343a:	490e      	ldr	r1, [pc, #56]	; (8003474 <LoopForever+0xa>)
  ldr r2, =_sidata
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <LoopForever+0xe>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003440:	e002      	b.n	8003448 <LoopCopyDataInit>

08003442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003446:	3304      	adds	r3, #4

08003448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800344c:	d3f9      	bcc.n	8003442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344e:	4a0b      	ldr	r2, [pc, #44]	; (800347c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003450:	4c0b      	ldr	r4, [pc, #44]	; (8003480 <LoopForever+0x16>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003454:	e001      	b.n	800345a <LoopFillZerobss>

08003456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003458:	3204      	adds	r2, #4

0800345a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800345c:	d3fb      	bcc.n	8003456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800345e:	f7ff ffe3 	bl	8003428 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003462:	f002 fa51 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003466:	f7ff fd76 	bl	8002f56 <main>

0800346a <LoopForever>:

LoopForever:
    b LoopForever
 800346a:	e7fe      	b.n	800346a <LoopForever>
  ldr   r0, =_estack
 800346c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003474:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003478:	0800ab74 	.word	0x0800ab74
  ldr r2, =_sbss
 800347c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003480:	200005b0 	.word	0x200005b0

08003484 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003484:	e7fe      	b.n	8003484 <ADC1_COMP_IRQHandler>
	...

08003488 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <HAL_Init+0x24>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_Init+0x24>)
 8003492:	2110      	movs	r1, #16
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003498:	2000      	movs	r0, #0
 800349a:	f000 f82f 	bl	80034fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800349e:	f7ff fe67 	bl	8003170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	40022000 	.word	0x40022000

080034b0 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_DeInit+0x3c>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	4252      	negs	r2, r2
 80034ba:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_DeInit+0x3c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_DeInit+0x3c>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	4252      	negs	r2, r2
 80034c8:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_DeInit+0x3c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_DeInit+0x3c>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	4252      	negs	r2, r2
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_DeInit+0x3c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80034de:	f000 f807 	bl	80034f0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	40021000 	.word	0x40021000

080034f0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_InitTick+0x5c>)
 8003506:	681c      	ldr	r4, [r3, #0]
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_InitTick+0x60>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	0019      	movs	r1, r3
 800350e:	23fa      	movs	r3, #250	; 0xfa
 8003510:	0098      	lsls	r0, r3, #2
 8003512:	f7fc fe15 	bl	8000140 <__udivsi3>
 8003516:	0003      	movs	r3, r0
 8003518:	0019      	movs	r1, r3
 800351a:	0020      	movs	r0, r4
 800351c:	f7fc fe10 	bl	8000140 <__udivsi3>
 8003520:	0003      	movs	r3, r0
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f90b 	bl	800373e <HAL_SYSTICK_Config>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e00f      	b.n	8003550 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b03      	cmp	r3, #3
 8003534:	d80b      	bhi.n	800354e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	2301      	movs	r3, #1
 800353a:	425b      	negs	r3, r3
 800353c:	2200      	movs	r2, #0
 800353e:	0018      	movs	r0, r3
 8003540:	f000 f8d8 	bl	80036f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_InitTick+0x64>)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b003      	add	sp, #12
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	20000018 	.word	0x20000018
 800355c:	20000020 	.word	0x20000020
 8003560:	2000001c 	.word	0x2000001c

08003564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_IncTick+0x1c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	001a      	movs	r2, r3
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_IncTick+0x20>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	18d2      	adds	r2, r2, r3
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_IncTick+0x20>)
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	20000020 	.word	0x20000020
 8003584:	2000057c 	.word	0x2000057c

08003588 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  return uwTick;
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <HAL_GetTick+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	2000057c 	.word	0x2000057c

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	0002      	movs	r2, r0
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035a8:	1dfb      	adds	r3, r7, #7
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b7f      	cmp	r3, #127	; 0x7f
 80035ae:	d809      	bhi.n	80035c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b0:	1dfb      	adds	r3, r7, #7
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	001a      	movs	r2, r3
 80035b6:	231f      	movs	r3, #31
 80035b8:	401a      	ands	r2, r3
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <__NVIC_EnableIRQ+0x30>)
 80035bc:	2101      	movs	r1, #1
 80035be:	4091      	lsls	r1, r2
 80035c0:	000a      	movs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
  }
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	e000e100 	.word	0xe000e100

080035d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	0002      	movs	r2, r0
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035de:	1dfb      	adds	r3, r7, #7
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b7f      	cmp	r3, #127	; 0x7f
 80035e4:	d828      	bhi.n	8003638 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035e6:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <__NVIC_SetPriority+0xd4>)
 80035e8:	1dfb      	adds	r3, r7, #7
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	33c0      	adds	r3, #192	; 0xc0
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	1dfa      	adds	r2, r7, #7
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	0011      	movs	r1, r2
 80035fc:	2203      	movs	r2, #3
 80035fe:	400a      	ands	r2, r1
 8003600:	00d2      	lsls	r2, r2, #3
 8003602:	21ff      	movs	r1, #255	; 0xff
 8003604:	4091      	lsls	r1, r2
 8003606:	000a      	movs	r2, r1
 8003608:	43d2      	mvns	r2, r2
 800360a:	401a      	ands	r2, r3
 800360c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	401a      	ands	r2, r3
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	0018      	movs	r0, r3
 800361c:	2303      	movs	r3, #3
 800361e:	4003      	ands	r3, r0
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003624:	481f      	ldr	r0, [pc, #124]	; (80036a4 <__NVIC_SetPriority+0xd4>)
 8003626:	1dfb      	adds	r3, r7, #7
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b25b      	sxtb	r3, r3
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	430a      	orrs	r2, r1
 8003630:	33c0      	adds	r3, #192	; 0xc0
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003636:	e031      	b.n	800369c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <__NVIC_SetPriority+0xd8>)
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	0019      	movs	r1, r3
 8003640:	230f      	movs	r3, #15
 8003642:	400b      	ands	r3, r1
 8003644:	3b08      	subs	r3, #8
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3306      	adds	r3, #6
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	3304      	adds	r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1dfa      	adds	r2, r7, #7
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	0011      	movs	r1, r2
 8003658:	2203      	movs	r2, #3
 800365a:	400a      	ands	r2, r1
 800365c:	00d2      	lsls	r2, r2, #3
 800365e:	21ff      	movs	r1, #255	; 0xff
 8003660:	4091      	lsls	r1, r2
 8003662:	000a      	movs	r2, r1
 8003664:	43d2      	mvns	r2, r2
 8003666:	401a      	ands	r2, r3
 8003668:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	22ff      	movs	r2, #255	; 0xff
 8003670:	401a      	ands	r2, r3
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	0018      	movs	r0, r3
 8003678:	2303      	movs	r3, #3
 800367a:	4003      	ands	r3, r0
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003680:	4809      	ldr	r0, [pc, #36]	; (80036a8 <__NVIC_SetPriority+0xd8>)
 8003682:	1dfb      	adds	r3, r7, #7
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	001c      	movs	r4, r3
 8003688:	230f      	movs	r3, #15
 800368a:	4023      	ands	r3, r4
 800368c:	3b08      	subs	r3, #8
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	430a      	orrs	r2, r1
 8003692:	3306      	adds	r3, #6
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	18c3      	adds	r3, r0, r3
 8003698:	3304      	adds	r3, #4
 800369a:	601a      	str	r2, [r3, #0]
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b003      	add	sp, #12
 80036a2:	bd90      	pop	{r4, r7, pc}
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1e5a      	subs	r2, r3, #1
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	045b      	lsls	r3, r3, #17
 80036bc:	429a      	cmp	r2, r3
 80036be:	d301      	bcc.n	80036c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c0:	2301      	movs	r3, #1
 80036c2:	e010      	b.n	80036e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <SysTick_Config+0x44>)
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	3a01      	subs	r2, #1
 80036ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036cc:	2301      	movs	r3, #1
 80036ce:	425b      	negs	r3, r3
 80036d0:	2103      	movs	r1, #3
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7ff ff7c 	bl	80035d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <SysTick_Config+0x44>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <SysTick_Config+0x44>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	e000e010 	.word	0xe000e010

080036f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	210f      	movs	r1, #15
 8003700:	187b      	adds	r3, r7, r1
 8003702:	1c02      	adds	r2, r0, #0
 8003704:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	187b      	adds	r3, r7, r1
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b25b      	sxtb	r3, r3
 800370e:	0011      	movs	r1, r2
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff ff5d 	bl	80035d0 <__NVIC_SetPriority>
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	0002      	movs	r2, r0
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372a:	1dfb      	adds	r3, r7, #7
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b25b      	sxtb	r3, r3
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff ff33 	bl	800359c <__NVIC_EnableIRQ>
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b002      	add	sp, #8
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ffaf 	bl	80036ac <SysTick_Config>
 800374e:	0003      	movs	r3, r0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2221      	movs	r2, #33	; 0x21
 8003764:	5c9b      	ldrb	r3, [r3, r2]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d008      	beq.n	800377e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e020      	b.n	80037c0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	210e      	movs	r1, #14
 800378a:	438a      	bics	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	438a      	bics	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	2101      	movs	r1, #1
 80037a8:	4091      	lsls	r1, r2
 80037aa:	000a      	movs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2221      	movs	r2, #33	; 0x21
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	210f      	movs	r1, #15
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2221      	movs	r2, #33	; 0x21
 80037dc:	5c9b      	ldrb	r3, [r3, r2]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d006      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2204      	movs	r2, #4
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e028      	b.n	8003844 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	210e      	movs	r1, #14
 80037fe:	438a      	bics	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	438a      	bics	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2101      	movs	r1, #1
 800381c:	4091      	lsls	r1, r2
 800381e:	000a      	movs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2221      	movs	r2, #33	; 0x21
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	0010      	movs	r0, r2
 8003842:	4798      	blx	r3
    } 
  }
  return status;
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603a      	str	r2, [r7, #0]
 8003860:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003862:	2317      	movs	r3, #23
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800386a:	2316      	movs	r3, #22
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8003872:	2315      	movs	r3, #21
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_FLASH_Program+0x120>)
 800387c:	7e1b      	ldrb	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_FLASH_Program+0x32>
 8003882:	2302      	movs	r3, #2
 8003884:	e072      	b.n	800396c <HAL_FLASH_Program+0x118>
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_FLASH_Program+0x120>)
 8003888:	2201      	movs	r2, #1
 800388a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800388c:	2317      	movs	r3, #23
 800388e:	18fe      	adds	r6, r7, r3
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_FLASH_Program+0x124>)
 8003892:	0018      	movs	r0, r3
 8003894:	f000 f8c4 	bl	8003a20 <FLASH_WaitForLastOperation>
 8003898:	0003      	movs	r3, r0
 800389a:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 800389c:	2317      	movs	r3, #23
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d15c      	bne.n	8003960 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d104      	bne.n	80038b6 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038ac:	2315      	movs	r3, #21
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e00b      	b.n	80038ce <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d104      	bne.n	80038c6 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038bc:	2315      	movs	r3, #21
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e003      	b.n	80038ce <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038c6:	2315      	movs	r3, #21
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2204      	movs	r2, #4
 80038cc:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80038ce:	2316      	movs	r3, #22
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e039      	b.n	800394c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038d8:	2116      	movs	r1, #22
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	005a      	lsls	r2, r3, #1
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	18d0      	adds	r0, r2, r3
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	001a      	movs	r2, r3
 80038ec:	3a20      	subs	r2, #32
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	db03      	blt.n	80038fa <HAL_FLASH_Program+0xa6>
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	40d1      	lsrs	r1, r2
 80038f6:	000c      	movs	r4, r1
 80038f8:	e008      	b.n	800390c <HAL_FLASH_Program+0xb8>
 80038fa:	2220      	movs	r2, #32
 80038fc:	1ad2      	subs	r2, r2, r3
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4091      	lsls	r1, r2
 8003902:	000a      	movs	r2, r1
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	40d9      	lsrs	r1, r3
 8003908:	000c      	movs	r4, r1
 800390a:	4314      	orrs	r4, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	40da      	lsrs	r2, r3
 8003910:	0015      	movs	r5, r2
 8003912:	b2a3      	uxth	r3, r4
 8003914:	0019      	movs	r1, r3
 8003916:	f000 f867 	bl	80039e8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800391a:	2317      	movs	r3, #23
 800391c:	18fe      	adds	r6, r7, r3
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_FLASH_Program+0x124>)
 8003920:	0018      	movs	r0, r3
 8003922:	f000 f87d 	bl	8003a20 <FLASH_WaitForLastOperation>
 8003926:	0003      	movs	r3, r0
 8003928:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_FLASH_Program+0x128>)
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_FLASH_Program+0x128>)
 8003930:	2101      	movs	r1, #1
 8003932:	438a      	bics	r2, r1
 8003934:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10e      	bne.n	800395e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8003940:	2116      	movs	r1, #22
 8003942:	187b      	adds	r3, r7, r1
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	187b      	adds	r3, r7, r1
 8003948:	3201      	adds	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	2316      	movs	r3, #22
 800394e:	18fa      	adds	r2, r7, r3
 8003950:	2315      	movs	r3, #21
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3bd      	bcc.n	80038d8 <HAL_FLASH_Program+0x84>
 800395c:	e000      	b.n	8003960 <HAL_FLASH_Program+0x10c>
      {
        break;
 800395e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <HAL_FLASH_Program+0x120>)
 8003962:	2200      	movs	r2, #0
 8003964:	761a      	strb	r2, [r3, #24]

  return status;
 8003966:	2317      	movs	r3, #23
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	781b      	ldrb	r3, [r3, #0]
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b007      	add	sp, #28
 8003972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003974:	20000580 	.word	0x20000580
 8003978:	0000c350 	.word	0x0000c350
 800397c:	40022000 	.word	0x40022000

08003980 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <HAL_FLASH_Unlock+0x40>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	4013      	ands	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_FLASH_Unlock+0x40>)
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_FLASH_Unlock+0x44>)
 800399a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_FLASH_Unlock+0x40>)
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_FLASH_Unlock+0x48>)
 80039a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_FLASH_Unlock+0x40>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	4013      	ands	r3, r2
 80039aa:	d002      	beq.n	80039b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40022000 	.word	0x40022000
 80039c4:	45670123 	.word	0x45670123
 80039c8:	cdef89ab 	.word	0xcdef89ab

080039cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_FLASH_Lock+0x18>)
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_FLASH_Lock+0x18>)
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	430a      	orrs	r2, r1
 80039da:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40022000 	.word	0x40022000

080039e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	000a      	movs	r2, r1
 80039f2:	1cbb      	adds	r3, r7, #2
 80039f4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <FLASH_Program_HalfWord+0x30>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <FLASH_Program_HalfWord+0x34>)
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <FLASH_Program_HalfWord+0x34>)
 8003a02:	2101      	movs	r1, #1
 8003a04:	430a      	orrs	r2, r1
 8003a06:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1cba      	adds	r2, r7, #2
 8003a0c:	8812      	ldrh	r2, [r2, #0]
 8003a0e:	801a      	strh	r2, [r3, #0]
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000580 	.word	0x20000580
 8003a1c:	40022000 	.word	0x40022000

08003a20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff fdae 	bl	8003588 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a30:	e00f      	b.n	8003a52 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3301      	adds	r3, #1
 8003a36:	d00c      	beq.n	8003a52 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <FLASH_WaitForLastOperation+0x2e>
 8003a3e:	f7ff fda3 	bl	8003588 <HAL_GetTick>
 8003a42:	0002      	movs	r2, r0
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d201      	bcs.n	8003a52 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e01f      	b.n	8003a92 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <FLASH_WaitForLastOperation+0x7c>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d0e9      	beq.n	8003a32 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <FLASH_WaitForLastOperation+0x7c>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d102      	bne.n	8003a70 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <FLASH_WaitForLastOperation+0x7c>)
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <FLASH_WaitForLastOperation+0x7c>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2210      	movs	r2, #16
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d005      	beq.n	8003a88 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <FLASH_WaitForLastOperation+0x7c>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2204      	movs	r2, #4
 8003a82:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d103      	bne.n	8003a90 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a88:	f000 f80a 	bl	8003aa0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b004      	add	sp, #16
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	40022000 	.word	0x40022000

08003aa0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <FLASH_SetErrorCode+0x58>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2210      	movs	r2, #16
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d109      	bne.n	8003aca <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <FLASH_SetErrorCode+0x5c>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2202      	movs	r2, #2
 8003abc:	431a      	orrs	r2, r3
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <FLASH_SetErrorCode+0x5c>)
 8003ac0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <FLASH_SetErrorCode+0x58>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d109      	bne.n	8003aea <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <FLASH_SetErrorCode+0x5c>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2201      	movs	r2, #1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <FLASH_SetErrorCode+0x5c>)
 8003ae0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003aea:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <FLASH_SetErrorCode+0x58>)
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
}  
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40022000 	.word	0x40022000
 8003afc:	20000580 	.word	0x20000580

08003b00 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b16:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_FLASHEx_Erase+0xe0>)
 8003b18:	7e1b      	ldrb	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_FLASHEx_Erase+0x22>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e05a      	b.n	8003bd8 <HAL_FLASHEx_Erase+0xd8>
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_FLASHEx_Erase+0xe0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d116      	bne.n	8003b5e <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b30:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_FLASHEx_Erase+0xe4>)
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff ff74 	bl	8003a20 <FLASH_WaitForLastOperation>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d147      	bne.n	8003bcc <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003b3c:	f000 f856 	bl	8003bec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fc      	adds	r4, r7, r3
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_FLASHEx_Erase+0xe4>)
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7ff ff6a 	bl	8003a20 <FLASH_WaitForLastOperation>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <HAL_FLASHEx_Erase+0xe8>)
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_FLASHEx_Erase+0xe8>)
 8003b56:	2104      	movs	r1, #4
 8003b58:	438a      	bics	r2, r1
 8003b5a:	611a      	str	r2, [r3, #16]
 8003b5c:	e036      	b.n	8003bcc <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <HAL_FLASHEx_Erase+0xe4>)
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7ff ff5d 	bl	8003a20 <FLASH_WaitForLastOperation>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d130      	bne.n	8003bcc <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4252      	negs	r2, r2
 8003b70:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e01f      	b.n	8003bba <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f84d 	bl	8003c1c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b82:	250f      	movs	r5, #15
 8003b84:	197c      	adds	r4, r7, r5
 8003b86:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_FLASHEx_Erase+0xe4>)
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff ff49 	bl	8003a20 <FLASH_WaitForLastOperation>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_FLASHEx_Erase+0xe8>)
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_FLASHEx_Erase+0xe8>)
 8003b98:	2102      	movs	r1, #2
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	601a      	str	r2, [r3, #0]
            break;
 8003bac:	e00e      	b.n	8003bcc <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	00d2      	lsls	r2, r2, #3
 8003bb4:	4694      	mov	ip, r2
 8003bb6:	4463      	add	r3, ip
 8003bb8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	029a      	lsls	r2, r3, #10
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d3d6      	bcc.n	8003b7a <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_FLASHEx_Erase+0xe0>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	761a      	strb	r2, [r3, #24]

  return status;
 8003bd2:	230f      	movs	r3, #15
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bdb0      	pop	{r4, r5, r7, pc}
 8003be0:	20000580 	.word	0x20000580
 8003be4:	0000c350 	.word	0x0000c350
 8003be8:	40022000 	.word	0x40022000

08003bec <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <FLASH_MassErase+0x28>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <FLASH_MassErase+0x2c>)
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <FLASH_MassErase+0x2c>)
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <FLASH_MassErase+0x2c>)
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <FLASH_MassErase+0x2c>)
 8003c08:	2140      	movs	r1, #64	; 0x40
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000580 	.word	0x20000580
 8003c18:	40022000 	.word	0x40022000

08003c1c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <FLASH_PageErase+0x34>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <FLASH_PageErase+0x38>)
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <FLASH_PageErase+0x38>)
 8003c30:	2102      	movs	r1, #2
 8003c32:	430a      	orrs	r2, r1
 8003c34:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <FLASH_PageErase+0x38>)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <FLASH_PageErase+0x38>)
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <FLASH_PageErase+0x38>)
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	430a      	orrs	r2, r1
 8003c46:	611a      	str	r2, [r3, #16]
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000580 	.word	0x20000580
 8003c54:	40022000 	.word	0x40022000

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c66:	e14f      	b.n	8003f08 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4091      	lsls	r1, r2
 8003c72:	000a      	movs	r2, r1
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d100      	bne.n	8003c80 <HAL_GPIO_Init+0x28>
 8003c7e:	e140      	b.n	8003f02 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2203      	movs	r2, #3
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d005      	beq.n	8003c98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2203      	movs	r2, #3
 8003c92:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d130      	bne.n	8003cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	0013      	movs	r3, r2
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	0013      	movs	r3, r2
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cce:	2201      	movs	r2, #1
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	0013      	movs	r3, r2
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	409a      	lsls	r2, r3
 8003cec:	0013      	movs	r3, r2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d017      	beq.n	8003d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	43da      	mvns	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d123      	bne.n	8003d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	58d3      	ldr	r3, [r2, r3]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2207      	movs	r2, #7
 8003d54:	4013      	ands	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2107      	movs	r1, #7
 8003d6e:	400b      	ands	r3, r1
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	409a      	lsls	r2, r3
 8003d74:	0013      	movs	r3, r2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	08da      	lsrs	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3208      	adds	r2, #8
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	6939      	ldr	r1, [r7, #16]
 8003d88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	409a      	lsls	r2, r3
 8003d98:	0013      	movs	r3, r2
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2203      	movs	r2, #3
 8003da8:	401a      	ands	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	409a      	lsls	r2, r3
 8003db0:	0013      	movs	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	23c0      	movs	r3, #192	; 0xc0
 8003dc4:	029b      	lsls	r3, r3, #10
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d100      	bne.n	8003dcc <HAL_GPIO_Init+0x174>
 8003dca:	e09a      	b.n	8003f02 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dcc:	4b54      	ldr	r3, [pc, #336]	; (8003f20 <HAL_GPIO_Init+0x2c8>)
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_GPIO_Init+0x2c8>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_GPIO_Init+0x2c8>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	4013      	ands	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_GPIO_Init+0x2cc>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	589b      	ldr	r3, [r3, r2]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4013      	ands	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	0013      	movs	r3, r2
 8003e00:	43da      	mvns	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	2390      	movs	r3, #144	; 0x90
 8003e0c:	05db      	lsls	r3, r3, #23
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d013      	beq.n	8003e3a <HAL_GPIO_Init+0x1e2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a44      	ldr	r2, [pc, #272]	; (8003f28 <HAL_GPIO_Init+0x2d0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00d      	beq.n	8003e36 <HAL_GPIO_Init+0x1de>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a43      	ldr	r2, [pc, #268]	; (8003f2c <HAL_GPIO_Init+0x2d4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <HAL_GPIO_Init+0x1da>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a42      	ldr	r2, [pc, #264]	; (8003f30 <HAL_GPIO_Init+0x2d8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_GPIO_Init+0x1d6>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x1e4>
 8003e2e:	2305      	movs	r3, #5
 8003e30:	e004      	b.n	8003e3c <HAL_GPIO_Init+0x1e4>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_Init+0x1e4>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x1e4>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	2103      	movs	r1, #3
 8003e40:	400a      	ands	r2, r1
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	4093      	lsls	r3, r2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e4c:	4935      	ldr	r1, [pc, #212]	; (8003f24 <HAL_GPIO_Init+0x2cc>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43da      	mvns	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	025b      	lsls	r3, r3, #9
 8003e72:	4013      	ands	r3, r2
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	035b      	lsls	r3, r3, #13
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	039b      	lsls	r3, r3, #14
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_GPIO_Init+0x2dc>)
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3301      	adds	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	40da      	lsrs	r2, r3
 8003f10:	1e13      	subs	r3, r2, #0
 8003f12:	d000      	beq.n	8003f16 <HAL_GPIO_Init+0x2be>
 8003f14:	e6a8      	b.n	8003c68 <HAL_GPIO_Init+0x10>
  } 
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b006      	add	sp, #24
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40010000 	.word	0x40010000
 8003f28:	48000400 	.word	0x48000400
 8003f2c:	48000800 	.word	0x48000800
 8003f30:	48000c00 	.word	0x48000c00
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	0008      	movs	r0, r1
 8003f42:	0011      	movs	r1, r2
 8003f44:	1cbb      	adds	r3, r7, #2
 8003f46:	1c02      	adds	r2, r0, #0
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	1c7b      	adds	r3, r7, #1
 8003f4c:	1c0a      	adds	r2, r1, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f50:	1c7b      	adds	r3, r7, #1
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f58:	1cbb      	adds	r3, r7, #2
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f60:	e003      	b.n	8003f6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f62:	1cbb      	adds	r3, r7, #2
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f7a:	f7ff fb05 	bl	8003588 <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	607b      	str	r3, [r7, #4]
  
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003f88:	2181      	movs	r1, #129	; 0x81
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_DeInit+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7ff fafa 	bl	8003588 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_DeInit+0x2e>
    {
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e05a      	b.n	8004058 <HAL_RCC_DeInit+0xe4>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d0f1      	beq.n	8003f90 <HAL_RCC_DeInit+0x1c>
    }
  }

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003fb2:	492c      	ldr	r1, [pc, #176]	; (8004064 <HAL_RCC_DeInit+0xf0>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]

  /* Wait till HSI as SYSCLK status is enabled */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003fb8:	e009      	b.n	8003fce <HAL_RCC_DeInit+0x5a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fba:	f7ff fae5 	bl	8003588 <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <HAL_RCC_DeInit+0xf4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_DeInit+0x5a>
    {
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e044      	b.n	8004058 <HAL_RCC_DeInit+0xe4>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_DeInit+0x46>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_DeInit+0xf8>)
 8003fda:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_RCC_DeInit+0xfc>)
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fde:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_DeInit+0x100>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7ff fa8a 	bl	80034fc <HAL_InitTick>
 8003fe8:	1e03      	subs	r3, r0, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_DeInit+0x7c>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e033      	b.n	8004058 <HAL_RCC_DeInit+0xe4>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003ff6:	4920      	ldr	r1, [pc, #128]	; (8004078 <HAL_RCC_DeInit+0x104>)
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8004002:	491e      	ldr	r1, [pc, #120]	; (800407c <HAL_RCC_DeInit+0x108>)
 8004004:	400a      	ands	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

  /* Get start tick */
  tickstart = HAL_GetTick();
 8004008:	f7ff fabe 	bl	8003588 <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	607b      	str	r3, [r7, #4]
  
  /* Wait till PLLRDY is cleared */
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_DeInit+0xb0>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004012:	f7ff fab9 	bl	8003588 <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_DeInit+0xb0>
    {
      return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e019      	b.n	8004058 <HAL_RCC_DeInit+0xe4>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004024:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	049b      	lsls	r3, r3, #18
 800402c:	4013      	ands	r3, r2
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8004038:	2200      	movs	r2, #0
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_RCC_DeInit+0xec>)
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_RCC_DeInit+0xec>)
 8004044:	2200      	movs	r2, #0
 8004046:	609a      	str	r2, [r3, #8]

  /* Clear all reset flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_DeInit+0xec>)
 800404a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCC_DeInit+0xec>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0449      	lsls	r1, r1, #17
 8004052:	430a      	orrs	r2, r1
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000
 8004064:	f0fff80c 	.word	0xf0fff80c
 8004068:	00001388 	.word	0x00001388
 800406c:	20000018 	.word	0x20000018
 8004070:	007a1200 	.word	0x007a1200
 8004074:	2000001c 	.word	0x2000001c
 8004078:	fef6ffff 	.word	0xfef6ffff
 800407c:	fffbffff 	.word	0xfffbffff

08004080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e301      	b.n	8004696 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	4013      	ands	r3, r2
 800409a:	d100      	bne.n	800409e <HAL_RCC_OscConfig+0x1e>
 800409c:	e08d      	b.n	80041ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800409e:	4bc3      	ldr	r3, [pc, #780]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	220c      	movs	r2, #12
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00e      	beq.n	80040c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040aa:	4bc0      	ldr	r3, [pc, #768]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	220c      	movs	r2, #12
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d116      	bne.n	80040e4 <HAL_RCC_OscConfig+0x64>
 80040b6:	4bbd      	ldr	r3, [pc, #756]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	025b      	lsls	r3, r3, #9
 80040be:	401a      	ands	r2, r3
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	025b      	lsls	r3, r3, #9
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d10d      	bne.n	80040e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4bb8      	ldr	r3, [pc, #736]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	029b      	lsls	r3, r3, #10
 80040d0:	4013      	ands	r3, r2
 80040d2:	d100      	bne.n	80040d6 <HAL_RCC_OscConfig+0x56>
 80040d4:	e070      	b.n	80041b8 <HAL_RCC_OscConfig+0x138>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d000      	beq.n	80040e0 <HAL_RCC_OscConfig+0x60>
 80040de:	e06b      	b.n	80041b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e2d8      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_OscConfig+0x7c>
 80040ec:	4baf      	ldr	r3, [pc, #700]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4bae      	ldr	r3, [pc, #696]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	0249      	lsls	r1, r1, #9
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e02f      	b.n	800415c <HAL_RCC_OscConfig+0xdc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10c      	bne.n	800411e <HAL_RCC_OscConfig+0x9e>
 8004104:	4ba9      	ldr	r3, [pc, #676]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4ba8      	ldr	r3, [pc, #672]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800410a:	49a9      	ldr	r1, [pc, #676]	; (80043b0 <HAL_RCC_OscConfig+0x330>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	4ba6      	ldr	r3, [pc, #664]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4ba5      	ldr	r3, [pc, #660]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004116:	49a7      	ldr	r1, [pc, #668]	; (80043b4 <HAL_RCC_OscConfig+0x334>)
 8004118:	400a      	ands	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e01e      	b.n	800415c <HAL_RCC_OscConfig+0xdc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d10e      	bne.n	8004144 <HAL_RCC_OscConfig+0xc4>
 8004126:	4ba1      	ldr	r3, [pc, #644]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4ba0      	ldr	r3, [pc, #640]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	02c9      	lsls	r1, r1, #11
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	4b9d      	ldr	r3, [pc, #628]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b9c      	ldr	r3, [pc, #624]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	0249      	lsls	r1, r1, #9
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xdc>
 8004144:	4b99      	ldr	r3, [pc, #612]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b98      	ldr	r3, [pc, #608]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800414a:	4999      	ldr	r1, [pc, #612]	; (80043b0 <HAL_RCC_OscConfig+0x330>)
 800414c:	400a      	ands	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	4b96      	ldr	r3, [pc, #600]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b95      	ldr	r3, [pc, #596]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004156:	4997      	ldr	r1, [pc, #604]	; (80043b4 <HAL_RCC_OscConfig+0x334>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d014      	beq.n	800418e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7ff fa10 	bl	8003588 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416e:	f7ff fa0b 	bl	8003588 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b64      	cmp	r3, #100	; 0x64
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e28a      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004180:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	4013      	ands	r3, r2
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0xee>
 800418c:	e015      	b.n	80041ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7ff f9fb 	bl	8003588 <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7ff f9f6 	bl	8003588 <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e275      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	4013      	ands	r3, r2
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x118>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2202      	movs	r2, #2
 80041c0:	4013      	ands	r3, r2
 80041c2:	d100      	bne.n	80041c6 <HAL_RCC_OscConfig+0x146>
 80041c4:	e069      	b.n	800429a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041c6:	4b79      	ldr	r3, [pc, #484]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	220c      	movs	r2, #12
 80041cc:	4013      	ands	r3, r2
 80041ce:	d00b      	beq.n	80041e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041d0:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	220c      	movs	r2, #12
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d11c      	bne.n	8004216 <HAL_RCC_OscConfig+0x196>
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	025b      	lsls	r3, r3, #9
 80041e4:	4013      	ands	r3, r2
 80041e6:	d116      	bne.n	8004216 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e8:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2202      	movs	r2, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e24b      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	22f8      	movs	r2, #248	; 0xf8
 8004204:	4393      	bics	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	00da      	lsls	r2, r3, #3
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004214:	e041      	b.n	800429a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d024      	beq.n	8004268 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421e:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004224:	2101      	movs	r1, #1
 8004226:	430a      	orrs	r2, r1
 8004228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422a:	f7ff f9ad 	bl	8003588 <HAL_GetTick>
 800422e:	0003      	movs	r3, r0
 8004230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004234:	f7ff f9a8 	bl	8003588 <HAL_GetTick>
 8004238:	0002      	movs	r2, r0
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e227      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	4013      	ands	r3, r2
 800424e:	d0f1      	beq.n	8004234 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	22f8      	movs	r2, #248	; 0xf8
 8004256:	4393      	bics	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00da      	lsls	r2, r3, #3
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e018      	b.n	800429a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004268:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800426e:	2101      	movs	r1, #1
 8004270:	438a      	bics	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7ff f988 	bl	8003588 <HAL_GetTick>
 8004278:	0003      	movs	r3, r0
 800427a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427e:	f7ff f983 	bl	8003588 <HAL_GetTick>
 8004282:	0002      	movs	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e202      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2202      	movs	r2, #2
 8004296:	4013      	ands	r3, r2
 8004298:	d1f1      	bne.n	800427e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2208      	movs	r2, #8
 80042a0:	4013      	ands	r3, r2
 80042a2:	d036      	beq.n	8004312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d019      	beq.n	80042e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80042ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b0:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80042b2:	2101      	movs	r1, #1
 80042b4:	430a      	orrs	r2, r1
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b8:	f7ff f966 	bl	8003588 <HAL_GetTick>
 80042bc:	0003      	movs	r3, r0
 80042be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c2:	f7ff f961 	bl	8003588 <HAL_GetTick>
 80042c6:	0002      	movs	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e1e0      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d4:	4b35      	ldr	r3, [pc, #212]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2202      	movs	r2, #2
 80042da:	4013      	ands	r3, r2
 80042dc:	d0f1      	beq.n	80042c2 <HAL_RCC_OscConfig+0x242>
 80042de:	e018      	b.n	8004312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80042e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	438a      	bics	r2, r1
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7ff f94c 	bl	8003588 <HAL_GetTick>
 80042f0:	0003      	movs	r3, r0
 80042f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f6:	f7ff f947 	bl	8003588 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e1c6      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2202      	movs	r2, #2
 800430e:	4013      	ands	r3, r2
 8004310:	d1f1      	bne.n	80042f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2204      	movs	r2, #4
 8004318:	4013      	ands	r3, r2
 800431a:	d100      	bne.n	800431e <HAL_RCC_OscConfig+0x29e>
 800431c:	e0b4      	b.n	8004488 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431e:	201f      	movs	r0, #31
 8004320:	183b      	adds	r3, r7, r0
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	055b      	lsls	r3, r3, #21
 800432e:	4013      	ands	r3, r2
 8004330:	d110      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	0549      	lsls	r1, r1, #21
 800433c:	430a      	orrs	r2, r1
 800433e:	61da      	str	r2, [r3, #28]
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	055b      	lsls	r3, r3, #21
 8004348:	4013      	ands	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800434e:	183b      	adds	r3, r7, r0
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <HAL_RCC_OscConfig+0x338>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4013      	ands	r3, r2
 800435e:	d11a      	bne.n	8004396 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_RCC_OscConfig+0x338>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <HAL_RCC_OscConfig+0x338>)
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	0049      	lsls	r1, r1, #1
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7ff f90b 	bl	8003588 <HAL_GetTick>
 8004372:	0003      	movs	r3, r0
 8004374:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004378:	f7ff f906 	bl	8003588 <HAL_GetTick>
 800437c:	0002      	movs	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e185      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_OscConfig+0x338>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10e      	bne.n	80043bc <HAL_RCC_OscConfig+0x33c>
 800439e:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	4b02      	ldr	r3, [pc, #8]	; (80043ac <HAL_RCC_OscConfig+0x32c>)
 80043a4:	2101      	movs	r1, #1
 80043a6:	430a      	orrs	r2, r1
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e035      	b.n	8004418 <HAL_RCC_OscConfig+0x398>
 80043ac:	40021000 	.word	0x40021000
 80043b0:	fffeffff 	.word	0xfffeffff
 80043b4:	fffbffff 	.word	0xfffbffff
 80043b8:	40007000 	.word	0x40007000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_OscConfig+0x35e>
 80043c4:	4bb6      	ldr	r3, [pc, #728]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	4bb5      	ldr	r3, [pc, #724]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	438a      	bics	r2, r1
 80043ce:	621a      	str	r2, [r3, #32]
 80043d0:	4bb3      	ldr	r3, [pc, #716]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	4bb2      	ldr	r3, [pc, #712]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043d6:	2104      	movs	r1, #4
 80043d8:	438a      	bics	r2, r1
 80043da:	621a      	str	r2, [r3, #32]
 80043dc:	e01c      	b.n	8004418 <HAL_RCC_OscConfig+0x398>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x380>
 80043e6:	4bae      	ldr	r3, [pc, #696]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043e8:	6a1a      	ldr	r2, [r3, #32]
 80043ea:	4bad      	ldr	r3, [pc, #692]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043ec:	2104      	movs	r1, #4
 80043ee:	430a      	orrs	r2, r1
 80043f0:	621a      	str	r2, [r3, #32]
 80043f2:	4bab      	ldr	r3, [pc, #684]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	4baa      	ldr	r3, [pc, #680]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80043f8:	2101      	movs	r1, #1
 80043fa:	430a      	orrs	r2, r1
 80043fc:	621a      	str	r2, [r3, #32]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x398>
 8004400:	4ba7      	ldr	r3, [pc, #668]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	4ba6      	ldr	r3, [pc, #664]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004406:	2101      	movs	r1, #1
 8004408:	438a      	bics	r2, r1
 800440a:	621a      	str	r2, [r3, #32]
 800440c:	4ba4      	ldr	r3, [pc, #656]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	4ba3      	ldr	r3, [pc, #652]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004412:	2104      	movs	r1, #4
 8004414:	438a      	bics	r2, r1
 8004416:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d014      	beq.n	800444a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004420:	f7ff f8b2 	bl	8003588 <HAL_GetTick>
 8004424:	0003      	movs	r3, r0
 8004426:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e009      	b.n	800443e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7ff f8ad 	bl	8003588 <HAL_GetTick>
 800442e:	0002      	movs	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	4a9b      	ldr	r2, [pc, #620]	; (80046a4 <HAL_RCC_OscConfig+0x624>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e12b      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443e:	4b98      	ldr	r3, [pc, #608]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2202      	movs	r2, #2
 8004444:	4013      	ands	r3, r2
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x3aa>
 8004448:	e013      	b.n	8004472 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7ff f89d 	bl	8003588 <HAL_GetTick>
 800444e:	0003      	movs	r3, r0
 8004450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004452:	e009      	b.n	8004468 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7ff f898 	bl	8003588 <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	4a91      	ldr	r2, [pc, #580]	; (80046a4 <HAL_RCC_OscConfig+0x624>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e116      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004468:	4b8d      	ldr	r3, [pc, #564]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	2202      	movs	r2, #2
 800446e:	4013      	ands	r3, r2
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004472:	231f      	movs	r3, #31
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	4b87      	ldr	r3, [pc, #540]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004482:	4989      	ldr	r1, [pc, #548]	; (80046a8 <HAL_RCC_OscConfig+0x628>)
 8004484:	400a      	ands	r2, r1
 8004486:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	4013      	ands	r3, r2
 8004490:	d063      	beq.n	800455a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800449a:	4b81      	ldr	r3, [pc, #516]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800449c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449e:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044a0:	2104      	movs	r1, #4
 80044a2:	430a      	orrs	r2, r1
 80044a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80044a6:	4b7e      	ldr	r3, [pc, #504]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044aa:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044ac:	2101      	movs	r1, #1
 80044ae:	430a      	orrs	r2, r1
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b2:	f7ff f869 	bl	8003588 <HAL_GetTick>
 80044b6:	0003      	movs	r3, r0
 80044b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80044bc:	f7ff f864 	bl	8003588 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0e3      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044ce:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	2202      	movs	r2, #2
 80044d4:	4013      	ands	r3, r2
 80044d6:	d0f1      	beq.n	80044bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044d8:	4b71      	ldr	r3, [pc, #452]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	22f8      	movs	r2, #248	; 0xf8
 80044de:	4393      	bics	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	00da      	lsls	r2, r3, #3
 80044e8:	4b6d      	ldr	r3, [pc, #436]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044ea:	430a      	orrs	r2, r1
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34
 80044ee:	e034      	b.n	800455a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	3305      	adds	r3, #5
 80044f6:	d111      	bne.n	800451c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80044f8:	4b69      	ldr	r3, [pc, #420]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fc:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80044fe:	2104      	movs	r1, #4
 8004500:	438a      	bics	r2, r1
 8004502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004504:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	22f8      	movs	r2, #248	; 0xf8
 800450a:	4393      	bics	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	00da      	lsls	r2, r3, #3
 8004514:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004516:	430a      	orrs	r2, r1
 8004518:	635a      	str	r2, [r3, #52]	; 0x34
 800451a:	e01e      	b.n	800455a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800451c:	4b60      	ldr	r3, [pc, #384]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800451e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004520:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004522:	2104      	movs	r1, #4
 8004524:	430a      	orrs	r2, r1
 8004526:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004528:	4b5d      	ldr	r3, [pc, #372]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800452a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452c:	4b5c      	ldr	r3, [pc, #368]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800452e:	2101      	movs	r1, #1
 8004530:	438a      	bics	r2, r1
 8004532:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004534:	f7ff f828 	bl	8003588 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800453e:	f7ff f823 	bl	8003588 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e0a2      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004550:	4b53      	ldr	r3, [pc, #332]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d1f1      	bne.n	800453e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d100      	bne.n	8004564 <HAL_RCC_OscConfig+0x4e4>
 8004562:	e097      	b.n	8004694 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004564:	4b4e      	ldr	r3, [pc, #312]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	220c      	movs	r2, #12
 800456a:	4013      	ands	r3, r2
 800456c:	2b08      	cmp	r3, #8
 800456e:	d100      	bne.n	8004572 <HAL_RCC_OscConfig+0x4f2>
 8004570:	e06b      	b.n	800464a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d14c      	bne.n	8004614 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457a:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004580:	494a      	ldr	r1, [pc, #296]	; (80046ac <HAL_RCC_OscConfig+0x62c>)
 8004582:	400a      	ands	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe ffff 	bl	8003588 <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fffa 	bl	8003588 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e079      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	049b      	lsls	r3, r3, #18
 80045aa:	4013      	ands	r3, r2
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	220f      	movs	r2, #15
 80045b4:	4393      	bics	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a3a      	ldr	r2, [pc, #232]	; (80046b0 <HAL_RCC_OscConfig+0x630>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	431a      	orrs	r2, r3
 80045d6:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 80045e2:	2180      	movs	r1, #128	; 0x80
 80045e4:	0449      	lsls	r1, r1, #17
 80045e6:	430a      	orrs	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fe ffcd 	bl	8003588 <HAL_GetTick>
 80045ee:	0003      	movs	r3, r0
 80045f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fe ffc8 	bl	8003588 <HAL_GetTick>
 80045f8:	0002      	movs	r2, r0
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e047      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	049b      	lsls	r3, r3, #18
 800460e:	4013      	ands	r3, r2
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x574>
 8004612:	e03f      	b.n	8004694 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800461a:	4924      	ldr	r1, [pc, #144]	; (80046ac <HAL_RCC_OscConfig+0x62c>)
 800461c:	400a      	ands	r2, r1
 800461e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fe ffb2 	bl	8003588 <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462a:	f7fe ffad 	bl	8003588 <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e02c      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	049b      	lsls	r3, r3, #18
 8004644:	4013      	ands	r3, r2
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x5aa>
 8004648:	e024      	b.n	8004694 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e01f      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	025b      	lsls	r3, r3, #9
 8004668:	401a      	ands	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d10e      	bne.n	8004690 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	220f      	movs	r2, #15
 8004676:	401a      	ands	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d107      	bne.n	8004690 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	23f0      	movs	r3, #240	; 0xf0
 8004684:	039b      	lsls	r3, r3, #14
 8004686:	401a      	ands	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b008      	add	sp, #32
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	40021000 	.word	0x40021000
 80046a4:	00001388 	.word	0x00001388
 80046a8:	efffffff 	.word	0xefffffff
 80046ac:	feffffff 	.word	0xfeffffff
 80046b0:	ffc2ffff 	.word	0xffc2ffff

080046b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b3      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	4013      	ands	r3, r2
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d911      	bls.n	80046fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	4393      	bics	r3, r2
 80046de:	0019      	movs	r1, r3
 80046e0:	4b55      	ldr	r3, [pc, #340]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2201      	movs	r2, #1
 80046ee:	4013      	ands	r3, r2
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e09a      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2202      	movs	r2, #2
 8004700:	4013      	ands	r3, r2
 8004702:	d015      	beq.n	8004730 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2204      	movs	r2, #4
 800470a:	4013      	ands	r3, r2
 800470c:	d006      	beq.n	800471c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800470e:	4b4b      	ldr	r3, [pc, #300]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 8004714:	21e0      	movs	r1, #224	; 0xe0
 8004716:	00c9      	lsls	r1, r1, #3
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471c:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	22f0      	movs	r2, #240	; 0xf0
 8004722:	4393      	bics	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	4013      	ands	r3, r2
 8004738:	d040      	beq.n	80047bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	4013      	ands	r3, r2
 800474c:	d114      	bne.n	8004778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e06e      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	049b      	lsls	r3, r3, #18
 8004762:	4013      	ands	r3, r2
 8004764:	d108      	bne.n	8004778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e062      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2202      	movs	r2, #2
 8004770:	4013      	ands	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e05b      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004778:	4b30      	ldr	r3, [pc, #192]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2203      	movs	r2, #3
 800477e:	4393      	bics	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4b2d      	ldr	r3, [pc, #180]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800478c:	f7fe fefc 	bl	8003588 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004794:	e009      	b.n	80047aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004796:	f7fe fef7 	bl	8003588 <HAL_GetTick>
 800479a:	0002      	movs	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <HAL_RCC_ClockConfig+0x18c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e042      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	220c      	movs	r2, #12
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1ec      	bne.n	8004796 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d211      	bcs.n	80047ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	4393      	bics	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047dc:	4b16      	ldr	r3, [pc, #88]	; (8004838 <HAL_RCC_ClockConfig+0x184>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e020      	b.n	8004830 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2204      	movs	r2, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <HAL_RCC_ClockConfig+0x190>)
 80047fe:	4013      	ands	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800480c:	f000 f820 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8004810:	0001      	movs	r1, r0
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x188>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	220f      	movs	r2, #15
 800481a:	4013      	ands	r3, r2
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <HAL_RCC_ClockConfig+0x194>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	000a      	movs	r2, r1
 8004822:	40da      	lsrs	r2, r3
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x198>)
 8004826:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004828:	2000      	movs	r0, #0
 800482a:	f7fe fe67 	bl	80034fc <HAL_InitTick>
  
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b004      	add	sp, #16
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40022000 	.word	0x40022000
 800483c:	40021000 	.word	0x40021000
 8004840:	00001388 	.word	0x00001388
 8004844:	fffff8ff 	.word	0xfffff8ff
 8004848:	0800a6a8 	.word	0x0800a6a8
 800484c:	20000018 	.word	0x20000018

08004850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b08f      	sub	sp, #60	; 0x3c
 8004854:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004856:	2314      	movs	r3, #20
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800485e:	c313      	stmia	r3!, {r0, r1, r4}
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	4a29      	ldr	r2, [pc, #164]	; (800490c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004868:	ca13      	ldmia	r2!, {r0, r1, r4}
 800486a:	c313      	stmia	r3!, {r0, r1, r4}
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004874:	2300      	movs	r3, #0
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
 8004878:	2300      	movs	r3, #0
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	220c      	movs	r2, #12
 800488e:	4013      	ands	r3, r2
 8004890:	2b04      	cmp	r3, #4
 8004892:	d002      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0x4a>
 8004894:	2b08      	cmp	r3, #8
 8004896:	d003      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x50>
 8004898:	e02d      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800489a:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc4>)
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800489e:	e02d      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	0c9b      	lsrs	r3, r3, #18
 80048a4:	220f      	movs	r2, #15
 80048a6:	4013      	ands	r3, r2
 80048a8:	2214      	movs	r2, #20
 80048aa:	18ba      	adds	r2, r7, r2
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	220f      	movs	r2, #15
 80048b6:	4013      	ands	r3, r2
 80048b8:	1d3a      	adds	r2, r7, #4
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	025b      	lsls	r3, r3, #9
 80048c4:	4013      	ands	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ca:	4812      	ldr	r0, [pc, #72]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048cc:	f7fb fc38 	bl	8000140 <__udivsi3>
 80048d0:	0003      	movs	r3, r0
 80048d2:	001a      	movs	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	4353      	muls	r3, r2
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
 80048da:	e009      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048de:	000a      	movs	r2, r1
 80048e0:	0152      	lsls	r2, r2, #5
 80048e2:	1a52      	subs	r2, r2, r1
 80048e4:	0193      	lsls	r3, r2, #6
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	185b      	adds	r3, r3, r1
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048f4:	e002      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b00f      	add	sp, #60	; 0x3c
 8004904:	bd90      	pop	{r4, r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	0800a3d8 	.word	0x0800a3d8
 800490c:	0800a3e8 	.word	0x0800a3e8
 8004910:	40021000 	.word	0x40021000
 8004914:	007a1200 	.word	0x007a1200

08004918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800491c:	4b02      	ldr	r3, [pc, #8]	; (8004928 <HAL_RCC_GetHCLKFreq+0x10>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	20000018 	.word	0x20000018

0800492c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004930:	f7ff fff2 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004934:	0001      	movs	r1, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	2207      	movs	r2, #7
 800493e:	4013      	ands	r3, r2
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	40d9      	lsrs	r1, r3
 8004946:	000b      	movs	r3, r1
}    
 8004948:	0018      	movs	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	40021000 	.word	0x40021000
 8004954:	0800a6b8 	.word	0x0800a6b8

08004958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	025b      	lsls	r3, r3, #9
 8004970:	4013      	ands	r3, r2
 8004972:	d100      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004974:	e08e      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2017      	movs	r0, #23
 8004978:	183b      	adds	r3, r7, r0
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	055b      	lsls	r3, r3, #21
 8004986:	4013      	ands	r3, r2
 8004988:	d110      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	4b5b      	ldr	r3, [pc, #364]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	0549      	lsls	r1, r1, #21
 8004994:	430a      	orrs	r2, r1
 8004996:	61da      	str	r2, [r3, #28]
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	055b      	lsls	r3, r3, #21
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	183b      	adds	r3, r7, r0
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	4b54      	ldr	r3, [pc, #336]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	4013      	ands	r3, r2
 80049b6:	d11a      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b8:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	0049      	lsls	r1, r1, #1
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fe fddf 	bl	8003588 <HAL_GetTick>
 80049ca:	0003      	movs	r3, r0
 80049cc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	e008      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fe fdda 	bl	8003588 <HAL_GetTick>
 80049d4:	0002      	movs	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e087      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	23c0      	movs	r3, #192	; 0xc0
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d034      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	23c0      	movs	r3, #192	; 0xc0
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d02c      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a10:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a1a:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	0249      	lsls	r1, r1, #9
 8004a24:	430a      	orrs	r2, r1
 8004a26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a28:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a2e:	4936      	ldr	r1, [pc, #216]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a34:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7fe fda1 	bl	8003588 <HAL_GetTick>
 8004a46:	0003      	movs	r3, r0
 8004a48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	e009      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fe fd9c 	bl	8003588 <HAL_GetTick>
 8004a50:	0002      	movs	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e048      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	2202      	movs	r2, #2
 8004a66:	4013      	ands	r3, r2
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	0019      	movs	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a7e:	2317      	movs	r3, #23
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a8e:	4920      	ldr	r1, [pc, #128]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a9e:	4b17      	ldr	r3, [pc, #92]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	4b13      	ldr	r3, [pc, #76]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004acc:	430a      	orrs	r2, r1
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	2240      	movs	r2, #64	; 0x40
 8004ae2:	4393      	bics	r3, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aec:	430a      	orrs	r2, r1
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b006      	add	sp, #24
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	fffffcff 	.word	0xfffffcff
 8004b08:	fffeffff 	.word	0xfffeffff
 8004b0c:	00001388 	.word	0x00001388
 8004b10:	efffffff 	.word	0xefffffff

08004b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e044      	b.n	8004bb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2274      	movs	r2, #116	; 0x74
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7fe fb3d 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2224      	movs	r2, #36	; 0x24
 8004b42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2101      	movs	r1, #1
 8004b50:	438a      	bics	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fb24 	bl	80051a4 <UART_SetConfig>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e024      	b.n	8004bb0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 fc57 	bl	8005424 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	490d      	ldr	r1, [pc, #52]	; (8004bb8 <HAL_UART_Init+0xa4>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	212a      	movs	r1, #42	; 0x2a
 8004b92:	438a      	bics	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fcef 	bl	800558c <UART_CheckIdleState>
 8004bae:	0003      	movs	r3, r0
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	ffffb7ff 	.word	0xffffb7ff

08004bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b0ab      	sub	sp, #172	; 0xac
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	22a4      	movs	r2, #164	; 0xa4
 8004bcc:	18b9      	adds	r1, r7, r2
 8004bce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	20a0      	movs	r0, #160	; 0xa0
 8004bd8:	1839      	adds	r1, r7, r0
 8004bda:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	219c      	movs	r1, #156	; 0x9c
 8004be4:	1879      	adds	r1, r7, r1
 8004be6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004be8:	0011      	movs	r1, r2
 8004bea:	18bb      	adds	r3, r7, r2
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a99      	ldr	r2, [pc, #612]	; (8004e54 <HAL_UART_IRQHandler+0x298>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2298      	movs	r2, #152	; 0x98
 8004bf4:	18bc      	adds	r4, r7, r2
 8004bf6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004bf8:	18bb      	adds	r3, r7, r2
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d114      	bne.n	8004c2a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2220      	movs	r2, #32
 8004c06:	4013      	ands	r3, r2
 8004c08:	d00f      	beq.n	8004c2a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c0a:	183b      	adds	r3, r7, r0
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	4013      	ands	r3, r2
 8004c12:	d00a      	beq.n	8004c2a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d100      	bne.n	8004c1e <HAL_UART_IRQHandler+0x62>
 8004c1c:	e296      	b.n	800514c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	0010      	movs	r0, r2
 8004c26:	4798      	blx	r3
      }
      return;
 8004c28:	e290      	b.n	800514c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c2a:	2398      	movs	r3, #152	; 0x98
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d100      	bne.n	8004c36 <HAL_UART_IRQHandler+0x7a>
 8004c34:	e114      	b.n	8004e60 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c36:	239c      	movs	r3, #156	; 0x9c
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d106      	bne.n	8004c50 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c42:	23a0      	movs	r3, #160	; 0xa0
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a83      	ldr	r2, [pc, #524]	; (8004e58 <HAL_UART_IRQHandler+0x29c>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d100      	bne.n	8004c50 <HAL_UART_IRQHandler+0x94>
 8004c4e:	e107      	b.n	8004e60 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c50:	23a4      	movs	r3, #164	; 0xa4
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d012      	beq.n	8004c82 <HAL_UART_IRQHandler+0xc6>
 8004c5c:	23a0      	movs	r3, #160	; 0xa0
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	589b      	ldr	r3, [r3, r2]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c82:	23a4      	movs	r3, #164	; 0xa4
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d011      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xf6>
 8004c8e:	239c      	movs	r3, #156	; 0x9c
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2201      	movs	r2, #1
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	589b      	ldr	r3, [r3, r2]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cb2:	23a4      	movs	r3, #164	; 0xa4
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d011      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x126>
 8004cbe:	239c      	movs	r3, #156	; 0x9c
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2280      	movs	r2, #128	; 0x80
 8004cd6:	589b      	ldr	r3, [r3, r2]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2180      	movs	r1, #128	; 0x80
 8004ce0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ce2:	23a4      	movs	r3, #164	; 0xa4
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	4013      	ands	r3, r2
 8004cec:	d017      	beq.n	8004d1e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cee:	23a0      	movs	r3, #160	; 0xa0
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d105      	bne.n	8004d06 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cfa:	239c      	movs	r3, #156	; 0x9c
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d04:	d00b      	beq.n	8004d1e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2280      	movs	r2, #128	; 0x80
 8004d12:	589b      	ldr	r3, [r3, r2]
 8004d14:	2208      	movs	r2, #8
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d1e:	23a4      	movs	r3, #164	; 0xa4
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <HAL_UART_IRQHandler+0x198>
 8004d2c:	23a0      	movs	r3, #160	; 0xa0
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	04db      	lsls	r3, r3, #19
 8004d36:	4013      	ands	r3, r2
 8004d38:	d00c      	beq.n	8004d54 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	0112      	lsls	r2, r2, #4
 8004d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2280      	movs	r2, #128	; 0x80
 8004d48:	589b      	ldr	r3, [r3, r2]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	589b      	ldr	r3, [r3, r2]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d100      	bne.n	8004d60 <HAL_UART_IRQHandler+0x1a4>
 8004d5e:	e1f7      	b.n	8005150 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d60:	23a4      	movs	r3, #164	; 0xa4
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2220      	movs	r2, #32
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d6c:	23a0      	movs	r3, #160	; 0xa0
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2220      	movs	r2, #32
 8004d74:	4013      	ands	r3, r2
 8004d76:	d008      	beq.n	8004d8a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	0010      	movs	r0, r2
 8004d88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2280      	movs	r2, #128	; 0x80
 8004d8e:	589b      	ldr	r3, [r3, r2]
 8004d90:	2194      	movs	r1, #148	; 0x94
 8004d92:	187a      	adds	r2, r7, r1
 8004d94:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2240      	movs	r2, #64	; 0x40
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d004      	beq.n	8004dae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2228      	movs	r2, #40	; 0x28
 8004daa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dac:	d047      	beq.n	8004e3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 fcf7 	bl	80057a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2240      	movs	r2, #64	; 0x40
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d137      	bne.n	8004e34 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dcc:	2090      	movs	r0, #144	; 0x90
 8004dce:	183a      	adds	r2, r7, r0
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	438a      	bics	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
 8004dee:	183b      	adds	r3, r7, r0
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df6:	f383 8810 	msr	PRIMASK, r3
}
 8004dfa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d012      	beq.n	8004e2a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_UART_IRQHandler+0x2a0>)
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7fe fcd9 	bl	80037c8 <HAL_DMA_Abort_IT>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d01a      	beq.n	8004e50 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	0018      	movs	r0, r3
 8004e26:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	e012      	b.n	8004e50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 f9a5 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e32:	e00d      	b.n	8004e50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 f9a0 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e008      	b.n	8004e50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 f99b 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004e4e:	e17f      	b.n	8005150 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	46c0      	nop			; (mov r8, r8)
    return;
 8004e52:	e17d      	b.n	8005150 <HAL_UART_IRQHandler+0x594>
 8004e54:	0000080f 	.word	0x0000080f
 8004e58:	04000120 	.word	0x04000120
 8004e5c:	08005869 	.word	0x08005869

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d000      	beq.n	8004e6a <HAL_UART_IRQHandler+0x2ae>
 8004e68:	e131      	b.n	80050ce <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e6a:	23a4      	movs	r3, #164	; 0xa4
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	4013      	ands	r3, r2
 8004e74:	d100      	bne.n	8004e78 <HAL_UART_IRQHandler+0x2bc>
 8004e76:	e12a      	b.n	80050ce <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e78:	23a0      	movs	r3, #160	; 0xa0
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <HAL_UART_IRQHandler+0x2ca>
 8004e84:	e123      	b.n	80050ce <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2240      	movs	r2, #64	; 0x40
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d000      	beq.n	8004e9e <HAL_UART_IRQHandler+0x2e2>
 8004e9c:	e09b      	b.n	8004fd6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	217e      	movs	r1, #126	; 0x7e
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d100      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x2fa>
 8004eb4:	e14e      	b.n	8005154 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2258      	movs	r2, #88	; 0x58
 8004eba:	5a9b      	ldrh	r3, [r3, r2]
 8004ebc:	187a      	adds	r2, r7, r1
 8004ebe:	8812      	ldrh	r2, [r2, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d300      	bcc.n	8004ec6 <HAL_UART_IRQHandler+0x30a>
 8004ec4:	e146      	b.n	8005154 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	187a      	adds	r2, r7, r1
 8004eca:	215a      	movs	r1, #90	; 0x5a
 8004ecc:	8812      	ldrh	r2, [r2, #0]
 8004ece:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d06e      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eda:	f3ef 8310 	mrs	r3, PRIMASK
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	f383 8810 	msr	PRIMASK, r3
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	499a      	ldr	r1, [pc, #616]	; (8005164 <HAL_UART_IRQHandler+0x5a8>)
 8004efc:	400a      	ands	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	f383 8810 	msr	PRIMASK, r3
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f14:	677b      	str	r3, [r7, #116]	; 0x74
 8004f16:	2301      	movs	r3, #1
 8004f18:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	438a      	bics	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f42:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f46:	673b      	str	r3, [r7, #112]	; 0x70
 8004f48:	2301      	movs	r3, #1
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4e:	f383 8810 	msr	PRIMASK, r3
}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	438a      	bics	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f66:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f80:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f86:	2301      	movs	r3, #1
 8004f88:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	f383 8810 	msr	PRIMASK, r3
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2110      	movs	r1, #16
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa8:	f383 8810 	msr	PRIMASK, r3
}
 8004fac:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7fe fbd0 	bl	8003758 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2258      	movs	r2, #88	; 0x58
 8004fbc:	5a9a      	ldrh	r2, [r3, r2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	215a      	movs	r1, #90	; 0x5a
 8004fc2:	5a5b      	ldrh	r3, [r3, r1]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 f8dc 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fd4:	e0be      	b.n	8005154 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2258      	movs	r2, #88	; 0x58
 8004fda:	5a99      	ldrh	r1, [r3, r2]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	225a      	movs	r2, #90	; 0x5a
 8004fe0:	5a9b      	ldrh	r3, [r3, r2]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	208e      	movs	r0, #142	; 0x8e
 8004fe6:	183b      	adds	r3, r7, r0
 8004fe8:	1a8a      	subs	r2, r1, r2
 8004fea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	225a      	movs	r2, #90	; 0x5a
 8004ff0:	5a9b      	ldrh	r3, [r3, r2]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d100      	bne.n	8004ffa <HAL_UART_IRQHandler+0x43e>
 8004ff8:	e0ae      	b.n	8005158 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004ffa:	183b      	adds	r3, r7, r0
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d100      	bne.n	8005004 <HAL_UART_IRQHandler+0x448>
 8005002:	e0a9      	b.n	8005158 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005004:	f3ef 8310 	mrs	r3, PRIMASK
 8005008:	60fb      	str	r3, [r7, #12]
  return(result);
 800500a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500c:	2488      	movs	r4, #136	; 0x88
 800500e:	193a      	adds	r2, r7, r4
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	2301      	movs	r3, #1
 8005014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	494f      	ldr	r1, [pc, #316]	; (8005168 <HAL_UART_IRQHandler+0x5ac>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	193b      	adds	r3, r7, r4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503c:	f3ef 8310 	mrs	r3, PRIMASK
 8005040:	61bb      	str	r3, [r7, #24]
  return(result);
 8005042:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	2484      	movs	r4, #132	; 0x84
 8005046:	193a      	adds	r2, r7, r4
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	2301      	movs	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f383 8810 	msr	PRIMASK, r3
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2101      	movs	r1, #1
 8005062:	438a      	bics	r2, r1
 8005064:	609a      	str	r2, [r3, #8]
 8005066:	193b      	adds	r3, r7, r4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005086:	f3ef 8310 	mrs	r3, PRIMASK
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508e:	2480      	movs	r4, #128	; 0x80
 8005090:	193a      	adds	r2, r7, r4
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	2301      	movs	r3, #1
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	f383 8810 	msr	PRIMASK, r3
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2110      	movs	r1, #16
 80050ac:	438a      	bics	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050be:	183b      	adds	r3, r7, r0
 80050c0:	881a      	ldrh	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0011      	movs	r1, r2
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 f860 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050cc:	e044      	b.n	8005158 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050ce:	23a4      	movs	r3, #164	; 0xa4
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	035b      	lsls	r3, r3, #13
 80050d8:	4013      	ands	r3, r2
 80050da:	d010      	beq.n	80050fe <HAL_UART_IRQHandler+0x542>
 80050dc:	239c      	movs	r3, #156	; 0x9c
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	03db      	lsls	r3, r3, #15
 80050e6:	4013      	ands	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	0352      	lsls	r2, r2, #13
 80050f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 fbf8 	bl	80058ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fc:	e02f      	b.n	800515e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050fe:	23a4      	movs	r3, #164	; 0xa4
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	4013      	ands	r3, r2
 8005108:	d00f      	beq.n	800512a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800510a:	23a0      	movs	r3, #160	; 0xa0
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	4013      	ands	r3, r2
 8005114:	d009      	beq.n	800512a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01e      	beq.n	800515c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	0010      	movs	r0, r2
 8005126:	4798      	blx	r3
    }
    return;
 8005128:	e018      	b.n	800515c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800512a:	23a4      	movs	r3, #164	; 0xa4
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2240      	movs	r2, #64	; 0x40
 8005132:	4013      	ands	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_UART_IRQHandler+0x5a2>
 8005136:	23a0      	movs	r3, #160	; 0xa0
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2240      	movs	r2, #64	; 0x40
 800513e:	4013      	ands	r3, r2
 8005140:	d00d      	beq.n	800515e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 fba6 	bl	8005896 <UART_EndTransmit_IT>
    return;
 800514a:	e008      	b.n	800515e <HAL_UART_IRQHandler+0x5a2>
      return;
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	e006      	b.n	800515e <HAL_UART_IRQHandler+0x5a2>
    return;
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	e004      	b.n	800515e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	e002      	b.n	800515e <HAL_UART_IRQHandler+0x5a2>
      return;
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	e000      	b.n	800515e <HAL_UART_IRQHandler+0x5a2>
    return;
 800515c:	46c0      	nop			; (mov r8, r8)
  }

}
 800515e:	46bd      	mov	sp, r7
 8005160:	b02b      	add	sp, #172	; 0xac
 8005162:	bd90      	pop	{r4, r7, pc}
 8005164:	fffffeff 	.word	0xfffffeff
 8005168:	fffffedf 	.word	0xfffffedf

0800516c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b002      	add	sp, #8
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	000a      	movs	r2, r1
 8005196:	1cbb      	adds	r3, r7, #2
 8005198:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b002      	add	sp, #8
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ac:	231e      	movs	r3, #30
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a8d      	ldr	r2, [pc, #564]	; (8005408 <UART_SetConfig+0x264>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a88      	ldr	r2, [pc, #544]	; (800540c <UART_SetConfig+0x268>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4a7f      	ldr	r2, [pc, #508]	; (8005410 <UART_SetConfig+0x26c>)
 8005212:	4013      	ands	r3, r2
 8005214:	0019      	movs	r1, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	430a      	orrs	r2, r1
 800521e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a7b      	ldr	r2, [pc, #492]	; (8005414 <UART_SetConfig+0x270>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d127      	bne.n	800527a <UART_SetConfig+0xd6>
 800522a:	4b7b      	ldr	r3, [pc, #492]	; (8005418 <UART_SetConfig+0x274>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	2203      	movs	r2, #3
 8005230:	4013      	ands	r3, r2
 8005232:	2b03      	cmp	r3, #3
 8005234:	d00d      	beq.n	8005252 <UART_SetConfig+0xae>
 8005236:	d81b      	bhi.n	8005270 <UART_SetConfig+0xcc>
 8005238:	2b02      	cmp	r3, #2
 800523a:	d014      	beq.n	8005266 <UART_SetConfig+0xc2>
 800523c:	d818      	bhi.n	8005270 <UART_SetConfig+0xcc>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <UART_SetConfig+0xa4>
 8005242:	2b01      	cmp	r3, #1
 8005244:	d00a      	beq.n	800525c <UART_SetConfig+0xb8>
 8005246:	e013      	b.n	8005270 <UART_SetConfig+0xcc>
 8005248:	231f      	movs	r3, #31
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e021      	b.n	8005296 <UART_SetConfig+0xf2>
 8005252:	231f      	movs	r3, #31
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2202      	movs	r2, #2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e01c      	b.n	8005296 <UART_SetConfig+0xf2>
 800525c:	231f      	movs	r3, #31
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2204      	movs	r2, #4
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e017      	b.n	8005296 <UART_SetConfig+0xf2>
 8005266:	231f      	movs	r3, #31
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2208      	movs	r2, #8
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e012      	b.n	8005296 <UART_SetConfig+0xf2>
 8005270:	231f      	movs	r3, #31
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2210      	movs	r2, #16
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e00d      	b.n	8005296 <UART_SetConfig+0xf2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a67      	ldr	r2, [pc, #412]	; (800541c <UART_SetConfig+0x278>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d104      	bne.n	800528e <UART_SetConfig+0xea>
 8005284:	231f      	movs	r3, #31
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e003      	b.n	8005296 <UART_SetConfig+0xf2>
 800528e:	231f      	movs	r3, #31
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	2210      	movs	r2, #16
 8005294:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	429a      	cmp	r2, r3
 80052a0:	d15d      	bne.n	800535e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80052a2:	231f      	movs	r3, #31
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d015      	beq.n	80052d8 <UART_SetConfig+0x134>
 80052ac:	dc18      	bgt.n	80052e0 <UART_SetConfig+0x13c>
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d00d      	beq.n	80052ce <UART_SetConfig+0x12a>
 80052b2:	dc15      	bgt.n	80052e0 <UART_SetConfig+0x13c>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <UART_SetConfig+0x11a>
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d005      	beq.n	80052c8 <UART_SetConfig+0x124>
 80052bc:	e010      	b.n	80052e0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052be:	f7ff fb35 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80052c2:	0003      	movs	r3, r0
 80052c4:	61bb      	str	r3, [r7, #24]
        break;
 80052c6:	e012      	b.n	80052ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c8:	4b55      	ldr	r3, [pc, #340]	; (8005420 <UART_SetConfig+0x27c>)
 80052ca:	61bb      	str	r3, [r7, #24]
        break;
 80052cc:	e00f      	b.n	80052ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ce:	f7ff fabf 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80052d2:	0003      	movs	r3, r0
 80052d4:	61bb      	str	r3, [r7, #24]
        break;
 80052d6:	e00a      	b.n	80052ee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	61bb      	str	r3, [r7, #24]
        break;
 80052de:	e006      	b.n	80052ee <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052e4:	231e      	movs	r3, #30
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
        break;
 80052ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d100      	bne.n	80052f6 <UART_SetConfig+0x152>
 80052f4:	e07b      	b.n	80053ee <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	005a      	lsls	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	18d2      	adds	r2, r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	0019      	movs	r1, r3
 8005308:	0010      	movs	r0, r2
 800530a:	f7fa ff19 	bl	8000140 <__udivsi3>
 800530e:	0003      	movs	r3, r0
 8005310:	b29b      	uxth	r3, r3
 8005312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d91c      	bls.n	8005354 <UART_SetConfig+0x1b0>
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	025b      	lsls	r3, r3, #9
 8005320:	429a      	cmp	r2, r3
 8005322:	d217      	bcs.n	8005354 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	b29a      	uxth	r2, r3
 8005328:	200e      	movs	r0, #14
 800532a:	183b      	adds	r3, r7, r0
 800532c:	210f      	movs	r1, #15
 800532e:	438a      	bics	r2, r1
 8005330:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	b29b      	uxth	r3, r3
 8005338:	2207      	movs	r2, #7
 800533a:	4013      	ands	r3, r2
 800533c:	b299      	uxth	r1, r3
 800533e:	183b      	adds	r3, r7, r0
 8005340:	183a      	adds	r2, r7, r0
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	183a      	adds	r2, r7, r0
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e04c      	b.n	80053ee <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005354:	231e      	movs	r3, #30
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e047      	b.n	80053ee <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800535e:	231f      	movs	r3, #31
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d015      	beq.n	8005394 <UART_SetConfig+0x1f0>
 8005368:	dc18      	bgt.n	800539c <UART_SetConfig+0x1f8>
 800536a:	2b04      	cmp	r3, #4
 800536c:	d00d      	beq.n	800538a <UART_SetConfig+0x1e6>
 800536e:	dc15      	bgt.n	800539c <UART_SetConfig+0x1f8>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <UART_SetConfig+0x1d6>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d005      	beq.n	8005384 <UART_SetConfig+0x1e0>
 8005378:	e010      	b.n	800539c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800537a:	f7ff fad7 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 800537e:	0003      	movs	r3, r0
 8005380:	61bb      	str	r3, [r7, #24]
        break;
 8005382:	e012      	b.n	80053aa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005384:	4b26      	ldr	r3, [pc, #152]	; (8005420 <UART_SetConfig+0x27c>)
 8005386:	61bb      	str	r3, [r7, #24]
        break;
 8005388:	e00f      	b.n	80053aa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538a:	f7ff fa61 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800538e:	0003      	movs	r3, r0
 8005390:	61bb      	str	r3, [r7, #24]
        break;
 8005392:	e00a      	b.n	80053aa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	61bb      	str	r3, [r7, #24]
        break;
 800539a:	e006      	b.n	80053aa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053a0:	231e      	movs	r3, #30
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
        break;
 80053a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01e      	beq.n	80053ee <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	085a      	lsrs	r2, r3, #1
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	18d2      	adds	r2, r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	0019      	movs	r1, r3
 80053c0:	0010      	movs	r0, r2
 80053c2:	f7fa febd 	bl	8000140 <__udivsi3>
 80053c6:	0003      	movs	r3, r0
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	d909      	bls.n	80053e6 <UART_SetConfig+0x242>
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	429a      	cmp	r2, r3
 80053da:	d204      	bcs.n	80053e6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	e003      	b.n	80053ee <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80053e6:	231e      	movs	r3, #30
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053fa:	231e      	movs	r3, #30
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	781b      	ldrb	r3, [r3, #0]
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b008      	add	sp, #32
 8005406:	bd80      	pop	{r7, pc}
 8005408:	ffff69f3 	.word	0xffff69f3
 800540c:	ffffcfff 	.word	0xffffcfff
 8005410:	fffff4ff 	.word	0xfffff4ff
 8005414:	40013800 	.word	0x40013800
 8005418:	40021000 	.word	0x40021000
 800541c:	40004400 	.word	0x40004400
 8005420:	007a1200 	.word	0x007a1200

08005424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2201      	movs	r2, #1
 8005432:	4013      	ands	r3, r2
 8005434:	d00b      	beq.n	800544e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4a4a      	ldr	r2, [pc, #296]	; (8005568 <UART_AdvFeatureConfig+0x144>)
 800543e:	4013      	ands	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2202      	movs	r2, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d00b      	beq.n	8005470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4a43      	ldr	r2, [pc, #268]	; (800556c <UART_AdvFeatureConfig+0x148>)
 8005460:	4013      	ands	r3, r2
 8005462:	0019      	movs	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2204      	movs	r2, #4
 8005476:	4013      	ands	r3, r2
 8005478:	d00b      	beq.n	8005492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a3b      	ldr	r2, [pc, #236]	; (8005570 <UART_AdvFeatureConfig+0x14c>)
 8005482:	4013      	ands	r3, r2
 8005484:	0019      	movs	r1, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2208      	movs	r2, #8
 8005498:	4013      	ands	r3, r2
 800549a:	d00b      	beq.n	80054b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4a34      	ldr	r2, [pc, #208]	; (8005574 <UART_AdvFeatureConfig+0x150>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	0019      	movs	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2210      	movs	r2, #16
 80054ba:	4013      	ands	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <UART_AdvFeatureConfig+0x154>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	0019      	movs	r1, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2220      	movs	r2, #32
 80054dc:	4013      	ands	r3, r2
 80054de:	d00b      	beq.n	80054f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4a25      	ldr	r2, [pc, #148]	; (800557c <UART_AdvFeatureConfig+0x158>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	0019      	movs	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	2240      	movs	r2, #64	; 0x40
 80054fe:	4013      	ands	r3, r2
 8005500:	d01d      	beq.n	800553e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <UART_AdvFeatureConfig+0x15c>)
 800550a:	4013      	ands	r3, r2
 800550c:	0019      	movs	r1, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	035b      	lsls	r3, r3, #13
 8005522:	429a      	cmp	r2, r3
 8005524:	d10b      	bne.n	800553e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <UART_AdvFeatureConfig+0x160>)
 800552e:	4013      	ands	r3, r2
 8005530:	0019      	movs	r1, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	4013      	ands	r3, r2
 8005546:	d00b      	beq.n	8005560 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <UART_AdvFeatureConfig+0x164>)
 8005550:	4013      	ands	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}
 8005568:	fffdffff 	.word	0xfffdffff
 800556c:	fffeffff 	.word	0xfffeffff
 8005570:	fffbffff 	.word	0xfffbffff
 8005574:	ffff7fff 	.word	0xffff7fff
 8005578:	ffffefff 	.word	0xffffefff
 800557c:	ffffdfff 	.word	0xffffdfff
 8005580:	ffefffff 	.word	0xffefffff
 8005584:	ff9fffff 	.word	0xff9fffff
 8005588:	fff7ffff 	.word	0xfff7ffff

0800558c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af02      	add	r7, sp, #8
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	2100      	movs	r1, #0
 800559a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800559c:	f7fd fff4 	bl	8003588 <HAL_GetTick>
 80055a0:	0003      	movs	r3, r0
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2208      	movs	r2, #8
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d10c      	bne.n	80055cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	0391      	lsls	r1, r2, #14
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <UART_CheckIdleState+0x8c>)
 80055bc:	9200      	str	r2, [sp, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	f000 f82c 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e021      	b.n	8005610 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2204      	movs	r2, #4
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d10c      	bne.n	80055f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	03d1      	lsls	r1, r2, #15
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4a0d      	ldr	r2, [pc, #52]	; (8005618 <UART_CheckIdleState+0x8c>)
 80055e4:	9200      	str	r2, [sp, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f000 f818 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d001      	beq.n	80055f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e00d      	b.n	8005610 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2274      	movs	r2, #116	; 0x74
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b004      	add	sp, #16
 8005616:	bd80      	pop	{r7, pc}
 8005618:	01ffffff 	.word	0x01ffffff

0800561c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b094      	sub	sp, #80	; 0x50
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562c:	e0a3      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005630:	3301      	adds	r3, #1
 8005632:	d100      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005634:	e09f      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fd ffa7 	bl	8003588 <HAL_GetTick>
 800563a:	0002      	movs	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <UART_WaitOnFlagUntilTimeout+0x30>
 8005646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005648:	2b00      	cmp	r3, #0
 800564a:	d13d      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564c:	f3ef 8310 	mrs	r3, PRIMASK
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005654:	647b      	str	r3, [r7, #68]	; 0x44
 8005656:	2301      	movs	r3, #1
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	f383 8810 	msr	PRIMASK, r3
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	494c      	ldr	r1, [pc, #304]	; (80057a0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800566e:	400a      	ands	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	f383 8810 	msr	PRIMASK, r3
}
 800567c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567e:	f3ef 8310 	mrs	r3, PRIMASK
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
 8005688:	2301      	movs	r3, #1
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	f383 8810 	msr	PRIMASK, r3
}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2101      	movs	r1, #1
 80056a0:	438a      	bics	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	f383 8810 	msr	PRIMASK, r3
}
 80056ae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2274      	movs	r2, #116	; 0x74
 80056c0:	2100      	movs	r1, #0
 80056c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e067      	b.n	8005798 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2204      	movs	r2, #4
 80056d0:	4013      	ands	r3, r2
 80056d2:	d050      	beq.n	8005776 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	401a      	ands	r2, r3
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d146      	bne.n	8005776 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2280      	movs	r2, #128	; 0x80
 80056ee:	0112      	lsls	r2, r2, #4
 80056f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f2:	f3ef 8310 	mrs	r3, PRIMASK
 80056f6:	613b      	str	r3, [r7, #16]
  return(result);
 80056f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f383 8810 	msr	PRIMASK, r3
}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4923      	ldr	r1, [pc, #140]	; (80057a0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005714:	400a      	ands	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f383 8810 	msr	PRIMASK, r3
}
 8005722:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005724:	f3ef 8310 	mrs	r3, PRIMASK
 8005728:	61fb      	str	r3, [r7, #28]
  return(result);
 800572a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572c:	64bb      	str	r3, [r7, #72]	; 0x48
 800572e:	2301      	movs	r3, #1
 8005730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	f383 8810 	msr	PRIMASK, r3
}
 8005738:	46c0      	nop			; (mov r8, r8)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	438a      	bics	r2, r1
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	f383 8810 	msr	PRIMASK, r3
}
 8005754:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	2120      	movs	r1, #32
 8005768:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2274      	movs	r2, #116	; 0x74
 800576e:	2100      	movs	r1, #0
 8005770:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e010      	b.n	8005798 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	4013      	ands	r3, r2
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	425a      	negs	r2, r3
 8005786:	4153      	adcs	r3, r2
 8005788:	b2db      	uxtb	r3, r3
 800578a:	001a      	movs	r2, r3
 800578c:	1dfb      	adds	r3, r7, #7
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d100      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005794:	e74b      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b014      	add	sp, #80	; 0x50
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	fffffe5f 	.word	0xfffffe5f

080057a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08e      	sub	sp, #56	; 0x38
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ac:	f3ef 8310 	mrs	r3, PRIMASK
 80057b0:	617b      	str	r3, [r7, #20]
  return(result);
 80057b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
 80057b6:	2301      	movs	r3, #1
 80057b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4925      	ldr	r1, [pc, #148]	; (8005864 <UART_EndRxTransfer+0xc0>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f383 8810 	msr	PRIMASK, r3
}
 80057dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	623b      	str	r3, [r7, #32]
  return(result);
 80057e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
 80057e8:	2301      	movs	r3, #1
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	f383 8810 	msr	PRIMASK, r3
}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	438a      	bics	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005814:	2b01      	cmp	r3, #1
 8005816:	d118      	bne.n	800584a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005818:	f3ef 8310 	mrs	r3, PRIMASK
 800581c:	60bb      	str	r3, [r7, #8]
  return(result);
 800581e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005822:	2301      	movs	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f383 8810 	msr	PRIMASK, r3
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2110      	movs	r1, #16
 800583a:	438a      	bics	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f383 8810 	msr	PRIMASK, r3
}
 8005848:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b00e      	add	sp, #56	; 0x38
 8005862:	bd80      	pop	{r7, pc}
 8005864:	fffffedf 	.word	0xfffffedf

08005868 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	225a      	movs	r2, #90	; 0x5a
 800587a:	2100      	movs	r1, #0
 800587c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2252      	movs	r2, #82	; 0x52
 8005882:	2100      	movs	r1, #0
 8005884:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff fc77 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b004      	add	sp, #16
 8005894:	bd80      	pop	{r7, pc}

08005896 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589e:	f3ef 8310 	mrs	r3, PRIMASK
 80058a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	2301      	movs	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f383 8810 	msr	PRIMASK, r3
}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2140      	movs	r1, #64	; 0x40
 80058c0:	438a      	bics	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f383 8810 	msr	PRIMASK, r3
}
 80058ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	0018      	movs	r0, r3
 80058e0:	f7ff fc44 	bl	800516c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b006      	add	sp, #24
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	20000024 	.word	0x20000024

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	2600      	movs	r6, #0
 800590c:	4d0c      	ldr	r5, [pc, #48]	; (8005940 <__libc_init_array+0x38>)
 800590e:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 8005910:	1b64      	subs	r4, r4, r5
 8005912:	10a4      	asrs	r4, r4, #2
 8005914:	42a6      	cmp	r6, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	2600      	movs	r6, #0
 800591a:	f004 fd51 	bl	800a3c0 <_init>
 800591e:	4d0a      	ldr	r5, [pc, #40]	; (8005948 <__libc_init_array+0x40>)
 8005920:	4c0a      	ldr	r4, [pc, #40]	; (800594c <__libc_init_array+0x44>)
 8005922:	1b64      	subs	r4, r4, r5
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	42a6      	cmp	r6, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	00b3      	lsls	r3, r6, #2
 800592e:	58eb      	ldr	r3, [r5, r3]
 8005930:	4798      	blx	r3
 8005932:	3601      	adds	r6, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	00b3      	lsls	r3, r6, #2
 8005938:	58eb      	ldr	r3, [r5, r3]
 800593a:	4798      	blx	r3
 800593c:	3601      	adds	r6, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	0800ab6c 	.word	0x0800ab6c
 8005944:	0800ab6c 	.word	0x0800ab6c
 8005948:	0800ab6c 	.word	0x0800ab6c
 800594c:	0800ab70 	.word	0x0800ab70

08005950 <malloc>:
 8005950:	b510      	push	{r4, lr}
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <malloc+0x10>)
 8005954:	0001      	movs	r1, r0
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	f000 f882 	bl	8005a60 <_malloc_r>
 800595c:	bd10      	pop	{r4, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	20000024 	.word	0x20000024

08005964 <free>:
 8005964:	b510      	push	{r4, lr}
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <free+0x10>)
 8005968:	0001      	movs	r1, r0
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f000 f80c 	bl	8005988 <_free_r>
 8005970:	bd10      	pop	{r4, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	20000024 	.word	0x20000024

08005978 <memset>:
 8005978:	0003      	movs	r3, r0
 800597a:	1882      	adds	r2, r0, r2
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	7019      	strb	r1, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <_free_r>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	0005      	movs	r5, r0
 800598c:	2900      	cmp	r1, #0
 800598e:	d010      	beq.n	80059b2 <_free_r+0x2a>
 8005990:	1f0c      	subs	r4, r1, #4
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da00      	bge.n	800599a <_free_r+0x12>
 8005998:	18e4      	adds	r4, r4, r3
 800599a:	0028      	movs	r0, r5
 800599c:	f003 f992 	bl	8008cc4 <__malloc_lock>
 80059a0:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <_free_r+0x90>)
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <_free_r+0x2c>
 80059a8:	6063      	str	r3, [r4, #4]
 80059aa:	6014      	str	r4, [r2, #0]
 80059ac:	0028      	movs	r0, r5
 80059ae:	f003 f991 	bl	8008cd4 <__malloc_unlock>
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	d908      	bls.n	80059ca <_free_r+0x42>
 80059b8:	6821      	ldr	r1, [r4, #0]
 80059ba:	1860      	adds	r0, r4, r1
 80059bc:	4283      	cmp	r3, r0
 80059be:	d1f3      	bne.n	80059a8 <_free_r+0x20>
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	1841      	adds	r1, r0, r1
 80059c6:	6021      	str	r1, [r4, #0]
 80059c8:	e7ee      	b.n	80059a8 <_free_r+0x20>
 80059ca:	001a      	movs	r2, r3
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <_free_r+0x4e>
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	d9f9      	bls.n	80059ca <_free_r+0x42>
 80059d6:	6811      	ldr	r1, [r2, #0]
 80059d8:	1850      	adds	r0, r2, r1
 80059da:	42a0      	cmp	r0, r4
 80059dc:	d10b      	bne.n	80059f6 <_free_r+0x6e>
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	1809      	adds	r1, r1, r0
 80059e2:	1850      	adds	r0, r2, r1
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	4283      	cmp	r3, r0
 80059e8:	d1e0      	bne.n	80059ac <_free_r+0x24>
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	1841      	adds	r1, r0, r1
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7da      	b.n	80059ac <_free_r+0x24>
 80059f6:	42a0      	cmp	r0, r4
 80059f8:	d902      	bls.n	8005a00 <_free_r+0x78>
 80059fa:	230c      	movs	r3, #12
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	e7d5      	b.n	80059ac <_free_r+0x24>
 8005a00:	6821      	ldr	r1, [r4, #0]
 8005a02:	1860      	adds	r0, r4, r1
 8005a04:	4283      	cmp	r3, r0
 8005a06:	d103      	bne.n	8005a10 <_free_r+0x88>
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	1841      	adds	r1, r0, r1
 8005a0e:	6021      	str	r1, [r4, #0]
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	6054      	str	r4, [r2, #4]
 8005a14:	e7ca      	b.n	80059ac <_free_r+0x24>
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	200005a0 	.word	0x200005a0

08005a1c <sbrk_aligned>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4e0f      	ldr	r6, [pc, #60]	; (8005a5c <sbrk_aligned+0x40>)
 8005a20:	000d      	movs	r5, r1
 8005a22:	6831      	ldr	r1, [r6, #0]
 8005a24:	0004      	movs	r4, r0
 8005a26:	2900      	cmp	r1, #0
 8005a28:	d102      	bne.n	8005a30 <sbrk_aligned+0x14>
 8005a2a:	f000 ff05 	bl	8006838 <_sbrk_r>
 8005a2e:	6030      	str	r0, [r6, #0]
 8005a30:	0029      	movs	r1, r5
 8005a32:	0020      	movs	r0, r4
 8005a34:	f000 ff00 	bl	8006838 <_sbrk_r>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d00a      	beq.n	8005a52 <sbrk_aligned+0x36>
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	1cc5      	adds	r5, r0, #3
 8005a40:	439d      	bics	r5, r3
 8005a42:	42a8      	cmp	r0, r5
 8005a44:	d007      	beq.n	8005a56 <sbrk_aligned+0x3a>
 8005a46:	1a29      	subs	r1, r5, r0
 8005a48:	0020      	movs	r0, r4
 8005a4a:	f000 fef5 	bl	8006838 <_sbrk_r>
 8005a4e:	1c43      	adds	r3, r0, #1
 8005a50:	d101      	bne.n	8005a56 <sbrk_aligned+0x3a>
 8005a52:	2501      	movs	r5, #1
 8005a54:	426d      	negs	r5, r5
 8005a56:	0028      	movs	r0, r5
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	200005a4 	.word	0x200005a4

08005a60 <_malloc_r>:
 8005a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a62:	2203      	movs	r2, #3
 8005a64:	1ccb      	adds	r3, r1, #3
 8005a66:	4393      	bics	r3, r2
 8005a68:	3308      	adds	r3, #8
 8005a6a:	0006      	movs	r6, r0
 8005a6c:	001f      	movs	r7, r3
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d232      	bcs.n	8005ad8 <_malloc_r+0x78>
 8005a72:	270c      	movs	r7, #12
 8005a74:	42b9      	cmp	r1, r7
 8005a76:	d831      	bhi.n	8005adc <_malloc_r+0x7c>
 8005a78:	0030      	movs	r0, r6
 8005a7a:	f003 f923 	bl	8008cc4 <__malloc_lock>
 8005a7e:	4d32      	ldr	r5, [pc, #200]	; (8005b48 <_malloc_r+0xe8>)
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	001c      	movs	r4, r3
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	d12e      	bne.n	8005ae6 <_malloc_r+0x86>
 8005a88:	0039      	movs	r1, r7
 8005a8a:	0030      	movs	r0, r6
 8005a8c:	f7ff ffc6 	bl	8005a1c <sbrk_aligned>
 8005a90:	0004      	movs	r4, r0
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d11e      	bne.n	8005ad4 <_malloc_r+0x74>
 8005a96:	682c      	ldr	r4, [r5, #0]
 8005a98:	0025      	movs	r5, r4
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	d14a      	bne.n	8005b34 <_malloc_r+0xd4>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0029      	movs	r1, r5
 8005aa2:	18e3      	adds	r3, r4, r3
 8005aa4:	0030      	movs	r0, r6
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	f000 fec6 	bl	8006838 <_sbrk_r>
 8005aac:	9b01      	ldr	r3, [sp, #4]
 8005aae:	4283      	cmp	r3, r0
 8005ab0:	d143      	bne.n	8005b3a <_malloc_r+0xda>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	3703      	adds	r7, #3
 8005ab6:	1aff      	subs	r7, r7, r3
 8005ab8:	2303      	movs	r3, #3
 8005aba:	439f      	bics	r7, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	2f0c      	cmp	r7, #12
 8005ac0:	d200      	bcs.n	8005ac4 <_malloc_r+0x64>
 8005ac2:	270c      	movs	r7, #12
 8005ac4:	0039      	movs	r1, r7
 8005ac6:	0030      	movs	r0, r6
 8005ac8:	f7ff ffa8 	bl	8005a1c <sbrk_aligned>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d034      	beq.n	8005b3a <_malloc_r+0xda>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	19df      	adds	r7, r3, r7
 8005ad4:	6027      	str	r7, [r4, #0]
 8005ad6:	e013      	b.n	8005b00 <_malloc_r+0xa0>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dacb      	bge.n	8005a74 <_malloc_r+0x14>
 8005adc:	230c      	movs	r3, #12
 8005ade:	2500      	movs	r5, #0
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	0028      	movs	r0, r5
 8005ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	1bd1      	subs	r1, r2, r7
 8005aea:	d420      	bmi.n	8005b2e <_malloc_r+0xce>
 8005aec:	290b      	cmp	r1, #11
 8005aee:	d917      	bls.n	8005b20 <_malloc_r+0xc0>
 8005af0:	19e2      	adds	r2, r4, r7
 8005af2:	6027      	str	r7, [r4, #0]
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	d111      	bne.n	8005b1c <_malloc_r+0xbc>
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	6011      	str	r1, [r2, #0]
 8005afe:	6053      	str	r3, [r2, #4]
 8005b00:	0030      	movs	r0, r6
 8005b02:	0025      	movs	r5, r4
 8005b04:	f003 f8e6 	bl	8008cd4 <__malloc_unlock>
 8005b08:	2207      	movs	r2, #7
 8005b0a:	350b      	adds	r5, #11
 8005b0c:	1d23      	adds	r3, r4, #4
 8005b0e:	4395      	bics	r5, r2
 8005b10:	1aea      	subs	r2, r5, r3
 8005b12:	429d      	cmp	r5, r3
 8005b14:	d0e5      	beq.n	8005ae2 <_malloc_r+0x82>
 8005b16:	1b5b      	subs	r3, r3, r5
 8005b18:	50a3      	str	r3, [r4, r2]
 8005b1a:	e7e2      	b.n	8005ae2 <_malloc_r+0x82>
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e7ec      	b.n	8005afa <_malloc_r+0x9a>
 8005b20:	6862      	ldr	r2, [r4, #4]
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	d101      	bne.n	8005b2a <_malloc_r+0xca>
 8005b26:	602a      	str	r2, [r5, #0]
 8005b28:	e7ea      	b.n	8005b00 <_malloc_r+0xa0>
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	e7e8      	b.n	8005b00 <_malloc_r+0xa0>
 8005b2e:	0023      	movs	r3, r4
 8005b30:	6864      	ldr	r4, [r4, #4]
 8005b32:	e7a7      	b.n	8005a84 <_malloc_r+0x24>
 8005b34:	002c      	movs	r4, r5
 8005b36:	686d      	ldr	r5, [r5, #4]
 8005b38:	e7af      	b.n	8005a9a <_malloc_r+0x3a>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	0030      	movs	r0, r6
 8005b3e:	6033      	str	r3, [r6, #0]
 8005b40:	f003 f8c8 	bl	8008cd4 <__malloc_unlock>
 8005b44:	e7cd      	b.n	8005ae2 <_malloc_r+0x82>
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	200005a0 	.word	0x200005a0

08005b4c <__cvt>:
 8005b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4e:	001e      	movs	r6, r3
 8005b50:	2300      	movs	r3, #0
 8005b52:	0014      	movs	r4, r2
 8005b54:	b08b      	sub	sp, #44	; 0x2c
 8005b56:	429e      	cmp	r6, r3
 8005b58:	da04      	bge.n	8005b64 <__cvt+0x18>
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	0609      	lsls	r1, r1, #24
 8005b5e:	1873      	adds	r3, r6, r1
 8005b60:	001e      	movs	r6, r3
 8005b62:	232d      	movs	r3, #45	; 0x2d
 8005b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b66:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b68:	7013      	strb	r3, [r2, #0]
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	439f      	bics	r7, r3
 8005b70:	2f46      	cmp	r7, #70	; 0x46
 8005b72:	d007      	beq.n	8005b84 <__cvt+0x38>
 8005b74:	003b      	movs	r3, r7
 8005b76:	3b45      	subs	r3, #69	; 0x45
 8005b78:	4259      	negs	r1, r3
 8005b7a:	414b      	adcs	r3, r1
 8005b7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	18cb      	adds	r3, r1, r3
 8005b82:	9310      	str	r3, [sp, #64]	; 0x40
 8005b84:	ab09      	add	r3, sp, #36	; 0x24
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	ab08      	add	r3, sp, #32
 8005b8a:	9303      	str	r3, [sp, #12]
 8005b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b8e:	9200      	str	r2, [sp, #0]
 8005b90:	9302      	str	r3, [sp, #8]
 8005b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b94:	0022      	movs	r2, r4
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	0033      	movs	r3, r6
 8005b9a:	f001 fdd5 	bl	8007748 <_dtoa_r>
 8005b9e:	0005      	movs	r5, r0
 8005ba0:	2f47      	cmp	r7, #71	; 0x47
 8005ba2:	d102      	bne.n	8005baa <__cvt+0x5e>
 8005ba4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d528      	bpl.n	8005bfc <__cvt+0xb0>
 8005baa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bac:	18eb      	adds	r3, r5, r3
 8005bae:	9307      	str	r3, [sp, #28]
 8005bb0:	2f46      	cmp	r7, #70	; 0x46
 8005bb2:	d114      	bne.n	8005bde <__cvt+0x92>
 8005bb4:	782b      	ldrb	r3, [r5, #0]
 8005bb6:	2b30      	cmp	r3, #48	; 0x30
 8005bb8:	d10c      	bne.n	8005bd4 <__cvt+0x88>
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	0020      	movs	r0, r4
 8005bc0:	0031      	movs	r1, r6
 8005bc2:	f7fa fc43 	bl	800044c <__aeabi_dcmpeq>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d104      	bne.n	8005bd4 <__cvt+0x88>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	18d3      	adds	r3, r2, r3
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	2200      	movs	r2, #0
 8005be0:	2300      	movs	r3, #0
 8005be2:	0020      	movs	r0, r4
 8005be4:	0031      	movs	r1, r6
 8005be6:	f7fa fc31 	bl	800044c <__aeabi_dcmpeq>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d001      	beq.n	8005bf2 <__cvt+0xa6>
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf2:	2230      	movs	r2, #48	; 0x30
 8005bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf6:	9907      	ldr	r1, [sp, #28]
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	d306      	bcc.n	8005c0a <__cvt+0xbe>
 8005bfc:	0028      	movs	r0, r5
 8005bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c02:	1b5b      	subs	r3, r3, r5
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	b00b      	add	sp, #44	; 0x2c
 8005c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0a:	1c59      	adds	r1, r3, #1
 8005c0c:	9109      	str	r1, [sp, #36]	; 0x24
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e7f0      	b.n	8005bf4 <__cvt+0xa8>

08005c12 <__exponent>:
 8005c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c14:	1c83      	adds	r3, r0, #2
 8005c16:	b087      	sub	sp, #28
 8005c18:	9303      	str	r3, [sp, #12]
 8005c1a:	0005      	movs	r5, r0
 8005c1c:	000c      	movs	r4, r1
 8005c1e:	232b      	movs	r3, #43	; 0x2b
 8005c20:	7002      	strb	r2, [r0, #0]
 8005c22:	2900      	cmp	r1, #0
 8005c24:	da01      	bge.n	8005c2a <__exponent+0x18>
 8005c26:	424c      	negs	r4, r1
 8005c28:	3302      	adds	r3, #2
 8005c2a:	706b      	strb	r3, [r5, #1]
 8005c2c:	2c09      	cmp	r4, #9
 8005c2e:	dd31      	ble.n	8005c94 <__exponent+0x82>
 8005c30:	270a      	movs	r7, #10
 8005c32:	ab04      	add	r3, sp, #16
 8005c34:	1dde      	adds	r6, r3, #7
 8005c36:	0020      	movs	r0, r4
 8005c38:	0039      	movs	r1, r7
 8005c3a:	9601      	str	r6, [sp, #4]
 8005c3c:	f7fa fbf0 	bl	8000420 <__aeabi_idivmod>
 8005c40:	3e01      	subs	r6, #1
 8005c42:	3130      	adds	r1, #48	; 0x30
 8005c44:	0020      	movs	r0, r4
 8005c46:	7031      	strb	r1, [r6, #0]
 8005c48:	0039      	movs	r1, r7
 8005c4a:	9402      	str	r4, [sp, #8]
 8005c4c:	f7fa fb02 	bl	8000254 <__divsi3>
 8005c50:	9b02      	ldr	r3, [sp, #8]
 8005c52:	0004      	movs	r4, r0
 8005c54:	2b63      	cmp	r3, #99	; 0x63
 8005c56:	dcee      	bgt.n	8005c36 <__exponent+0x24>
 8005c58:	9b01      	ldr	r3, [sp, #4]
 8005c5a:	3430      	adds	r4, #48	; 0x30
 8005c5c:	1e9a      	subs	r2, r3, #2
 8005c5e:	0013      	movs	r3, r2
 8005c60:	9903      	ldr	r1, [sp, #12]
 8005c62:	7014      	strb	r4, [r2, #0]
 8005c64:	a804      	add	r0, sp, #16
 8005c66:	3007      	adds	r0, #7
 8005c68:	4298      	cmp	r0, r3
 8005c6a:	d80e      	bhi.n	8005c8a <__exponent+0x78>
 8005c6c:	ab04      	add	r3, sp, #16
 8005c6e:	3307      	adds	r3, #7
 8005c70:	2000      	movs	r0, #0
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d804      	bhi.n	8005c80 <__exponent+0x6e>
 8005c76:	ab04      	add	r3, sp, #16
 8005c78:	3009      	adds	r0, #9
 8005c7a:	18c0      	adds	r0, r0, r3
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	1ac0      	subs	r0, r0, r3
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	1818      	adds	r0, r3, r0
 8005c84:	1b40      	subs	r0, r0, r5
 8005c86:	b007      	add	sp, #28
 8005c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8a:	7818      	ldrb	r0, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	7008      	strb	r0, [r1, #0]
 8005c90:	3101      	adds	r1, #1
 8005c92:	e7e7      	b.n	8005c64 <__exponent+0x52>
 8005c94:	2330      	movs	r3, #48	; 0x30
 8005c96:	18e4      	adds	r4, r4, r3
 8005c98:	70ab      	strb	r3, [r5, #2]
 8005c9a:	1d28      	adds	r0, r5, #4
 8005c9c:	70ec      	strb	r4, [r5, #3]
 8005c9e:	e7f1      	b.n	8005c84 <__exponent+0x72>

08005ca0 <_printf_float>:
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	b095      	sub	sp, #84	; 0x54
 8005ca4:	000c      	movs	r4, r1
 8005ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca8:	001e      	movs	r6, r3
 8005caa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005cac:	0007      	movs	r7, r0
 8005cae:	f002 ffdb 	bl	8008c68 <_localeconv_r>
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005cb8:	f7fa fa26 	bl	8000108 <strlen>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9312      	str	r3, [sp, #72]	; 0x48
 8005cc0:	7e23      	ldrb	r3, [r4, #24]
 8005cc2:	2207      	movs	r2, #7
 8005cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	900e      	str	r0, [sp, #56]	; 0x38
 8005cca:	930d      	str	r3, [sp, #52]	; 0x34
 8005ccc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cce:	682b      	ldr	r3, [r5, #0]
 8005cd0:	05c9      	lsls	r1, r1, #23
 8005cd2:	d547      	bpl.n	8005d64 <_printf_float+0xc4>
 8005cd4:	189b      	adds	r3, r3, r2
 8005cd6:	4393      	bics	r3, r2
 8005cd8:	001a      	movs	r2, r3
 8005cda:	3208      	adds	r2, #8
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	64a2      	str	r2, [r4, #72]	; 0x48
 8005ce4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005cea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005cec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cee:	006b      	lsls	r3, r5, #1
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cf6:	4ba7      	ldr	r3, [pc, #668]	; (8005f94 <_printf_float+0x2f4>)
 8005cf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cfa:	4252      	negs	r2, r2
 8005cfc:	f7fc f980 	bl	8002000 <__aeabi_dcmpun>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d131      	bne.n	8005d68 <_printf_float+0xc8>
 8005d04:	2201      	movs	r2, #1
 8005d06:	4ba3      	ldr	r3, [pc, #652]	; (8005f94 <_printf_float+0x2f4>)
 8005d08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d0c:	4252      	negs	r2, r2
 8005d0e:	f7fa fbad 	bl	800046c <__aeabi_dcmple>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d128      	bne.n	8005d68 <_printf_float+0xc8>
 8005d16:	2200      	movs	r2, #0
 8005d18:	2300      	movs	r3, #0
 8005d1a:	0029      	movs	r1, r5
 8005d1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d1e:	f7fa fb9b 	bl	8000458 <__aeabi_dcmplt>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d003      	beq.n	8005d2e <_printf_float+0x8e>
 8005d26:	0023      	movs	r3, r4
 8005d28:	222d      	movs	r2, #45	; 0x2d
 8005d2a:	3343      	adds	r3, #67	; 0x43
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d30:	4d99      	ldr	r5, [pc, #612]	; (8005f98 <_printf_float+0x2f8>)
 8005d32:	2b47      	cmp	r3, #71	; 0x47
 8005d34:	d900      	bls.n	8005d38 <_printf_float+0x98>
 8005d36:	4d99      	ldr	r5, [pc, #612]	; (8005f9c <_printf_float+0x2fc>)
 8005d38:	2303      	movs	r3, #3
 8005d3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	439a      	bics	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	6022      	str	r2, [r4, #0]
 8005d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	0021      	movs	r1, r4
 8005d4c:	0038      	movs	r0, r7
 8005d4e:	9600      	str	r6, [sp, #0]
 8005d50:	aa13      	add	r2, sp, #76	; 0x4c
 8005d52:	f000 f9e7 	bl	8006124 <_printf_common>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d000      	beq.n	8005d5c <_printf_float+0xbc>
 8005d5a:	e0a2      	b.n	8005ea2 <_printf_float+0x202>
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	4240      	negs	r0, r0
 8005d60:	b015      	add	sp, #84	; 0x54
 8005d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d64:	3307      	adds	r3, #7
 8005d66:	e7b6      	b.n	8005cd6 <_printf_float+0x36>
 8005d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d6a:	002b      	movs	r3, r5
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	0029      	movs	r1, r5
 8005d70:	f7fc f946 	bl	8002000 <__aeabi_dcmpun>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d00b      	beq.n	8005d90 <_printf_float+0xf0>
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	da03      	bge.n	8005d84 <_printf_float+0xe4>
 8005d7c:	0023      	movs	r3, r4
 8005d7e:	222d      	movs	r2, #45	; 0x2d
 8005d80:	3343      	adds	r3, #67	; 0x43
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d86:	4d86      	ldr	r5, [pc, #536]	; (8005fa0 <_printf_float+0x300>)
 8005d88:	2b47      	cmp	r3, #71	; 0x47
 8005d8a:	d9d5      	bls.n	8005d38 <_printf_float+0x98>
 8005d8c:	4d85      	ldr	r5, [pc, #532]	; (8005fa4 <_printf_float+0x304>)
 8005d8e:	e7d3      	b.n	8005d38 <_printf_float+0x98>
 8005d90:	2220      	movs	r2, #32
 8005d92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	4391      	bics	r1, r2
 8005d98:	910f      	str	r1, [sp, #60]	; 0x3c
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	d149      	bne.n	8005e32 <_printf_float+0x192>
 8005d9e:	3307      	adds	r3, #7
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	2200      	movs	r2, #0
 8005dac:	9206      	str	r2, [sp, #24]
 8005dae:	aa12      	add	r2, sp, #72	; 0x48
 8005db0:	9205      	str	r2, [sp, #20]
 8005db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db4:	a908      	add	r1, sp, #32
 8005db6:	9204      	str	r2, [sp, #16]
 8005db8:	aa11      	add	r2, sp, #68	; 0x44
 8005dba:	9203      	str	r2, [sp, #12]
 8005dbc:	2223      	movs	r2, #35	; 0x23
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	1852      	adds	r2, r2, r1
 8005dc6:	9202      	str	r2, [sp, #8]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	0038      	movs	r0, r7
 8005dcc:	002b      	movs	r3, r5
 8005dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dd0:	f7ff febc 	bl	8005b4c <__cvt>
 8005dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd6:	0005      	movs	r5, r0
 8005dd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005dda:	2b47      	cmp	r3, #71	; 0x47
 8005ddc:	d108      	bne.n	8005df0 <_printf_float+0x150>
 8005dde:	1ccb      	adds	r3, r1, #3
 8005de0:	db02      	blt.n	8005de8 <_printf_float+0x148>
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	4299      	cmp	r1, r3
 8005de6:	dd48      	ble.n	8005e7a <_printf_float+0x1da>
 8005de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dea:	3b02      	subs	r3, #2
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	930a      	str	r3, [sp, #40]	; 0x28
 8005df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df2:	2b65      	cmp	r3, #101	; 0x65
 8005df4:	d824      	bhi.n	8005e40 <_printf_float+0x1a0>
 8005df6:	0020      	movs	r0, r4
 8005df8:	001a      	movs	r2, r3
 8005dfa:	3901      	subs	r1, #1
 8005dfc:	3050      	adds	r0, #80	; 0x50
 8005dfe:	9111      	str	r1, [sp, #68]	; 0x44
 8005e00:	f7ff ff07 	bl	8005c12 <__exponent>
 8005e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e06:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e08:	1813      	adds	r3, r2, r0
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	2a01      	cmp	r2, #1
 8005e0e:	dc02      	bgt.n	8005e16 <_printf_float+0x176>
 8005e10:	6822      	ldr	r2, [r4, #0]
 8005e12:	07d2      	lsls	r2, r2, #31
 8005e14:	d501      	bpl.n	8005e1a <_printf_float+0x17a>
 8005e16:	3301      	adds	r3, #1
 8005e18:	6123      	str	r3, [r4, #16]
 8005e1a:	2323      	movs	r3, #35	; 0x23
 8005e1c:	aa08      	add	r2, sp, #32
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d100      	bne.n	8005e28 <_printf_float+0x188>
 8005e26:	e78f      	b.n	8005d48 <_printf_float+0xa8>
 8005e28:	0023      	movs	r3, r4
 8005e2a:	222d      	movs	r2, #45	; 0x2d
 8005e2c:	3343      	adds	r3, #67	; 0x43
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e78a      	b.n	8005d48 <_printf_float+0xa8>
 8005e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e34:	2a47      	cmp	r2, #71	; 0x47
 8005e36:	d1b4      	bne.n	8005da2 <_printf_float+0x102>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1b2      	bne.n	8005da2 <_printf_float+0x102>
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	e7af      	b.n	8005da0 <_printf_float+0x100>
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	2b66      	cmp	r3, #102	; 0x66
 8005e44:	d11b      	bne.n	8005e7e <_printf_float+0x1de>
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	dd0d      	ble.n	8005e68 <_printf_float+0x1c8>
 8005e4c:	6121      	str	r1, [r4, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <_printf_float+0x1b8>
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	07d2      	lsls	r2, r2, #31
 8005e56:	d502      	bpl.n	8005e5e <_printf_float+0x1be>
 8005e58:	3301      	adds	r3, #1
 8005e5a:	1859      	adds	r1, r3, r1
 8005e5c:	6121      	str	r1, [r4, #16]
 8005e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e60:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e62:	2300      	movs	r3, #0
 8005e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e66:	e7d8      	b.n	8005e1a <_printf_float+0x17a>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <_printf_float+0x1d4>
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	6821      	ldr	r1, [r4, #0]
 8005e70:	4211      	tst	r1, r2
 8005e72:	d000      	beq.n	8005e76 <_printf_float+0x1d6>
 8005e74:	1c9a      	adds	r2, r3, #2
 8005e76:	6122      	str	r2, [r4, #16]
 8005e78:	e7f1      	b.n	8005e5e <_printf_float+0x1be>
 8005e7a:	2367      	movs	r3, #103	; 0x67
 8005e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e82:	4293      	cmp	r3, r2
 8005e84:	db06      	blt.n	8005e94 <_printf_float+0x1f4>
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	07d2      	lsls	r2, r2, #31
 8005e8c:	d5e7      	bpl.n	8005e5e <_printf_float+0x1be>
 8005e8e:	3301      	adds	r3, #1
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	e7e4      	b.n	8005e5e <_printf_float+0x1be>
 8005e94:	2101      	movs	r1, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dc01      	bgt.n	8005e9e <_printf_float+0x1fe>
 8005e9a:	1849      	adds	r1, r1, r1
 8005e9c:	1ac9      	subs	r1, r1, r3
 8005e9e:	1852      	adds	r2, r2, r1
 8005ea0:	e7e9      	b.n	8005e76 <_printf_float+0x1d6>
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	0553      	lsls	r3, r2, #21
 8005ea6:	d407      	bmi.n	8005eb8 <_printf_float+0x218>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	002a      	movs	r2, r5
 8005eac:	0038      	movs	r0, r7
 8005eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eb0:	47b0      	blx	r6
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d128      	bne.n	8005f08 <_printf_float+0x268>
 8005eb6:	e751      	b.n	8005d5c <_printf_float+0xbc>
 8005eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eba:	2b65      	cmp	r3, #101	; 0x65
 8005ebc:	d800      	bhi.n	8005ec0 <_printf_float+0x220>
 8005ebe:	e0e1      	b.n	8006084 <_printf_float+0x3e4>
 8005ec0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005ec2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f7fa fac0 	bl	800044c <__aeabi_dcmpeq>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d031      	beq.n	8005f34 <_printf_float+0x294>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	0038      	movs	r0, r7
 8005ed4:	4a34      	ldr	r2, [pc, #208]	; (8005fa8 <_printf_float+0x308>)
 8005ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed8:	47b0      	blx	r6
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	d100      	bne.n	8005ee0 <_printf_float+0x240>
 8005ede:	e73d      	b.n	8005d5c <_printf_float+0xbc>
 8005ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	db02      	blt.n	8005eee <_printf_float+0x24e>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07db      	lsls	r3, r3, #31
 8005eec:	d50c      	bpl.n	8005f08 <_printf_float+0x268>
 8005eee:	0038      	movs	r0, r7
 8005ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef6:	47b0      	blx	r6
 8005ef8:	2500      	movs	r5, #0
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	d100      	bne.n	8005f00 <_printf_float+0x260>
 8005efe:	e72d      	b.n	8005d5c <_printf_float+0xbc>
 8005f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f02:	3b01      	subs	r3, #1
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	dc0a      	bgt.n	8005f1e <_printf_float+0x27e>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	079b      	lsls	r3, r3, #30
 8005f0c:	d500      	bpl.n	8005f10 <_printf_float+0x270>
 8005f0e:	e106      	b.n	800611e <_printf_float+0x47e>
 8005f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f12:	68e0      	ldr	r0, [r4, #12]
 8005f14:	4298      	cmp	r0, r3
 8005f16:	db00      	blt.n	8005f1a <_printf_float+0x27a>
 8005f18:	e722      	b.n	8005d60 <_printf_float+0xc0>
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	e720      	b.n	8005d60 <_printf_float+0xc0>
 8005f1e:	0022      	movs	r2, r4
 8005f20:	2301      	movs	r3, #1
 8005f22:	0038      	movs	r0, r7
 8005f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f26:	321a      	adds	r2, #26
 8005f28:	47b0      	blx	r6
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d100      	bne.n	8005f30 <_printf_float+0x290>
 8005f2e:	e715      	b.n	8005d5c <_printf_float+0xbc>
 8005f30:	3501      	adds	r5, #1
 8005f32:	e7e5      	b.n	8005f00 <_printf_float+0x260>
 8005f34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dc38      	bgt.n	8005fac <_printf_float+0x30c>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	0038      	movs	r0, r7
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <_printf_float+0x308>)
 8005f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f42:	47b0      	blx	r6
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d100      	bne.n	8005f4a <_printf_float+0x2aa>
 8005f48:	e708      	b.n	8005d5c <_printf_float+0xbc>
 8005f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d102      	bne.n	8005f58 <_printf_float+0x2b8>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	07db      	lsls	r3, r3, #31
 8005f56:	d5d7      	bpl.n	8005f08 <_printf_float+0x268>
 8005f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5a:	0038      	movs	r0, r7
 8005f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f60:	47b0      	blx	r6
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d100      	bne.n	8005f68 <_printf_float+0x2c8>
 8005f66:	e6f9      	b.n	8005d5c <_printf_float+0xbc>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f70:	425b      	negs	r3, r3
 8005f72:	4293      	cmp	r3, r2
 8005f74:	dc01      	bgt.n	8005f7a <_printf_float+0x2da>
 8005f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f78:	e797      	b.n	8005eaa <_printf_float+0x20a>
 8005f7a:	0022      	movs	r2, r4
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	0038      	movs	r0, r7
 8005f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f82:	321a      	adds	r2, #26
 8005f84:	47b0      	blx	r6
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d100      	bne.n	8005f8c <_printf_float+0x2ec>
 8005f8a:	e6e7      	b.n	8005d5c <_printf_float+0xbc>
 8005f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8e:	3301      	adds	r3, #1
 8005f90:	e7eb      	b.n	8005f6a <_printf_float+0x2ca>
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	7fefffff 	.word	0x7fefffff
 8005f98:	0800a6c4 	.word	0x0800a6c4
 8005f9c:	0800a6c8 	.word	0x0800a6c8
 8005fa0:	0800a6cc 	.word	0x0800a6cc
 8005fa4:	0800a6d0 	.word	0x0800a6d0
 8005fa8:	0800a6d4 	.word	0x0800a6d4
 8005fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	dd00      	ble.n	8005fb8 <_printf_float+0x318>
 8005fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dc3c      	bgt.n	8006038 <_printf_float+0x398>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8005fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	17db      	asrs	r3, r3, #31
 8005fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	dc34      	bgt.n	8006048 <_printf_float+0x3a8>
 8005fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fe0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	db3d      	blt.n	8006062 <_printf_float+0x3c2>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	07db      	lsls	r3, r3, #31
 8005fea:	d43a      	bmi.n	8006062 <_printf_float+0x3c2>
 8005fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	1a52      	subs	r2, r2, r1
 8005ff6:	920a      	str	r2, [sp, #40]	; 0x28
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	dd00      	ble.n	8005ffe <_printf_float+0x35e>
 8005ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8005ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	dc36      	bgt.n	8006072 <_printf_float+0x3d2>
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	2500      	movs	r5, #0
 8006008:	43db      	mvns	r3, r3
 800600a:	17db      	asrs	r3, r3, #31
 800600c:	930b      	str	r3, [sp, #44]	; 0x2c
 800600e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006018:	400a      	ands	r2, r1
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	42ab      	cmp	r3, r5
 800601e:	dc00      	bgt.n	8006022 <_printf_float+0x382>
 8006020:	e772      	b.n	8005f08 <_printf_float+0x268>
 8006022:	0022      	movs	r2, r4
 8006024:	2301      	movs	r3, #1
 8006026:	0038      	movs	r0, r7
 8006028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800602a:	321a      	adds	r2, #26
 800602c:	47b0      	blx	r6
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d100      	bne.n	8006034 <_printf_float+0x394>
 8006032:	e693      	b.n	8005d5c <_printf_float+0xbc>
 8006034:	3501      	adds	r5, #1
 8006036:	e7ea      	b.n	800600e <_printf_float+0x36e>
 8006038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603a:	002a      	movs	r2, r5
 800603c:	0038      	movs	r0, r7
 800603e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006040:	47b0      	blx	r6
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d1bb      	bne.n	8005fbe <_printf_float+0x31e>
 8006046:	e689      	b.n	8005d5c <_printf_float+0xbc>
 8006048:	0022      	movs	r2, r4
 800604a:	2301      	movs	r3, #1
 800604c:	0038      	movs	r0, r7
 800604e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006050:	321a      	adds	r2, #26
 8006052:	47b0      	blx	r6
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d100      	bne.n	800605a <_printf_float+0x3ba>
 8006058:	e680      	b.n	8005d5c <_printf_float+0xbc>
 800605a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800605c:	3301      	adds	r3, #1
 800605e:	930d      	str	r3, [sp, #52]	; 0x34
 8006060:	e7b3      	b.n	8005fca <_printf_float+0x32a>
 8006062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006064:	0038      	movs	r0, r7
 8006066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800606a:	47b0      	blx	r6
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d1bd      	bne.n	8005fec <_printf_float+0x34c>
 8006070:	e674      	b.n	8005d5c <_printf_float+0xbc>
 8006072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006074:	0038      	movs	r0, r7
 8006076:	18ea      	adds	r2, r5, r3
 8006078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800607a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607c:	47b0      	blx	r6
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d1c0      	bne.n	8006004 <_printf_float+0x364>
 8006082:	e66b      	b.n	8005d5c <_printf_float+0xbc>
 8006084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006086:	2b01      	cmp	r3, #1
 8006088:	dc02      	bgt.n	8006090 <_printf_float+0x3f0>
 800608a:	2301      	movs	r3, #1
 800608c:	421a      	tst	r2, r3
 800608e:	d034      	beq.n	80060fa <_printf_float+0x45a>
 8006090:	2301      	movs	r3, #1
 8006092:	002a      	movs	r2, r5
 8006094:	0038      	movs	r0, r7
 8006096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006098:	47b0      	blx	r6
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	d100      	bne.n	80060a0 <_printf_float+0x400>
 800609e:	e65d      	b.n	8005d5c <_printf_float+0xbc>
 80060a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a2:	0038      	movs	r0, r7
 80060a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060a8:	47b0      	blx	r6
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d100      	bne.n	80060b0 <_printf_float+0x410>
 80060ae:	e655      	b.n	8005d5c <_printf_float+0xbc>
 80060b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80060b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80060b4:	2200      	movs	r2, #0
 80060b6:	2300      	movs	r3, #0
 80060b8:	f7fa f9c8 	bl	800044c <__aeabi_dcmpeq>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d11a      	bne.n	80060f6 <_printf_float+0x456>
 80060c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060c2:	1c6a      	adds	r2, r5, #1
 80060c4:	3b01      	subs	r3, #1
 80060c6:	0038      	movs	r0, r7
 80060c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ca:	47b0      	blx	r6
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d10e      	bne.n	80060ee <_printf_float+0x44e>
 80060d0:	e644      	b.n	8005d5c <_printf_float+0xbc>
 80060d2:	0022      	movs	r2, r4
 80060d4:	2301      	movs	r3, #1
 80060d6:	0038      	movs	r0, r7
 80060d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060da:	321a      	adds	r2, #26
 80060dc:	47b0      	blx	r6
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d100      	bne.n	80060e4 <_printf_float+0x444>
 80060e2:	e63b      	b.n	8005d5c <_printf_float+0xbc>
 80060e4:	3501      	adds	r5, #1
 80060e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060e8:	3b01      	subs	r3, #1
 80060ea:	42ab      	cmp	r3, r5
 80060ec:	dcf1      	bgt.n	80060d2 <_printf_float+0x432>
 80060ee:	0022      	movs	r2, r4
 80060f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f2:	3250      	adds	r2, #80	; 0x50
 80060f4:	e6da      	b.n	8005eac <_printf_float+0x20c>
 80060f6:	2500      	movs	r5, #0
 80060f8:	e7f5      	b.n	80060e6 <_printf_float+0x446>
 80060fa:	002a      	movs	r2, r5
 80060fc:	e7e3      	b.n	80060c6 <_printf_float+0x426>
 80060fe:	0022      	movs	r2, r4
 8006100:	2301      	movs	r3, #1
 8006102:	0038      	movs	r0, r7
 8006104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006106:	3219      	adds	r2, #25
 8006108:	47b0      	blx	r6
 800610a:	1c43      	adds	r3, r0, #1
 800610c:	d100      	bne.n	8006110 <_printf_float+0x470>
 800610e:	e625      	b.n	8005d5c <_printf_float+0xbc>
 8006110:	3501      	adds	r5, #1
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	42ab      	cmp	r3, r5
 800611a:	dcf0      	bgt.n	80060fe <_printf_float+0x45e>
 800611c:	e6f8      	b.n	8005f10 <_printf_float+0x270>
 800611e:	2500      	movs	r5, #0
 8006120:	e7f7      	b.n	8006112 <_printf_float+0x472>
 8006122:	46c0      	nop			; (mov r8, r8)

08006124 <_printf_common>:
 8006124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006126:	0015      	movs	r5, r2
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	688a      	ldr	r2, [r1, #8]
 800612c:	690b      	ldr	r3, [r1, #16]
 800612e:	000c      	movs	r4, r1
 8006130:	9000      	str	r0, [sp, #0]
 8006132:	4293      	cmp	r3, r2
 8006134:	da00      	bge.n	8006138 <_printf_common+0x14>
 8006136:	0013      	movs	r3, r2
 8006138:	0022      	movs	r2, r4
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	3243      	adds	r2, #67	; 0x43
 800613e:	7812      	ldrb	r2, [r2, #0]
 8006140:	2a00      	cmp	r2, #0
 8006142:	d001      	beq.n	8006148 <_printf_common+0x24>
 8006144:	3301      	adds	r3, #1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	069b      	lsls	r3, r3, #26
 800614c:	d502      	bpl.n	8006154 <_printf_common+0x30>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	3302      	adds	r3, #2
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	2306      	movs	r3, #6
 8006158:	0017      	movs	r7, r2
 800615a:	401f      	ands	r7, r3
 800615c:	421a      	tst	r2, r3
 800615e:	d027      	beq.n	80061b0 <_printf_common+0x8c>
 8006160:	0023      	movs	r3, r4
 8006162:	3343      	adds	r3, #67	; 0x43
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	1e5a      	subs	r2, r3, #1
 8006168:	4193      	sbcs	r3, r2
 800616a:	6822      	ldr	r2, [r4, #0]
 800616c:	0692      	lsls	r2, r2, #26
 800616e:	d430      	bmi.n	80061d2 <_printf_common+0xae>
 8006170:	0022      	movs	r2, r4
 8006172:	9901      	ldr	r1, [sp, #4]
 8006174:	9800      	ldr	r0, [sp, #0]
 8006176:	9e08      	ldr	r6, [sp, #32]
 8006178:	3243      	adds	r2, #67	; 0x43
 800617a:	47b0      	blx	r6
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d025      	beq.n	80061cc <_printf_common+0xa8>
 8006180:	2306      	movs	r3, #6
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	682a      	ldr	r2, [r5, #0]
 8006186:	68e1      	ldr	r1, [r4, #12]
 8006188:	2500      	movs	r5, #0
 800618a:	4003      	ands	r3, r0
 800618c:	2b04      	cmp	r3, #4
 800618e:	d103      	bne.n	8006198 <_printf_common+0x74>
 8006190:	1a8d      	subs	r5, r1, r2
 8006192:	43eb      	mvns	r3, r5
 8006194:	17db      	asrs	r3, r3, #31
 8006196:	401d      	ands	r5, r3
 8006198:	68a3      	ldr	r3, [r4, #8]
 800619a:	6922      	ldr	r2, [r4, #16]
 800619c:	4293      	cmp	r3, r2
 800619e:	dd01      	ble.n	80061a4 <_printf_common+0x80>
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	18ed      	adds	r5, r5, r3
 80061a4:	2700      	movs	r7, #0
 80061a6:	42bd      	cmp	r5, r7
 80061a8:	d120      	bne.n	80061ec <_printf_common+0xc8>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e010      	b.n	80061d0 <_printf_common+0xac>
 80061ae:	3701      	adds	r7, #1
 80061b0:	68e3      	ldr	r3, [r4, #12]
 80061b2:	682a      	ldr	r2, [r5, #0]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	42bb      	cmp	r3, r7
 80061b8:	ddd2      	ble.n	8006160 <_printf_common+0x3c>
 80061ba:	0022      	movs	r2, r4
 80061bc:	2301      	movs	r3, #1
 80061be:	9901      	ldr	r1, [sp, #4]
 80061c0:	9800      	ldr	r0, [sp, #0]
 80061c2:	9e08      	ldr	r6, [sp, #32]
 80061c4:	3219      	adds	r2, #25
 80061c6:	47b0      	blx	r6
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d1f0      	bne.n	80061ae <_printf_common+0x8a>
 80061cc:	2001      	movs	r0, #1
 80061ce:	4240      	negs	r0, r0
 80061d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061d2:	2030      	movs	r0, #48	; 0x30
 80061d4:	18e1      	adds	r1, r4, r3
 80061d6:	3143      	adds	r1, #67	; 0x43
 80061d8:	7008      	strb	r0, [r1, #0]
 80061da:	0021      	movs	r1, r4
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	3145      	adds	r1, #69	; 0x45
 80061e0:	7809      	ldrb	r1, [r1, #0]
 80061e2:	18a2      	adds	r2, r4, r2
 80061e4:	3243      	adds	r2, #67	; 0x43
 80061e6:	3302      	adds	r3, #2
 80061e8:	7011      	strb	r1, [r2, #0]
 80061ea:	e7c1      	b.n	8006170 <_printf_common+0x4c>
 80061ec:	0022      	movs	r2, r4
 80061ee:	2301      	movs	r3, #1
 80061f0:	9901      	ldr	r1, [sp, #4]
 80061f2:	9800      	ldr	r0, [sp, #0]
 80061f4:	9e08      	ldr	r6, [sp, #32]
 80061f6:	321a      	adds	r2, #26
 80061f8:	47b0      	blx	r6
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d0e6      	beq.n	80061cc <_printf_common+0xa8>
 80061fe:	3701      	adds	r7, #1
 8006200:	e7d1      	b.n	80061a6 <_printf_common+0x82>
	...

08006204 <_printf_i>:
 8006204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006206:	b08b      	sub	sp, #44	; 0x2c
 8006208:	9206      	str	r2, [sp, #24]
 800620a:	000a      	movs	r2, r1
 800620c:	3243      	adds	r2, #67	; 0x43
 800620e:	9307      	str	r3, [sp, #28]
 8006210:	9005      	str	r0, [sp, #20]
 8006212:	9204      	str	r2, [sp, #16]
 8006214:	7e0a      	ldrb	r2, [r1, #24]
 8006216:	000c      	movs	r4, r1
 8006218:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800621a:	2a78      	cmp	r2, #120	; 0x78
 800621c:	d807      	bhi.n	800622e <_printf_i+0x2a>
 800621e:	2a62      	cmp	r2, #98	; 0x62
 8006220:	d809      	bhi.n	8006236 <_printf_i+0x32>
 8006222:	2a00      	cmp	r2, #0
 8006224:	d100      	bne.n	8006228 <_printf_i+0x24>
 8006226:	e0c1      	b.n	80063ac <_printf_i+0x1a8>
 8006228:	2a58      	cmp	r2, #88	; 0x58
 800622a:	d100      	bne.n	800622e <_printf_i+0x2a>
 800622c:	e08c      	b.n	8006348 <_printf_i+0x144>
 800622e:	0026      	movs	r6, r4
 8006230:	3642      	adds	r6, #66	; 0x42
 8006232:	7032      	strb	r2, [r6, #0]
 8006234:	e022      	b.n	800627c <_printf_i+0x78>
 8006236:	0010      	movs	r0, r2
 8006238:	3863      	subs	r0, #99	; 0x63
 800623a:	2815      	cmp	r0, #21
 800623c:	d8f7      	bhi.n	800622e <_printf_i+0x2a>
 800623e:	f7f9 ff75 	bl	800012c <__gnu_thumb1_case_shi>
 8006242:	0016      	.short	0x0016
 8006244:	fff6001f 	.word	0xfff6001f
 8006248:	fff6fff6 	.word	0xfff6fff6
 800624c:	001ffff6 	.word	0x001ffff6
 8006250:	fff6fff6 	.word	0xfff6fff6
 8006254:	fff6fff6 	.word	0xfff6fff6
 8006258:	003600a8 	.word	0x003600a8
 800625c:	fff6009a 	.word	0xfff6009a
 8006260:	00b9fff6 	.word	0x00b9fff6
 8006264:	0036fff6 	.word	0x0036fff6
 8006268:	fff6fff6 	.word	0xfff6fff6
 800626c:	009e      	.short	0x009e
 800626e:	0026      	movs	r6, r4
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	3642      	adds	r6, #66	; 0x42
 8006274:	1d11      	adds	r1, r2, #4
 8006276:	6019      	str	r1, [r3, #0]
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	7033      	strb	r3, [r6, #0]
 800627c:	2301      	movs	r3, #1
 800627e:	e0a7      	b.n	80063d0 <_printf_i+0x1cc>
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	1d0a      	adds	r2, r1, #4
 8006286:	0605      	lsls	r5, r0, #24
 8006288:	d50b      	bpl.n	80062a2 <_printf_i+0x9e>
 800628a:	680d      	ldr	r5, [r1, #0]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	2d00      	cmp	r5, #0
 8006290:	da03      	bge.n	800629a <_printf_i+0x96>
 8006292:	232d      	movs	r3, #45	; 0x2d
 8006294:	9a04      	ldr	r2, [sp, #16]
 8006296:	426d      	negs	r5, r5
 8006298:	7013      	strb	r3, [r2, #0]
 800629a:	4b61      	ldr	r3, [pc, #388]	; (8006420 <_printf_i+0x21c>)
 800629c:	270a      	movs	r7, #10
 800629e:	9303      	str	r3, [sp, #12]
 80062a0:	e01b      	b.n	80062da <_printf_i+0xd6>
 80062a2:	680d      	ldr	r5, [r1, #0]
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	0641      	lsls	r1, r0, #25
 80062a8:	d5f1      	bpl.n	800628e <_printf_i+0x8a>
 80062aa:	b22d      	sxth	r5, r5
 80062ac:	e7ef      	b.n	800628e <_printf_i+0x8a>
 80062ae:	680d      	ldr	r5, [r1, #0]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	1d08      	adds	r0, r1, #4
 80062b4:	6018      	str	r0, [r3, #0]
 80062b6:	062e      	lsls	r6, r5, #24
 80062b8:	d501      	bpl.n	80062be <_printf_i+0xba>
 80062ba:	680d      	ldr	r5, [r1, #0]
 80062bc:	e003      	b.n	80062c6 <_printf_i+0xc2>
 80062be:	066d      	lsls	r5, r5, #25
 80062c0:	d5fb      	bpl.n	80062ba <_printf_i+0xb6>
 80062c2:	680d      	ldr	r5, [r1, #0]
 80062c4:	b2ad      	uxth	r5, r5
 80062c6:	4b56      	ldr	r3, [pc, #344]	; (8006420 <_printf_i+0x21c>)
 80062c8:	2708      	movs	r7, #8
 80062ca:	9303      	str	r3, [sp, #12]
 80062cc:	2a6f      	cmp	r2, #111	; 0x6f
 80062ce:	d000      	beq.n	80062d2 <_printf_i+0xce>
 80062d0:	3702      	adds	r7, #2
 80062d2:	0023      	movs	r3, r4
 80062d4:	2200      	movs	r2, #0
 80062d6:	3343      	adds	r3, #67	; 0x43
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6863      	ldr	r3, [r4, #4]
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db03      	blt.n	80062ea <_printf_i+0xe6>
 80062e2:	2204      	movs	r2, #4
 80062e4:	6821      	ldr	r1, [r4, #0]
 80062e6:	4391      	bics	r1, r2
 80062e8:	6021      	str	r1, [r4, #0]
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	d102      	bne.n	80062f4 <_printf_i+0xf0>
 80062ee:	9e04      	ldr	r6, [sp, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00c      	beq.n	800630e <_printf_i+0x10a>
 80062f4:	9e04      	ldr	r6, [sp, #16]
 80062f6:	0028      	movs	r0, r5
 80062f8:	0039      	movs	r1, r7
 80062fa:	f7f9 ffa7 	bl	800024c <__aeabi_uidivmod>
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	3e01      	subs	r6, #1
 8006302:	5c5b      	ldrb	r3, [r3, r1]
 8006304:	7033      	strb	r3, [r6, #0]
 8006306:	002b      	movs	r3, r5
 8006308:	0005      	movs	r5, r0
 800630a:	429f      	cmp	r7, r3
 800630c:	d9f3      	bls.n	80062f6 <_printf_i+0xf2>
 800630e:	2f08      	cmp	r7, #8
 8006310:	d109      	bne.n	8006326 <_printf_i+0x122>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d506      	bpl.n	8006326 <_printf_i+0x122>
 8006318:	6863      	ldr	r3, [r4, #4]
 800631a:	6922      	ldr	r2, [r4, #16]
 800631c:	4293      	cmp	r3, r2
 800631e:	dc02      	bgt.n	8006326 <_printf_i+0x122>
 8006320:	2330      	movs	r3, #48	; 0x30
 8006322:	3e01      	subs	r6, #1
 8006324:	7033      	strb	r3, [r6, #0]
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	1b9b      	subs	r3, r3, r6
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	9b07      	ldr	r3, [sp, #28]
 800632e:	0021      	movs	r1, r4
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	9805      	ldr	r0, [sp, #20]
 8006334:	9b06      	ldr	r3, [sp, #24]
 8006336:	aa09      	add	r2, sp, #36	; 0x24
 8006338:	f7ff fef4 	bl	8006124 <_printf_common>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d14c      	bne.n	80063da <_printf_i+0x1d6>
 8006340:	2001      	movs	r0, #1
 8006342:	4240      	negs	r0, r0
 8006344:	b00b      	add	sp, #44	; 0x2c
 8006346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006348:	3145      	adds	r1, #69	; 0x45
 800634a:	700a      	strb	r2, [r1, #0]
 800634c:	4a34      	ldr	r2, [pc, #208]	; (8006420 <_printf_i+0x21c>)
 800634e:	9203      	str	r2, [sp, #12]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	6821      	ldr	r1, [r4, #0]
 8006354:	ca20      	ldmia	r2!, {r5}
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	0608      	lsls	r0, r1, #24
 800635a:	d516      	bpl.n	800638a <_printf_i+0x186>
 800635c:	07cb      	lsls	r3, r1, #31
 800635e:	d502      	bpl.n	8006366 <_printf_i+0x162>
 8006360:	2320      	movs	r3, #32
 8006362:	4319      	orrs	r1, r3
 8006364:	6021      	str	r1, [r4, #0]
 8006366:	2710      	movs	r7, #16
 8006368:	2d00      	cmp	r5, #0
 800636a:	d1b2      	bne.n	80062d2 <_printf_i+0xce>
 800636c:	2320      	movs	r3, #32
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	439a      	bics	r2, r3
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	e7ad      	b.n	80062d2 <_printf_i+0xce>
 8006376:	2220      	movs	r2, #32
 8006378:	6809      	ldr	r1, [r1, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	0022      	movs	r2, r4
 8006380:	2178      	movs	r1, #120	; 0x78
 8006382:	3245      	adds	r2, #69	; 0x45
 8006384:	7011      	strb	r1, [r2, #0]
 8006386:	4a27      	ldr	r2, [pc, #156]	; (8006424 <_printf_i+0x220>)
 8006388:	e7e1      	b.n	800634e <_printf_i+0x14a>
 800638a:	0648      	lsls	r0, r1, #25
 800638c:	d5e6      	bpl.n	800635c <_printf_i+0x158>
 800638e:	b2ad      	uxth	r5, r5
 8006390:	e7e4      	b.n	800635c <_printf_i+0x158>
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	680d      	ldr	r5, [r1, #0]
 8006396:	1d10      	adds	r0, r2, #4
 8006398:	6949      	ldr	r1, [r1, #20]
 800639a:	6018      	str	r0, [r3, #0]
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	062e      	lsls	r6, r5, #24
 80063a0:	d501      	bpl.n	80063a6 <_printf_i+0x1a2>
 80063a2:	6019      	str	r1, [r3, #0]
 80063a4:	e002      	b.n	80063ac <_printf_i+0x1a8>
 80063a6:	066d      	lsls	r5, r5, #25
 80063a8:	d5fb      	bpl.n	80063a2 <_printf_i+0x19e>
 80063aa:	8019      	strh	r1, [r3, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9e04      	ldr	r6, [sp, #16]
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	e7bb      	b.n	800632c <_printf_i+0x128>
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	1d11      	adds	r1, r2, #4
 80063b8:	6019      	str	r1, [r3, #0]
 80063ba:	6816      	ldr	r6, [r2, #0]
 80063bc:	2100      	movs	r1, #0
 80063be:	0030      	movs	r0, r6
 80063c0:	6862      	ldr	r2, [r4, #4]
 80063c2:	f002 fc6a 	bl	8008c9a <memchr>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d001      	beq.n	80063ce <_printf_i+0x1ca>
 80063ca:	1b80      	subs	r0, r0, r6
 80063cc:	6060      	str	r0, [r4, #4]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9a04      	ldr	r2, [sp, #16]
 80063d6:	7013      	strb	r3, [r2, #0]
 80063d8:	e7a8      	b.n	800632c <_printf_i+0x128>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	0032      	movs	r2, r6
 80063de:	9906      	ldr	r1, [sp, #24]
 80063e0:	9805      	ldr	r0, [sp, #20]
 80063e2:	9d07      	ldr	r5, [sp, #28]
 80063e4:	47a8      	blx	r5
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d0aa      	beq.n	8006340 <_printf_i+0x13c>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	079b      	lsls	r3, r3, #30
 80063ee:	d415      	bmi.n	800641c <_printf_i+0x218>
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	68e0      	ldr	r0, [r4, #12]
 80063f4:	4298      	cmp	r0, r3
 80063f6:	daa5      	bge.n	8006344 <_printf_i+0x140>
 80063f8:	0018      	movs	r0, r3
 80063fa:	e7a3      	b.n	8006344 <_printf_i+0x140>
 80063fc:	0022      	movs	r2, r4
 80063fe:	2301      	movs	r3, #1
 8006400:	9906      	ldr	r1, [sp, #24]
 8006402:	9805      	ldr	r0, [sp, #20]
 8006404:	9e07      	ldr	r6, [sp, #28]
 8006406:	3219      	adds	r2, #25
 8006408:	47b0      	blx	r6
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d098      	beq.n	8006340 <_printf_i+0x13c>
 800640e:	3501      	adds	r5, #1
 8006410:	68e3      	ldr	r3, [r4, #12]
 8006412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	42ab      	cmp	r3, r5
 8006418:	dcf0      	bgt.n	80063fc <_printf_i+0x1f8>
 800641a:	e7e9      	b.n	80063f0 <_printf_i+0x1ec>
 800641c:	2500      	movs	r5, #0
 800641e:	e7f7      	b.n	8006410 <_printf_i+0x20c>
 8006420:	0800a6d6 	.word	0x0800a6d6
 8006424:	0800a6e7 	.word	0x0800a6e7

08006428 <_scanf_float>:
 8006428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642a:	b08b      	sub	sp, #44	; 0x2c
 800642c:	0015      	movs	r5, r2
 800642e:	9001      	str	r0, [sp, #4]
 8006430:	22ae      	movs	r2, #174	; 0xae
 8006432:	2000      	movs	r0, #0
 8006434:	9306      	str	r3, [sp, #24]
 8006436:	688b      	ldr	r3, [r1, #8]
 8006438:	000e      	movs	r6, r1
 800643a:	1e59      	subs	r1, r3, #1
 800643c:	0052      	lsls	r2, r2, #1
 800643e:	9005      	str	r0, [sp, #20]
 8006440:	4291      	cmp	r1, r2
 8006442:	d905      	bls.n	8006450 <_scanf_float+0x28>
 8006444:	3b5e      	subs	r3, #94	; 0x5e
 8006446:	3bff      	subs	r3, #255	; 0xff
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	235e      	movs	r3, #94	; 0x5e
 800644c:	33ff      	adds	r3, #255	; 0xff
 800644e:	60b3      	str	r3, [r6, #8]
 8006450:	23f0      	movs	r3, #240	; 0xf0
 8006452:	6832      	ldr	r2, [r6, #0]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4313      	orrs	r3, r2
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	0033      	movs	r3, r6
 800645c:	2400      	movs	r4, #0
 800645e:	331c      	adds	r3, #28
 8006460:	001f      	movs	r7, r3
 8006462:	9303      	str	r3, [sp, #12]
 8006464:	9402      	str	r4, [sp, #8]
 8006466:	9408      	str	r4, [sp, #32]
 8006468:	9407      	str	r4, [sp, #28]
 800646a:	9400      	str	r4, [sp, #0]
 800646c:	9404      	str	r4, [sp, #16]
 800646e:	68b2      	ldr	r2, [r6, #8]
 8006470:	2a00      	cmp	r2, #0
 8006472:	d00a      	beq.n	800648a <_scanf_float+0x62>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b4e      	cmp	r3, #78	; 0x4e
 800647a:	d844      	bhi.n	8006506 <_scanf_float+0xde>
 800647c:	0018      	movs	r0, r3
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d82c      	bhi.n	80064dc <_scanf_float+0xb4>
 8006482:	382b      	subs	r0, #43	; 0x2b
 8006484:	b2c1      	uxtb	r1, r0
 8006486:	290e      	cmp	r1, #14
 8006488:	d92a      	bls.n	80064e0 <_scanf_float+0xb8>
 800648a:	9b00      	ldr	r3, [sp, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <_scanf_float+0x70>
 8006490:	6832      	ldr	r2, [r6, #0]
 8006492:	4ba4      	ldr	r3, [pc, #656]	; (8006724 <_scanf_float+0x2fc>)
 8006494:	4013      	ands	r3, r2
 8006496:	6033      	str	r3, [r6, #0]
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	3b01      	subs	r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d900      	bls.n	80064a2 <_scanf_float+0x7a>
 80064a0:	e0f9      	b.n	8006696 <_scanf_float+0x26e>
 80064a2:	24be      	movs	r4, #190	; 0xbe
 80064a4:	0064      	lsls	r4, r4, #1
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	429f      	cmp	r7, r3
 80064aa:	d900      	bls.n	80064ae <_scanf_float+0x86>
 80064ac:	e0e9      	b.n	8006682 <_scanf_float+0x25a>
 80064ae:	2301      	movs	r3, #1
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	e185      	b.n	80067c0 <_scanf_float+0x398>
 80064b4:	0018      	movs	r0, r3
 80064b6:	3861      	subs	r0, #97	; 0x61
 80064b8:	280d      	cmp	r0, #13
 80064ba:	d8e6      	bhi.n	800648a <_scanf_float+0x62>
 80064bc:	f7f9 fe36 	bl	800012c <__gnu_thumb1_case_shi>
 80064c0:	ffe50083 	.word	0xffe50083
 80064c4:	ffe5ffe5 	.word	0xffe5ffe5
 80064c8:	00a200b6 	.word	0x00a200b6
 80064cc:	ffe5ffe5 	.word	0xffe5ffe5
 80064d0:	ffe50089 	.word	0xffe50089
 80064d4:	ffe5ffe5 	.word	0xffe5ffe5
 80064d8:	0065ffe5 	.word	0x0065ffe5
 80064dc:	3841      	subs	r0, #65	; 0x41
 80064de:	e7eb      	b.n	80064b8 <_scanf_float+0x90>
 80064e0:	280e      	cmp	r0, #14
 80064e2:	d8d2      	bhi.n	800648a <_scanf_float+0x62>
 80064e4:	f7f9 fe22 	bl	800012c <__gnu_thumb1_case_shi>
 80064e8:	ffd1004b 	.word	0xffd1004b
 80064ec:	0098004b 	.word	0x0098004b
 80064f0:	0020ffd1 	.word	0x0020ffd1
 80064f4:	00400040 	.word	0x00400040
 80064f8:	00400040 	.word	0x00400040
 80064fc:	00400040 	.word	0x00400040
 8006500:	00400040 	.word	0x00400040
 8006504:	0040      	.short	0x0040
 8006506:	2b6e      	cmp	r3, #110	; 0x6e
 8006508:	d809      	bhi.n	800651e <_scanf_float+0xf6>
 800650a:	2b60      	cmp	r3, #96	; 0x60
 800650c:	d8d2      	bhi.n	80064b4 <_scanf_float+0x8c>
 800650e:	2b54      	cmp	r3, #84	; 0x54
 8006510:	d07d      	beq.n	800660e <_scanf_float+0x1e6>
 8006512:	2b59      	cmp	r3, #89	; 0x59
 8006514:	d1b9      	bne.n	800648a <_scanf_float+0x62>
 8006516:	2c07      	cmp	r4, #7
 8006518:	d1b7      	bne.n	800648a <_scanf_float+0x62>
 800651a:	2408      	movs	r4, #8
 800651c:	e02c      	b.n	8006578 <_scanf_float+0x150>
 800651e:	2b74      	cmp	r3, #116	; 0x74
 8006520:	d075      	beq.n	800660e <_scanf_float+0x1e6>
 8006522:	2b79      	cmp	r3, #121	; 0x79
 8006524:	d0f7      	beq.n	8006516 <_scanf_float+0xee>
 8006526:	e7b0      	b.n	800648a <_scanf_float+0x62>
 8006528:	6831      	ldr	r1, [r6, #0]
 800652a:	05c8      	lsls	r0, r1, #23
 800652c:	d51c      	bpl.n	8006568 <_scanf_float+0x140>
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	4399      	bics	r1, r3
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	6031      	str	r1, [r6, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	9b05      	ldr	r3, [sp, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <_scanf_float+0x120>
 8006540:	3b01      	subs	r3, #1
 8006542:	3201      	adds	r2, #1
 8006544:	9305      	str	r3, [sp, #20]
 8006546:	60b2      	str	r2, [r6, #8]
 8006548:	68b3      	ldr	r3, [r6, #8]
 800654a:	3b01      	subs	r3, #1
 800654c:	60b3      	str	r3, [r6, #8]
 800654e:	6933      	ldr	r3, [r6, #16]
 8006550:	3301      	adds	r3, #1
 8006552:	6133      	str	r3, [r6, #16]
 8006554:	686b      	ldr	r3, [r5, #4]
 8006556:	3b01      	subs	r3, #1
 8006558:	606b      	str	r3, [r5, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	dc00      	bgt.n	8006560 <_scanf_float+0x138>
 800655e:	e086      	b.n	800666e <_scanf_float+0x246>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	e782      	b.n	800646e <_scanf_float+0x46>
 8006568:	9a02      	ldr	r2, [sp, #8]
 800656a:	1912      	adds	r2, r2, r4
 800656c:	2a00      	cmp	r2, #0
 800656e:	d18c      	bne.n	800648a <_scanf_float+0x62>
 8006570:	4a6d      	ldr	r2, [pc, #436]	; (8006728 <_scanf_float+0x300>)
 8006572:	6831      	ldr	r1, [r6, #0]
 8006574:	400a      	ands	r2, r1
 8006576:	6032      	str	r2, [r6, #0]
 8006578:	703b      	strb	r3, [r7, #0]
 800657a:	3701      	adds	r7, #1
 800657c:	e7e4      	b.n	8006548 <_scanf_float+0x120>
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	6832      	ldr	r2, [r6, #0]
 8006582:	420a      	tst	r2, r1
 8006584:	d081      	beq.n	800648a <_scanf_float+0x62>
 8006586:	438a      	bics	r2, r1
 8006588:	e7f5      	b.n	8006576 <_scanf_float+0x14e>
 800658a:	9a02      	ldr	r2, [sp, #8]
 800658c:	2a00      	cmp	r2, #0
 800658e:	d10f      	bne.n	80065b0 <_scanf_float+0x188>
 8006590:	9a00      	ldr	r2, [sp, #0]
 8006592:	2a00      	cmp	r2, #0
 8006594:	d10f      	bne.n	80065b6 <_scanf_float+0x18e>
 8006596:	6832      	ldr	r2, [r6, #0]
 8006598:	21e0      	movs	r1, #224	; 0xe0
 800659a:	0010      	movs	r0, r2
 800659c:	00c9      	lsls	r1, r1, #3
 800659e:	4008      	ands	r0, r1
 80065a0:	4288      	cmp	r0, r1
 80065a2:	d108      	bne.n	80065b6 <_scanf_float+0x18e>
 80065a4:	4961      	ldr	r1, [pc, #388]	; (800672c <_scanf_float+0x304>)
 80065a6:	400a      	ands	r2, r1
 80065a8:	6032      	str	r2, [r6, #0]
 80065aa:	2201      	movs	r2, #1
 80065ac:	9202      	str	r2, [sp, #8]
 80065ae:	e7e3      	b.n	8006578 <_scanf_float+0x150>
 80065b0:	9a02      	ldr	r2, [sp, #8]
 80065b2:	2a02      	cmp	r2, #2
 80065b4:	d059      	beq.n	800666a <_scanf_float+0x242>
 80065b6:	2c01      	cmp	r4, #1
 80065b8:	d002      	beq.n	80065c0 <_scanf_float+0x198>
 80065ba:	2c04      	cmp	r4, #4
 80065bc:	d000      	beq.n	80065c0 <_scanf_float+0x198>
 80065be:	e764      	b.n	800648a <_scanf_float+0x62>
 80065c0:	3401      	adds	r4, #1
 80065c2:	b2e4      	uxtb	r4, r4
 80065c4:	e7d8      	b.n	8006578 <_scanf_float+0x150>
 80065c6:	9a02      	ldr	r2, [sp, #8]
 80065c8:	2a01      	cmp	r2, #1
 80065ca:	d000      	beq.n	80065ce <_scanf_float+0x1a6>
 80065cc:	e75d      	b.n	800648a <_scanf_float+0x62>
 80065ce:	2202      	movs	r2, #2
 80065d0:	e7ec      	b.n	80065ac <_scanf_float+0x184>
 80065d2:	2c00      	cmp	r4, #0
 80065d4:	d110      	bne.n	80065f8 <_scanf_float+0x1d0>
 80065d6:	9a00      	ldr	r2, [sp, #0]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d000      	beq.n	80065de <_scanf_float+0x1b6>
 80065dc:	e758      	b.n	8006490 <_scanf_float+0x68>
 80065de:	6832      	ldr	r2, [r6, #0]
 80065e0:	21e0      	movs	r1, #224	; 0xe0
 80065e2:	0010      	movs	r0, r2
 80065e4:	00c9      	lsls	r1, r1, #3
 80065e6:	4008      	ands	r0, r1
 80065e8:	4288      	cmp	r0, r1
 80065ea:	d000      	beq.n	80065ee <_scanf_float+0x1c6>
 80065ec:	e754      	b.n	8006498 <_scanf_float+0x70>
 80065ee:	494f      	ldr	r1, [pc, #316]	; (800672c <_scanf_float+0x304>)
 80065f0:	3401      	adds	r4, #1
 80065f2:	400a      	ands	r2, r1
 80065f4:	6032      	str	r2, [r6, #0]
 80065f6:	e7bf      	b.n	8006578 <_scanf_float+0x150>
 80065f8:	21fd      	movs	r1, #253	; 0xfd
 80065fa:	1ee2      	subs	r2, r4, #3
 80065fc:	420a      	tst	r2, r1
 80065fe:	d000      	beq.n	8006602 <_scanf_float+0x1da>
 8006600:	e743      	b.n	800648a <_scanf_float+0x62>
 8006602:	e7dd      	b.n	80065c0 <_scanf_float+0x198>
 8006604:	2c02      	cmp	r4, #2
 8006606:	d000      	beq.n	800660a <_scanf_float+0x1e2>
 8006608:	e73f      	b.n	800648a <_scanf_float+0x62>
 800660a:	2403      	movs	r4, #3
 800660c:	e7b4      	b.n	8006578 <_scanf_float+0x150>
 800660e:	2c06      	cmp	r4, #6
 8006610:	d000      	beq.n	8006614 <_scanf_float+0x1ec>
 8006612:	e73a      	b.n	800648a <_scanf_float+0x62>
 8006614:	2407      	movs	r4, #7
 8006616:	e7af      	b.n	8006578 <_scanf_float+0x150>
 8006618:	6832      	ldr	r2, [r6, #0]
 800661a:	0591      	lsls	r1, r2, #22
 800661c:	d400      	bmi.n	8006620 <_scanf_float+0x1f8>
 800661e:	e734      	b.n	800648a <_scanf_float+0x62>
 8006620:	4943      	ldr	r1, [pc, #268]	; (8006730 <_scanf_float+0x308>)
 8006622:	400a      	ands	r2, r1
 8006624:	6032      	str	r2, [r6, #0]
 8006626:	9a00      	ldr	r2, [sp, #0]
 8006628:	9204      	str	r2, [sp, #16]
 800662a:	e7a5      	b.n	8006578 <_scanf_float+0x150>
 800662c:	21a0      	movs	r1, #160	; 0xa0
 800662e:	2080      	movs	r0, #128	; 0x80
 8006630:	6832      	ldr	r2, [r6, #0]
 8006632:	00c9      	lsls	r1, r1, #3
 8006634:	4011      	ands	r1, r2
 8006636:	00c0      	lsls	r0, r0, #3
 8006638:	4281      	cmp	r1, r0
 800663a:	d006      	beq.n	800664a <_scanf_float+0x222>
 800663c:	4202      	tst	r2, r0
 800663e:	d100      	bne.n	8006642 <_scanf_float+0x21a>
 8006640:	e723      	b.n	800648a <_scanf_float+0x62>
 8006642:	9900      	ldr	r1, [sp, #0]
 8006644:	2900      	cmp	r1, #0
 8006646:	d100      	bne.n	800664a <_scanf_float+0x222>
 8006648:	e726      	b.n	8006498 <_scanf_float+0x70>
 800664a:	0591      	lsls	r1, r2, #22
 800664c:	d404      	bmi.n	8006658 <_scanf_float+0x230>
 800664e:	9900      	ldr	r1, [sp, #0]
 8006650:	9804      	ldr	r0, [sp, #16]
 8006652:	9708      	str	r7, [sp, #32]
 8006654:	1a09      	subs	r1, r1, r0
 8006656:	9107      	str	r1, [sp, #28]
 8006658:	4934      	ldr	r1, [pc, #208]	; (800672c <_scanf_float+0x304>)
 800665a:	400a      	ands	r2, r1
 800665c:	21c0      	movs	r1, #192	; 0xc0
 800665e:	0049      	lsls	r1, r1, #1
 8006660:	430a      	orrs	r2, r1
 8006662:	6032      	str	r2, [r6, #0]
 8006664:	2200      	movs	r2, #0
 8006666:	9200      	str	r2, [sp, #0]
 8006668:	e786      	b.n	8006578 <_scanf_float+0x150>
 800666a:	2203      	movs	r2, #3
 800666c:	e79e      	b.n	80065ac <_scanf_float+0x184>
 800666e:	23c0      	movs	r3, #192	; 0xc0
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	0029      	movs	r1, r5
 8006674:	58f3      	ldr	r3, [r6, r3]
 8006676:	9801      	ldr	r0, [sp, #4]
 8006678:	4798      	blx	r3
 800667a:	2800      	cmp	r0, #0
 800667c:	d100      	bne.n	8006680 <_scanf_float+0x258>
 800667e:	e6f6      	b.n	800646e <_scanf_float+0x46>
 8006680:	e703      	b.n	800648a <_scanf_float+0x62>
 8006682:	3f01      	subs	r7, #1
 8006684:	5933      	ldr	r3, [r6, r4]
 8006686:	002a      	movs	r2, r5
 8006688:	7839      	ldrb	r1, [r7, #0]
 800668a:	9801      	ldr	r0, [sp, #4]
 800668c:	4798      	blx	r3
 800668e:	6933      	ldr	r3, [r6, #16]
 8006690:	3b01      	subs	r3, #1
 8006692:	6133      	str	r3, [r6, #16]
 8006694:	e707      	b.n	80064a6 <_scanf_float+0x7e>
 8006696:	1e63      	subs	r3, r4, #1
 8006698:	2b06      	cmp	r3, #6
 800669a:	d80e      	bhi.n	80066ba <_scanf_float+0x292>
 800669c:	9702      	str	r7, [sp, #8]
 800669e:	2c02      	cmp	r4, #2
 80066a0:	d920      	bls.n	80066e4 <_scanf_float+0x2bc>
 80066a2:	1be3      	subs	r3, r4, r7
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	9305      	str	r3, [sp, #20]
 80066a8:	9b02      	ldr	r3, [sp, #8]
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	189b      	adds	r3, r3, r2
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d827      	bhi.n	8006704 <_scanf_float+0x2dc>
 80066b4:	3c03      	subs	r4, #3
 80066b6:	b2e4      	uxtb	r4, r4
 80066b8:	1b3f      	subs	r7, r7, r4
 80066ba:	6833      	ldr	r3, [r6, #0]
 80066bc:	05da      	lsls	r2, r3, #23
 80066be:	d554      	bpl.n	800676a <_scanf_float+0x342>
 80066c0:	055b      	lsls	r3, r3, #21
 80066c2:	d537      	bpl.n	8006734 <_scanf_float+0x30c>
 80066c4:	24be      	movs	r4, #190	; 0xbe
 80066c6:	0064      	lsls	r4, r4, #1
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	429f      	cmp	r7, r3
 80066cc:	d800      	bhi.n	80066d0 <_scanf_float+0x2a8>
 80066ce:	e6ee      	b.n	80064ae <_scanf_float+0x86>
 80066d0:	3f01      	subs	r7, #1
 80066d2:	5933      	ldr	r3, [r6, r4]
 80066d4:	002a      	movs	r2, r5
 80066d6:	7839      	ldrb	r1, [r7, #0]
 80066d8:	9801      	ldr	r0, [sp, #4]
 80066da:	4798      	blx	r3
 80066dc:	6933      	ldr	r3, [r6, #16]
 80066de:	3b01      	subs	r3, #1
 80066e0:	6133      	str	r3, [r6, #16]
 80066e2:	e7f1      	b.n	80066c8 <_scanf_float+0x2a0>
 80066e4:	24be      	movs	r4, #190	; 0xbe
 80066e6:	0064      	lsls	r4, r4, #1
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	429f      	cmp	r7, r3
 80066ec:	d800      	bhi.n	80066f0 <_scanf_float+0x2c8>
 80066ee:	e6de      	b.n	80064ae <_scanf_float+0x86>
 80066f0:	3f01      	subs	r7, #1
 80066f2:	5933      	ldr	r3, [r6, r4]
 80066f4:	002a      	movs	r2, r5
 80066f6:	7839      	ldrb	r1, [r7, #0]
 80066f8:	9801      	ldr	r0, [sp, #4]
 80066fa:	4798      	blx	r3
 80066fc:	6933      	ldr	r3, [r6, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	6133      	str	r3, [r6, #16]
 8006702:	e7f1      	b.n	80066e8 <_scanf_float+0x2c0>
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	002a      	movs	r2, r5
 8006708:	3b01      	subs	r3, #1
 800670a:	7819      	ldrb	r1, [r3, #0]
 800670c:	9302      	str	r3, [sp, #8]
 800670e:	23be      	movs	r3, #190	; 0xbe
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	58f3      	ldr	r3, [r6, r3]
 8006714:	9801      	ldr	r0, [sp, #4]
 8006716:	9309      	str	r3, [sp, #36]	; 0x24
 8006718:	4798      	blx	r3
 800671a:	6933      	ldr	r3, [r6, #16]
 800671c:	3b01      	subs	r3, #1
 800671e:	6133      	str	r3, [r6, #16]
 8006720:	e7c2      	b.n	80066a8 <_scanf_float+0x280>
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	fffffeff 	.word	0xfffffeff
 8006728:	fffffe7f 	.word	0xfffffe7f
 800672c:	fffff87f 	.word	0xfffff87f
 8006730:	fffffd7f 	.word	0xfffffd7f
 8006734:	6933      	ldr	r3, [r6, #16]
 8006736:	1e7c      	subs	r4, r7, #1
 8006738:	7821      	ldrb	r1, [r4, #0]
 800673a:	3b01      	subs	r3, #1
 800673c:	6133      	str	r3, [r6, #16]
 800673e:	2965      	cmp	r1, #101	; 0x65
 8006740:	d00c      	beq.n	800675c <_scanf_float+0x334>
 8006742:	2945      	cmp	r1, #69	; 0x45
 8006744:	d00a      	beq.n	800675c <_scanf_float+0x334>
 8006746:	23be      	movs	r3, #190	; 0xbe
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	58f3      	ldr	r3, [r6, r3]
 800674c:	002a      	movs	r2, r5
 800674e:	9801      	ldr	r0, [sp, #4]
 8006750:	4798      	blx	r3
 8006752:	6933      	ldr	r3, [r6, #16]
 8006754:	1ebc      	subs	r4, r7, #2
 8006756:	3b01      	subs	r3, #1
 8006758:	7821      	ldrb	r1, [r4, #0]
 800675a:	6133      	str	r3, [r6, #16]
 800675c:	23be      	movs	r3, #190	; 0xbe
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	002a      	movs	r2, r5
 8006762:	58f3      	ldr	r3, [r6, r3]
 8006764:	9801      	ldr	r0, [sp, #4]
 8006766:	4798      	blx	r3
 8006768:	0027      	movs	r7, r4
 800676a:	6832      	ldr	r2, [r6, #0]
 800676c:	2310      	movs	r3, #16
 800676e:	0011      	movs	r1, r2
 8006770:	4019      	ands	r1, r3
 8006772:	9102      	str	r1, [sp, #8]
 8006774:	421a      	tst	r2, r3
 8006776:	d158      	bne.n	800682a <_scanf_float+0x402>
 8006778:	23c0      	movs	r3, #192	; 0xc0
 800677a:	7039      	strb	r1, [r7, #0]
 800677c:	6832      	ldr	r2, [r6, #0]
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4013      	ands	r3, r2
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	00d2      	lsls	r2, r2, #3
 8006786:	4293      	cmp	r3, r2
 8006788:	d11d      	bne.n	80067c6 <_scanf_float+0x39e>
 800678a:	9b04      	ldr	r3, [sp, #16]
 800678c:	9a00      	ldr	r2, [sp, #0]
 800678e:	9900      	ldr	r1, [sp, #0]
 8006790:	1a9a      	subs	r2, r3, r2
 8006792:	428b      	cmp	r3, r1
 8006794:	d124      	bne.n	80067e0 <_scanf_float+0x3b8>
 8006796:	2200      	movs	r2, #0
 8006798:	9903      	ldr	r1, [sp, #12]
 800679a:	9801      	ldr	r0, [sp, #4]
 800679c:	f000 feae 	bl	80074fc <_strtod_r>
 80067a0:	9b06      	ldr	r3, [sp, #24]
 80067a2:	000d      	movs	r5, r1
 80067a4:	6831      	ldr	r1, [r6, #0]
 80067a6:	0004      	movs	r4, r0
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	078a      	lsls	r2, r1, #30
 80067ac:	d525      	bpl.n	80067fa <_scanf_float+0x3d2>
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	9906      	ldr	r1, [sp, #24]
 80067b2:	600a      	str	r2, [r1, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	601c      	str	r4, [r3, #0]
 80067b8:	605d      	str	r5, [r3, #4]
 80067ba:	68f3      	ldr	r3, [r6, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60f3      	str	r3, [r6, #12]
 80067c0:	9802      	ldr	r0, [sp, #8]
 80067c2:	b00b      	add	sp, #44	; 0x2c
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c6:	9b07      	ldr	r3, [sp, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0e4      	beq.n	8006796 <_scanf_float+0x36e>
 80067cc:	9b08      	ldr	r3, [sp, #32]
 80067ce:	9a02      	ldr	r2, [sp, #8]
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	9801      	ldr	r0, [sp, #4]
 80067d4:	230a      	movs	r3, #10
 80067d6:	f000 ff27 	bl	8007628 <_strtol_r>
 80067da:	9b07      	ldr	r3, [sp, #28]
 80067dc:	9f08      	ldr	r7, [sp, #32]
 80067de:	1ac2      	subs	r2, r0, r3
 80067e0:	0033      	movs	r3, r6
 80067e2:	3370      	adds	r3, #112	; 0x70
 80067e4:	33ff      	adds	r3, #255	; 0xff
 80067e6:	429f      	cmp	r7, r3
 80067e8:	d302      	bcc.n	80067f0 <_scanf_float+0x3c8>
 80067ea:	0037      	movs	r7, r6
 80067ec:	376f      	adds	r7, #111	; 0x6f
 80067ee:	37ff      	adds	r7, #255	; 0xff
 80067f0:	0038      	movs	r0, r7
 80067f2:	490f      	ldr	r1, [pc, #60]	; (8006830 <_scanf_float+0x408>)
 80067f4:	f000 f836 	bl	8006864 <siprintf>
 80067f8:	e7cd      	b.n	8006796 <_scanf_float+0x36e>
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	0749      	lsls	r1, r1, #29
 80067fe:	d4d7      	bmi.n	80067b0 <_scanf_float+0x388>
 8006800:	9906      	ldr	r1, [sp, #24]
 8006802:	0020      	movs	r0, r4
 8006804:	600a      	str	r2, [r1, #0]
 8006806:	681f      	ldr	r7, [r3, #0]
 8006808:	0022      	movs	r2, r4
 800680a:	002b      	movs	r3, r5
 800680c:	0029      	movs	r1, r5
 800680e:	f7fb fbf7 	bl	8002000 <__aeabi_dcmpun>
 8006812:	2800      	cmp	r0, #0
 8006814:	d004      	beq.n	8006820 <_scanf_float+0x3f8>
 8006816:	4807      	ldr	r0, [pc, #28]	; (8006834 <_scanf_float+0x40c>)
 8006818:	f000 f820 	bl	800685c <nanf>
 800681c:	6038      	str	r0, [r7, #0]
 800681e:	e7cc      	b.n	80067ba <_scanf_float+0x392>
 8006820:	0020      	movs	r0, r4
 8006822:	0029      	movs	r1, r5
 8006824:	f7fb fc96 	bl	8002154 <__aeabi_d2f>
 8006828:	e7f8      	b.n	800681c <_scanf_float+0x3f4>
 800682a:	2300      	movs	r3, #0
 800682c:	e640      	b.n	80064b0 <_scanf_float+0x88>
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	0800a6f8 	.word	0x0800a6f8
 8006834:	0800ab68 	.word	0x0800ab68

08006838 <_sbrk_r>:
 8006838:	2300      	movs	r3, #0
 800683a:	b570      	push	{r4, r5, r6, lr}
 800683c:	4d06      	ldr	r5, [pc, #24]	; (8006858 <_sbrk_r+0x20>)
 800683e:	0004      	movs	r4, r0
 8006840:	0008      	movs	r0, r1
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	f7fc fdba 	bl	80033bc <_sbrk>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d103      	bne.n	8006854 <_sbrk_r+0x1c>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d000      	beq.n	8006854 <_sbrk_r+0x1c>
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	bd70      	pop	{r4, r5, r6, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	200005ac 	.word	0x200005ac

0800685c <nanf>:
 800685c:	4800      	ldr	r0, [pc, #0]	; (8006860 <nanf+0x4>)
 800685e:	4770      	bx	lr
 8006860:	7fc00000 	.word	0x7fc00000

08006864 <siprintf>:
 8006864:	b40e      	push	{r1, r2, r3}
 8006866:	b500      	push	{lr}
 8006868:	490b      	ldr	r1, [pc, #44]	; (8006898 <siprintf+0x34>)
 800686a:	b09c      	sub	sp, #112	; 0x70
 800686c:	ab1d      	add	r3, sp, #116	; 0x74
 800686e:	9002      	str	r0, [sp, #8]
 8006870:	9006      	str	r0, [sp, #24]
 8006872:	9107      	str	r1, [sp, #28]
 8006874:	9104      	str	r1, [sp, #16]
 8006876:	4809      	ldr	r0, [pc, #36]	; (800689c <siprintf+0x38>)
 8006878:	4909      	ldr	r1, [pc, #36]	; (80068a0 <siprintf+0x3c>)
 800687a:	cb04      	ldmia	r3!, {r2}
 800687c:	9105      	str	r1, [sp, #20]
 800687e:	6800      	ldr	r0, [r0, #0]
 8006880:	a902      	add	r1, sp, #8
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	f002 ff86 	bl	8009794 <_svfiprintf_r>
 8006888:	2300      	movs	r3, #0
 800688a:	9a02      	ldr	r2, [sp, #8]
 800688c:	7013      	strb	r3, [r2, #0]
 800688e:	b01c      	add	sp, #112	; 0x70
 8006890:	bc08      	pop	{r3}
 8006892:	b003      	add	sp, #12
 8006894:	4718      	bx	r3
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	7fffffff 	.word	0x7fffffff
 800689c:	20000024 	.word	0x20000024
 80068a0:	ffff0208 	.word	0xffff0208

080068a4 <sulp>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	0016      	movs	r6, r2
 80068a8:	000d      	movs	r5, r1
 80068aa:	f002 fd9f 	bl	80093ec <__ulp>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d00d      	beq.n	80068ce <sulp+0x2a>
 80068b2:	236b      	movs	r3, #107	; 0x6b
 80068b4:	006a      	lsls	r2, r5, #1
 80068b6:	0d52      	lsrs	r2, r2, #21
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd07      	ble.n	80068ce <sulp+0x2a>
 80068be:	2400      	movs	r4, #0
 80068c0:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <sulp+0x2c>)
 80068c2:	051b      	lsls	r3, r3, #20
 80068c4:	189d      	adds	r5, r3, r2
 80068c6:	002b      	movs	r3, r5
 80068c8:	0022      	movs	r2, r4
 80068ca:	f7fa fd9b 	bl	8001404 <__aeabi_dmul>
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	3ff00000 	.word	0x3ff00000

080068d4 <_strtod_l>:
 80068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d6:	001d      	movs	r5, r3
 80068d8:	2300      	movs	r3, #0
 80068da:	b0a5      	sub	sp, #148	; 0x94
 80068dc:	9320      	str	r3, [sp, #128]	; 0x80
 80068de:	4bac      	ldr	r3, [pc, #688]	; (8006b90 <_strtod_l+0x2bc>)
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9108      	str	r1, [sp, #32]
 80068e6:	0018      	movs	r0, r3
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80068ec:	f7f9 fc0c 	bl	8000108 <strlen>
 80068f0:	2600      	movs	r6, #0
 80068f2:	0004      	movs	r4, r0
 80068f4:	2700      	movs	r7, #0
 80068f6:	9b08      	ldr	r3, [sp, #32]
 80068f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80068fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80068fc:	7813      	ldrb	r3, [r2, #0]
 80068fe:	2b2b      	cmp	r3, #43	; 0x2b
 8006900:	d058      	beq.n	80069b4 <_strtod_l+0xe0>
 8006902:	d844      	bhi.n	800698e <_strtod_l+0xba>
 8006904:	2b0d      	cmp	r3, #13
 8006906:	d83d      	bhi.n	8006984 <_strtod_l+0xb0>
 8006908:	2b08      	cmp	r3, #8
 800690a:	d83d      	bhi.n	8006988 <_strtod_l+0xb4>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d047      	beq.n	80069a0 <_strtod_l+0xcc>
 8006910:	2300      	movs	r3, #0
 8006912:	930e      	str	r3, [sp, #56]	; 0x38
 8006914:	2200      	movs	r2, #0
 8006916:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006918:	920a      	str	r2, [sp, #40]	; 0x28
 800691a:	9306      	str	r3, [sp, #24]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b30      	cmp	r3, #48	; 0x30
 8006920:	d000      	beq.n	8006924 <_strtod_l+0x50>
 8006922:	e07f      	b.n	8006a24 <_strtod_l+0x150>
 8006924:	9b06      	ldr	r3, [sp, #24]
 8006926:	3220      	adds	r2, #32
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	4393      	bics	r3, r2
 800692c:	2b58      	cmp	r3, #88	; 0x58
 800692e:	d000      	beq.n	8006932 <_strtod_l+0x5e>
 8006930:	e06e      	b.n	8006a10 <_strtod_l+0x13c>
 8006932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006934:	9502      	str	r5, [sp, #8]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	ab20      	add	r3, sp, #128	; 0x80
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	4a95      	ldr	r2, [pc, #596]	; (8006b94 <_strtod_l+0x2c0>)
 800693e:	ab21      	add	r3, sp, #132	; 0x84
 8006940:	9805      	ldr	r0, [sp, #20]
 8006942:	a91f      	add	r1, sp, #124	; 0x7c
 8006944:	f001 fe86 	bl	8008654 <__gethex>
 8006948:	2307      	movs	r3, #7
 800694a:	0005      	movs	r5, r0
 800694c:	0004      	movs	r4, r0
 800694e:	401d      	ands	r5, r3
 8006950:	4218      	tst	r0, r3
 8006952:	d006      	beq.n	8006962 <_strtod_l+0x8e>
 8006954:	2d06      	cmp	r5, #6
 8006956:	d12f      	bne.n	80069b8 <_strtod_l+0xe4>
 8006958:	9b06      	ldr	r3, [sp, #24]
 800695a:	3301      	adds	r3, #1
 800695c:	931f      	str	r3, [sp, #124]	; 0x7c
 800695e:	2300      	movs	r3, #0
 8006960:	930e      	str	r3, [sp, #56]	; 0x38
 8006962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <_strtod_l+0x9a>
 8006968:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800696a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01c      	beq.n	80069ae <_strtod_l+0xda>
 8006974:	2380      	movs	r3, #128	; 0x80
 8006976:	0032      	movs	r2, r6
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	0010      	movs	r0, r2
 800697e:	0019      	movs	r1, r3
 8006980:	b025      	add	sp, #148	; 0x94
 8006982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006984:	2b20      	cmp	r3, #32
 8006986:	d1c3      	bne.n	8006910 <_strtod_l+0x3c>
 8006988:	3201      	adds	r2, #1
 800698a:	921f      	str	r2, [sp, #124]	; 0x7c
 800698c:	e7b5      	b.n	80068fa <_strtod_l+0x26>
 800698e:	2b2d      	cmp	r3, #45	; 0x2d
 8006990:	d1be      	bne.n	8006910 <_strtod_l+0x3c>
 8006992:	3b2c      	subs	r3, #44	; 0x2c
 8006994:	930e      	str	r3, [sp, #56]	; 0x38
 8006996:	1c53      	adds	r3, r2, #1
 8006998:	931f      	str	r3, [sp, #124]	; 0x7c
 800699a:	7853      	ldrb	r3, [r2, #1]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1b9      	bne.n	8006914 <_strtod_l+0x40>
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	931f      	str	r3, [sp, #124]	; 0x7c
 80069a4:	2300      	movs	r3, #0
 80069a6:	930e      	str	r3, [sp, #56]	; 0x38
 80069a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1dc      	bne.n	8006968 <_strtod_l+0x94>
 80069ae:	0032      	movs	r2, r6
 80069b0:	003b      	movs	r3, r7
 80069b2:	e7e3      	b.n	800697c <_strtod_l+0xa8>
 80069b4:	2300      	movs	r3, #0
 80069b6:	e7ed      	b.n	8006994 <_strtod_l+0xc0>
 80069b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	d007      	beq.n	80069ce <_strtod_l+0xfa>
 80069be:	2135      	movs	r1, #53	; 0x35
 80069c0:	a822      	add	r0, sp, #136	; 0x88
 80069c2:	f002 fe14 	bl	80095ee <__copybits>
 80069c6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80069c8:	9805      	ldr	r0, [sp, #20]
 80069ca:	f002 f9cf 	bl	8008d6c <_Bfree>
 80069ce:	1e68      	subs	r0, r5, #1
 80069d0:	2804      	cmp	r0, #4
 80069d2:	d806      	bhi.n	80069e2 <_strtod_l+0x10e>
 80069d4:	f7f9 fba0 	bl	8000118 <__gnu_thumb1_case_uqi>
 80069d8:	1816030b 	.word	0x1816030b
 80069dc:	0b          	.byte	0x0b
 80069dd:	00          	.byte	0x00
 80069de:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80069e0:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80069e2:	0723      	lsls	r3, r4, #28
 80069e4:	d5bd      	bpl.n	8006962 <_strtod_l+0x8e>
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	431f      	orrs	r7, r3
 80069ec:	e7b9      	b.n	8006962 <_strtod_l+0x8e>
 80069ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069f0:	4a69      	ldr	r2, [pc, #420]	; (8006b98 <_strtod_l+0x2c4>)
 80069f2:	496a      	ldr	r1, [pc, #424]	; (8006b9c <_strtod_l+0x2c8>)
 80069f4:	401a      	ands	r2, r3
 80069f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80069fa:	185b      	adds	r3, r3, r1
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	431a      	orrs	r2, r3
 8006a00:	0017      	movs	r7, r2
 8006a02:	e7ee      	b.n	80069e2 <_strtod_l+0x10e>
 8006a04:	4f66      	ldr	r7, [pc, #408]	; (8006ba0 <_strtod_l+0x2cc>)
 8006a06:	e7ec      	b.n	80069e2 <_strtod_l+0x10e>
 8006a08:	2601      	movs	r6, #1
 8006a0a:	4f66      	ldr	r7, [pc, #408]	; (8006ba4 <_strtod_l+0x2d0>)
 8006a0c:	4276      	negs	r6, r6
 8006a0e:	e7e8      	b.n	80069e2 <_strtod_l+0x10e>
 8006a10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	921f      	str	r2, [sp, #124]	; 0x7c
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	d0f9      	beq.n	8006a10 <_strtod_l+0x13c>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0a0      	beq.n	8006962 <_strtod_l+0x8e>
 8006a20:	2301      	movs	r3, #1
 8006a22:	930a      	str	r3, [sp, #40]	; 0x28
 8006a24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a26:	220a      	movs	r2, #10
 8006a28:	9310      	str	r3, [sp, #64]	; 0x40
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a30:	9309      	str	r3, [sp, #36]	; 0x24
 8006a32:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006a34:	7805      	ldrb	r5, [r0, #0]
 8006a36:	002b      	movs	r3, r5
 8006a38:	3b30      	subs	r3, #48	; 0x30
 8006a3a:	b2d9      	uxtb	r1, r3
 8006a3c:	2909      	cmp	r1, #9
 8006a3e:	d927      	bls.n	8006a90 <_strtod_l+0x1bc>
 8006a40:	0022      	movs	r2, r4
 8006a42:	9907      	ldr	r1, [sp, #28]
 8006a44:	f003 f95a 	bl	8009cfc <strncmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d033      	beq.n	8006ab4 <_strtod_l+0x1e0>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	002b      	movs	r3, r5
 8006a50:	4684      	mov	ip, r0
 8006a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a54:	900c      	str	r0, [sp, #48]	; 0x30
 8006a56:	9206      	str	r2, [sp, #24]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	4391      	bics	r1, r2
 8006a5e:	000a      	movs	r2, r1
 8006a60:	2100      	movs	r1, #0
 8006a62:	9107      	str	r1, [sp, #28]
 8006a64:	2a45      	cmp	r2, #69	; 0x45
 8006a66:	d000      	beq.n	8006a6a <_strtod_l+0x196>
 8006a68:	e0c5      	b.n	8006bf6 <_strtod_l+0x322>
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a6e:	4303      	orrs	r3, r0
 8006a70:	4313      	orrs	r3, r2
 8006a72:	428b      	cmp	r3, r1
 8006a74:	d094      	beq.n	80069a0 <_strtod_l+0xcc>
 8006a76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006a7e:	9b08      	ldr	r3, [sp, #32]
 8006a80:	785b      	ldrb	r3, [r3, #1]
 8006a82:	2b2b      	cmp	r3, #43	; 0x2b
 8006a84:	d076      	beq.n	8006b74 <_strtod_l+0x2a0>
 8006a86:	000c      	movs	r4, r1
 8006a88:	2b2d      	cmp	r3, #45	; 0x2d
 8006a8a:	d179      	bne.n	8006b80 <_strtod_l+0x2ac>
 8006a8c:	2401      	movs	r4, #1
 8006a8e:	e072      	b.n	8006b76 <_strtod_l+0x2a2>
 8006a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a92:	2908      	cmp	r1, #8
 8006a94:	dc09      	bgt.n	8006aaa <_strtod_l+0x1d6>
 8006a96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a98:	4351      	muls	r1, r2
 8006a9a:	185b      	adds	r3, r3, r1
 8006a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa6:	901f      	str	r0, [sp, #124]	; 0x7c
 8006aa8:	e7c3      	b.n	8006a32 <_strtod_l+0x15e>
 8006aaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006aac:	4351      	muls	r1, r2
 8006aae:	185b      	adds	r3, r3, r1
 8006ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab2:	e7f4      	b.n	8006a9e <_strtod_l+0x1ca>
 8006ab4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab8:	191c      	adds	r4, r3, r4
 8006aba:	941f      	str	r4, [sp, #124]	; 0x7c
 8006abc:	7823      	ldrb	r3, [r4, #0]
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d039      	beq.n	8006b36 <_strtod_l+0x262>
 8006ac2:	900c      	str	r0, [sp, #48]	; 0x30
 8006ac4:	9206      	str	r2, [sp, #24]
 8006ac6:	001a      	movs	r2, r3
 8006ac8:	3a30      	subs	r2, #48	; 0x30
 8006aca:	2a09      	cmp	r2, #9
 8006acc:	d912      	bls.n	8006af4 <_strtod_l+0x220>
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4694      	mov	ip, r2
 8006ad2:	e7c1      	b.n	8006a58 <_strtod_l+0x184>
 8006ad4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	921f      	str	r2, [sp, #124]	; 0x7c
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	d0f8      	beq.n	8006ad4 <_strtod_l+0x200>
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	3a31      	subs	r2, #49	; 0x31
 8006ae6:	2a08      	cmp	r2, #8
 8006ae8:	d83f      	bhi.n	8006b6a <_strtod_l+0x296>
 8006aea:	900c      	str	r0, [sp, #48]	; 0x30
 8006aec:	2000      	movs	r0, #0
 8006aee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006af0:	9006      	str	r0, [sp, #24]
 8006af2:	9210      	str	r2, [sp, #64]	; 0x40
 8006af4:	001a      	movs	r2, r3
 8006af6:	1c41      	adds	r1, r0, #1
 8006af8:	3a30      	subs	r2, #48	; 0x30
 8006afa:	2b30      	cmp	r3, #48	; 0x30
 8006afc:	d015      	beq.n	8006b2a <_strtod_l+0x256>
 8006afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b00:	185b      	adds	r3, r3, r1
 8006b02:	210a      	movs	r1, #10
 8006b04:	930c      	str	r3, [sp, #48]	; 0x30
 8006b06:	9b06      	ldr	r3, [sp, #24]
 8006b08:	18c4      	adds	r4, r0, r3
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	d115      	bne.n	8006b3a <_strtod_l+0x266>
 8006b0e:	9906      	ldr	r1, [sp, #24]
 8006b10:	9b06      	ldr	r3, [sp, #24]
 8006b12:	3101      	adds	r1, #1
 8006b14:	1809      	adds	r1, r1, r0
 8006b16:	181b      	adds	r3, r3, r0
 8006b18:	9106      	str	r1, [sp, #24]
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	dc1b      	bgt.n	8006b56 <_strtod_l+0x282>
 8006b1e:	230a      	movs	r3, #10
 8006b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b22:	434b      	muls	r3, r1
 8006b24:	2100      	movs	r1, #0
 8006b26:	18d3      	adds	r3, r2, r3
 8006b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b2c:	0008      	movs	r0, r1
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	921f      	str	r2, [sp, #124]	; 0x7c
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	e7c7      	b.n	8006ac6 <_strtod_l+0x1f2>
 8006b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b38:	e7d1      	b.n	8006ade <_strtod_l+0x20a>
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	dc04      	bgt.n	8006b48 <_strtod_l+0x274>
 8006b3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006b40:	434d      	muls	r5, r1
 8006b42:	950b      	str	r5, [sp, #44]	; 0x2c
 8006b44:	3301      	adds	r3, #1
 8006b46:	e7e0      	b.n	8006b0a <_strtod_l+0x236>
 8006b48:	1c5d      	adds	r5, r3, #1
 8006b4a:	2d10      	cmp	r5, #16
 8006b4c:	dcfa      	bgt.n	8006b44 <_strtod_l+0x270>
 8006b4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b50:	434d      	muls	r5, r1
 8006b52:	950f      	str	r5, [sp, #60]	; 0x3c
 8006b54:	e7f6      	b.n	8006b44 <_strtod_l+0x270>
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	dce5      	bgt.n	8006b2a <_strtod_l+0x256>
 8006b5e:	230a      	movs	r3, #10
 8006b60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006b62:	4343      	muls	r3, r0
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b68:	e7df      	b.n	8006b2a <_strtod_l+0x256>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	920c      	str	r2, [sp, #48]	; 0x30
 8006b6e:	9206      	str	r2, [sp, #24]
 8006b70:	3201      	adds	r2, #1
 8006b72:	e7ad      	b.n	8006ad0 <_strtod_l+0x1fc>
 8006b74:	2400      	movs	r4, #0
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	931f      	str	r3, [sp, #124]	; 0x7c
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	789b      	ldrb	r3, [r3, #2]
 8006b80:	001a      	movs	r2, r3
 8006b82:	3a30      	subs	r2, #48	; 0x30
 8006b84:	2a09      	cmp	r2, #9
 8006b86:	d913      	bls.n	8006bb0 <_strtod_l+0x2dc>
 8006b88:	9a08      	ldr	r2, [sp, #32]
 8006b8a:	921f      	str	r2, [sp, #124]	; 0x7c
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	e031      	b.n	8006bf4 <_strtod_l+0x320>
 8006b90:	0800a9ac 	.word	0x0800a9ac
 8006b94:	0800a700 	.word	0x0800a700
 8006b98:	ffefffff 	.word	0xffefffff
 8006b9c:	00000433 	.word	0x00000433
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	7fffffff 	.word	0x7fffffff
 8006ba8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	921f      	str	r2, [sp, #124]	; 0x7c
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d0f9      	beq.n	8006ba8 <_strtod_l+0x2d4>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	9207      	str	r2, [sp, #28]
 8006bb8:	001a      	movs	r2, r3
 8006bba:	3a31      	subs	r2, #49	; 0x31
 8006bbc:	2a08      	cmp	r2, #8
 8006bbe:	d81a      	bhi.n	8006bf6 <_strtod_l+0x322>
 8006bc0:	3b30      	subs	r3, #48	; 0x30
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bca:	1c59      	adds	r1, r3, #1
 8006bcc:	911f      	str	r1, [sp, #124]	; 0x7c
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	001d      	movs	r5, r3
 8006bd2:	3d30      	subs	r5, #48	; 0x30
 8006bd4:	2d09      	cmp	r5, #9
 8006bd6:	d939      	bls.n	8006c4c <_strtod_l+0x378>
 8006bd8:	9d07      	ldr	r5, [sp, #28]
 8006bda:	1b49      	subs	r1, r1, r5
 8006bdc:	4db0      	ldr	r5, [pc, #704]	; (8006ea0 <_strtod_l+0x5cc>)
 8006bde:	9507      	str	r5, [sp, #28]
 8006be0:	2908      	cmp	r1, #8
 8006be2:	dc03      	bgt.n	8006bec <_strtod_l+0x318>
 8006be4:	9207      	str	r2, [sp, #28]
 8006be6:	42aa      	cmp	r2, r5
 8006be8:	dd00      	ble.n	8006bec <_strtod_l+0x318>
 8006bea:	9507      	str	r5, [sp, #28]
 8006bec:	2c00      	cmp	r4, #0
 8006bee:	d002      	beq.n	8006bf6 <_strtod_l+0x322>
 8006bf0:	9a07      	ldr	r2, [sp, #28]
 8006bf2:	4252      	negs	r2, r2
 8006bf4:	9207      	str	r2, [sp, #28]
 8006bf6:	9a06      	ldr	r2, [sp, #24]
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	d14b      	bne.n	8006c94 <_strtod_l+0x3c0>
 8006bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bfe:	4310      	orrs	r0, r2
 8006c00:	d000      	beq.n	8006c04 <_strtod_l+0x330>
 8006c02:	e6ae      	b.n	8006962 <_strtod_l+0x8e>
 8006c04:	4662      	mov	r2, ip
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	d000      	beq.n	8006c0c <_strtod_l+0x338>
 8006c0a:	e6c9      	b.n	80069a0 <_strtod_l+0xcc>
 8006c0c:	2b69      	cmp	r3, #105	; 0x69
 8006c0e:	d025      	beq.n	8006c5c <_strtod_l+0x388>
 8006c10:	dc21      	bgt.n	8006c56 <_strtod_l+0x382>
 8006c12:	2b49      	cmp	r3, #73	; 0x49
 8006c14:	d022      	beq.n	8006c5c <_strtod_l+0x388>
 8006c16:	2b4e      	cmp	r3, #78	; 0x4e
 8006c18:	d000      	beq.n	8006c1c <_strtod_l+0x348>
 8006c1a:	e6c1      	b.n	80069a0 <_strtod_l+0xcc>
 8006c1c:	49a1      	ldr	r1, [pc, #644]	; (8006ea4 <_strtod_l+0x5d0>)
 8006c1e:	a81f      	add	r0, sp, #124	; 0x7c
 8006c20:	f001 ff66 	bl	8008af0 <__match>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d100      	bne.n	8006c2a <_strtod_l+0x356>
 8006c28:	e6ba      	b.n	80069a0 <_strtod_l+0xcc>
 8006c2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b28      	cmp	r3, #40	; 0x28
 8006c30:	d12a      	bne.n	8006c88 <_strtod_l+0x3b4>
 8006c32:	499d      	ldr	r1, [pc, #628]	; (8006ea8 <_strtod_l+0x5d4>)
 8006c34:	aa22      	add	r2, sp, #136	; 0x88
 8006c36:	a81f      	add	r0, sp, #124	; 0x7c
 8006c38:	f001 ff6e 	bl	8008b18 <__hexnan>
 8006c3c:	2805      	cmp	r0, #5
 8006c3e:	d123      	bne.n	8006c88 <_strtod_l+0x3b4>
 8006c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c42:	4a9a      	ldr	r2, [pc, #616]	; (8006eac <_strtod_l+0x5d8>)
 8006c44:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006c46:	431a      	orrs	r2, r3
 8006c48:	0017      	movs	r7, r2
 8006c4a:	e68a      	b.n	8006962 <_strtod_l+0x8e>
 8006c4c:	210a      	movs	r1, #10
 8006c4e:	434a      	muls	r2, r1
 8006c50:	18d2      	adds	r2, r2, r3
 8006c52:	3a30      	subs	r2, #48	; 0x30
 8006c54:	e7b8      	b.n	8006bc8 <_strtod_l+0x2f4>
 8006c56:	2b6e      	cmp	r3, #110	; 0x6e
 8006c58:	d0e0      	beq.n	8006c1c <_strtod_l+0x348>
 8006c5a:	e6a1      	b.n	80069a0 <_strtod_l+0xcc>
 8006c5c:	4994      	ldr	r1, [pc, #592]	; (8006eb0 <_strtod_l+0x5dc>)
 8006c5e:	a81f      	add	r0, sp, #124	; 0x7c
 8006c60:	f001 ff46 	bl	8008af0 <__match>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d100      	bne.n	8006c6a <_strtod_l+0x396>
 8006c68:	e69a      	b.n	80069a0 <_strtod_l+0xcc>
 8006c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c6c:	4991      	ldr	r1, [pc, #580]	; (8006eb4 <_strtod_l+0x5e0>)
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	a81f      	add	r0, sp, #124	; 0x7c
 8006c72:	931f      	str	r3, [sp, #124]	; 0x7c
 8006c74:	f001 ff3c 	bl	8008af0 <__match>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d102      	bne.n	8006c82 <_strtod_l+0x3ae>
 8006c7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c7e:	3301      	adds	r3, #1
 8006c80:	931f      	str	r3, [sp, #124]	; 0x7c
 8006c82:	2600      	movs	r6, #0
 8006c84:	4f89      	ldr	r7, [pc, #548]	; (8006eac <_strtod_l+0x5d8>)
 8006c86:	e66c      	b.n	8006962 <_strtod_l+0x8e>
 8006c88:	488b      	ldr	r0, [pc, #556]	; (8006eb8 <_strtod_l+0x5e4>)
 8006c8a:	f002 ffe5 	bl	8009c58 <nan>
 8006c8e:	0006      	movs	r6, r0
 8006c90:	000f      	movs	r7, r1
 8006c92:	e666      	b.n	8006962 <_strtod_l+0x8e>
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <_strtod_l+0x3d2>
 8006ca2:	9b06      	ldr	r3, [sp, #24]
 8006ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca6:	9c06      	ldr	r4, [sp, #24]
 8006ca8:	2c10      	cmp	r4, #16
 8006caa:	dd00      	ble.n	8006cae <_strtod_l+0x3da>
 8006cac:	2410      	movs	r4, #16
 8006cae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006cb0:	f7fb fa2a 	bl	8002108 <__aeabi_ui2d>
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	0006      	movs	r6, r0
 8006cb8:	000f      	movs	r7, r1
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	dd15      	ble.n	8006cea <_strtod_l+0x416>
 8006cbe:	0022      	movs	r2, r4
 8006cc0:	4b7e      	ldr	r3, [pc, #504]	; (8006ebc <_strtod_l+0x5e8>)
 8006cc2:	3a09      	subs	r2, #9
 8006cc4:	00d2      	lsls	r2, r2, #3
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f7fa fb9a 	bl	8001404 <__aeabi_dmul>
 8006cd0:	0006      	movs	r6, r0
 8006cd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006cd4:	000f      	movs	r7, r1
 8006cd6:	f7fb fa17 	bl	8002108 <__aeabi_ui2d>
 8006cda:	0002      	movs	r2, r0
 8006cdc:	000b      	movs	r3, r1
 8006cde:	0030      	movs	r0, r6
 8006ce0:	0039      	movs	r1, r7
 8006ce2:	f7f9 fc51 	bl	8000588 <__aeabi_dadd>
 8006ce6:	0006      	movs	r6, r0
 8006ce8:	000f      	movs	r7, r1
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	2b0f      	cmp	r3, #15
 8006cee:	dc39      	bgt.n	8006d64 <_strtod_l+0x490>
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d100      	bne.n	8006cf8 <_strtod_l+0x424>
 8006cf6:	e634      	b.n	8006962 <_strtod_l+0x8e>
 8006cf8:	dd24      	ble.n	8006d44 <_strtod_l+0x470>
 8006cfa:	2b16      	cmp	r3, #22
 8006cfc:	dc09      	bgt.n	8006d12 <_strtod_l+0x43e>
 8006cfe:	496f      	ldr	r1, [pc, #444]	; (8006ebc <_strtod_l+0x5e8>)
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	18c9      	adds	r1, r1, r3
 8006d04:	0032      	movs	r2, r6
 8006d06:	6808      	ldr	r0, [r1, #0]
 8006d08:	6849      	ldr	r1, [r1, #4]
 8006d0a:	003b      	movs	r3, r7
 8006d0c:	f7fa fb7a 	bl	8001404 <__aeabi_dmul>
 8006d10:	e7bd      	b.n	8006c8e <_strtod_l+0x3ba>
 8006d12:	2325      	movs	r3, #37	; 0x25
 8006d14:	9a06      	ldr	r2, [sp, #24]
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	db22      	blt.n	8006d64 <_strtod_l+0x490>
 8006d1e:	240f      	movs	r4, #15
 8006d20:	9b06      	ldr	r3, [sp, #24]
 8006d22:	4d66      	ldr	r5, [pc, #408]	; (8006ebc <_strtod_l+0x5e8>)
 8006d24:	1ae4      	subs	r4, r4, r3
 8006d26:	00e1      	lsls	r1, r4, #3
 8006d28:	1869      	adds	r1, r5, r1
 8006d2a:	0032      	movs	r2, r6
 8006d2c:	6808      	ldr	r0, [r1, #0]
 8006d2e:	6849      	ldr	r1, [r1, #4]
 8006d30:	003b      	movs	r3, r7
 8006d32:	f7fa fb67 	bl	8001404 <__aeabi_dmul>
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	1b1c      	subs	r4, r3, r4
 8006d3a:	00e4      	lsls	r4, r4, #3
 8006d3c:	192c      	adds	r4, r5, r4
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	e7e3      	b.n	8006d0c <_strtod_l+0x438>
 8006d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d46:	3316      	adds	r3, #22
 8006d48:	db0c      	blt.n	8006d64 <_strtod_l+0x490>
 8006d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4c:	9a07      	ldr	r2, [sp, #28]
 8006d4e:	0030      	movs	r0, r6
 8006d50:	1a9a      	subs	r2, r3, r2
 8006d52:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <_strtod_l+0x5e8>)
 8006d54:	00d2      	lsls	r2, r2, #3
 8006d56:	189b      	adds	r3, r3, r2
 8006d58:	0039      	movs	r1, r7
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f7f9 ff4f 	bl	8000c00 <__aeabi_ddiv>
 8006d62:	e794      	b.n	8006c8e <_strtod_l+0x3ba>
 8006d64:	9b06      	ldr	r3, [sp, #24]
 8006d66:	1b1c      	subs	r4, r3, r4
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	18e4      	adds	r4, r4, r3
 8006d6c:	2c00      	cmp	r4, #0
 8006d6e:	dd72      	ble.n	8006e56 <_strtod_l+0x582>
 8006d70:	230f      	movs	r3, #15
 8006d72:	0021      	movs	r1, r4
 8006d74:	4019      	ands	r1, r3
 8006d76:	421c      	tst	r4, r3
 8006d78:	d00a      	beq.n	8006d90 <_strtod_l+0x4bc>
 8006d7a:	00cb      	lsls	r3, r1, #3
 8006d7c:	494f      	ldr	r1, [pc, #316]	; (8006ebc <_strtod_l+0x5e8>)
 8006d7e:	0032      	movs	r2, r6
 8006d80:	18c9      	adds	r1, r1, r3
 8006d82:	6808      	ldr	r0, [r1, #0]
 8006d84:	6849      	ldr	r1, [r1, #4]
 8006d86:	003b      	movs	r3, r7
 8006d88:	f7fa fb3c 	bl	8001404 <__aeabi_dmul>
 8006d8c:	0006      	movs	r6, r0
 8006d8e:	000f      	movs	r7, r1
 8006d90:	230f      	movs	r3, #15
 8006d92:	439c      	bics	r4, r3
 8006d94:	d04a      	beq.n	8006e2c <_strtod_l+0x558>
 8006d96:	3326      	adds	r3, #38	; 0x26
 8006d98:	33ff      	adds	r3, #255	; 0xff
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	dd22      	ble.n	8006de4 <_strtod_l+0x510>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9306      	str	r3, [sp, #24]
 8006da2:	9307      	str	r3, [sp, #28]
 8006da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da6:	9309      	str	r3, [sp, #36]	; 0x24
 8006da8:	2322      	movs	r3, #34	; 0x22
 8006daa:	2600      	movs	r6, #0
 8006dac:	9a05      	ldr	r2, [sp, #20]
 8006dae:	4f3f      	ldr	r7, [pc, #252]	; (8006eac <_strtod_l+0x5d8>)
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db4:	42b3      	cmp	r3, r6
 8006db6:	d100      	bne.n	8006dba <_strtod_l+0x4e6>
 8006db8:	e5d3      	b.n	8006962 <_strtod_l+0x8e>
 8006dba:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006dbc:	9805      	ldr	r0, [sp, #20]
 8006dbe:	f001 ffd5 	bl	8008d6c <_Bfree>
 8006dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dc4:	9805      	ldr	r0, [sp, #20]
 8006dc6:	f001 ffd1 	bl	8008d6c <_Bfree>
 8006dca:	9907      	ldr	r1, [sp, #28]
 8006dcc:	9805      	ldr	r0, [sp, #20]
 8006dce:	f001 ffcd 	bl	8008d6c <_Bfree>
 8006dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dd4:	9805      	ldr	r0, [sp, #20]
 8006dd6:	f001 ffc9 	bl	8008d6c <_Bfree>
 8006dda:	9906      	ldr	r1, [sp, #24]
 8006ddc:	9805      	ldr	r0, [sp, #20]
 8006dde:	f001 ffc5 	bl	8008d6c <_Bfree>
 8006de2:	e5be      	b.n	8006962 <_strtod_l+0x8e>
 8006de4:	2300      	movs	r3, #0
 8006de6:	0030      	movs	r0, r6
 8006de8:	0039      	movs	r1, r7
 8006dea:	4d35      	ldr	r5, [pc, #212]	; (8006ec0 <_strtod_l+0x5ec>)
 8006dec:	1124      	asrs	r4, r4, #4
 8006dee:	9308      	str	r3, [sp, #32]
 8006df0:	2c01      	cmp	r4, #1
 8006df2:	dc1e      	bgt.n	8006e32 <_strtod_l+0x55e>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <_strtod_l+0x528>
 8006df8:	0006      	movs	r6, r0
 8006dfa:	000f      	movs	r7, r1
 8006dfc:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <_strtod_l+0x5f0>)
 8006dfe:	0032      	movs	r2, r6
 8006e00:	18ff      	adds	r7, r7, r3
 8006e02:	9b08      	ldr	r3, [sp, #32]
 8006e04:	00dd      	lsls	r5, r3, #3
 8006e06:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <_strtod_l+0x5ec>)
 8006e08:	195d      	adds	r5, r3, r5
 8006e0a:	6828      	ldr	r0, [r5, #0]
 8006e0c:	6869      	ldr	r1, [r5, #4]
 8006e0e:	003b      	movs	r3, r7
 8006e10:	f7fa faf8 	bl	8001404 <__aeabi_dmul>
 8006e14:	4b25      	ldr	r3, [pc, #148]	; (8006eac <_strtod_l+0x5d8>)
 8006e16:	4a2c      	ldr	r2, [pc, #176]	; (8006ec8 <_strtod_l+0x5f4>)
 8006e18:	0006      	movs	r6, r0
 8006e1a:	400b      	ands	r3, r1
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d8be      	bhi.n	8006d9e <_strtod_l+0x4ca>
 8006e20:	4a2a      	ldr	r2, [pc, #168]	; (8006ecc <_strtod_l+0x5f8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d913      	bls.n	8006e4e <_strtod_l+0x57a>
 8006e26:	2601      	movs	r6, #1
 8006e28:	4f29      	ldr	r7, [pc, #164]	; (8006ed0 <_strtod_l+0x5fc>)
 8006e2a:	4276      	negs	r6, r6
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9308      	str	r3, [sp, #32]
 8006e30:	e087      	b.n	8006f42 <_strtod_l+0x66e>
 8006e32:	2201      	movs	r2, #1
 8006e34:	4214      	tst	r4, r2
 8006e36:	d004      	beq.n	8006e42 <_strtod_l+0x56e>
 8006e38:	682a      	ldr	r2, [r5, #0]
 8006e3a:	686b      	ldr	r3, [r5, #4]
 8006e3c:	f7fa fae2 	bl	8001404 <__aeabi_dmul>
 8006e40:	2301      	movs	r3, #1
 8006e42:	9a08      	ldr	r2, [sp, #32]
 8006e44:	1064      	asrs	r4, r4, #1
 8006e46:	3201      	adds	r2, #1
 8006e48:	9208      	str	r2, [sp, #32]
 8006e4a:	3508      	adds	r5, #8
 8006e4c:	e7d0      	b.n	8006df0 <_strtod_l+0x51c>
 8006e4e:	23d4      	movs	r3, #212	; 0xd4
 8006e50:	049b      	lsls	r3, r3, #18
 8006e52:	18cf      	adds	r7, r1, r3
 8006e54:	e7ea      	b.n	8006e2c <_strtod_l+0x558>
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	d0e8      	beq.n	8006e2c <_strtod_l+0x558>
 8006e5a:	4264      	negs	r4, r4
 8006e5c:	220f      	movs	r2, #15
 8006e5e:	0023      	movs	r3, r4
 8006e60:	4013      	ands	r3, r2
 8006e62:	4214      	tst	r4, r2
 8006e64:	d00a      	beq.n	8006e7c <_strtod_l+0x5a8>
 8006e66:	00da      	lsls	r2, r3, #3
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <_strtod_l+0x5e8>)
 8006e6a:	0030      	movs	r0, r6
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	0039      	movs	r1, r7
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f7f9 fec4 	bl	8000c00 <__aeabi_ddiv>
 8006e78:	0006      	movs	r6, r0
 8006e7a:	000f      	movs	r7, r1
 8006e7c:	1124      	asrs	r4, r4, #4
 8006e7e:	d0d5      	beq.n	8006e2c <_strtod_l+0x558>
 8006e80:	2c1f      	cmp	r4, #31
 8006e82:	dd27      	ble.n	8006ed4 <_strtod_l+0x600>
 8006e84:	2300      	movs	r3, #0
 8006e86:	9306      	str	r3, [sp, #24]
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	2322      	movs	r3, #34	; 0x22
 8006e90:	9a05      	ldr	r2, [sp, #20]
 8006e92:	2600      	movs	r6, #0
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e98:	2700      	movs	r7, #0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d18d      	bne.n	8006dba <_strtod_l+0x4e6>
 8006e9e:	e560      	b.n	8006962 <_strtod_l+0x8e>
 8006ea0:	00004e1f 	.word	0x00004e1f
 8006ea4:	0800a6d1 	.word	0x0800a6d1
 8006ea8:	0800a714 	.word	0x0800a714
 8006eac:	7ff00000 	.word	0x7ff00000
 8006eb0:	0800a6c9 	.word	0x0800a6c9
 8006eb4:	0800a854 	.word	0x0800a854
 8006eb8:	0800ab68 	.word	0x0800ab68
 8006ebc:	0800aa48 	.word	0x0800aa48
 8006ec0:	0800aa20 	.word	0x0800aa20
 8006ec4:	fcb00000 	.word	0xfcb00000
 8006ec8:	7ca00000 	.word	0x7ca00000
 8006ecc:	7c900000 	.word	0x7c900000
 8006ed0:	7fefffff 	.word	0x7fefffff
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	0022      	movs	r2, r4
 8006ed8:	401a      	ands	r2, r3
 8006eda:	9208      	str	r2, [sp, #32]
 8006edc:	421c      	tst	r4, r3
 8006ede:	d001      	beq.n	8006ee4 <_strtod_l+0x610>
 8006ee0:	335a      	adds	r3, #90	; 0x5a
 8006ee2:	9308      	str	r3, [sp, #32]
 8006ee4:	0030      	movs	r0, r6
 8006ee6:	0039      	movs	r1, r7
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4dc5      	ldr	r5, [pc, #788]	; (8007200 <_strtod_l+0x92c>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	4214      	tst	r4, r2
 8006ef0:	d004      	beq.n	8006efc <_strtod_l+0x628>
 8006ef2:	682a      	ldr	r2, [r5, #0]
 8006ef4:	686b      	ldr	r3, [r5, #4]
 8006ef6:	f7fa fa85 	bl	8001404 <__aeabi_dmul>
 8006efa:	2301      	movs	r3, #1
 8006efc:	1064      	asrs	r4, r4, #1
 8006efe:	3508      	adds	r5, #8
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d1f3      	bne.n	8006eec <_strtod_l+0x618>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <_strtod_l+0x638>
 8006f08:	0006      	movs	r6, r0
 8006f0a:	000f      	movs	r7, r1
 8006f0c:	9b08      	ldr	r3, [sp, #32]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00f      	beq.n	8006f32 <_strtod_l+0x65e>
 8006f12:	236b      	movs	r3, #107	; 0x6b
 8006f14:	007a      	lsls	r2, r7, #1
 8006f16:	0d52      	lsrs	r2, r2, #21
 8006f18:	0039      	movs	r1, r7
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd08      	ble.n	8006f32 <_strtod_l+0x65e>
 8006f20:	2b1f      	cmp	r3, #31
 8006f22:	dc00      	bgt.n	8006f26 <_strtod_l+0x652>
 8006f24:	e124      	b.n	8007170 <_strtod_l+0x89c>
 8006f26:	2600      	movs	r6, #0
 8006f28:	2b34      	cmp	r3, #52	; 0x34
 8006f2a:	dc00      	bgt.n	8006f2e <_strtod_l+0x65a>
 8006f2c:	e119      	b.n	8007162 <_strtod_l+0x88e>
 8006f2e:	27dc      	movs	r7, #220	; 0xdc
 8006f30:	04bf      	lsls	r7, r7, #18
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	0030      	movs	r0, r6
 8006f38:	0039      	movs	r1, r7
 8006f3a:	f7f9 fa87 	bl	800044c <__aeabi_dcmpeq>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d1a0      	bne.n	8006e84 <_strtod_l+0x5b0>
 8006f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	9805      	ldr	r0, [sp, #20]
 8006f4e:	f001 ff75 	bl	8008e3c <__s2b>
 8006f52:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d100      	bne.n	8006f5a <_strtod_l+0x686>
 8006f58:	e721      	b.n	8006d9e <_strtod_l+0x4ca>
 8006f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5c:	9907      	ldr	r1, [sp, #28]
 8006f5e:	17da      	asrs	r2, r3, #31
 8006f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f62:	1a5b      	subs	r3, r3, r1
 8006f64:	401a      	ands	r2, r3
 8006f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f68:	9215      	str	r2, [sp, #84]	; 0x54
 8006f6a:	43db      	mvns	r3, r3
 8006f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f6e:	17db      	asrs	r3, r3, #31
 8006f70:	401a      	ands	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	921a      	str	r2, [sp, #104]	; 0x68
 8006f76:	9306      	str	r3, [sp, #24]
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7c:	9805      	ldr	r0, [sp, #20]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	f001 feb0 	bl	8008ce4 <_Balloc>
 8006f84:	9009      	str	r0, [sp, #36]	; 0x24
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d100      	bne.n	8006f8c <_strtod_l+0x6b8>
 8006f8a:	e70d      	b.n	8006da8 <_strtod_l+0x4d4>
 8006f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	310c      	adds	r1, #12
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	300c      	adds	r0, #12
 8006f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f9c:	f001 fe88 	bl	8008cb0 <memcpy>
 8006fa0:	ab22      	add	r3, sp, #136	; 0x88
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	ab21      	add	r3, sp, #132	; 0x84
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	0032      	movs	r2, r6
 8006faa:	003b      	movs	r3, r7
 8006fac:	9805      	ldr	r0, [sp, #20]
 8006fae:	9612      	str	r6, [sp, #72]	; 0x48
 8006fb0:	9713      	str	r7, [sp, #76]	; 0x4c
 8006fb2:	f002 fa8f 	bl	80094d4 <__d2b>
 8006fb6:	9020      	str	r0, [sp, #128]	; 0x80
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d100      	bne.n	8006fbe <_strtod_l+0x6ea>
 8006fbc:	e6f4      	b.n	8006da8 <_strtod_l+0x4d4>
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	9805      	ldr	r0, [sp, #20]
 8006fc2:	f001 ffcf 	bl	8008f64 <__i2b>
 8006fc6:	9007      	str	r0, [sp, #28]
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d100      	bne.n	8006fce <_strtod_l+0x6fa>
 8006fcc:	e6ec      	b.n	8006da8 <_strtod_l+0x4d4>
 8006fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fd2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006fd4:	1ad4      	subs	r4, r2, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	db01      	blt.n	8006fde <_strtod_l+0x70a>
 8006fda:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006fdc:	195d      	adds	r5, r3, r5
 8006fde:	9908      	ldr	r1, [sp, #32]
 8006fe0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fe2:	1a5b      	subs	r3, r3, r1
 8006fe4:	2136      	movs	r1, #54	; 0x36
 8006fe6:	189b      	adds	r3, r3, r2
 8006fe8:	1a8a      	subs	r2, r1, r2
 8006fea:	4986      	ldr	r1, [pc, #536]	; (8007204 <_strtod_l+0x930>)
 8006fec:	2001      	movs	r0, #1
 8006fee:	468c      	mov	ip, r1
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	9110      	str	r1, [sp, #64]	; 0x40
 8006ff6:	9014      	str	r0, [sp, #80]	; 0x50
 8006ff8:	4563      	cmp	r3, ip
 8006ffa:	da07      	bge.n	800700c <_strtod_l+0x738>
 8006ffc:	4661      	mov	r1, ip
 8006ffe:	1ac9      	subs	r1, r1, r3
 8007000:	1a52      	subs	r2, r2, r1
 8007002:	291f      	cmp	r1, #31
 8007004:	dd00      	ble.n	8007008 <_strtod_l+0x734>
 8007006:	e0b8      	b.n	800717a <_strtod_l+0x8a6>
 8007008:	4088      	lsls	r0, r1
 800700a:	9014      	str	r0, [sp, #80]	; 0x50
 800700c:	18ab      	adds	r3, r5, r2
 800700e:	930c      	str	r3, [sp, #48]	; 0x30
 8007010:	18a4      	adds	r4, r4, r2
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007016:	191c      	adds	r4, r3, r4
 8007018:	002b      	movs	r3, r5
 800701a:	4295      	cmp	r5, r2
 800701c:	dd00      	ble.n	8007020 <_strtod_l+0x74c>
 800701e:	0013      	movs	r3, r2
 8007020:	42a3      	cmp	r3, r4
 8007022:	dd00      	ble.n	8007026 <_strtod_l+0x752>
 8007024:	0023      	movs	r3, r4
 8007026:	2b00      	cmp	r3, #0
 8007028:	dd04      	ble.n	8007034 <_strtod_l+0x760>
 800702a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800702c:	1ae4      	subs	r4, r4, r3
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	920c      	str	r2, [sp, #48]	; 0x30
 8007032:	1aed      	subs	r5, r5, r3
 8007034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007036:	2b00      	cmp	r3, #0
 8007038:	dd17      	ble.n	800706a <_strtod_l+0x796>
 800703a:	001a      	movs	r2, r3
 800703c:	9907      	ldr	r1, [sp, #28]
 800703e:	9805      	ldr	r0, [sp, #20]
 8007040:	f002 f856 	bl	80090f0 <__pow5mult>
 8007044:	9007      	str	r0, [sp, #28]
 8007046:	2800      	cmp	r0, #0
 8007048:	d100      	bne.n	800704c <_strtod_l+0x778>
 800704a:	e6ad      	b.n	8006da8 <_strtod_l+0x4d4>
 800704c:	0001      	movs	r1, r0
 800704e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007050:	9805      	ldr	r0, [sp, #20]
 8007052:	f001 ff9d 	bl	8008f90 <__multiply>
 8007056:	900f      	str	r0, [sp, #60]	; 0x3c
 8007058:	2800      	cmp	r0, #0
 800705a:	d100      	bne.n	800705e <_strtod_l+0x78a>
 800705c:	e6a4      	b.n	8006da8 <_strtod_l+0x4d4>
 800705e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007060:	9805      	ldr	r0, [sp, #20]
 8007062:	f001 fe83 	bl	8008d6c <_Bfree>
 8007066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007068:	9320      	str	r3, [sp, #128]	; 0x80
 800706a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd00      	ble.n	8007072 <_strtod_l+0x79e>
 8007070:	e089      	b.n	8007186 <_strtod_l+0x8b2>
 8007072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	dd08      	ble.n	800708a <_strtod_l+0x7b6>
 8007078:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800707a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800707c:	9805      	ldr	r0, [sp, #20]
 800707e:	f002 f837 	bl	80090f0 <__pow5mult>
 8007082:	9009      	str	r0, [sp, #36]	; 0x24
 8007084:	2800      	cmp	r0, #0
 8007086:	d100      	bne.n	800708a <_strtod_l+0x7b6>
 8007088:	e68e      	b.n	8006da8 <_strtod_l+0x4d4>
 800708a:	2c00      	cmp	r4, #0
 800708c:	dd08      	ble.n	80070a0 <_strtod_l+0x7cc>
 800708e:	0022      	movs	r2, r4
 8007090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007092:	9805      	ldr	r0, [sp, #20]
 8007094:	f002 f888 	bl	80091a8 <__lshift>
 8007098:	9009      	str	r0, [sp, #36]	; 0x24
 800709a:	2800      	cmp	r0, #0
 800709c:	d100      	bne.n	80070a0 <_strtod_l+0x7cc>
 800709e:	e683      	b.n	8006da8 <_strtod_l+0x4d4>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	dd08      	ble.n	80070b6 <_strtod_l+0x7e2>
 80070a4:	002a      	movs	r2, r5
 80070a6:	9907      	ldr	r1, [sp, #28]
 80070a8:	9805      	ldr	r0, [sp, #20]
 80070aa:	f002 f87d 	bl	80091a8 <__lshift>
 80070ae:	9007      	str	r0, [sp, #28]
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d100      	bne.n	80070b6 <_strtod_l+0x7e2>
 80070b4:	e678      	b.n	8006da8 <_strtod_l+0x4d4>
 80070b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80070ba:	9805      	ldr	r0, [sp, #20]
 80070bc:	f002 f8fe 	bl	80092bc <__mdiff>
 80070c0:	9006      	str	r0, [sp, #24]
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d100      	bne.n	80070c8 <_strtod_l+0x7f4>
 80070c6:	e66f      	b.n	8006da8 <_strtod_l+0x4d4>
 80070c8:	2200      	movs	r2, #0
 80070ca:	68c3      	ldr	r3, [r0, #12]
 80070cc:	9907      	ldr	r1, [sp, #28]
 80070ce:	60c2      	str	r2, [r0, #12]
 80070d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d2:	f002 f8d7 	bl	8009284 <__mcmp>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	da5f      	bge.n	800719a <_strtod_l+0x8c6>
 80070da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070dc:	4333      	orrs	r3, r6
 80070de:	d000      	beq.n	80070e2 <_strtod_l+0x80e>
 80070e0:	e08a      	b.n	80071f8 <_strtod_l+0x924>
 80070e2:	033b      	lsls	r3, r7, #12
 80070e4:	d000      	beq.n	80070e8 <_strtod_l+0x814>
 80070e6:	e087      	b.n	80071f8 <_strtod_l+0x924>
 80070e8:	22d6      	movs	r2, #214	; 0xd6
 80070ea:	4b47      	ldr	r3, [pc, #284]	; (8007208 <_strtod_l+0x934>)
 80070ec:	04d2      	lsls	r2, r2, #19
 80070ee:	403b      	ands	r3, r7
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d800      	bhi.n	80070f6 <_strtod_l+0x822>
 80070f4:	e080      	b.n	80071f8 <_strtod_l+0x924>
 80070f6:	9b06      	ldr	r3, [sp, #24]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	930a      	str	r3, [sp, #40]	; 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <_strtod_l+0x836>
 8007100:	9b06      	ldr	r3, [sp, #24]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	930a      	str	r3, [sp, #40]	; 0x28
 8007106:	2b01      	cmp	r3, #1
 8007108:	dd76      	ble.n	80071f8 <_strtod_l+0x924>
 800710a:	9906      	ldr	r1, [sp, #24]
 800710c:	2201      	movs	r2, #1
 800710e:	9805      	ldr	r0, [sp, #20]
 8007110:	f002 f84a 	bl	80091a8 <__lshift>
 8007114:	9907      	ldr	r1, [sp, #28]
 8007116:	9006      	str	r0, [sp, #24]
 8007118:	f002 f8b4 	bl	8009284 <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	dd6b      	ble.n	80071f8 <_strtod_l+0x924>
 8007120:	9908      	ldr	r1, [sp, #32]
 8007122:	003b      	movs	r3, r7
 8007124:	4a38      	ldr	r2, [pc, #224]	; (8007208 <_strtod_l+0x934>)
 8007126:	2900      	cmp	r1, #0
 8007128:	d100      	bne.n	800712c <_strtod_l+0x858>
 800712a:	e092      	b.n	8007252 <_strtod_l+0x97e>
 800712c:	0011      	movs	r1, r2
 800712e:	20d6      	movs	r0, #214	; 0xd6
 8007130:	4039      	ands	r1, r7
 8007132:	04c0      	lsls	r0, r0, #19
 8007134:	4281      	cmp	r1, r0
 8007136:	dd00      	ble.n	800713a <_strtod_l+0x866>
 8007138:	e08b      	b.n	8007252 <_strtod_l+0x97e>
 800713a:	23dc      	movs	r3, #220	; 0xdc
 800713c:	049b      	lsls	r3, r3, #18
 800713e:	4299      	cmp	r1, r3
 8007140:	dc00      	bgt.n	8007144 <_strtod_l+0x870>
 8007142:	e6a4      	b.n	8006e8e <_strtod_l+0x5ba>
 8007144:	0030      	movs	r0, r6
 8007146:	0039      	movs	r1, r7
 8007148:	2200      	movs	r2, #0
 800714a:	4b30      	ldr	r3, [pc, #192]	; (800720c <_strtod_l+0x938>)
 800714c:	f7fa f95a 	bl	8001404 <__aeabi_dmul>
 8007150:	0006      	movs	r6, r0
 8007152:	000f      	movs	r7, r1
 8007154:	4308      	orrs	r0, r1
 8007156:	d000      	beq.n	800715a <_strtod_l+0x886>
 8007158:	e62f      	b.n	8006dba <_strtod_l+0x4e6>
 800715a:	2322      	movs	r3, #34	; 0x22
 800715c:	9a05      	ldr	r2, [sp, #20]
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e62b      	b.n	8006dba <_strtod_l+0x4e6>
 8007162:	234b      	movs	r3, #75	; 0x4b
 8007164:	1a9a      	subs	r2, r3, r2
 8007166:	3b4c      	subs	r3, #76	; 0x4c
 8007168:	4093      	lsls	r3, r2
 800716a:	4019      	ands	r1, r3
 800716c:	000f      	movs	r7, r1
 800716e:	e6e0      	b.n	8006f32 <_strtod_l+0x65e>
 8007170:	2201      	movs	r2, #1
 8007172:	4252      	negs	r2, r2
 8007174:	409a      	lsls	r2, r3
 8007176:	4016      	ands	r6, r2
 8007178:	e6db      	b.n	8006f32 <_strtod_l+0x65e>
 800717a:	4925      	ldr	r1, [pc, #148]	; (8007210 <_strtod_l+0x93c>)
 800717c:	1acb      	subs	r3, r1, r3
 800717e:	0001      	movs	r1, r0
 8007180:	4099      	lsls	r1, r3
 8007182:	9110      	str	r1, [sp, #64]	; 0x40
 8007184:	e741      	b.n	800700a <_strtod_l+0x736>
 8007186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007188:	9920      	ldr	r1, [sp, #128]	; 0x80
 800718a:	9805      	ldr	r0, [sp, #20]
 800718c:	f002 f80c 	bl	80091a8 <__lshift>
 8007190:	9020      	str	r0, [sp, #128]	; 0x80
 8007192:	2800      	cmp	r0, #0
 8007194:	d000      	beq.n	8007198 <_strtod_l+0x8c4>
 8007196:	e76c      	b.n	8007072 <_strtod_l+0x79e>
 8007198:	e606      	b.n	8006da8 <_strtod_l+0x4d4>
 800719a:	970c      	str	r7, [sp, #48]	; 0x30
 800719c:	2800      	cmp	r0, #0
 800719e:	d176      	bne.n	800728e <_strtod_l+0x9ba>
 80071a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071a2:	033b      	lsls	r3, r7, #12
 80071a4:	0b1b      	lsrs	r3, r3, #12
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d038      	beq.n	800721c <_strtod_l+0x948>
 80071aa:	4a1a      	ldr	r2, [pc, #104]	; (8007214 <_strtod_l+0x940>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d138      	bne.n	8007222 <_strtod_l+0x94e>
 80071b0:	2201      	movs	r2, #1
 80071b2:	9b08      	ldr	r3, [sp, #32]
 80071b4:	4252      	negs	r2, r2
 80071b6:	0031      	movs	r1, r6
 80071b8:	0010      	movs	r0, r2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <_strtod_l+0x902>
 80071be:	24d4      	movs	r4, #212	; 0xd4
 80071c0:	4b11      	ldr	r3, [pc, #68]	; (8007208 <_strtod_l+0x934>)
 80071c2:	0010      	movs	r0, r2
 80071c4:	403b      	ands	r3, r7
 80071c6:	04e4      	lsls	r4, r4, #19
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d804      	bhi.n	80071d6 <_strtod_l+0x902>
 80071cc:	306c      	adds	r0, #108	; 0x6c
 80071ce:	0d1b      	lsrs	r3, r3, #20
 80071d0:	1ac3      	subs	r3, r0, r3
 80071d2:	409a      	lsls	r2, r3
 80071d4:	0010      	movs	r0, r2
 80071d6:	4281      	cmp	r1, r0
 80071d8:	d123      	bne.n	8007222 <_strtod_l+0x94e>
 80071da:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <_strtod_l+0x944>)
 80071dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071de:	429a      	cmp	r2, r3
 80071e0:	d102      	bne.n	80071e8 <_strtod_l+0x914>
 80071e2:	1c4b      	adds	r3, r1, #1
 80071e4:	d100      	bne.n	80071e8 <_strtod_l+0x914>
 80071e6:	e5df      	b.n	8006da8 <_strtod_l+0x4d4>
 80071e8:	4b07      	ldr	r3, [pc, #28]	; (8007208 <_strtod_l+0x934>)
 80071ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071ec:	2600      	movs	r6, #0
 80071ee:	401a      	ands	r2, r3
 80071f0:	0013      	movs	r3, r2
 80071f2:	2280      	movs	r2, #128	; 0x80
 80071f4:	0352      	lsls	r2, r2, #13
 80071f6:	189f      	adds	r7, r3, r2
 80071f8:	9b08      	ldr	r3, [sp, #32]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1a2      	bne.n	8007144 <_strtod_l+0x870>
 80071fe:	e5dc      	b.n	8006dba <_strtod_l+0x4e6>
 8007200:	0800a728 	.word	0x0800a728
 8007204:	fffffc02 	.word	0xfffffc02
 8007208:	7ff00000 	.word	0x7ff00000
 800720c:	39500000 	.word	0x39500000
 8007210:	fffffbe2 	.word	0xfffffbe2
 8007214:	000fffff 	.word	0x000fffff
 8007218:	7fefffff 	.word	0x7fefffff
 800721c:	4333      	orrs	r3, r6
 800721e:	d100      	bne.n	8007222 <_strtod_l+0x94e>
 8007220:	e77e      	b.n	8007120 <_strtod_l+0x84c>
 8007222:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01d      	beq.n	8007264 <_strtod_l+0x990>
 8007228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800722a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800722c:	4213      	tst	r3, r2
 800722e:	d0e3      	beq.n	80071f8 <_strtod_l+0x924>
 8007230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007232:	0030      	movs	r0, r6
 8007234:	0039      	movs	r1, r7
 8007236:	9a08      	ldr	r2, [sp, #32]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <_strtod_l+0x998>
 800723c:	f7ff fb32 	bl	80068a4 <sulp>
 8007240:	0002      	movs	r2, r0
 8007242:	000b      	movs	r3, r1
 8007244:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007246:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007248:	f7f9 f99e 	bl	8000588 <__aeabi_dadd>
 800724c:	0006      	movs	r6, r0
 800724e:	000f      	movs	r7, r1
 8007250:	e7d2      	b.n	80071f8 <_strtod_l+0x924>
 8007252:	2601      	movs	r6, #1
 8007254:	4013      	ands	r3, r2
 8007256:	4a99      	ldr	r2, [pc, #612]	; (80074bc <_strtod_l+0xbe8>)
 8007258:	4276      	negs	r6, r6
 800725a:	189b      	adds	r3, r3, r2
 800725c:	4a98      	ldr	r2, [pc, #608]	; (80074c0 <_strtod_l+0xbec>)
 800725e:	431a      	orrs	r2, r3
 8007260:	0017      	movs	r7, r2
 8007262:	e7c9      	b.n	80071f8 <_strtod_l+0x924>
 8007264:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007266:	4233      	tst	r3, r6
 8007268:	d0c6      	beq.n	80071f8 <_strtod_l+0x924>
 800726a:	e7e1      	b.n	8007230 <_strtod_l+0x95c>
 800726c:	f7ff fb1a 	bl	80068a4 <sulp>
 8007270:	0002      	movs	r2, r0
 8007272:	000b      	movs	r3, r1
 8007274:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007276:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007278:	f7fa fb30 	bl	80018dc <__aeabi_dsub>
 800727c:	2200      	movs	r2, #0
 800727e:	2300      	movs	r3, #0
 8007280:	0006      	movs	r6, r0
 8007282:	000f      	movs	r7, r1
 8007284:	f7f9 f8e2 	bl	800044c <__aeabi_dcmpeq>
 8007288:	2800      	cmp	r0, #0
 800728a:	d0b5      	beq.n	80071f8 <_strtod_l+0x924>
 800728c:	e5ff      	b.n	8006e8e <_strtod_l+0x5ba>
 800728e:	9907      	ldr	r1, [sp, #28]
 8007290:	9806      	ldr	r0, [sp, #24]
 8007292:	f002 f983 	bl	800959c <__ratio>
 8007296:	2380      	movs	r3, #128	; 0x80
 8007298:	2200      	movs	r2, #0
 800729a:	05db      	lsls	r3, r3, #23
 800729c:	0004      	movs	r4, r0
 800729e:	000d      	movs	r5, r1
 80072a0:	f7f9 f8e4 	bl	800046c <__aeabi_dcmple>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d075      	beq.n	8007394 <_strtod_l+0xac0>
 80072a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d047      	beq.n	800733e <_strtod_l+0xa6a>
 80072ae:	2300      	movs	r3, #0
 80072b0:	4c84      	ldr	r4, [pc, #528]	; (80074c4 <_strtod_l+0xbf0>)
 80072b2:	2500      	movs	r5, #0
 80072b4:	9310      	str	r3, [sp, #64]	; 0x40
 80072b6:	9411      	str	r4, [sp, #68]	; 0x44
 80072b8:	4c82      	ldr	r4, [pc, #520]	; (80074c4 <_strtod_l+0xbf0>)
 80072ba:	4a83      	ldr	r2, [pc, #524]	; (80074c8 <_strtod_l+0xbf4>)
 80072bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072be:	4013      	ands	r3, r2
 80072c0:	9314      	str	r3, [sp, #80]	; 0x50
 80072c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072c4:	4b81      	ldr	r3, [pc, #516]	; (80074cc <_strtod_l+0xbf8>)
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d000      	beq.n	80072cc <_strtod_l+0x9f8>
 80072ca:	e0ac      	b.n	8007426 <_strtod_l+0xb52>
 80072cc:	4a80      	ldr	r2, [pc, #512]	; (80074d0 <_strtod_l+0xbfc>)
 80072ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d0:	4694      	mov	ip, r2
 80072d2:	4463      	add	r3, ip
 80072d4:	001f      	movs	r7, r3
 80072d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072da:	0030      	movs	r0, r6
 80072dc:	0039      	movs	r1, r7
 80072de:	920c      	str	r2, [sp, #48]	; 0x30
 80072e0:	930d      	str	r3, [sp, #52]	; 0x34
 80072e2:	f002 f883 	bl	80093ec <__ulp>
 80072e6:	0002      	movs	r2, r0
 80072e8:	000b      	movs	r3, r1
 80072ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072ee:	f7fa f889 	bl	8001404 <__aeabi_dmul>
 80072f2:	0032      	movs	r2, r6
 80072f4:	003b      	movs	r3, r7
 80072f6:	f7f9 f947 	bl	8000588 <__aeabi_dadd>
 80072fa:	4a73      	ldr	r2, [pc, #460]	; (80074c8 <_strtod_l+0xbf4>)
 80072fc:	4b75      	ldr	r3, [pc, #468]	; (80074d4 <_strtod_l+0xc00>)
 80072fe:	0006      	movs	r6, r0
 8007300:	400a      	ands	r2, r1
 8007302:	429a      	cmp	r2, r3
 8007304:	d95e      	bls.n	80073c4 <_strtod_l+0xaf0>
 8007306:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007308:	4b73      	ldr	r3, [pc, #460]	; (80074d8 <_strtod_l+0xc04>)
 800730a:	429a      	cmp	r2, r3
 800730c:	d103      	bne.n	8007316 <_strtod_l+0xa42>
 800730e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007310:	3301      	adds	r3, #1
 8007312:	d100      	bne.n	8007316 <_strtod_l+0xa42>
 8007314:	e548      	b.n	8006da8 <_strtod_l+0x4d4>
 8007316:	2601      	movs	r6, #1
 8007318:	4f6f      	ldr	r7, [pc, #444]	; (80074d8 <_strtod_l+0xc04>)
 800731a:	4276      	negs	r6, r6
 800731c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800731e:	9805      	ldr	r0, [sp, #20]
 8007320:	f001 fd24 	bl	8008d6c <_Bfree>
 8007324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007326:	9805      	ldr	r0, [sp, #20]
 8007328:	f001 fd20 	bl	8008d6c <_Bfree>
 800732c:	9907      	ldr	r1, [sp, #28]
 800732e:	9805      	ldr	r0, [sp, #20]
 8007330:	f001 fd1c 	bl	8008d6c <_Bfree>
 8007334:	9906      	ldr	r1, [sp, #24]
 8007336:	9805      	ldr	r0, [sp, #20]
 8007338:	f001 fd18 	bl	8008d6c <_Bfree>
 800733c:	e61d      	b.n	8006f7a <_strtod_l+0x6a6>
 800733e:	2e00      	cmp	r6, #0
 8007340:	d11c      	bne.n	800737c <_strtod_l+0xaa8>
 8007342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007344:	031b      	lsls	r3, r3, #12
 8007346:	d11f      	bne.n	8007388 <_strtod_l+0xab4>
 8007348:	2200      	movs	r2, #0
 800734a:	0020      	movs	r0, r4
 800734c:	0029      	movs	r1, r5
 800734e:	4b5d      	ldr	r3, [pc, #372]	; (80074c4 <_strtod_l+0xbf0>)
 8007350:	f7f9 f882 	bl	8000458 <__aeabi_dcmplt>
 8007354:	2800      	cmp	r0, #0
 8007356:	d11a      	bne.n	800738e <_strtod_l+0xaba>
 8007358:	0020      	movs	r0, r4
 800735a:	0029      	movs	r1, r5
 800735c:	2200      	movs	r2, #0
 800735e:	4b5f      	ldr	r3, [pc, #380]	; (80074dc <_strtod_l+0xc08>)
 8007360:	f7fa f850 	bl	8001404 <__aeabi_dmul>
 8007364:	0005      	movs	r5, r0
 8007366:	000c      	movs	r4, r1
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	18e3      	adds	r3, r4, r3
 800736e:	951c      	str	r5, [sp, #112]	; 0x70
 8007370:	931d      	str	r3, [sp, #116]	; 0x74
 8007372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007376:	9210      	str	r2, [sp, #64]	; 0x40
 8007378:	9311      	str	r3, [sp, #68]	; 0x44
 800737a:	e79e      	b.n	80072ba <_strtod_l+0x9e6>
 800737c:	2e01      	cmp	r6, #1
 800737e:	d103      	bne.n	8007388 <_strtod_l+0xab4>
 8007380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007382:	2b00      	cmp	r3, #0
 8007384:	d100      	bne.n	8007388 <_strtod_l+0xab4>
 8007386:	e582      	b.n	8006e8e <_strtod_l+0x5ba>
 8007388:	2300      	movs	r3, #0
 800738a:	4c55      	ldr	r4, [pc, #340]	; (80074e0 <_strtod_l+0xc0c>)
 800738c:	e791      	b.n	80072b2 <_strtod_l+0x9de>
 800738e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007390:	4c52      	ldr	r4, [pc, #328]	; (80074dc <_strtod_l+0xc08>)
 8007392:	e7e9      	b.n	8007368 <_strtod_l+0xa94>
 8007394:	2200      	movs	r2, #0
 8007396:	0020      	movs	r0, r4
 8007398:	0029      	movs	r1, r5
 800739a:	4b50      	ldr	r3, [pc, #320]	; (80074dc <_strtod_l+0xc08>)
 800739c:	f7fa f832 	bl	8001404 <__aeabi_dmul>
 80073a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073a2:	0005      	movs	r5, r0
 80073a4:	000b      	movs	r3, r1
 80073a6:	000c      	movs	r4, r1
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d107      	bne.n	80073bc <_strtod_l+0xae8>
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	0612      	lsls	r2, r2, #24
 80073b0:	188b      	adds	r3, r1, r2
 80073b2:	9016      	str	r0, [sp, #88]	; 0x58
 80073b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80073b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ba:	e7dc      	b.n	8007376 <_strtod_l+0xaa2>
 80073bc:	0002      	movs	r2, r0
 80073be:	9216      	str	r2, [sp, #88]	; 0x58
 80073c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80073c2:	e7f8      	b.n	80073b6 <_strtod_l+0xae2>
 80073c4:	23d4      	movs	r3, #212	; 0xd4
 80073c6:	049b      	lsls	r3, r3, #18
 80073c8:	18cf      	adds	r7, r1, r3
 80073ca:	9b08      	ldr	r3, [sp, #32]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1a5      	bne.n	800731c <_strtod_l+0xa48>
 80073d0:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <_strtod_l+0xbf4>)
 80073d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073d4:	403b      	ands	r3, r7
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d1a0      	bne.n	800731c <_strtod_l+0xa48>
 80073da:	0028      	movs	r0, r5
 80073dc:	0021      	movs	r1, r4
 80073de:	f7f9 f881 	bl	80004e4 <__aeabi_d2lz>
 80073e2:	f7f9 f8bb 	bl	800055c <__aeabi_l2d>
 80073e6:	0002      	movs	r2, r0
 80073e8:	000b      	movs	r3, r1
 80073ea:	0028      	movs	r0, r5
 80073ec:	0021      	movs	r1, r4
 80073ee:	f7fa fa75 	bl	80018dc <__aeabi_dsub>
 80073f2:	033b      	lsls	r3, r7, #12
 80073f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073f6:	0b1b      	lsrs	r3, r3, #12
 80073f8:	4333      	orrs	r3, r6
 80073fa:	4313      	orrs	r3, r2
 80073fc:	0004      	movs	r4, r0
 80073fe:	000d      	movs	r5, r1
 8007400:	4a38      	ldr	r2, [pc, #224]	; (80074e4 <_strtod_l+0xc10>)
 8007402:	2b00      	cmp	r3, #0
 8007404:	d055      	beq.n	80074b2 <_strtod_l+0xbde>
 8007406:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <_strtod_l+0xc14>)
 8007408:	f7f9 f826 	bl	8000458 <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d000      	beq.n	8007412 <_strtod_l+0xb3e>
 8007410:	e4d3      	b.n	8006dba <_strtod_l+0x4e6>
 8007412:	0020      	movs	r0, r4
 8007414:	0029      	movs	r1, r5
 8007416:	4a35      	ldr	r2, [pc, #212]	; (80074ec <_strtod_l+0xc18>)
 8007418:	4b30      	ldr	r3, [pc, #192]	; (80074dc <_strtod_l+0xc08>)
 800741a:	f7f9 f831 	bl	8000480 <__aeabi_dcmpgt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d100      	bne.n	8007424 <_strtod_l+0xb50>
 8007422:	e77b      	b.n	800731c <_strtod_l+0xa48>
 8007424:	e4c9      	b.n	8006dba <_strtod_l+0x4e6>
 8007426:	9b08      	ldr	r3, [sp, #32]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d02b      	beq.n	8007484 <_strtod_l+0xbb0>
 800742c:	23d4      	movs	r3, #212	; 0xd4
 800742e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007430:	04db      	lsls	r3, r3, #19
 8007432:	429a      	cmp	r2, r3
 8007434:	d826      	bhi.n	8007484 <_strtod_l+0xbb0>
 8007436:	0028      	movs	r0, r5
 8007438:	0021      	movs	r1, r4
 800743a:	4a2d      	ldr	r2, [pc, #180]	; (80074f0 <_strtod_l+0xc1c>)
 800743c:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <_strtod_l+0xc20>)
 800743e:	f7f9 f815 	bl	800046c <__aeabi_dcmple>
 8007442:	2800      	cmp	r0, #0
 8007444:	d017      	beq.n	8007476 <_strtod_l+0xba2>
 8007446:	0028      	movs	r0, r5
 8007448:	0021      	movs	r1, r4
 800744a:	f7f9 f82d 	bl	80004a8 <__aeabi_d2uiz>
 800744e:	2800      	cmp	r0, #0
 8007450:	d100      	bne.n	8007454 <_strtod_l+0xb80>
 8007452:	3001      	adds	r0, #1
 8007454:	f7fa fe58 	bl	8002108 <__aeabi_ui2d>
 8007458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800745a:	0005      	movs	r5, r0
 800745c:	000b      	movs	r3, r1
 800745e:	000c      	movs	r4, r1
 8007460:	2a00      	cmp	r2, #0
 8007462:	d122      	bne.n	80074aa <_strtod_l+0xbd6>
 8007464:	2280      	movs	r2, #128	; 0x80
 8007466:	0612      	lsls	r2, r2, #24
 8007468:	188b      	adds	r3, r1, r2
 800746a:	9018      	str	r0, [sp, #96]	; 0x60
 800746c:	9319      	str	r3, [sp, #100]	; 0x64
 800746e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007472:	9210      	str	r2, [sp, #64]	; 0x40
 8007474:	9311      	str	r3, [sp, #68]	; 0x44
 8007476:	22d6      	movs	r2, #214	; 0xd6
 8007478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800747a:	04d2      	lsls	r2, r2, #19
 800747c:	189b      	adds	r3, r3, r2
 800747e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007480:	1a9b      	subs	r3, r3, r2
 8007482:	9311      	str	r3, [sp, #68]	; 0x44
 8007484:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007486:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007488:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800748a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800748c:	f001 ffae 	bl	80093ec <__ulp>
 8007490:	0002      	movs	r2, r0
 8007492:	000b      	movs	r3, r1
 8007494:	0030      	movs	r0, r6
 8007496:	0039      	movs	r1, r7
 8007498:	f7f9 ffb4 	bl	8001404 <__aeabi_dmul>
 800749c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800749e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074a0:	f7f9 f872 	bl	8000588 <__aeabi_dadd>
 80074a4:	0006      	movs	r6, r0
 80074a6:	000f      	movs	r7, r1
 80074a8:	e78f      	b.n	80073ca <_strtod_l+0xaf6>
 80074aa:	0002      	movs	r2, r0
 80074ac:	9218      	str	r2, [sp, #96]	; 0x60
 80074ae:	9319      	str	r3, [sp, #100]	; 0x64
 80074b0:	e7dd      	b.n	800746e <_strtod_l+0xb9a>
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <_strtod_l+0xc24>)
 80074b4:	f7f8 ffd0 	bl	8000458 <__aeabi_dcmplt>
 80074b8:	e7b1      	b.n	800741e <_strtod_l+0xb4a>
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	fff00000 	.word	0xfff00000
 80074c0:	000fffff 	.word	0x000fffff
 80074c4:	3ff00000 	.word	0x3ff00000
 80074c8:	7ff00000 	.word	0x7ff00000
 80074cc:	7fe00000 	.word	0x7fe00000
 80074d0:	fcb00000 	.word	0xfcb00000
 80074d4:	7c9fffff 	.word	0x7c9fffff
 80074d8:	7fefffff 	.word	0x7fefffff
 80074dc:	3fe00000 	.word	0x3fe00000
 80074e0:	bff00000 	.word	0xbff00000
 80074e4:	94a03595 	.word	0x94a03595
 80074e8:	3fdfffff 	.word	0x3fdfffff
 80074ec:	35afe535 	.word	0x35afe535
 80074f0:	ffc00000 	.word	0xffc00000
 80074f4:	41dfffff 	.word	0x41dfffff
 80074f8:	3fcfffff 	.word	0x3fcfffff

080074fc <_strtod_r>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	4b02      	ldr	r3, [pc, #8]	; (8007508 <_strtod_r+0xc>)
 8007500:	f7ff f9e8 	bl	80068d4 <_strtod_l>
 8007504:	bd10      	pop	{r4, pc}
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	2000008c 	.word	0x2000008c

0800750c <_strtol_l.constprop.0>:
 800750c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750e:	b087      	sub	sp, #28
 8007510:	001e      	movs	r6, r3
 8007512:	9005      	str	r0, [sp, #20]
 8007514:	9101      	str	r1, [sp, #4]
 8007516:	9202      	str	r2, [sp, #8]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d045      	beq.n	80075a8 <_strtol_l.constprop.0+0x9c>
 800751c:	000b      	movs	r3, r1
 800751e:	2e24      	cmp	r6, #36	; 0x24
 8007520:	d842      	bhi.n	80075a8 <_strtol_l.constprop.0+0x9c>
 8007522:	4a3f      	ldr	r2, [pc, #252]	; (8007620 <_strtol_l.constprop.0+0x114>)
 8007524:	2108      	movs	r1, #8
 8007526:	4694      	mov	ip, r2
 8007528:	001a      	movs	r2, r3
 800752a:	4660      	mov	r0, ip
 800752c:	7814      	ldrb	r4, [r2, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	5d00      	ldrb	r0, [r0, r4]
 8007532:	001d      	movs	r5, r3
 8007534:	0007      	movs	r7, r0
 8007536:	400f      	ands	r7, r1
 8007538:	4208      	tst	r0, r1
 800753a:	d1f5      	bne.n	8007528 <_strtol_l.constprop.0+0x1c>
 800753c:	2c2d      	cmp	r4, #45	; 0x2d
 800753e:	d13a      	bne.n	80075b6 <_strtol_l.constprop.0+0xaa>
 8007540:	2701      	movs	r7, #1
 8007542:	781c      	ldrb	r4, [r3, #0]
 8007544:	1c95      	adds	r5, r2, #2
 8007546:	2e00      	cmp	r6, #0
 8007548:	d065      	beq.n	8007616 <_strtol_l.constprop.0+0x10a>
 800754a:	2e10      	cmp	r6, #16
 800754c:	d109      	bne.n	8007562 <_strtol_l.constprop.0+0x56>
 800754e:	2c30      	cmp	r4, #48	; 0x30
 8007550:	d107      	bne.n	8007562 <_strtol_l.constprop.0+0x56>
 8007552:	2220      	movs	r2, #32
 8007554:	782b      	ldrb	r3, [r5, #0]
 8007556:	4393      	bics	r3, r2
 8007558:	2b58      	cmp	r3, #88	; 0x58
 800755a:	d157      	bne.n	800760c <_strtol_l.constprop.0+0x100>
 800755c:	2610      	movs	r6, #16
 800755e:	786c      	ldrb	r4, [r5, #1]
 8007560:	3502      	adds	r5, #2
 8007562:	4b30      	ldr	r3, [pc, #192]	; (8007624 <_strtol_l.constprop.0+0x118>)
 8007564:	0031      	movs	r1, r6
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	0018      	movs	r0, r3
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	f7f8 fe6e 	bl	800024c <__aeabi_uidivmod>
 8007570:	2300      	movs	r3, #0
 8007572:	2201      	movs	r2, #1
 8007574:	4684      	mov	ip, r0
 8007576:	0018      	movs	r0, r3
 8007578:	9104      	str	r1, [sp, #16]
 800757a:	4252      	negs	r2, r2
 800757c:	0021      	movs	r1, r4
 800757e:	3930      	subs	r1, #48	; 0x30
 8007580:	2909      	cmp	r1, #9
 8007582:	d81d      	bhi.n	80075c0 <_strtol_l.constprop.0+0xb4>
 8007584:	000c      	movs	r4, r1
 8007586:	42a6      	cmp	r6, r4
 8007588:	dd28      	ble.n	80075dc <_strtol_l.constprop.0+0xd0>
 800758a:	2b00      	cmp	r3, #0
 800758c:	db24      	blt.n	80075d8 <_strtol_l.constprop.0+0xcc>
 800758e:	0013      	movs	r3, r2
 8007590:	4584      	cmp	ip, r0
 8007592:	d306      	bcc.n	80075a2 <_strtol_l.constprop.0+0x96>
 8007594:	d102      	bne.n	800759c <_strtol_l.constprop.0+0x90>
 8007596:	9904      	ldr	r1, [sp, #16]
 8007598:	42a1      	cmp	r1, r4
 800759a:	db02      	blt.n	80075a2 <_strtol_l.constprop.0+0x96>
 800759c:	2301      	movs	r3, #1
 800759e:	4370      	muls	r0, r6
 80075a0:	1820      	adds	r0, r4, r0
 80075a2:	782c      	ldrb	r4, [r5, #0]
 80075a4:	3501      	adds	r5, #1
 80075a6:	e7e9      	b.n	800757c <_strtol_l.constprop.0+0x70>
 80075a8:	f7fe f9a8 	bl	80058fc <__errno>
 80075ac:	2316      	movs	r3, #22
 80075ae:	6003      	str	r3, [r0, #0]
 80075b0:	2000      	movs	r0, #0
 80075b2:	b007      	add	sp, #28
 80075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b6:	2c2b      	cmp	r4, #43	; 0x2b
 80075b8:	d1c5      	bne.n	8007546 <_strtol_l.constprop.0+0x3a>
 80075ba:	781c      	ldrb	r4, [r3, #0]
 80075bc:	1c95      	adds	r5, r2, #2
 80075be:	e7c2      	b.n	8007546 <_strtol_l.constprop.0+0x3a>
 80075c0:	0021      	movs	r1, r4
 80075c2:	3941      	subs	r1, #65	; 0x41
 80075c4:	2919      	cmp	r1, #25
 80075c6:	d801      	bhi.n	80075cc <_strtol_l.constprop.0+0xc0>
 80075c8:	3c37      	subs	r4, #55	; 0x37
 80075ca:	e7dc      	b.n	8007586 <_strtol_l.constprop.0+0x7a>
 80075cc:	0021      	movs	r1, r4
 80075ce:	3961      	subs	r1, #97	; 0x61
 80075d0:	2919      	cmp	r1, #25
 80075d2:	d803      	bhi.n	80075dc <_strtol_l.constprop.0+0xd0>
 80075d4:	3c57      	subs	r4, #87	; 0x57
 80075d6:	e7d6      	b.n	8007586 <_strtol_l.constprop.0+0x7a>
 80075d8:	0013      	movs	r3, r2
 80075da:	e7e2      	b.n	80075a2 <_strtol_l.constprop.0+0x96>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da09      	bge.n	80075f4 <_strtol_l.constprop.0+0xe8>
 80075e0:	2322      	movs	r3, #34	; 0x22
 80075e2:	9a05      	ldr	r2, [sp, #20]
 80075e4:	9803      	ldr	r0, [sp, #12]
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	9b02      	ldr	r3, [sp, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0e1      	beq.n	80075b2 <_strtol_l.constprop.0+0xa6>
 80075ee:	1e6b      	subs	r3, r5, #1
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	e007      	b.n	8007604 <_strtol_l.constprop.0+0xf8>
 80075f4:	2f00      	cmp	r7, #0
 80075f6:	d000      	beq.n	80075fa <_strtol_l.constprop.0+0xee>
 80075f8:	4240      	negs	r0, r0
 80075fa:	9a02      	ldr	r2, [sp, #8]
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	d0d8      	beq.n	80075b2 <_strtol_l.constprop.0+0xa6>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f4      	bne.n	80075ee <_strtol_l.constprop.0+0xe2>
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	9a01      	ldr	r2, [sp, #4]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e7d2      	b.n	80075b2 <_strtol_l.constprop.0+0xa6>
 800760c:	2430      	movs	r4, #48	; 0x30
 800760e:	2e00      	cmp	r6, #0
 8007610:	d1a7      	bne.n	8007562 <_strtol_l.constprop.0+0x56>
 8007612:	3608      	adds	r6, #8
 8007614:	e7a5      	b.n	8007562 <_strtol_l.constprop.0+0x56>
 8007616:	2c30      	cmp	r4, #48	; 0x30
 8007618:	d09b      	beq.n	8007552 <_strtol_l.constprop.0+0x46>
 800761a:	260a      	movs	r6, #10
 800761c:	e7a1      	b.n	8007562 <_strtol_l.constprop.0+0x56>
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	0800a751 	.word	0x0800a751
 8007624:	7fffffff 	.word	0x7fffffff

08007628 <_strtol_r>:
 8007628:	b510      	push	{r4, lr}
 800762a:	f7ff ff6f 	bl	800750c <_strtol_l.constprop.0>
 800762e:	bd10      	pop	{r4, pc}

08007630 <quorem>:
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007632:	0006      	movs	r6, r0
 8007634:	690b      	ldr	r3, [r1, #16]
 8007636:	6932      	ldr	r2, [r6, #16]
 8007638:	b087      	sub	sp, #28
 800763a:	2000      	movs	r0, #0
 800763c:	9103      	str	r1, [sp, #12]
 800763e:	429a      	cmp	r2, r3
 8007640:	db65      	blt.n	800770e <quorem+0xde>
 8007642:	3b01      	subs	r3, #1
 8007644:	009c      	lsls	r4, r3, #2
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	000b      	movs	r3, r1
 800764a:	3314      	adds	r3, #20
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	191b      	adds	r3, r3, r4
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	0033      	movs	r3, r6
 8007654:	3314      	adds	r3, #20
 8007656:	9302      	str	r3, [sp, #8]
 8007658:	191c      	adds	r4, r3, r4
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	6827      	ldr	r7, [r4, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	0038      	movs	r0, r7
 8007662:	1c5d      	adds	r5, r3, #1
 8007664:	0029      	movs	r1, r5
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	f7f8 fd6a 	bl	8000140 <__udivsi3>
 800766c:	9001      	str	r0, [sp, #4]
 800766e:	42af      	cmp	r7, r5
 8007670:	d324      	bcc.n	80076bc <quorem+0x8c>
 8007672:	2500      	movs	r5, #0
 8007674:	46ac      	mov	ip, r5
 8007676:	9802      	ldr	r0, [sp, #8]
 8007678:	9f05      	ldr	r7, [sp, #20]
 800767a:	cf08      	ldmia	r7!, {r3}
 800767c:	9a01      	ldr	r2, [sp, #4]
 800767e:	b299      	uxth	r1, r3
 8007680:	4351      	muls	r1, r2
 8007682:	0c1b      	lsrs	r3, r3, #16
 8007684:	4353      	muls	r3, r2
 8007686:	1949      	adds	r1, r1, r5
 8007688:	0c0a      	lsrs	r2, r1, #16
 800768a:	189b      	adds	r3, r3, r2
 800768c:	6802      	ldr	r2, [r0, #0]
 800768e:	b289      	uxth	r1, r1
 8007690:	b292      	uxth	r2, r2
 8007692:	4462      	add	r2, ip
 8007694:	1a52      	subs	r2, r2, r1
 8007696:	6801      	ldr	r1, [r0, #0]
 8007698:	0c1d      	lsrs	r5, r3, #16
 800769a:	0c09      	lsrs	r1, r1, #16
 800769c:	b29b      	uxth	r3, r3
 800769e:	1acb      	subs	r3, r1, r3
 80076a0:	1411      	asrs	r1, r2, #16
 80076a2:	185b      	adds	r3, r3, r1
 80076a4:	1419      	asrs	r1, r3, #16
 80076a6:	b292      	uxth	r2, r2
 80076a8:	041b      	lsls	r3, r3, #16
 80076aa:	431a      	orrs	r2, r3
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	468c      	mov	ip, r1
 80076b0:	c004      	stmia	r0!, {r2}
 80076b2:	42bb      	cmp	r3, r7
 80076b4:	d2e1      	bcs.n	800767a <quorem+0x4a>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d030      	beq.n	800771e <quorem+0xee>
 80076bc:	0030      	movs	r0, r6
 80076be:	9903      	ldr	r1, [sp, #12]
 80076c0:	f001 fde0 	bl	8009284 <__mcmp>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	db21      	blt.n	800770c <quorem+0xdc>
 80076c8:	0030      	movs	r0, r6
 80076ca:	2400      	movs	r4, #0
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	9903      	ldr	r1, [sp, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	3014      	adds	r0, #20
 80076d6:	3114      	adds	r1, #20
 80076d8:	6803      	ldr	r3, [r0, #0]
 80076da:	c920      	ldmia	r1!, {r5}
 80076dc:	b29a      	uxth	r2, r3
 80076de:	1914      	adds	r4, r2, r4
 80076e0:	b2aa      	uxth	r2, r5
 80076e2:	1aa2      	subs	r2, r4, r2
 80076e4:	0c1b      	lsrs	r3, r3, #16
 80076e6:	0c2d      	lsrs	r5, r5, #16
 80076e8:	1414      	asrs	r4, r2, #16
 80076ea:	1b5b      	subs	r3, r3, r5
 80076ec:	191b      	adds	r3, r3, r4
 80076ee:	141c      	asrs	r4, r3, #16
 80076f0:	b292      	uxth	r2, r2
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	4313      	orrs	r3, r2
 80076f6:	c008      	stmia	r0!, {r3}
 80076f8:	9b04      	ldr	r3, [sp, #16]
 80076fa:	428b      	cmp	r3, r1
 80076fc:	d2ec      	bcs.n	80076d8 <quorem+0xa8>
 80076fe:	9b00      	ldr	r3, [sp, #0]
 8007700:	9a02      	ldr	r2, [sp, #8]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	18d3      	adds	r3, r2, r3
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	2a00      	cmp	r2, #0
 800770a:	d015      	beq.n	8007738 <quorem+0x108>
 800770c:	9801      	ldr	r0, [sp, #4]
 800770e:	b007      	add	sp, #28
 8007710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <quorem+0xf6>
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	9b02      	ldr	r3, [sp, #8]
 8007720:	3c04      	subs	r4, #4
 8007722:	42a3      	cmp	r3, r4
 8007724:	d3f5      	bcc.n	8007712 <quorem+0xe2>
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	6133      	str	r3, [r6, #16]
 800772a:	e7c7      	b.n	80076bc <quorem+0x8c>
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	2a00      	cmp	r2, #0
 8007730:	d106      	bne.n	8007740 <quorem+0x110>
 8007732:	9a00      	ldr	r2, [sp, #0]
 8007734:	3a01      	subs	r2, #1
 8007736:	9200      	str	r2, [sp, #0]
 8007738:	9a02      	ldr	r2, [sp, #8]
 800773a:	3b04      	subs	r3, #4
 800773c:	429a      	cmp	r2, r3
 800773e:	d3f5      	bcc.n	800772c <quorem+0xfc>
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	6133      	str	r3, [r6, #16]
 8007744:	e7e2      	b.n	800770c <quorem+0xdc>
	...

08007748 <_dtoa_r>:
 8007748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774a:	b09d      	sub	sp, #116	; 0x74
 800774c:	9202      	str	r2, [sp, #8]
 800774e:	9303      	str	r3, [sp, #12]
 8007750:	9b02      	ldr	r3, [sp, #8]
 8007752:	9c03      	ldr	r4, [sp, #12]
 8007754:	9308      	str	r3, [sp, #32]
 8007756:	9409      	str	r4, [sp, #36]	; 0x24
 8007758:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800775a:	0007      	movs	r7, r0
 800775c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800775e:	2c00      	cmp	r4, #0
 8007760:	d10e      	bne.n	8007780 <_dtoa_r+0x38>
 8007762:	2010      	movs	r0, #16
 8007764:	f7fe f8f4 	bl	8005950 <malloc>
 8007768:	1e02      	subs	r2, r0, #0
 800776a:	6278      	str	r0, [r7, #36]	; 0x24
 800776c:	d104      	bne.n	8007778 <_dtoa_r+0x30>
 800776e:	21ea      	movs	r1, #234	; 0xea
 8007770:	4bc7      	ldr	r3, [pc, #796]	; (8007a90 <_dtoa_r+0x348>)
 8007772:	48c8      	ldr	r0, [pc, #800]	; (8007a94 <_dtoa_r+0x34c>)
 8007774:	f002 fbc4 	bl	8009f00 <__assert_func>
 8007778:	6044      	str	r4, [r0, #4]
 800777a:	6084      	str	r4, [r0, #8]
 800777c:	6004      	str	r4, [r0, #0]
 800777e:	60c4      	str	r4, [r0, #12]
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	2900      	cmp	r1, #0
 8007786:	d00a      	beq.n	800779e <_dtoa_r+0x56>
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	2301      	movs	r3, #1
 800778c:	4093      	lsls	r3, r2
 800778e:	604a      	str	r2, [r1, #4]
 8007790:	608b      	str	r3, [r1, #8]
 8007792:	0038      	movs	r0, r7
 8007794:	f001 faea 	bl	8008d6c <_Bfree>
 8007798:	2200      	movs	r2, #0
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	da20      	bge.n	80077e6 <_dtoa_r+0x9e>
 80077a4:	2301      	movs	r3, #1
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	9309      	str	r3, [sp, #36]	; 0x24
 80077b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077b2:	4bb9      	ldr	r3, [pc, #740]	; (8007a98 <_dtoa_r+0x350>)
 80077b4:	4ab8      	ldr	r2, [pc, #736]	; (8007a98 <_dtoa_r+0x350>)
 80077b6:	402b      	ands	r3, r5
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d117      	bne.n	80077ec <_dtoa_r+0xa4>
 80077bc:	4bb7      	ldr	r3, [pc, #732]	; (8007a9c <_dtoa_r+0x354>)
 80077be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077c0:	0328      	lsls	r0, r5, #12
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	9b02      	ldr	r3, [sp, #8]
 80077c6:	0b00      	lsrs	r0, r0, #12
 80077c8:	4318      	orrs	r0, r3
 80077ca:	d101      	bne.n	80077d0 <_dtoa_r+0x88>
 80077cc:	f000 fdbf 	bl	800834e <_dtoa_r+0xc06>
 80077d0:	48b3      	ldr	r0, [pc, #716]	; (8007aa0 <_dtoa_r+0x358>)
 80077d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077d4:	9006      	str	r0, [sp, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <_dtoa_r+0x98>
 80077da:	4bb2      	ldr	r3, [pc, #712]	; (8007aa4 <_dtoa_r+0x35c>)
 80077dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	9806      	ldr	r0, [sp, #24]
 80077e2:	b01d      	add	sp, #116	; 0x74
 80077e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e6:	2300      	movs	r3, #0
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	e7e1      	b.n	80077b0 <_dtoa_r+0x68>
 80077ec:	9b08      	ldr	r3, [sp, #32]
 80077ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80077f0:	9312      	str	r3, [sp, #72]	; 0x48
 80077f2:	9413      	str	r4, [sp, #76]	; 0x4c
 80077f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	f7f8 fe26 	bl	800044c <__aeabi_dcmpeq>
 8007800:	1e04      	subs	r4, r0, #0
 8007802:	d009      	beq.n	8007818 <_dtoa_r+0xd0>
 8007804:	2301      	movs	r3, #1
 8007806:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	4ba7      	ldr	r3, [pc, #668]	; (8007aa8 <_dtoa_r+0x360>)
 800780c:	9306      	str	r3, [sp, #24]
 800780e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0e5      	beq.n	80077e0 <_dtoa_r+0x98>
 8007814:	4ba5      	ldr	r3, [pc, #660]	; (8007aac <_dtoa_r+0x364>)
 8007816:	e7e1      	b.n	80077dc <_dtoa_r+0x94>
 8007818:	ab1a      	add	r3, sp, #104	; 0x68
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	ab1b      	add	r3, sp, #108	; 0x6c
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	0038      	movs	r0, r7
 8007822:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007826:	f001 fe55 	bl	80094d4 <__d2b>
 800782a:	006e      	lsls	r6, r5, #1
 800782c:	9005      	str	r0, [sp, #20]
 800782e:	0d76      	lsrs	r6, r6, #21
 8007830:	d100      	bne.n	8007834 <_dtoa_r+0xec>
 8007832:	e07c      	b.n	800792e <_dtoa_r+0x1e6>
 8007834:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007836:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800783a:	4a9d      	ldr	r2, [pc, #628]	; (8007ab0 <_dtoa_r+0x368>)
 800783c:	031b      	lsls	r3, r3, #12
 800783e:	0b1b      	lsrs	r3, r3, #12
 8007840:	431a      	orrs	r2, r3
 8007842:	0011      	movs	r1, r2
 8007844:	4b9b      	ldr	r3, [pc, #620]	; (8007ab4 <_dtoa_r+0x36c>)
 8007846:	9418      	str	r4, [sp, #96]	; 0x60
 8007848:	18f6      	adds	r6, r6, r3
 800784a:	2200      	movs	r2, #0
 800784c:	4b9a      	ldr	r3, [pc, #616]	; (8007ab8 <_dtoa_r+0x370>)
 800784e:	f7fa f845 	bl	80018dc <__aeabi_dsub>
 8007852:	4a9a      	ldr	r2, [pc, #616]	; (8007abc <_dtoa_r+0x374>)
 8007854:	4b9a      	ldr	r3, [pc, #616]	; (8007ac0 <_dtoa_r+0x378>)
 8007856:	f7f9 fdd5 	bl	8001404 <__aeabi_dmul>
 800785a:	4a9a      	ldr	r2, [pc, #616]	; (8007ac4 <_dtoa_r+0x37c>)
 800785c:	4b9a      	ldr	r3, [pc, #616]	; (8007ac8 <_dtoa_r+0x380>)
 800785e:	f7f8 fe93 	bl	8000588 <__aeabi_dadd>
 8007862:	0004      	movs	r4, r0
 8007864:	0030      	movs	r0, r6
 8007866:	000d      	movs	r5, r1
 8007868:	f7fa fc1e 	bl	80020a8 <__aeabi_i2d>
 800786c:	4a97      	ldr	r2, [pc, #604]	; (8007acc <_dtoa_r+0x384>)
 800786e:	4b98      	ldr	r3, [pc, #608]	; (8007ad0 <_dtoa_r+0x388>)
 8007870:	f7f9 fdc8 	bl	8001404 <__aeabi_dmul>
 8007874:	0002      	movs	r2, r0
 8007876:	000b      	movs	r3, r1
 8007878:	0020      	movs	r0, r4
 800787a:	0029      	movs	r1, r5
 800787c:	f7f8 fe84 	bl	8000588 <__aeabi_dadd>
 8007880:	0004      	movs	r4, r0
 8007882:	000d      	movs	r5, r1
 8007884:	f7fa fbda 	bl	800203c <__aeabi_d2iz>
 8007888:	2200      	movs	r2, #0
 800788a:	9002      	str	r0, [sp, #8]
 800788c:	2300      	movs	r3, #0
 800788e:	0020      	movs	r0, r4
 8007890:	0029      	movs	r1, r5
 8007892:	f7f8 fde1 	bl	8000458 <__aeabi_dcmplt>
 8007896:	2800      	cmp	r0, #0
 8007898:	d00b      	beq.n	80078b2 <_dtoa_r+0x16a>
 800789a:	9802      	ldr	r0, [sp, #8]
 800789c:	f7fa fc04 	bl	80020a8 <__aeabi_i2d>
 80078a0:	002b      	movs	r3, r5
 80078a2:	0022      	movs	r2, r4
 80078a4:	f7f8 fdd2 	bl	800044c <__aeabi_dcmpeq>
 80078a8:	4243      	negs	r3, r0
 80078aa:	4158      	adcs	r0, r3
 80078ac:	9b02      	ldr	r3, [sp, #8]
 80078ae:	1a1b      	subs	r3, r3, r0
 80078b0:	9302      	str	r3, [sp, #8]
 80078b2:	2301      	movs	r3, #1
 80078b4:	9316      	str	r3, [sp, #88]	; 0x58
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	2b16      	cmp	r3, #22
 80078ba:	d80f      	bhi.n	80078dc <_dtoa_r+0x194>
 80078bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80078be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078c0:	00da      	lsls	r2, r3, #3
 80078c2:	4b84      	ldr	r3, [pc, #528]	; (8007ad4 <_dtoa_r+0x38c>)
 80078c4:	189b      	adds	r3, r3, r2
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f7f8 fdc5 	bl	8000458 <__aeabi_dcmplt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d049      	beq.n	8007966 <_dtoa_r+0x21e>
 80078d2:	9b02      	ldr	r3, [sp, #8]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	9302      	str	r3, [sp, #8]
 80078d8:	2300      	movs	r3, #0
 80078da:	9316      	str	r3, [sp, #88]	; 0x58
 80078dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80078de:	1b9e      	subs	r6, r3, r6
 80078e0:	2300      	movs	r3, #0
 80078e2:	930a      	str	r3, [sp, #40]	; 0x28
 80078e4:	0033      	movs	r3, r6
 80078e6:	3b01      	subs	r3, #1
 80078e8:	930d      	str	r3, [sp, #52]	; 0x34
 80078ea:	d504      	bpl.n	80078f6 <_dtoa_r+0x1ae>
 80078ec:	2301      	movs	r3, #1
 80078ee:	1b9b      	subs	r3, r3, r6
 80078f0:	930a      	str	r3, [sp, #40]	; 0x28
 80078f2:	2300      	movs	r3, #0
 80078f4:	930d      	str	r3, [sp, #52]	; 0x34
 80078f6:	9b02      	ldr	r3, [sp, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	db36      	blt.n	800796a <_dtoa_r+0x222>
 80078fc:	9a02      	ldr	r2, [sp, #8]
 80078fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007900:	4694      	mov	ip, r2
 8007902:	4463      	add	r3, ip
 8007904:	930d      	str	r3, [sp, #52]	; 0x34
 8007906:	2300      	movs	r3, #0
 8007908:	9215      	str	r2, [sp, #84]	; 0x54
 800790a:	930e      	str	r3, [sp, #56]	; 0x38
 800790c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800790e:	2401      	movs	r4, #1
 8007910:	2b09      	cmp	r3, #9
 8007912:	d864      	bhi.n	80079de <_dtoa_r+0x296>
 8007914:	2b05      	cmp	r3, #5
 8007916:	dd02      	ble.n	800791e <_dtoa_r+0x1d6>
 8007918:	2400      	movs	r4, #0
 800791a:	3b04      	subs	r3, #4
 800791c:	9322      	str	r3, [sp, #136]	; 0x88
 800791e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007920:	1e98      	subs	r0, r3, #2
 8007922:	2803      	cmp	r0, #3
 8007924:	d864      	bhi.n	80079f0 <_dtoa_r+0x2a8>
 8007926:	f7f8 fbf7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800792a:	3829      	.short	0x3829
 800792c:	5836      	.short	0x5836
 800792e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007930:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007932:	189e      	adds	r6, r3, r2
 8007934:	4b68      	ldr	r3, [pc, #416]	; (8007ad8 <_dtoa_r+0x390>)
 8007936:	18f2      	adds	r2, r6, r3
 8007938:	2a20      	cmp	r2, #32
 800793a:	dd0f      	ble.n	800795c <_dtoa_r+0x214>
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	409d      	lsls	r5, r3
 8007942:	4b66      	ldr	r3, [pc, #408]	; (8007adc <_dtoa_r+0x394>)
 8007944:	9802      	ldr	r0, [sp, #8]
 8007946:	18f3      	adds	r3, r6, r3
 8007948:	40d8      	lsrs	r0, r3
 800794a:	4328      	orrs	r0, r5
 800794c:	f7fa fbdc 	bl	8002108 <__aeabi_ui2d>
 8007950:	2301      	movs	r3, #1
 8007952:	4c63      	ldr	r4, [pc, #396]	; (8007ae0 <_dtoa_r+0x398>)
 8007954:	3e01      	subs	r6, #1
 8007956:	1909      	adds	r1, r1, r4
 8007958:	9318      	str	r3, [sp, #96]	; 0x60
 800795a:	e776      	b.n	800784a <_dtoa_r+0x102>
 800795c:	2320      	movs	r3, #32
 800795e:	9802      	ldr	r0, [sp, #8]
 8007960:	1a9b      	subs	r3, r3, r2
 8007962:	4098      	lsls	r0, r3
 8007964:	e7f2      	b.n	800794c <_dtoa_r+0x204>
 8007966:	9016      	str	r0, [sp, #88]	; 0x58
 8007968:	e7b8      	b.n	80078dc <_dtoa_r+0x194>
 800796a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796c:	9a02      	ldr	r2, [sp, #8]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	930a      	str	r3, [sp, #40]	; 0x28
 8007972:	4253      	negs	r3, r2
 8007974:	930e      	str	r3, [sp, #56]	; 0x38
 8007976:	2300      	movs	r3, #0
 8007978:	9315      	str	r3, [sp, #84]	; 0x54
 800797a:	e7c7      	b.n	800790c <_dtoa_r+0x1c4>
 800797c:	2300      	movs	r3, #0
 800797e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007982:	930c      	str	r3, [sp, #48]	; 0x30
 8007984:	9307      	str	r3, [sp, #28]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dc13      	bgt.n	80079b2 <_dtoa_r+0x26a>
 800798a:	2301      	movs	r3, #1
 800798c:	001a      	movs	r2, r3
 800798e:	930c      	str	r3, [sp, #48]	; 0x30
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	9223      	str	r2, [sp, #140]	; 0x8c
 8007994:	e00d      	b.n	80079b2 <_dtoa_r+0x26a>
 8007996:	2301      	movs	r3, #1
 8007998:	e7f1      	b.n	800797e <_dtoa_r+0x236>
 800799a:	2300      	movs	r3, #0
 800799c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800799e:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a0:	4694      	mov	ip, r2
 80079a2:	9b02      	ldr	r3, [sp, #8]
 80079a4:	4463      	add	r3, ip
 80079a6:	930c      	str	r3, [sp, #48]	; 0x30
 80079a8:	3301      	adds	r3, #1
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc00      	bgt.n	80079b2 <_dtoa_r+0x26a>
 80079b0:	2301      	movs	r3, #1
 80079b2:	2200      	movs	r2, #0
 80079b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079b6:	6042      	str	r2, [r0, #4]
 80079b8:	3204      	adds	r2, #4
 80079ba:	0015      	movs	r5, r2
 80079bc:	3514      	adds	r5, #20
 80079be:	6841      	ldr	r1, [r0, #4]
 80079c0:	429d      	cmp	r5, r3
 80079c2:	d919      	bls.n	80079f8 <_dtoa_r+0x2b0>
 80079c4:	0038      	movs	r0, r7
 80079c6:	f001 f98d 	bl	8008ce4 <_Balloc>
 80079ca:	9006      	str	r0, [sp, #24]
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d117      	bne.n	8007a00 <_dtoa_r+0x2b8>
 80079d0:	21d5      	movs	r1, #213	; 0xd5
 80079d2:	0002      	movs	r2, r0
 80079d4:	4b43      	ldr	r3, [pc, #268]	; (8007ae4 <_dtoa_r+0x39c>)
 80079d6:	0049      	lsls	r1, r1, #1
 80079d8:	e6cb      	b.n	8007772 <_dtoa_r+0x2a>
 80079da:	2301      	movs	r3, #1
 80079dc:	e7de      	b.n	800799c <_dtoa_r+0x254>
 80079de:	2300      	movs	r3, #0
 80079e0:	940f      	str	r4, [sp, #60]	; 0x3c
 80079e2:	9322      	str	r3, [sp, #136]	; 0x88
 80079e4:	3b01      	subs	r3, #1
 80079e6:	930c      	str	r3, [sp, #48]	; 0x30
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	2200      	movs	r2, #0
 80079ec:	3313      	adds	r3, #19
 80079ee:	e7d0      	b.n	8007992 <_dtoa_r+0x24a>
 80079f0:	2301      	movs	r3, #1
 80079f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80079f4:	3b02      	subs	r3, #2
 80079f6:	e7f6      	b.n	80079e6 <_dtoa_r+0x29e>
 80079f8:	3101      	adds	r1, #1
 80079fa:	6041      	str	r1, [r0, #4]
 80079fc:	0052      	lsls	r2, r2, #1
 80079fe:	e7dc      	b.n	80079ba <_dtoa_r+0x272>
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	9a06      	ldr	r2, [sp, #24]
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	9b07      	ldr	r3, [sp, #28]
 8007a08:	2b0e      	cmp	r3, #14
 8007a0a:	d900      	bls.n	8007a0e <_dtoa_r+0x2c6>
 8007a0c:	e0eb      	b.n	8007be6 <_dtoa_r+0x49e>
 8007a0e:	2c00      	cmp	r4, #0
 8007a10:	d100      	bne.n	8007a14 <_dtoa_r+0x2cc>
 8007a12:	e0e8      	b.n	8007be6 <_dtoa_r+0x49e>
 8007a14:	9b02      	ldr	r3, [sp, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	dd68      	ble.n	8007aec <_dtoa_r+0x3a4>
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	210f      	movs	r1, #15
 8007a1e:	4b2d      	ldr	r3, [pc, #180]	; (8007ad4 <_dtoa_r+0x38c>)
 8007a20:	400a      	ands	r2, r1
 8007a22:	00d2      	lsls	r2, r2, #3
 8007a24:	189b      	adds	r3, r3, r2
 8007a26:	681d      	ldr	r5, [r3, #0]
 8007a28:	685e      	ldr	r6, [r3, #4]
 8007a2a:	9b02      	ldr	r3, [sp, #8]
 8007a2c:	111c      	asrs	r4, r3, #4
 8007a2e:	2302      	movs	r3, #2
 8007a30:	9310      	str	r3, [sp, #64]	; 0x40
 8007a32:	9b02      	ldr	r3, [sp, #8]
 8007a34:	05db      	lsls	r3, r3, #23
 8007a36:	d50b      	bpl.n	8007a50 <_dtoa_r+0x308>
 8007a38:	4b2b      	ldr	r3, [pc, #172]	; (8007ae8 <_dtoa_r+0x3a0>)
 8007a3a:	400c      	ands	r4, r1
 8007a3c:	6a1a      	ldr	r2, [r3, #32]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a44:	f7f9 f8dc 	bl	8000c00 <__aeabi_ddiv>
 8007a48:	2303      	movs	r3, #3
 8007a4a:	9008      	str	r0, [sp, #32]
 8007a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a4e:	9310      	str	r3, [sp, #64]	; 0x40
 8007a50:	4b25      	ldr	r3, [pc, #148]	; (8007ae8 <_dtoa_r+0x3a0>)
 8007a52:	9314      	str	r3, [sp, #80]	; 0x50
 8007a54:	2c00      	cmp	r4, #0
 8007a56:	d108      	bne.n	8007a6a <_dtoa_r+0x322>
 8007a58:	9808      	ldr	r0, [sp, #32]
 8007a5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a5c:	002a      	movs	r2, r5
 8007a5e:	0033      	movs	r3, r6
 8007a60:	f7f9 f8ce 	bl	8000c00 <__aeabi_ddiv>
 8007a64:	9008      	str	r0, [sp, #32]
 8007a66:	9109      	str	r1, [sp, #36]	; 0x24
 8007a68:	e05c      	b.n	8007b24 <_dtoa_r+0x3dc>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	421c      	tst	r4, r3
 8007a6e:	d00b      	beq.n	8007a88 <_dtoa_r+0x340>
 8007a70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a72:	0028      	movs	r0, r5
 8007a74:	3301      	adds	r3, #1
 8007a76:	9310      	str	r3, [sp, #64]	; 0x40
 8007a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a7a:	0031      	movs	r1, r6
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f7f9 fcc0 	bl	8001404 <__aeabi_dmul>
 8007a84:	0005      	movs	r5, r0
 8007a86:	000e      	movs	r6, r1
 8007a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a8a:	1064      	asrs	r4, r4, #1
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	e7e0      	b.n	8007a52 <_dtoa_r+0x30a>
 8007a90:	0800a85e 	.word	0x0800a85e
 8007a94:	0800a875 	.word	0x0800a875
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	0000270f 	.word	0x0000270f
 8007aa0:	0800a85a 	.word	0x0800a85a
 8007aa4:	0800a85d 	.word	0x0800a85d
 8007aa8:	0800a6d4 	.word	0x0800a6d4
 8007aac:	0800a6d5 	.word	0x0800a6d5
 8007ab0:	3ff00000 	.word	0x3ff00000
 8007ab4:	fffffc01 	.word	0xfffffc01
 8007ab8:	3ff80000 	.word	0x3ff80000
 8007abc:	636f4361 	.word	0x636f4361
 8007ac0:	3fd287a7 	.word	0x3fd287a7
 8007ac4:	8b60c8b3 	.word	0x8b60c8b3
 8007ac8:	3fc68a28 	.word	0x3fc68a28
 8007acc:	509f79fb 	.word	0x509f79fb
 8007ad0:	3fd34413 	.word	0x3fd34413
 8007ad4:	0800aa48 	.word	0x0800aa48
 8007ad8:	00000432 	.word	0x00000432
 8007adc:	00000412 	.word	0x00000412
 8007ae0:	fe100000 	.word	0xfe100000
 8007ae4:	0800a8d0 	.word	0x0800a8d0
 8007ae8:	0800aa20 	.word	0x0800aa20
 8007aec:	2302      	movs	r3, #2
 8007aee:	9310      	str	r3, [sp, #64]	; 0x40
 8007af0:	9b02      	ldr	r3, [sp, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <_dtoa_r+0x3dc>
 8007af6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007af8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007afa:	425c      	negs	r4, r3
 8007afc:	230f      	movs	r3, #15
 8007afe:	4ab6      	ldr	r2, [pc, #728]	; (8007dd8 <_dtoa_r+0x690>)
 8007b00:	4023      	ands	r3, r4
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	18d3      	adds	r3, r2, r3
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f7f9 fc7b 	bl	8001404 <__aeabi_dmul>
 8007b0e:	2601      	movs	r6, #1
 8007b10:	2300      	movs	r3, #0
 8007b12:	9008      	str	r0, [sp, #32]
 8007b14:	9109      	str	r1, [sp, #36]	; 0x24
 8007b16:	4db1      	ldr	r5, [pc, #708]	; (8007ddc <_dtoa_r+0x694>)
 8007b18:	1124      	asrs	r4, r4, #4
 8007b1a:	2c00      	cmp	r4, #0
 8007b1c:	d000      	beq.n	8007b20 <_dtoa_r+0x3d8>
 8007b1e:	e094      	b.n	8007c4a <_dtoa_r+0x502>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d19f      	bne.n	8007a64 <_dtoa_r+0x31c>
 8007b24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d100      	bne.n	8007b2c <_dtoa_r+0x3e4>
 8007b2a:	e09b      	b.n	8007c64 <_dtoa_r+0x51c>
 8007b2c:	9c08      	ldr	r4, [sp, #32]
 8007b2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b30:	2200      	movs	r2, #0
 8007b32:	0020      	movs	r0, r4
 8007b34:	0029      	movs	r1, r5
 8007b36:	4baa      	ldr	r3, [pc, #680]	; (8007de0 <_dtoa_r+0x698>)
 8007b38:	f7f8 fc8e 	bl	8000458 <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d100      	bne.n	8007b42 <_dtoa_r+0x3fa>
 8007b40:	e090      	b.n	8007c64 <_dtoa_r+0x51c>
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d100      	bne.n	8007b4a <_dtoa_r+0x402>
 8007b48:	e08c      	b.n	8007c64 <_dtoa_r+0x51c>
 8007b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dd46      	ble.n	8007bde <_dtoa_r+0x496>
 8007b50:	9b02      	ldr	r3, [sp, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	0020      	movs	r0, r4
 8007b56:	0029      	movs	r1, r5
 8007b58:	1e5e      	subs	r6, r3, #1
 8007b5a:	4ba2      	ldr	r3, [pc, #648]	; (8007de4 <_dtoa_r+0x69c>)
 8007b5c:	f7f9 fc52 	bl	8001404 <__aeabi_dmul>
 8007b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b62:	9008      	str	r0, [sp, #32]
 8007b64:	9109      	str	r1, [sp, #36]	; 0x24
 8007b66:	3301      	adds	r3, #1
 8007b68:	9310      	str	r3, [sp, #64]	; 0x40
 8007b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b6e:	9c08      	ldr	r4, [sp, #32]
 8007b70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b72:	9314      	str	r3, [sp, #80]	; 0x50
 8007b74:	f7fa fa98 	bl	80020a8 <__aeabi_i2d>
 8007b78:	0022      	movs	r2, r4
 8007b7a:	002b      	movs	r3, r5
 8007b7c:	f7f9 fc42 	bl	8001404 <__aeabi_dmul>
 8007b80:	2200      	movs	r2, #0
 8007b82:	4b99      	ldr	r3, [pc, #612]	; (8007de8 <_dtoa_r+0x6a0>)
 8007b84:	f7f8 fd00 	bl	8000588 <__aeabi_dadd>
 8007b88:	9010      	str	r0, [sp, #64]	; 0x40
 8007b8a:	9111      	str	r1, [sp, #68]	; 0x44
 8007b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b90:	9208      	str	r2, [sp, #32]
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	4a95      	ldr	r2, [pc, #596]	; (8007dec <_dtoa_r+0x6a4>)
 8007b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b98:	4694      	mov	ip, r2
 8007b9a:	4463      	add	r3, ip
 8007b9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d161      	bne.n	8007c6a <_dtoa_r+0x522>
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	0020      	movs	r0, r4
 8007baa:	0029      	movs	r1, r5
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <_dtoa_r+0x6a8>)
 8007bae:	f7f9 fe95 	bl	80018dc <__aeabi_dsub>
 8007bb2:	9a08      	ldr	r2, [sp, #32]
 8007bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bb6:	0004      	movs	r4, r0
 8007bb8:	000d      	movs	r5, r1
 8007bba:	f7f8 fc61 	bl	8000480 <__aeabi_dcmpgt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d000      	beq.n	8007bc4 <_dtoa_r+0x47c>
 8007bc2:	e2af      	b.n	8008124 <_dtoa_r+0x9dc>
 8007bc4:	488b      	ldr	r0, [pc, #556]	; (8007df4 <_dtoa_r+0x6ac>)
 8007bc6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bc8:	4684      	mov	ip, r0
 8007bca:	4461      	add	r1, ip
 8007bcc:	000b      	movs	r3, r1
 8007bce:	0020      	movs	r0, r4
 8007bd0:	0029      	movs	r1, r5
 8007bd2:	9a08      	ldr	r2, [sp, #32]
 8007bd4:	f7f8 fc40 	bl	8000458 <__aeabi_dcmplt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d000      	beq.n	8007bde <_dtoa_r+0x496>
 8007bdc:	e29f      	b.n	800811e <_dtoa_r+0x9d6>
 8007bde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007be0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007be2:	9308      	str	r3, [sp, #32]
 8007be4:	9409      	str	r4, [sp, #36]	; 0x24
 8007be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da00      	bge.n	8007bee <_dtoa_r+0x4a6>
 8007bec:	e172      	b.n	8007ed4 <_dtoa_r+0x78c>
 8007bee:	9a02      	ldr	r2, [sp, #8]
 8007bf0:	2a0e      	cmp	r2, #14
 8007bf2:	dd00      	ble.n	8007bf6 <_dtoa_r+0x4ae>
 8007bf4:	e16e      	b.n	8007ed4 <_dtoa_r+0x78c>
 8007bf6:	4b78      	ldr	r3, [pc, #480]	; (8007dd8 <_dtoa_r+0x690>)
 8007bf8:	00d2      	lsls	r2, r2, #3
 8007bfa:	189b      	adds	r3, r3, r2
 8007bfc:	685c      	ldr	r4, [r3, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	930a      	str	r3, [sp, #40]	; 0x28
 8007c02:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db00      	blt.n	8007c0c <_dtoa_r+0x4c4>
 8007c0a:	e0f7      	b.n	8007dfc <_dtoa_r+0x6b4>
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd00      	ble.n	8007c14 <_dtoa_r+0x4cc>
 8007c12:	e0f3      	b.n	8007dfc <_dtoa_r+0x6b4>
 8007c14:	d000      	beq.n	8007c18 <_dtoa_r+0x4d0>
 8007c16:	e282      	b.n	800811e <_dtoa_r+0x9d6>
 8007c18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4b74      	ldr	r3, [pc, #464]	; (8007df0 <_dtoa_r+0x6a8>)
 8007c20:	f7f9 fbf0 	bl	8001404 <__aeabi_dmul>
 8007c24:	9a08      	ldr	r2, [sp, #32]
 8007c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c28:	f7f8 fc34 	bl	8000494 <__aeabi_dcmpge>
 8007c2c:	9e07      	ldr	r6, [sp, #28]
 8007c2e:	0035      	movs	r5, r6
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d000      	beq.n	8007c36 <_dtoa_r+0x4ee>
 8007c34:	e259      	b.n	80080ea <_dtoa_r+0x9a2>
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	9a06      	ldr	r2, [sp, #24]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	9308      	str	r3, [sp, #32]
 8007c3e:	2331      	movs	r3, #49	; 0x31
 8007c40:	7013      	strb	r3, [r2, #0]
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	3301      	adds	r3, #1
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	e254      	b.n	80080f4 <_dtoa_r+0x9ac>
 8007c4a:	4234      	tst	r4, r6
 8007c4c:	d007      	beq.n	8007c5e <_dtoa_r+0x516>
 8007c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c50:	3301      	adds	r3, #1
 8007c52:	9310      	str	r3, [sp, #64]	; 0x40
 8007c54:	682a      	ldr	r2, [r5, #0]
 8007c56:	686b      	ldr	r3, [r5, #4]
 8007c58:	f7f9 fbd4 	bl	8001404 <__aeabi_dmul>
 8007c5c:	0033      	movs	r3, r6
 8007c5e:	1064      	asrs	r4, r4, #1
 8007c60:	3508      	adds	r5, #8
 8007c62:	e75a      	b.n	8007b1a <_dtoa_r+0x3d2>
 8007c64:	9e02      	ldr	r6, [sp, #8]
 8007c66:	9b07      	ldr	r3, [sp, #28]
 8007c68:	e780      	b.n	8007b6c <_dtoa_r+0x424>
 8007c6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c6e:	1e5a      	subs	r2, r3, #1
 8007c70:	4b59      	ldr	r3, [pc, #356]	; (8007dd8 <_dtoa_r+0x690>)
 8007c72:	00d2      	lsls	r2, r2, #3
 8007c74:	189b      	adds	r3, r3, r2
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2900      	cmp	r1, #0
 8007c7c:	d051      	beq.n	8007d22 <_dtoa_r+0x5da>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	495d      	ldr	r1, [pc, #372]	; (8007df8 <_dtoa_r+0x6b0>)
 8007c82:	f7f8 ffbd 	bl	8000c00 <__aeabi_ddiv>
 8007c86:	9a08      	ldr	r2, [sp, #32]
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	f7f9 fe27 	bl	80018dc <__aeabi_dsub>
 8007c8e:	9a06      	ldr	r2, [sp, #24]
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	4694      	mov	ip, r2
 8007c94:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c98:	9010      	str	r0, [sp, #64]	; 0x40
 8007c9a:	9111      	str	r1, [sp, #68]	; 0x44
 8007c9c:	4463      	add	r3, ip
 8007c9e:	9319      	str	r3, [sp, #100]	; 0x64
 8007ca0:	0029      	movs	r1, r5
 8007ca2:	0020      	movs	r0, r4
 8007ca4:	f7fa f9ca 	bl	800203c <__aeabi_d2iz>
 8007ca8:	9014      	str	r0, [sp, #80]	; 0x50
 8007caa:	f7fa f9fd 	bl	80020a8 <__aeabi_i2d>
 8007cae:	0002      	movs	r2, r0
 8007cb0:	000b      	movs	r3, r1
 8007cb2:	0020      	movs	r0, r4
 8007cb4:	0029      	movs	r1, r5
 8007cb6:	f7f9 fe11 	bl	80018dc <__aeabi_dsub>
 8007cba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	9308      	str	r3, [sp, #32]
 8007cc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cc4:	0004      	movs	r4, r0
 8007cc6:	3330      	adds	r3, #48	; 0x30
 8007cc8:	7013      	strb	r3, [r2, #0]
 8007cca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cce:	000d      	movs	r5, r1
 8007cd0:	f7f8 fbc2 	bl	8000458 <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d175      	bne.n	8007dc4 <_dtoa_r+0x67c>
 8007cd8:	0022      	movs	r2, r4
 8007cda:	002b      	movs	r3, r5
 8007cdc:	2000      	movs	r0, #0
 8007cde:	4940      	ldr	r1, [pc, #256]	; (8007de0 <_dtoa_r+0x698>)
 8007ce0:	f7f9 fdfc 	bl	80018dc <__aeabi_dsub>
 8007ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce8:	f7f8 fbb6 	bl	8000458 <__aeabi_dcmplt>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d000      	beq.n	8007cf2 <_dtoa_r+0x5aa>
 8007cf0:	e0d2      	b.n	8007e98 <_dtoa_r+0x750>
 8007cf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf4:	9a08      	ldr	r2, [sp, #32]
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d100      	bne.n	8007cfc <_dtoa_r+0x5b4>
 8007cfa:	e770      	b.n	8007bde <_dtoa_r+0x496>
 8007cfc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007cfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d00:	2200      	movs	r2, #0
 8007d02:	4b38      	ldr	r3, [pc, #224]	; (8007de4 <_dtoa_r+0x69c>)
 8007d04:	f7f9 fb7e 	bl	8001404 <__aeabi_dmul>
 8007d08:	4b36      	ldr	r3, [pc, #216]	; (8007de4 <_dtoa_r+0x69c>)
 8007d0a:	9010      	str	r0, [sp, #64]	; 0x40
 8007d0c:	9111      	str	r1, [sp, #68]	; 0x44
 8007d0e:	2200      	movs	r2, #0
 8007d10:	0020      	movs	r0, r4
 8007d12:	0029      	movs	r1, r5
 8007d14:	f7f9 fb76 	bl	8001404 <__aeabi_dmul>
 8007d18:	9b08      	ldr	r3, [sp, #32]
 8007d1a:	0004      	movs	r4, r0
 8007d1c:	000d      	movs	r5, r1
 8007d1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d20:	e7be      	b.n	8007ca0 <_dtoa_r+0x558>
 8007d22:	9808      	ldr	r0, [sp, #32]
 8007d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d26:	f7f9 fb6d 	bl	8001404 <__aeabi_dmul>
 8007d2a:	9a06      	ldr	r2, [sp, #24]
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	4694      	mov	ip, r2
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d34:	9010      	str	r0, [sp, #64]	; 0x40
 8007d36:	9111      	str	r1, [sp, #68]	; 0x44
 8007d38:	4463      	add	r3, ip
 8007d3a:	9319      	str	r3, [sp, #100]	; 0x64
 8007d3c:	0029      	movs	r1, r5
 8007d3e:	0020      	movs	r0, r4
 8007d40:	f7fa f97c 	bl	800203c <__aeabi_d2iz>
 8007d44:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d46:	f7fa f9af 	bl	80020a8 <__aeabi_i2d>
 8007d4a:	0002      	movs	r2, r0
 8007d4c:	000b      	movs	r3, r1
 8007d4e:	0020      	movs	r0, r4
 8007d50:	0029      	movs	r1, r5
 8007d52:	f7f9 fdc3 	bl	80018dc <__aeabi_dsub>
 8007d56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d58:	9a08      	ldr	r2, [sp, #32]
 8007d5a:	3330      	adds	r3, #48	; 0x30
 8007d5c:	7013      	strb	r3, [r2, #0]
 8007d5e:	0013      	movs	r3, r2
 8007d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d62:	3301      	adds	r3, #1
 8007d64:	0004      	movs	r4, r0
 8007d66:	000d      	movs	r5, r1
 8007d68:	9308      	str	r3, [sp, #32]
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d12c      	bne.n	8007dc8 <_dtoa_r+0x680>
 8007d6e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d72:	9a06      	ldr	r2, [sp, #24]
 8007d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d76:	4694      	mov	ip, r2
 8007d78:	4463      	add	r3, ip
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <_dtoa_r+0x6b0>)
 8007d80:	f7f8 fc02 	bl	8000588 <__aeabi_dadd>
 8007d84:	0002      	movs	r2, r0
 8007d86:	000b      	movs	r3, r1
 8007d88:	0020      	movs	r0, r4
 8007d8a:	0029      	movs	r1, r5
 8007d8c:	f7f8 fb78 	bl	8000480 <__aeabi_dcmpgt>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d000      	beq.n	8007d96 <_dtoa_r+0x64e>
 8007d94:	e080      	b.n	8007e98 <_dtoa_r+0x750>
 8007d96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	4916      	ldr	r1, [pc, #88]	; (8007df8 <_dtoa_r+0x6b0>)
 8007d9e:	f7f9 fd9d 	bl	80018dc <__aeabi_dsub>
 8007da2:	0002      	movs	r2, r0
 8007da4:	000b      	movs	r3, r1
 8007da6:	0020      	movs	r0, r4
 8007da8:	0029      	movs	r1, r5
 8007daa:	f7f8 fb55 	bl	8000458 <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d100      	bne.n	8007db4 <_dtoa_r+0x66c>
 8007db2:	e714      	b.n	8007bde <_dtoa_r+0x496>
 8007db4:	9b08      	ldr	r3, [sp, #32]
 8007db6:	001a      	movs	r2, r3
 8007db8:	3a01      	subs	r2, #1
 8007dba:	9208      	str	r2, [sp, #32]
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	2a30      	cmp	r2, #48	; 0x30
 8007dc0:	d0f8      	beq.n	8007db4 <_dtoa_r+0x66c>
 8007dc2:	9308      	str	r3, [sp, #32]
 8007dc4:	9602      	str	r6, [sp, #8]
 8007dc6:	e055      	b.n	8007e74 <_dtoa_r+0x72c>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <_dtoa_r+0x69c>)
 8007dcc:	f7f9 fb1a 	bl	8001404 <__aeabi_dmul>
 8007dd0:	0004      	movs	r4, r0
 8007dd2:	000d      	movs	r5, r1
 8007dd4:	e7b2      	b.n	8007d3c <_dtoa_r+0x5f4>
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	0800aa48 	.word	0x0800aa48
 8007ddc:	0800aa20 	.word	0x0800aa20
 8007de0:	3ff00000 	.word	0x3ff00000
 8007de4:	40240000 	.word	0x40240000
 8007de8:	401c0000 	.word	0x401c0000
 8007dec:	fcc00000 	.word	0xfcc00000
 8007df0:	40140000 	.word	0x40140000
 8007df4:	7cc00000 	.word	0x7cc00000
 8007df8:	3fe00000 	.word	0x3fe00000
 8007dfc:	9b07      	ldr	r3, [sp, #28]
 8007dfe:	9e06      	ldr	r6, [sp, #24]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	199b      	adds	r3, r3, r6
 8007e04:	930c      	str	r3, [sp, #48]	; 0x30
 8007e06:	9c08      	ldr	r4, [sp, #32]
 8007e08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0e:	0020      	movs	r0, r4
 8007e10:	0029      	movs	r1, r5
 8007e12:	f7f8 fef5 	bl	8000c00 <__aeabi_ddiv>
 8007e16:	f7fa f911 	bl	800203c <__aeabi_d2iz>
 8007e1a:	9007      	str	r0, [sp, #28]
 8007e1c:	f7fa f944 	bl	80020a8 <__aeabi_i2d>
 8007e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e24:	f7f9 faee 	bl	8001404 <__aeabi_dmul>
 8007e28:	0002      	movs	r2, r0
 8007e2a:	000b      	movs	r3, r1
 8007e2c:	0020      	movs	r0, r4
 8007e2e:	0029      	movs	r1, r5
 8007e30:	f7f9 fd54 	bl	80018dc <__aeabi_dsub>
 8007e34:	0033      	movs	r3, r6
 8007e36:	9a07      	ldr	r2, [sp, #28]
 8007e38:	3601      	adds	r6, #1
 8007e3a:	3230      	adds	r2, #48	; 0x30
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e40:	9608      	str	r6, [sp, #32]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d139      	bne.n	8007eba <_dtoa_r+0x772>
 8007e46:	0002      	movs	r2, r0
 8007e48:	000b      	movs	r3, r1
 8007e4a:	f7f8 fb9d 	bl	8000588 <__aeabi_dadd>
 8007e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e52:	0004      	movs	r4, r0
 8007e54:	000d      	movs	r5, r1
 8007e56:	f7f8 fb13 	bl	8000480 <__aeabi_dcmpgt>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d11b      	bne.n	8007e96 <_dtoa_r+0x74e>
 8007e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e62:	0020      	movs	r0, r4
 8007e64:	0029      	movs	r1, r5
 8007e66:	f7f8 faf1 	bl	800044c <__aeabi_dcmpeq>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d002      	beq.n	8007e74 <_dtoa_r+0x72c>
 8007e6e:	9b07      	ldr	r3, [sp, #28]
 8007e70:	07db      	lsls	r3, r3, #31
 8007e72:	d410      	bmi.n	8007e96 <_dtoa_r+0x74e>
 8007e74:	0038      	movs	r0, r7
 8007e76:	9905      	ldr	r1, [sp, #20]
 8007e78:	f000 ff78 	bl	8008d6c <_Bfree>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9a08      	ldr	r2, [sp, #32]
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	7013      	strb	r3, [r2, #0]
 8007e84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e86:	3001      	adds	r0, #1
 8007e88:	6018      	str	r0, [r3, #0]
 8007e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d100      	bne.n	8007e92 <_dtoa_r+0x74a>
 8007e90:	e4a6      	b.n	80077e0 <_dtoa_r+0x98>
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e4a4      	b.n	80077e0 <_dtoa_r+0x98>
 8007e96:	9e02      	ldr	r6, [sp, #8]
 8007e98:	9b08      	ldr	r3, [sp, #32]
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	2a39      	cmp	r2, #57	; 0x39
 8007ea2:	d106      	bne.n	8007eb2 <_dtoa_r+0x76a>
 8007ea4:	9a06      	ldr	r2, [sp, #24]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d1f7      	bne.n	8007e9a <_dtoa_r+0x752>
 8007eaa:	2230      	movs	r2, #48	; 0x30
 8007eac:	9906      	ldr	r1, [sp, #24]
 8007eae:	3601      	adds	r6, #1
 8007eb0:	700a      	strb	r2, [r1, #0]
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	3201      	adds	r2, #1
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e784      	b.n	8007dc4 <_dtoa_r+0x67c>
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4baa      	ldr	r3, [pc, #680]	; (8008168 <_dtoa_r+0xa20>)
 8007ebe:	f7f9 faa1 	bl	8001404 <__aeabi_dmul>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	0004      	movs	r4, r0
 8007ec8:	000d      	movs	r5, r1
 8007eca:	f7f8 fabf 	bl	800044c <__aeabi_dcmpeq>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d09b      	beq.n	8007e0a <_dtoa_r+0x6c2>
 8007ed2:	e7cf      	b.n	8007e74 <_dtoa_r+0x72c>
 8007ed4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ed6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007ed8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	d012      	beq.n	8007f04 <_dtoa_r+0x7bc>
 8007ede:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ee0:	2a01      	cmp	r2, #1
 8007ee2:	dc66      	bgt.n	8007fb2 <_dtoa_r+0x86a>
 8007ee4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	d05d      	beq.n	8007fa6 <_dtoa_r+0x85e>
 8007eea:	4aa0      	ldr	r2, [pc, #640]	; (800816c <_dtoa_r+0xa24>)
 8007eec:	189b      	adds	r3, r3, r2
 8007eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	18d2      	adds	r2, r2, r3
 8007ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ef8:	0038      	movs	r0, r7
 8007efa:	18d3      	adds	r3, r2, r3
 8007efc:	930d      	str	r3, [sp, #52]	; 0x34
 8007efe:	f001 f831 	bl	8008f64 <__i2b>
 8007f02:	0005      	movs	r5, r0
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	dd0e      	ble.n	8007f26 <_dtoa_r+0x7de>
 8007f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dd0b      	ble.n	8007f26 <_dtoa_r+0x7de>
 8007f0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f10:	0023      	movs	r3, r4
 8007f12:	4294      	cmp	r4, r2
 8007f14:	dd00      	ble.n	8007f18 <_dtoa_r+0x7d0>
 8007f16:	0013      	movs	r3, r2
 8007f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1a:	1ae4      	subs	r4, r4, r3
 8007f1c:	1ad2      	subs	r2, r2, r3
 8007f1e:	920a      	str	r2, [sp, #40]	; 0x28
 8007f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	930d      	str	r3, [sp, #52]	; 0x34
 8007f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01f      	beq.n	8007f6c <_dtoa_r+0x824>
 8007f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d054      	beq.n	8007fdc <_dtoa_r+0x894>
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	dd11      	ble.n	8007f5a <_dtoa_r+0x812>
 8007f36:	0029      	movs	r1, r5
 8007f38:	0032      	movs	r2, r6
 8007f3a:	0038      	movs	r0, r7
 8007f3c:	f001 f8d8 	bl	80090f0 <__pow5mult>
 8007f40:	9a05      	ldr	r2, [sp, #20]
 8007f42:	0001      	movs	r1, r0
 8007f44:	0005      	movs	r5, r0
 8007f46:	0038      	movs	r0, r7
 8007f48:	f001 f822 	bl	8008f90 <__multiply>
 8007f4c:	9905      	ldr	r1, [sp, #20]
 8007f4e:	9014      	str	r0, [sp, #80]	; 0x50
 8007f50:	0038      	movs	r0, r7
 8007f52:	f000 ff0b 	bl	8008d6c <_Bfree>
 8007f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f58:	9305      	str	r3, [sp, #20]
 8007f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f5c:	1b9a      	subs	r2, r3, r6
 8007f5e:	42b3      	cmp	r3, r6
 8007f60:	d004      	beq.n	8007f6c <_dtoa_r+0x824>
 8007f62:	0038      	movs	r0, r7
 8007f64:	9905      	ldr	r1, [sp, #20]
 8007f66:	f001 f8c3 	bl	80090f0 <__pow5mult>
 8007f6a:	9005      	str	r0, [sp, #20]
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	0038      	movs	r0, r7
 8007f70:	f000 fff8 	bl	8008f64 <__i2b>
 8007f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f76:	0006      	movs	r6, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dd31      	ble.n	8007fe0 <_dtoa_r+0x898>
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	0001      	movs	r1, r0
 8007f80:	0038      	movs	r0, r7
 8007f82:	f001 f8b5 	bl	80090f0 <__pow5mult>
 8007f86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f88:	0006      	movs	r6, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	dd2d      	ble.n	8007fea <_dtoa_r+0x8a2>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	930e      	str	r3, [sp, #56]	; 0x38
 8007f92:	6933      	ldr	r3, [r6, #16]
 8007f94:	3303      	adds	r3, #3
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	18f3      	adds	r3, r6, r3
 8007f9a:	6858      	ldr	r0, [r3, #4]
 8007f9c:	f000 ff9a 	bl	8008ed4 <__hi0bits>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	1a18      	subs	r0, r3, r0
 8007fa4:	e039      	b.n	800801a <_dtoa_r+0x8d2>
 8007fa6:	2336      	movs	r3, #54	; 0x36
 8007fa8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007faa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007fac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	e79d      	b.n	8007eee <_dtoa_r+0x7a6>
 8007fb2:	9b07      	ldr	r3, [sp, #28]
 8007fb4:	1e5e      	subs	r6, r3, #1
 8007fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb8:	42b3      	cmp	r3, r6
 8007fba:	db07      	blt.n	8007fcc <_dtoa_r+0x884>
 8007fbc:	1b9e      	subs	r6, r3, r6
 8007fbe:	9b07      	ldr	r3, [sp, #28]
 8007fc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	da93      	bge.n	8007eee <_dtoa_r+0x7a6>
 8007fc6:	1ae4      	subs	r4, r4, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e790      	b.n	8007eee <_dtoa_r+0x7a6>
 8007fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fd0:	1af3      	subs	r3, r6, r3
 8007fd2:	18d3      	adds	r3, r2, r3
 8007fd4:	960e      	str	r6, [sp, #56]	; 0x38
 8007fd6:	9315      	str	r3, [sp, #84]	; 0x54
 8007fd8:	2600      	movs	r6, #0
 8007fda:	e7f0      	b.n	8007fbe <_dtoa_r+0x876>
 8007fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fde:	e7c0      	b.n	8007f62 <_dtoa_r+0x81a>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	dc13      	bgt.n	8008012 <_dtoa_r+0x8ca>
 8007fea:	2300      	movs	r3, #0
 8007fec:	930e      	str	r3, [sp, #56]	; 0x38
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10e      	bne.n	8008012 <_dtoa_r+0x8ca>
 8007ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff6:	031b      	lsls	r3, r3, #12
 8007ff8:	d10b      	bne.n	8008012 <_dtoa_r+0x8ca>
 8007ffa:	4b5d      	ldr	r3, [pc, #372]	; (8008170 <_dtoa_r+0xa28>)
 8007ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffe:	4213      	tst	r3, r2
 8008000:	d007      	beq.n	8008012 <_dtoa_r+0x8ca>
 8008002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008004:	3301      	adds	r3, #1
 8008006:	930a      	str	r3, [sp, #40]	; 0x28
 8008008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800a:	3301      	adds	r3, #1
 800800c:	930d      	str	r3, [sp, #52]	; 0x34
 800800e:	2301      	movs	r3, #1
 8008010:	930e      	str	r3, [sp, #56]	; 0x38
 8008012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008014:	2001      	movs	r0, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1bb      	bne.n	8007f92 <_dtoa_r+0x84a>
 800801a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800801c:	221f      	movs	r2, #31
 800801e:	1818      	adds	r0, r3, r0
 8008020:	0003      	movs	r3, r0
 8008022:	4013      	ands	r3, r2
 8008024:	4210      	tst	r0, r2
 8008026:	d046      	beq.n	80080b6 <_dtoa_r+0x96e>
 8008028:	3201      	adds	r2, #1
 800802a:	1ad2      	subs	r2, r2, r3
 800802c:	2a04      	cmp	r2, #4
 800802e:	dd3f      	ble.n	80080b0 <_dtoa_r+0x968>
 8008030:	221c      	movs	r2, #28
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008036:	18e4      	adds	r4, r4, r3
 8008038:	18d2      	adds	r2, r2, r3
 800803a:	920a      	str	r2, [sp, #40]	; 0x28
 800803c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800803e:	18d3      	adds	r3, r2, r3
 8008040:	930d      	str	r3, [sp, #52]	; 0x34
 8008042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd05      	ble.n	8008054 <_dtoa_r+0x90c>
 8008048:	001a      	movs	r2, r3
 800804a:	0038      	movs	r0, r7
 800804c:	9905      	ldr	r1, [sp, #20]
 800804e:	f001 f8ab 	bl	80091a8 <__lshift>
 8008052:	9005      	str	r0, [sp, #20]
 8008054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008056:	2b00      	cmp	r3, #0
 8008058:	dd05      	ble.n	8008066 <_dtoa_r+0x91e>
 800805a:	0031      	movs	r1, r6
 800805c:	001a      	movs	r2, r3
 800805e:	0038      	movs	r0, r7
 8008060:	f001 f8a2 	bl	80091a8 <__lshift>
 8008064:	0006      	movs	r6, r0
 8008066:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008068:	2b00      	cmp	r3, #0
 800806a:	d026      	beq.n	80080ba <_dtoa_r+0x972>
 800806c:	0031      	movs	r1, r6
 800806e:	9805      	ldr	r0, [sp, #20]
 8008070:	f001 f908 	bl	8009284 <__mcmp>
 8008074:	2800      	cmp	r0, #0
 8008076:	da20      	bge.n	80080ba <_dtoa_r+0x972>
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	220a      	movs	r2, #10
 800807c:	3b01      	subs	r3, #1
 800807e:	9302      	str	r3, [sp, #8]
 8008080:	0038      	movs	r0, r7
 8008082:	2300      	movs	r3, #0
 8008084:	9905      	ldr	r1, [sp, #20]
 8008086:	f000 fe95 	bl	8008db4 <__multadd>
 800808a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800808c:	9005      	str	r0, [sp, #20]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d100      	bne.n	8008094 <_dtoa_r+0x94c>
 8008092:	e166      	b.n	8008362 <_dtoa_r+0xc1a>
 8008094:	2300      	movs	r3, #0
 8008096:	0029      	movs	r1, r5
 8008098:	220a      	movs	r2, #10
 800809a:	0038      	movs	r0, r7
 800809c:	f000 fe8a 	bl	8008db4 <__multadd>
 80080a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080a2:	0005      	movs	r5, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc47      	bgt.n	8008138 <_dtoa_r+0x9f0>
 80080a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	dc0d      	bgt.n	80080ca <_dtoa_r+0x982>
 80080ae:	e043      	b.n	8008138 <_dtoa_r+0x9f0>
 80080b0:	2a04      	cmp	r2, #4
 80080b2:	d0c6      	beq.n	8008042 <_dtoa_r+0x8fa>
 80080b4:	0013      	movs	r3, r2
 80080b6:	331c      	adds	r3, #28
 80080b8:	e7bc      	b.n	8008034 <_dtoa_r+0x8ec>
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dc35      	bgt.n	800812c <_dtoa_r+0x9e4>
 80080c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	dd32      	ble.n	800812c <_dtoa_r+0x9e4>
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	930c      	str	r3, [sp, #48]	; 0x30
 80080ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10c      	bne.n	80080ea <_dtoa_r+0x9a2>
 80080d0:	0031      	movs	r1, r6
 80080d2:	2205      	movs	r2, #5
 80080d4:	0038      	movs	r0, r7
 80080d6:	f000 fe6d 	bl	8008db4 <__multadd>
 80080da:	0006      	movs	r6, r0
 80080dc:	0001      	movs	r1, r0
 80080de:	9805      	ldr	r0, [sp, #20]
 80080e0:	f001 f8d0 	bl	8009284 <__mcmp>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	dd00      	ble.n	80080ea <_dtoa_r+0x9a2>
 80080e8:	e5a5      	b.n	8007c36 <_dtoa_r+0x4ee>
 80080ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080ec:	43db      	mvns	r3, r3
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	9b06      	ldr	r3, [sp, #24]
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	2400      	movs	r4, #0
 80080f6:	0031      	movs	r1, r6
 80080f8:	0038      	movs	r0, r7
 80080fa:	f000 fe37 	bl	8008d6c <_Bfree>
 80080fe:	2d00      	cmp	r5, #0
 8008100:	d100      	bne.n	8008104 <_dtoa_r+0x9bc>
 8008102:	e6b7      	b.n	8007e74 <_dtoa_r+0x72c>
 8008104:	2c00      	cmp	r4, #0
 8008106:	d005      	beq.n	8008114 <_dtoa_r+0x9cc>
 8008108:	42ac      	cmp	r4, r5
 800810a:	d003      	beq.n	8008114 <_dtoa_r+0x9cc>
 800810c:	0021      	movs	r1, r4
 800810e:	0038      	movs	r0, r7
 8008110:	f000 fe2c 	bl	8008d6c <_Bfree>
 8008114:	0029      	movs	r1, r5
 8008116:	0038      	movs	r0, r7
 8008118:	f000 fe28 	bl	8008d6c <_Bfree>
 800811c:	e6aa      	b.n	8007e74 <_dtoa_r+0x72c>
 800811e:	2600      	movs	r6, #0
 8008120:	0035      	movs	r5, r6
 8008122:	e7e2      	b.n	80080ea <_dtoa_r+0x9a2>
 8008124:	9602      	str	r6, [sp, #8]
 8008126:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008128:	0035      	movs	r5, r6
 800812a:	e584      	b.n	8007c36 <_dtoa_r+0x4ee>
 800812c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d100      	bne.n	8008134 <_dtoa_r+0x9ec>
 8008132:	e0ce      	b.n	80082d2 <_dtoa_r+0xb8a>
 8008134:	9b07      	ldr	r3, [sp, #28]
 8008136:	930c      	str	r3, [sp, #48]	; 0x30
 8008138:	2c00      	cmp	r4, #0
 800813a:	dd05      	ble.n	8008148 <_dtoa_r+0xa00>
 800813c:	0029      	movs	r1, r5
 800813e:	0022      	movs	r2, r4
 8008140:	0038      	movs	r0, r7
 8008142:	f001 f831 	bl	80091a8 <__lshift>
 8008146:	0005      	movs	r5, r0
 8008148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800814a:	0028      	movs	r0, r5
 800814c:	2b00      	cmp	r3, #0
 800814e:	d022      	beq.n	8008196 <_dtoa_r+0xa4e>
 8008150:	0038      	movs	r0, r7
 8008152:	6869      	ldr	r1, [r5, #4]
 8008154:	f000 fdc6 	bl	8008ce4 <_Balloc>
 8008158:	1e04      	subs	r4, r0, #0
 800815a:	d10f      	bne.n	800817c <_dtoa_r+0xa34>
 800815c:	0002      	movs	r2, r0
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <_dtoa_r+0xa2c>)
 8008160:	4905      	ldr	r1, [pc, #20]	; (8008178 <_dtoa_r+0xa30>)
 8008162:	f7ff fb06 	bl	8007772 <_dtoa_r+0x2a>
 8008166:	46c0      	nop			; (mov r8, r8)
 8008168:	40240000 	.word	0x40240000
 800816c:	00000433 	.word	0x00000433
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	0800a8d0 	.word	0x0800a8d0
 8008178:	000002ea 	.word	0x000002ea
 800817c:	0029      	movs	r1, r5
 800817e:	692b      	ldr	r3, [r5, #16]
 8008180:	310c      	adds	r1, #12
 8008182:	1c9a      	adds	r2, r3, #2
 8008184:	0092      	lsls	r2, r2, #2
 8008186:	300c      	adds	r0, #12
 8008188:	f000 fd92 	bl	8008cb0 <memcpy>
 800818c:	2201      	movs	r2, #1
 800818e:	0021      	movs	r1, r4
 8008190:	0038      	movs	r0, r7
 8008192:	f001 f809 	bl	80091a8 <__lshift>
 8008196:	9b06      	ldr	r3, [sp, #24]
 8008198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800819a:	930a      	str	r3, [sp, #40]	; 0x28
 800819c:	3b01      	subs	r3, #1
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	2201      	movs	r2, #1
 80081a2:	002c      	movs	r4, r5
 80081a4:	0005      	movs	r5, r0
 80081a6:	9314      	str	r3, [sp, #80]	; 0x50
 80081a8:	9b08      	ldr	r3, [sp, #32]
 80081aa:	4013      	ands	r3, r2
 80081ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80081ae:	0031      	movs	r1, r6
 80081b0:	9805      	ldr	r0, [sp, #20]
 80081b2:	f7ff fa3d 	bl	8007630 <quorem>
 80081b6:	0003      	movs	r3, r0
 80081b8:	0021      	movs	r1, r4
 80081ba:	3330      	adds	r3, #48	; 0x30
 80081bc:	900d      	str	r0, [sp, #52]	; 0x34
 80081be:	9805      	ldr	r0, [sp, #20]
 80081c0:	9307      	str	r3, [sp, #28]
 80081c2:	f001 f85f 	bl	8009284 <__mcmp>
 80081c6:	002a      	movs	r2, r5
 80081c8:	900e      	str	r0, [sp, #56]	; 0x38
 80081ca:	0031      	movs	r1, r6
 80081cc:	0038      	movs	r0, r7
 80081ce:	f001 f875 	bl	80092bc <__mdiff>
 80081d2:	68c3      	ldr	r3, [r0, #12]
 80081d4:	9008      	str	r0, [sp, #32]
 80081d6:	9310      	str	r3, [sp, #64]	; 0x40
 80081d8:	2301      	movs	r3, #1
 80081da:	930c      	str	r3, [sp, #48]	; 0x30
 80081dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <_dtoa_r+0xaa4>
 80081e2:	0001      	movs	r1, r0
 80081e4:	9805      	ldr	r0, [sp, #20]
 80081e6:	f001 f84d 	bl	8009284 <__mcmp>
 80081ea:	900c      	str	r0, [sp, #48]	; 0x30
 80081ec:	0038      	movs	r0, r7
 80081ee:	9908      	ldr	r1, [sp, #32]
 80081f0:	f000 fdbc 	bl	8008d6c <_Bfree>
 80081f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f8:	3301      	adds	r3, #1
 80081fa:	9308      	str	r3, [sp, #32]
 80081fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081fe:	4313      	orrs	r3, r2
 8008200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008202:	4313      	orrs	r3, r2
 8008204:	d10c      	bne.n	8008220 <_dtoa_r+0xad8>
 8008206:	9b07      	ldr	r3, [sp, #28]
 8008208:	2b39      	cmp	r3, #57	; 0x39
 800820a:	d026      	beq.n	800825a <_dtoa_r+0xb12>
 800820c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd02      	ble.n	8008218 <_dtoa_r+0xad0>
 8008212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008214:	3331      	adds	r3, #49	; 0x31
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e76a      	b.n	80080f6 <_dtoa_r+0x9ae>
 8008220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	db04      	blt.n	8008230 <_dtoa_r+0xae8>
 8008226:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008228:	4313      	orrs	r3, r2
 800822a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800822c:	4313      	orrs	r3, r2
 800822e:	d11f      	bne.n	8008270 <_dtoa_r+0xb28>
 8008230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008232:	2b00      	cmp	r3, #0
 8008234:	ddf0      	ble.n	8008218 <_dtoa_r+0xad0>
 8008236:	9905      	ldr	r1, [sp, #20]
 8008238:	2201      	movs	r2, #1
 800823a:	0038      	movs	r0, r7
 800823c:	f000 ffb4 	bl	80091a8 <__lshift>
 8008240:	0031      	movs	r1, r6
 8008242:	9005      	str	r0, [sp, #20]
 8008244:	f001 f81e 	bl	8009284 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	dc03      	bgt.n	8008254 <_dtoa_r+0xb0c>
 800824c:	d1e4      	bne.n	8008218 <_dtoa_r+0xad0>
 800824e:	9b07      	ldr	r3, [sp, #28]
 8008250:	07db      	lsls	r3, r3, #31
 8008252:	d5e1      	bpl.n	8008218 <_dtoa_r+0xad0>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	2b39      	cmp	r3, #57	; 0x39
 8008258:	d1db      	bne.n	8008212 <_dtoa_r+0xaca>
 800825a:	2339      	movs	r3, #57	; 0x39
 800825c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800825e:	7013      	strb	r3, [r2, #0]
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	9308      	str	r3, [sp, #32]
 8008264:	3b01      	subs	r3, #1
 8008266:	781a      	ldrb	r2, [r3, #0]
 8008268:	2a39      	cmp	r2, #57	; 0x39
 800826a:	d068      	beq.n	800833e <_dtoa_r+0xbf6>
 800826c:	3201      	adds	r2, #1
 800826e:	e7d5      	b.n	800821c <_dtoa_r+0xad4>
 8008270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd07      	ble.n	8008286 <_dtoa_r+0xb3e>
 8008276:	9b07      	ldr	r3, [sp, #28]
 8008278:	2b39      	cmp	r3, #57	; 0x39
 800827a:	d0ee      	beq.n	800825a <_dtoa_r+0xb12>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008280:	3301      	adds	r3, #1
 8008282:	7013      	strb	r3, [r2, #0]
 8008284:	e737      	b.n	80080f6 <_dtoa_r+0x9ae>
 8008286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008288:	9a07      	ldr	r2, [sp, #28]
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800828e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008290:	4293      	cmp	r3, r2
 8008292:	d03e      	beq.n	8008312 <_dtoa_r+0xbca>
 8008294:	2300      	movs	r3, #0
 8008296:	220a      	movs	r2, #10
 8008298:	9905      	ldr	r1, [sp, #20]
 800829a:	0038      	movs	r0, r7
 800829c:	f000 fd8a 	bl	8008db4 <__multadd>
 80082a0:	2300      	movs	r3, #0
 80082a2:	9005      	str	r0, [sp, #20]
 80082a4:	220a      	movs	r2, #10
 80082a6:	0021      	movs	r1, r4
 80082a8:	0038      	movs	r0, r7
 80082aa:	42ac      	cmp	r4, r5
 80082ac:	d106      	bne.n	80082bc <_dtoa_r+0xb74>
 80082ae:	f000 fd81 	bl	8008db4 <__multadd>
 80082b2:	0004      	movs	r4, r0
 80082b4:	0005      	movs	r5, r0
 80082b6:	9b08      	ldr	r3, [sp, #32]
 80082b8:	930a      	str	r3, [sp, #40]	; 0x28
 80082ba:	e778      	b.n	80081ae <_dtoa_r+0xa66>
 80082bc:	f000 fd7a 	bl	8008db4 <__multadd>
 80082c0:	0029      	movs	r1, r5
 80082c2:	0004      	movs	r4, r0
 80082c4:	2300      	movs	r3, #0
 80082c6:	220a      	movs	r2, #10
 80082c8:	0038      	movs	r0, r7
 80082ca:	f000 fd73 	bl	8008db4 <__multadd>
 80082ce:	0005      	movs	r5, r0
 80082d0:	e7f1      	b.n	80082b6 <_dtoa_r+0xb6e>
 80082d2:	9b07      	ldr	r3, [sp, #28]
 80082d4:	930c      	str	r3, [sp, #48]	; 0x30
 80082d6:	2400      	movs	r4, #0
 80082d8:	0031      	movs	r1, r6
 80082da:	9805      	ldr	r0, [sp, #20]
 80082dc:	f7ff f9a8 	bl	8007630 <quorem>
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	3030      	adds	r0, #48	; 0x30
 80082e4:	5518      	strb	r0, [r3, r4]
 80082e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e8:	3401      	adds	r4, #1
 80082ea:	9007      	str	r0, [sp, #28]
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	dd07      	ble.n	8008300 <_dtoa_r+0xbb8>
 80082f0:	2300      	movs	r3, #0
 80082f2:	220a      	movs	r2, #10
 80082f4:	0038      	movs	r0, r7
 80082f6:	9905      	ldr	r1, [sp, #20]
 80082f8:	f000 fd5c 	bl	8008db4 <__multadd>
 80082fc:	9005      	str	r0, [sp, #20]
 80082fe:	e7eb      	b.n	80082d8 <_dtoa_r+0xb90>
 8008300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008302:	2001      	movs	r0, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	dd00      	ble.n	800830a <_dtoa_r+0xbc2>
 8008308:	0018      	movs	r0, r3
 800830a:	2400      	movs	r4, #0
 800830c:	9b06      	ldr	r3, [sp, #24]
 800830e:	181b      	adds	r3, r3, r0
 8008310:	9308      	str	r3, [sp, #32]
 8008312:	9905      	ldr	r1, [sp, #20]
 8008314:	2201      	movs	r2, #1
 8008316:	0038      	movs	r0, r7
 8008318:	f000 ff46 	bl	80091a8 <__lshift>
 800831c:	0031      	movs	r1, r6
 800831e:	9005      	str	r0, [sp, #20]
 8008320:	f000 ffb0 	bl	8009284 <__mcmp>
 8008324:	2800      	cmp	r0, #0
 8008326:	dc9b      	bgt.n	8008260 <_dtoa_r+0xb18>
 8008328:	d102      	bne.n	8008330 <_dtoa_r+0xbe8>
 800832a:	9b07      	ldr	r3, [sp, #28]
 800832c:	07db      	lsls	r3, r3, #31
 800832e:	d497      	bmi.n	8008260 <_dtoa_r+0xb18>
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	9308      	str	r3, [sp, #32]
 8008334:	3b01      	subs	r3, #1
 8008336:	781a      	ldrb	r2, [r3, #0]
 8008338:	2a30      	cmp	r2, #48	; 0x30
 800833a:	d0fa      	beq.n	8008332 <_dtoa_r+0xbea>
 800833c:	e6db      	b.n	80080f6 <_dtoa_r+0x9ae>
 800833e:	9a06      	ldr	r2, [sp, #24]
 8008340:	429a      	cmp	r2, r3
 8008342:	d18e      	bne.n	8008262 <_dtoa_r+0xb1a>
 8008344:	9b02      	ldr	r3, [sp, #8]
 8008346:	3301      	adds	r3, #1
 8008348:	9302      	str	r3, [sp, #8]
 800834a:	2331      	movs	r3, #49	; 0x31
 800834c:	e799      	b.n	8008282 <_dtoa_r+0xb3a>
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <_dtoa_r+0xc2c>)
 8008350:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008352:	9306      	str	r3, [sp, #24]
 8008354:	4b08      	ldr	r3, [pc, #32]	; (8008378 <_dtoa_r+0xc30>)
 8008356:	2a00      	cmp	r2, #0
 8008358:	d001      	beq.n	800835e <_dtoa_r+0xc16>
 800835a:	f7ff fa3f 	bl	80077dc <_dtoa_r+0x94>
 800835e:	f7ff fa3f 	bl	80077e0 <_dtoa_r+0x98>
 8008362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008364:	2b00      	cmp	r3, #0
 8008366:	dcb6      	bgt.n	80082d6 <_dtoa_r+0xb8e>
 8008368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800836a:	2b02      	cmp	r3, #2
 800836c:	dd00      	ble.n	8008370 <_dtoa_r+0xc28>
 800836e:	e6ac      	b.n	80080ca <_dtoa_r+0x982>
 8008370:	e7b1      	b.n	80082d6 <_dtoa_r+0xb8e>
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	0800a851 	.word	0x0800a851
 8008378:	0800a859 	.word	0x0800a859

0800837c <std>:
 800837c:	2300      	movs	r3, #0
 800837e:	b510      	push	{r4, lr}
 8008380:	0004      	movs	r4, r0
 8008382:	6003      	str	r3, [r0, #0]
 8008384:	6043      	str	r3, [r0, #4]
 8008386:	6083      	str	r3, [r0, #8]
 8008388:	8181      	strh	r1, [r0, #12]
 800838a:	6643      	str	r3, [r0, #100]	; 0x64
 800838c:	0019      	movs	r1, r3
 800838e:	81c2      	strh	r2, [r0, #14]
 8008390:	6103      	str	r3, [r0, #16]
 8008392:	6143      	str	r3, [r0, #20]
 8008394:	6183      	str	r3, [r0, #24]
 8008396:	2208      	movs	r2, #8
 8008398:	305c      	adds	r0, #92	; 0x5c
 800839a:	f7fd faed 	bl	8005978 <memset>
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <std+0x38>)
 80083a0:	6224      	str	r4, [r4, #32]
 80083a2:	6263      	str	r3, [r4, #36]	; 0x24
 80083a4:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <std+0x3c>)
 80083a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <std+0x40>)
 80083aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083ac:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <std+0x44>)
 80083ae:	6323      	str	r3, [r4, #48]	; 0x30
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	08009c65 	.word	0x08009c65
 80083b8:	08009c8d 	.word	0x08009c8d
 80083bc:	08009cc5 	.word	0x08009cc5
 80083c0:	08009cf1 	.word	0x08009cf1

080083c4 <_cleanup_r>:
 80083c4:	b510      	push	{r4, lr}
 80083c6:	4902      	ldr	r1, [pc, #8]	; (80083d0 <_cleanup_r+0xc>)
 80083c8:	f000 f8ba 	bl	8008540 <_fwalk_reent>
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	0800a079 	.word	0x0800a079

080083d4 <__sfmoreglue>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	2568      	movs	r5, #104	; 0x68
 80083d8:	1e4a      	subs	r2, r1, #1
 80083da:	4355      	muls	r5, r2
 80083dc:	000e      	movs	r6, r1
 80083de:	0029      	movs	r1, r5
 80083e0:	3174      	adds	r1, #116	; 0x74
 80083e2:	f7fd fb3d 	bl	8005a60 <_malloc_r>
 80083e6:	1e04      	subs	r4, r0, #0
 80083e8:	d008      	beq.n	80083fc <__sfmoreglue+0x28>
 80083ea:	2100      	movs	r1, #0
 80083ec:	002a      	movs	r2, r5
 80083ee:	6001      	str	r1, [r0, #0]
 80083f0:	6046      	str	r6, [r0, #4]
 80083f2:	300c      	adds	r0, #12
 80083f4:	60a0      	str	r0, [r4, #8]
 80083f6:	3268      	adds	r2, #104	; 0x68
 80083f8:	f7fd fabe 	bl	8005978 <memset>
 80083fc:	0020      	movs	r0, r4
 80083fe:	bd70      	pop	{r4, r5, r6, pc}

08008400 <__sfp_lock_acquire>:
 8008400:	b510      	push	{r4, lr}
 8008402:	4802      	ldr	r0, [pc, #8]	; (800840c <__sfp_lock_acquire+0xc>)
 8008404:	f000 fc35 	bl	8008c72 <__retarget_lock_acquire_recursive>
 8008408:	bd10      	pop	{r4, pc}
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	200005a9 	.word	0x200005a9

08008410 <__sfp_lock_release>:
 8008410:	b510      	push	{r4, lr}
 8008412:	4802      	ldr	r0, [pc, #8]	; (800841c <__sfp_lock_release+0xc>)
 8008414:	f000 fc2e 	bl	8008c74 <__retarget_lock_release_recursive>
 8008418:	bd10      	pop	{r4, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	200005a9 	.word	0x200005a9

08008420 <__sinit_lock_acquire>:
 8008420:	b510      	push	{r4, lr}
 8008422:	4802      	ldr	r0, [pc, #8]	; (800842c <__sinit_lock_acquire+0xc>)
 8008424:	f000 fc25 	bl	8008c72 <__retarget_lock_acquire_recursive>
 8008428:	bd10      	pop	{r4, pc}
 800842a:	46c0      	nop			; (mov r8, r8)
 800842c:	200005aa 	.word	0x200005aa

08008430 <__sinit_lock_release>:
 8008430:	b510      	push	{r4, lr}
 8008432:	4802      	ldr	r0, [pc, #8]	; (800843c <__sinit_lock_release+0xc>)
 8008434:	f000 fc1e 	bl	8008c74 <__retarget_lock_release_recursive>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	200005aa 	.word	0x200005aa

08008440 <__sinit>:
 8008440:	b513      	push	{r0, r1, r4, lr}
 8008442:	0004      	movs	r4, r0
 8008444:	f7ff ffec 	bl	8008420 <__sinit_lock_acquire>
 8008448:	69a3      	ldr	r3, [r4, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <__sinit+0x14>
 800844e:	f7ff ffef 	bl	8008430 <__sinit_lock_release>
 8008452:	bd13      	pop	{r0, r1, r4, pc}
 8008454:	64a3      	str	r3, [r4, #72]	; 0x48
 8008456:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008458:	6523      	str	r3, [r4, #80]	; 0x50
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <__sinit+0x68>)
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <__sinit+0x6c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	62a2      	str	r2, [r4, #40]	; 0x28
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	42a3      	cmp	r3, r4
 8008466:	d101      	bne.n	800846c <__sinit+0x2c>
 8008468:	2301      	movs	r3, #1
 800846a:	61a3      	str	r3, [r4, #24]
 800846c:	0020      	movs	r0, r4
 800846e:	f000 f81f 	bl	80084b0 <__sfp>
 8008472:	6060      	str	r0, [r4, #4]
 8008474:	0020      	movs	r0, r4
 8008476:	f000 f81b 	bl	80084b0 <__sfp>
 800847a:	60a0      	str	r0, [r4, #8]
 800847c:	0020      	movs	r0, r4
 800847e:	f000 f817 	bl	80084b0 <__sfp>
 8008482:	2200      	movs	r2, #0
 8008484:	2104      	movs	r1, #4
 8008486:	60e0      	str	r0, [r4, #12]
 8008488:	6860      	ldr	r0, [r4, #4]
 800848a:	f7ff ff77 	bl	800837c <std>
 800848e:	2201      	movs	r2, #1
 8008490:	2109      	movs	r1, #9
 8008492:	68a0      	ldr	r0, [r4, #8]
 8008494:	f7ff ff72 	bl	800837c <std>
 8008498:	2202      	movs	r2, #2
 800849a:	2112      	movs	r1, #18
 800849c:	68e0      	ldr	r0, [r4, #12]
 800849e:	f7ff ff6d 	bl	800837c <std>
 80084a2:	2301      	movs	r3, #1
 80084a4:	61a3      	str	r3, [r4, #24]
 80084a6:	e7d2      	b.n	800844e <__sinit+0xe>
 80084a8:	0800a6c0 	.word	0x0800a6c0
 80084ac:	080083c5 	.word	0x080083c5

080084b0 <__sfp>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	0007      	movs	r7, r0
 80084b4:	f7ff ffa4 	bl	8008400 <__sfp_lock_acquire>
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <__sfp+0x88>)
 80084ba:	681e      	ldr	r6, [r3, #0]
 80084bc:	69b3      	ldr	r3, [r6, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d102      	bne.n	80084c8 <__sfp+0x18>
 80084c2:	0030      	movs	r0, r6
 80084c4:	f7ff ffbc 	bl	8008440 <__sinit>
 80084c8:	3648      	adds	r6, #72	; 0x48
 80084ca:	68b4      	ldr	r4, [r6, #8]
 80084cc:	6873      	ldr	r3, [r6, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	d504      	bpl.n	80084dc <__sfp+0x2c>
 80084d2:	6833      	ldr	r3, [r6, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d022      	beq.n	800851e <__sfp+0x6e>
 80084d8:	6836      	ldr	r6, [r6, #0]
 80084da:	e7f6      	b.n	80084ca <__sfp+0x1a>
 80084dc:	220c      	movs	r2, #12
 80084de:	5ea5      	ldrsh	r5, [r4, r2]
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	d11a      	bne.n	800851a <__sfp+0x6a>
 80084e4:	0020      	movs	r0, r4
 80084e6:	4b15      	ldr	r3, [pc, #84]	; (800853c <__sfp+0x8c>)
 80084e8:	3058      	adds	r0, #88	; 0x58
 80084ea:	60e3      	str	r3, [r4, #12]
 80084ec:	6665      	str	r5, [r4, #100]	; 0x64
 80084ee:	f000 fbbf 	bl	8008c70 <__retarget_lock_init_recursive>
 80084f2:	f7ff ff8d 	bl	8008410 <__sfp_lock_release>
 80084f6:	0020      	movs	r0, r4
 80084f8:	2208      	movs	r2, #8
 80084fa:	0029      	movs	r1, r5
 80084fc:	6025      	str	r5, [r4, #0]
 80084fe:	60a5      	str	r5, [r4, #8]
 8008500:	6065      	str	r5, [r4, #4]
 8008502:	6125      	str	r5, [r4, #16]
 8008504:	6165      	str	r5, [r4, #20]
 8008506:	61a5      	str	r5, [r4, #24]
 8008508:	305c      	adds	r0, #92	; 0x5c
 800850a:	f7fd fa35 	bl	8005978 <memset>
 800850e:	6365      	str	r5, [r4, #52]	; 0x34
 8008510:	63a5      	str	r5, [r4, #56]	; 0x38
 8008512:	64a5      	str	r5, [r4, #72]	; 0x48
 8008514:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008516:	0020      	movs	r0, r4
 8008518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851a:	3468      	adds	r4, #104	; 0x68
 800851c:	e7d7      	b.n	80084ce <__sfp+0x1e>
 800851e:	2104      	movs	r1, #4
 8008520:	0038      	movs	r0, r7
 8008522:	f7ff ff57 	bl	80083d4 <__sfmoreglue>
 8008526:	1e04      	subs	r4, r0, #0
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	d1d5      	bne.n	80084d8 <__sfp+0x28>
 800852c:	f7ff ff70 	bl	8008410 <__sfp_lock_release>
 8008530:	230c      	movs	r3, #12
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	e7ef      	b.n	8008516 <__sfp+0x66>
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	0800a6c0 	.word	0x0800a6c0
 800853c:	ffff0001 	.word	0xffff0001

08008540 <_fwalk_reent>:
 8008540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008542:	0004      	movs	r4, r0
 8008544:	0006      	movs	r6, r0
 8008546:	2700      	movs	r7, #0
 8008548:	9101      	str	r1, [sp, #4]
 800854a:	3448      	adds	r4, #72	; 0x48
 800854c:	6863      	ldr	r3, [r4, #4]
 800854e:	68a5      	ldr	r5, [r4, #8]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	3b01      	subs	r3, #1
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	d504      	bpl.n	8008564 <_fwalk_reent+0x24>
 800855a:	6824      	ldr	r4, [r4, #0]
 800855c:	2c00      	cmp	r4, #0
 800855e:	d1f5      	bne.n	800854c <_fwalk_reent+0xc>
 8008560:	0038      	movs	r0, r7
 8008562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008564:	89ab      	ldrh	r3, [r5, #12]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d908      	bls.n	800857c <_fwalk_reent+0x3c>
 800856a:	220e      	movs	r2, #14
 800856c:	5eab      	ldrsh	r3, [r5, r2]
 800856e:	3301      	adds	r3, #1
 8008570:	d004      	beq.n	800857c <_fwalk_reent+0x3c>
 8008572:	0029      	movs	r1, r5
 8008574:	0030      	movs	r0, r6
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	4798      	blx	r3
 800857a:	4307      	orrs	r7, r0
 800857c:	3568      	adds	r5, #104	; 0x68
 800857e:	e7e8      	b.n	8008552 <_fwalk_reent+0x12>

08008580 <rshift>:
 8008580:	0002      	movs	r2, r0
 8008582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008584:	6904      	ldr	r4, [r0, #16]
 8008586:	3214      	adds	r2, #20
 8008588:	0013      	movs	r3, r2
 800858a:	b085      	sub	sp, #20
 800858c:	114f      	asrs	r7, r1, #5
 800858e:	42bc      	cmp	r4, r7
 8008590:	dd31      	ble.n	80085f6 <rshift+0x76>
 8008592:	00bb      	lsls	r3, r7, #2
 8008594:	18d3      	adds	r3, r2, r3
 8008596:	261f      	movs	r6, #31
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	000b      	movs	r3, r1
 800859c:	00a5      	lsls	r5, r4, #2
 800859e:	4033      	ands	r3, r6
 80085a0:	1955      	adds	r5, r2, r5
 80085a2:	9302      	str	r3, [sp, #8]
 80085a4:	4231      	tst	r1, r6
 80085a6:	d10c      	bne.n	80085c2 <rshift+0x42>
 80085a8:	0016      	movs	r6, r2
 80085aa:	9901      	ldr	r1, [sp, #4]
 80085ac:	428d      	cmp	r5, r1
 80085ae:	d838      	bhi.n	8008622 <rshift+0xa2>
 80085b0:	9901      	ldr	r1, [sp, #4]
 80085b2:	2300      	movs	r3, #0
 80085b4:	3903      	subs	r1, #3
 80085b6:	428d      	cmp	r5, r1
 80085b8:	d301      	bcc.n	80085be <rshift+0x3e>
 80085ba:	1be3      	subs	r3, r4, r7
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	18d3      	adds	r3, r2, r3
 80085c0:	e019      	b.n	80085f6 <rshift+0x76>
 80085c2:	2120      	movs	r1, #32
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	9e01      	ldr	r6, [sp, #4]
 80085c8:	1acb      	subs	r3, r1, r3
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	ce02      	ldmia	r6!, {r1}
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	4694      	mov	ip, r2
 80085d2:	40d9      	lsrs	r1, r3
 80085d4:	9100      	str	r1, [sp, #0]
 80085d6:	42b5      	cmp	r5, r6
 80085d8:	d816      	bhi.n	8008608 <rshift+0x88>
 80085da:	9e01      	ldr	r6, [sp, #4]
 80085dc:	2300      	movs	r3, #0
 80085de:	3601      	adds	r6, #1
 80085e0:	42b5      	cmp	r5, r6
 80085e2:	d302      	bcc.n	80085ea <rshift+0x6a>
 80085e4:	1be3      	subs	r3, r4, r7
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	3b04      	subs	r3, #4
 80085ea:	9900      	ldr	r1, [sp, #0]
 80085ec:	18d3      	adds	r3, r2, r3
 80085ee:	6019      	str	r1, [r3, #0]
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d000      	beq.n	80085f6 <rshift+0x76>
 80085f4:	3304      	adds	r3, #4
 80085f6:	1a99      	subs	r1, r3, r2
 80085f8:	1089      	asrs	r1, r1, #2
 80085fa:	6101      	str	r1, [r0, #16]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d101      	bne.n	8008604 <rshift+0x84>
 8008600:	2300      	movs	r3, #0
 8008602:	6143      	str	r3, [r0, #20]
 8008604:	b005      	add	sp, #20
 8008606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	9903      	ldr	r1, [sp, #12]
 800860c:	408b      	lsls	r3, r1
 800860e:	9900      	ldr	r1, [sp, #0]
 8008610:	4319      	orrs	r1, r3
 8008612:	4663      	mov	r3, ip
 8008614:	c302      	stmia	r3!, {r1}
 8008616:	469c      	mov	ip, r3
 8008618:	ce02      	ldmia	r6!, {r1}
 800861a:	9b02      	ldr	r3, [sp, #8]
 800861c:	40d9      	lsrs	r1, r3
 800861e:	9100      	str	r1, [sp, #0]
 8008620:	e7d9      	b.n	80085d6 <rshift+0x56>
 8008622:	c908      	ldmia	r1!, {r3}
 8008624:	c608      	stmia	r6!, {r3}
 8008626:	e7c1      	b.n	80085ac <rshift+0x2c>

08008628 <__hexdig_fun>:
 8008628:	0002      	movs	r2, r0
 800862a:	3a30      	subs	r2, #48	; 0x30
 800862c:	0003      	movs	r3, r0
 800862e:	2a09      	cmp	r2, #9
 8008630:	d802      	bhi.n	8008638 <__hexdig_fun+0x10>
 8008632:	3b20      	subs	r3, #32
 8008634:	b2d8      	uxtb	r0, r3
 8008636:	4770      	bx	lr
 8008638:	0002      	movs	r2, r0
 800863a:	3a61      	subs	r2, #97	; 0x61
 800863c:	2a05      	cmp	r2, #5
 800863e:	d801      	bhi.n	8008644 <__hexdig_fun+0x1c>
 8008640:	3b47      	subs	r3, #71	; 0x47
 8008642:	e7f7      	b.n	8008634 <__hexdig_fun+0xc>
 8008644:	001a      	movs	r2, r3
 8008646:	3a41      	subs	r2, #65	; 0x41
 8008648:	2000      	movs	r0, #0
 800864a:	2a05      	cmp	r2, #5
 800864c:	d8f3      	bhi.n	8008636 <__hexdig_fun+0xe>
 800864e:	3b27      	subs	r3, #39	; 0x27
 8008650:	e7f0      	b.n	8008634 <__hexdig_fun+0xc>
	...

08008654 <__gethex>:
 8008654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008656:	b08d      	sub	sp, #52	; 0x34
 8008658:	930a      	str	r3, [sp, #40]	; 0x28
 800865a:	4bbf      	ldr	r3, [pc, #764]	; (8008958 <__gethex+0x304>)
 800865c:	9005      	str	r0, [sp, #20]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	9109      	str	r1, [sp, #36]	; 0x24
 8008662:	0018      	movs	r0, r3
 8008664:	9202      	str	r2, [sp, #8]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	f7f7 fd4e 	bl	8000108 <strlen>
 800866c:	2202      	movs	r2, #2
 800866e:	9b07      	ldr	r3, [sp, #28]
 8008670:	4252      	negs	r2, r2
 8008672:	181b      	adds	r3, r3, r0
 8008674:	3b01      	subs	r3, #1
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	9003      	str	r0, [sp, #12]
 800867a:	930b      	str	r3, [sp, #44]	; 0x2c
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	1c8b      	adds	r3, r1, #2
 8008682:	1a52      	subs	r2, r2, r1
 8008684:	18d1      	adds	r1, r2, r3
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	9108      	str	r1, [sp, #32]
 800868a:	9901      	ldr	r1, [sp, #4]
 800868c:	3301      	adds	r3, #1
 800868e:	7808      	ldrb	r0, [r1, #0]
 8008690:	2830      	cmp	r0, #48	; 0x30
 8008692:	d0f7      	beq.n	8008684 <__gethex+0x30>
 8008694:	f7ff ffc8 	bl	8008628 <__hexdig_fun>
 8008698:	2300      	movs	r3, #0
 800869a:	001c      	movs	r4, r3
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	4298      	cmp	r0, r3
 80086a0:	d11f      	bne.n	80086e2 <__gethex+0x8e>
 80086a2:	9a03      	ldr	r2, [sp, #12]
 80086a4:	9907      	ldr	r1, [sp, #28]
 80086a6:	9801      	ldr	r0, [sp, #4]
 80086a8:	f001 fb28 	bl	8009cfc <strncmp>
 80086ac:	0007      	movs	r7, r0
 80086ae:	42a0      	cmp	r0, r4
 80086b0:	d000      	beq.n	80086b4 <__gethex+0x60>
 80086b2:	e06b      	b.n	800878c <__gethex+0x138>
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	9a03      	ldr	r2, [sp, #12]
 80086b8:	5c98      	ldrb	r0, [r3, r2]
 80086ba:	189d      	adds	r5, r3, r2
 80086bc:	f7ff ffb4 	bl	8008628 <__hexdig_fun>
 80086c0:	2301      	movs	r3, #1
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d030      	beq.n	800872a <__gethex+0xd6>
 80086c8:	9501      	str	r5, [sp, #4]
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	7818      	ldrb	r0, [r3, #0]
 80086ce:	2830      	cmp	r0, #48	; 0x30
 80086d0:	d009      	beq.n	80086e6 <__gethex+0x92>
 80086d2:	f7ff ffa9 	bl	8008628 <__hexdig_fun>
 80086d6:	4242      	negs	r2, r0
 80086d8:	4142      	adcs	r2, r0
 80086da:	2301      	movs	r3, #1
 80086dc:	002c      	movs	r4, r5
 80086de:	9204      	str	r2, [sp, #16]
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	9d01      	ldr	r5, [sp, #4]
 80086e4:	e004      	b.n	80086f0 <__gethex+0x9c>
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	e7ed      	b.n	80086ca <__gethex+0x76>
 80086ee:	3501      	adds	r5, #1
 80086f0:	7828      	ldrb	r0, [r5, #0]
 80086f2:	f7ff ff99 	bl	8008628 <__hexdig_fun>
 80086f6:	1e07      	subs	r7, r0, #0
 80086f8:	d1f9      	bne.n	80086ee <__gethex+0x9a>
 80086fa:	0028      	movs	r0, r5
 80086fc:	9a03      	ldr	r2, [sp, #12]
 80086fe:	9907      	ldr	r1, [sp, #28]
 8008700:	f001 fafc 	bl	8009cfc <strncmp>
 8008704:	2800      	cmp	r0, #0
 8008706:	d10e      	bne.n	8008726 <__gethex+0xd2>
 8008708:	2c00      	cmp	r4, #0
 800870a:	d107      	bne.n	800871c <__gethex+0xc8>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	18ed      	adds	r5, r5, r3
 8008710:	002c      	movs	r4, r5
 8008712:	7828      	ldrb	r0, [r5, #0]
 8008714:	f7ff ff88 	bl	8008628 <__hexdig_fun>
 8008718:	2800      	cmp	r0, #0
 800871a:	d102      	bne.n	8008722 <__gethex+0xce>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	00a7      	lsls	r7, r4, #2
 8008720:	e003      	b.n	800872a <__gethex+0xd6>
 8008722:	3501      	adds	r5, #1
 8008724:	e7f5      	b.n	8008712 <__gethex+0xbe>
 8008726:	2c00      	cmp	r4, #0
 8008728:	d1f8      	bne.n	800871c <__gethex+0xc8>
 800872a:	2220      	movs	r2, #32
 800872c:	782b      	ldrb	r3, [r5, #0]
 800872e:	002e      	movs	r6, r5
 8008730:	4393      	bics	r3, r2
 8008732:	2b50      	cmp	r3, #80	; 0x50
 8008734:	d11d      	bne.n	8008772 <__gethex+0x11e>
 8008736:	786b      	ldrb	r3, [r5, #1]
 8008738:	2b2b      	cmp	r3, #43	; 0x2b
 800873a:	d02c      	beq.n	8008796 <__gethex+0x142>
 800873c:	2b2d      	cmp	r3, #45	; 0x2d
 800873e:	d02e      	beq.n	800879e <__gethex+0x14a>
 8008740:	2300      	movs	r3, #0
 8008742:	1c6e      	adds	r6, r5, #1
 8008744:	9306      	str	r3, [sp, #24]
 8008746:	7830      	ldrb	r0, [r6, #0]
 8008748:	f7ff ff6e 	bl	8008628 <__hexdig_fun>
 800874c:	1e43      	subs	r3, r0, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b18      	cmp	r3, #24
 8008752:	d82b      	bhi.n	80087ac <__gethex+0x158>
 8008754:	3810      	subs	r0, #16
 8008756:	0004      	movs	r4, r0
 8008758:	7870      	ldrb	r0, [r6, #1]
 800875a:	f7ff ff65 	bl	8008628 <__hexdig_fun>
 800875e:	1e43      	subs	r3, r0, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	3601      	adds	r6, #1
 8008764:	2b18      	cmp	r3, #24
 8008766:	d91c      	bls.n	80087a2 <__gethex+0x14e>
 8008768:	9b06      	ldr	r3, [sp, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d000      	beq.n	8008770 <__gethex+0x11c>
 800876e:	4264      	negs	r4, r4
 8008770:	193f      	adds	r7, r7, r4
 8008772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008774:	601e      	str	r6, [r3, #0]
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d019      	beq.n	80087b0 <__gethex+0x15c>
 800877c:	2600      	movs	r6, #0
 800877e:	9b08      	ldr	r3, [sp, #32]
 8008780:	42b3      	cmp	r3, r6
 8008782:	d100      	bne.n	8008786 <__gethex+0x132>
 8008784:	3606      	adds	r6, #6
 8008786:	0030      	movs	r0, r6
 8008788:	b00d      	add	sp, #52	; 0x34
 800878a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800878c:	2301      	movs	r3, #1
 800878e:	2700      	movs	r7, #0
 8008790:	9d01      	ldr	r5, [sp, #4]
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	e7c9      	b.n	800872a <__gethex+0xd6>
 8008796:	2300      	movs	r3, #0
 8008798:	9306      	str	r3, [sp, #24]
 800879a:	1cae      	adds	r6, r5, #2
 800879c:	e7d3      	b.n	8008746 <__gethex+0xf2>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7fa      	b.n	8008798 <__gethex+0x144>
 80087a2:	230a      	movs	r3, #10
 80087a4:	435c      	muls	r4, r3
 80087a6:	1824      	adds	r4, r4, r0
 80087a8:	3c10      	subs	r4, #16
 80087aa:	e7d5      	b.n	8008758 <__gethex+0x104>
 80087ac:	002e      	movs	r6, r5
 80087ae:	e7e0      	b.n	8008772 <__gethex+0x11e>
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	9904      	ldr	r1, [sp, #16]
 80087b4:	1aeb      	subs	r3, r5, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	2b07      	cmp	r3, #7
 80087ba:	dc0a      	bgt.n	80087d2 <__gethex+0x17e>
 80087bc:	9805      	ldr	r0, [sp, #20]
 80087be:	f000 fa91 	bl	8008ce4 <_Balloc>
 80087c2:	1e04      	subs	r4, r0, #0
 80087c4:	d108      	bne.n	80087d8 <__gethex+0x184>
 80087c6:	0002      	movs	r2, r0
 80087c8:	21de      	movs	r1, #222	; 0xde
 80087ca:	4b64      	ldr	r3, [pc, #400]	; (800895c <__gethex+0x308>)
 80087cc:	4864      	ldr	r0, [pc, #400]	; (8008960 <__gethex+0x30c>)
 80087ce:	f001 fb97 	bl	8009f00 <__assert_func>
 80087d2:	3101      	adds	r1, #1
 80087d4:	105b      	asrs	r3, r3, #1
 80087d6:	e7ef      	b.n	80087b8 <__gethex+0x164>
 80087d8:	0003      	movs	r3, r0
 80087da:	3314      	adds	r3, #20
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	2300      	movs	r3, #0
 80087e2:	001e      	movs	r6, r3
 80087e4:	9306      	str	r3, [sp, #24]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	d340      	bcc.n	800886e <__gethex+0x21a>
 80087ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	c540      	stmia	r5!, {r6}
 80087f2:	1aed      	subs	r5, r5, r3
 80087f4:	10ad      	asrs	r5, r5, #2
 80087f6:	0030      	movs	r0, r6
 80087f8:	6125      	str	r5, [r4, #16]
 80087fa:	f000 fb6b 	bl	8008ed4 <__hi0bits>
 80087fe:	9b02      	ldr	r3, [sp, #8]
 8008800:	016d      	lsls	r5, r5, #5
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	1a2e      	subs	r6, r5, r0
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	429e      	cmp	r6, r3
 800880a:	dd5a      	ble.n	80088c2 <__gethex+0x26e>
 800880c:	1af6      	subs	r6, r6, r3
 800880e:	0031      	movs	r1, r6
 8008810:	0020      	movs	r0, r4
 8008812:	f000 ff0d 	bl	8009630 <__any_on>
 8008816:	1e05      	subs	r5, r0, #0
 8008818:	d016      	beq.n	8008848 <__gethex+0x1f4>
 800881a:	2501      	movs	r5, #1
 800881c:	211f      	movs	r1, #31
 800881e:	0028      	movs	r0, r5
 8008820:	1e73      	subs	r3, r6, #1
 8008822:	4019      	ands	r1, r3
 8008824:	4088      	lsls	r0, r1
 8008826:	0001      	movs	r1, r0
 8008828:	115a      	asrs	r2, r3, #5
 800882a:	9804      	ldr	r0, [sp, #16]
 800882c:	0092      	lsls	r2, r2, #2
 800882e:	5812      	ldr	r2, [r2, r0]
 8008830:	420a      	tst	r2, r1
 8008832:	d009      	beq.n	8008848 <__gethex+0x1f4>
 8008834:	42ab      	cmp	r3, r5
 8008836:	dd06      	ble.n	8008846 <__gethex+0x1f2>
 8008838:	0020      	movs	r0, r4
 800883a:	1eb1      	subs	r1, r6, #2
 800883c:	f000 fef8 	bl	8009630 <__any_on>
 8008840:	3502      	adds	r5, #2
 8008842:	2800      	cmp	r0, #0
 8008844:	d100      	bne.n	8008848 <__gethex+0x1f4>
 8008846:	2502      	movs	r5, #2
 8008848:	0031      	movs	r1, r6
 800884a:	0020      	movs	r0, r4
 800884c:	f7ff fe98 	bl	8008580 <rshift>
 8008850:	19bf      	adds	r7, r7, r6
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	42bb      	cmp	r3, r7
 800885a:	da42      	bge.n	80088e2 <__gethex+0x28e>
 800885c:	0021      	movs	r1, r4
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	f000 fa84 	bl	8008d6c <_Bfree>
 8008864:	2300      	movs	r3, #0
 8008866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008868:	26a3      	movs	r6, #163	; 0xa3
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	e78b      	b.n	8008786 <__gethex+0x132>
 800886e:	1e6b      	subs	r3, r5, #1
 8008870:	9308      	str	r3, [sp, #32]
 8008872:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4293      	cmp	r3, r2
 8008878:	d014      	beq.n	80088a4 <__gethex+0x250>
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	2b20      	cmp	r3, #32
 800887e:	d104      	bne.n	800888a <__gethex+0x236>
 8008880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008882:	c340      	stmia	r3!, {r6}
 8008884:	2600      	movs	r6, #0
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
 8008888:	9606      	str	r6, [sp, #24]
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	7818      	ldrb	r0, [r3, #0]
 800888e:	f7ff fecb 	bl	8008628 <__hexdig_fun>
 8008892:	230f      	movs	r3, #15
 8008894:	4018      	ands	r0, r3
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	9d08      	ldr	r5, [sp, #32]
 800889a:	4098      	lsls	r0, r3
 800889c:	3304      	adds	r3, #4
 800889e:	4306      	orrs	r6, r0
 80088a0:	9306      	str	r3, [sp, #24]
 80088a2:	e7a0      	b.n	80087e6 <__gethex+0x192>
 80088a4:	2301      	movs	r3, #1
 80088a6:	9a03      	ldr	r2, [sp, #12]
 80088a8:	1a9d      	subs	r5, r3, r2
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	195d      	adds	r5, r3, r5
 80088ae:	9b01      	ldr	r3, [sp, #4]
 80088b0:	429d      	cmp	r5, r3
 80088b2:	d3e2      	bcc.n	800887a <__gethex+0x226>
 80088b4:	0028      	movs	r0, r5
 80088b6:	9907      	ldr	r1, [sp, #28]
 80088b8:	f001 fa20 	bl	8009cfc <strncmp>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d1dc      	bne.n	800887a <__gethex+0x226>
 80088c0:	e791      	b.n	80087e6 <__gethex+0x192>
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	2500      	movs	r5, #0
 80088c6:	429e      	cmp	r6, r3
 80088c8:	dac3      	bge.n	8008852 <__gethex+0x1fe>
 80088ca:	1b9e      	subs	r6, r3, r6
 80088cc:	0021      	movs	r1, r4
 80088ce:	0032      	movs	r2, r6
 80088d0:	9805      	ldr	r0, [sp, #20]
 80088d2:	f000 fc69 	bl	80091a8 <__lshift>
 80088d6:	0003      	movs	r3, r0
 80088d8:	3314      	adds	r3, #20
 80088da:	0004      	movs	r4, r0
 80088dc:	1bbf      	subs	r7, r7, r6
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	e7b7      	b.n	8008852 <__gethex+0x1fe>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	685e      	ldr	r6, [r3, #4]
 80088e6:	42be      	cmp	r6, r7
 80088e8:	dd71      	ble.n	80089ce <__gethex+0x37a>
 80088ea:	9b01      	ldr	r3, [sp, #4]
 80088ec:	1bf6      	subs	r6, r6, r7
 80088ee:	42b3      	cmp	r3, r6
 80088f0:	dc38      	bgt.n	8008964 <__gethex+0x310>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d026      	beq.n	8008948 <__gethex+0x2f4>
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d028      	beq.n	8008950 <__gethex+0x2fc>
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d119      	bne.n	8008936 <__gethex+0x2e2>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	42b3      	cmp	r3, r6
 8008906:	d116      	bne.n	8008936 <__gethex+0x2e2>
 8008908:	2b01      	cmp	r3, #1
 800890a:	d10d      	bne.n	8008928 <__gethex+0x2d4>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	2662      	movs	r6, #98	; 0x62
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	2301      	movs	r3, #1
 800891c:	9a04      	ldr	r2, [sp, #16]
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008924:	601c      	str	r4, [r3, #0]
 8008926:	e72e      	b.n	8008786 <__gethex+0x132>
 8008928:	9901      	ldr	r1, [sp, #4]
 800892a:	0020      	movs	r0, r4
 800892c:	3901      	subs	r1, #1
 800892e:	f000 fe7f 	bl	8009630 <__any_on>
 8008932:	2800      	cmp	r0, #0
 8008934:	d1ea      	bne.n	800890c <__gethex+0x2b8>
 8008936:	0021      	movs	r1, r4
 8008938:	9805      	ldr	r0, [sp, #20]
 800893a:	f000 fa17 	bl	8008d6c <_Bfree>
 800893e:	2300      	movs	r3, #0
 8008940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008942:	2650      	movs	r6, #80	; 0x50
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e71e      	b.n	8008786 <__gethex+0x132>
 8008948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f3      	bne.n	8008936 <__gethex+0x2e2>
 800894e:	e7dd      	b.n	800890c <__gethex+0x2b8>
 8008950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1da      	bne.n	800890c <__gethex+0x2b8>
 8008956:	e7ee      	b.n	8008936 <__gethex+0x2e2>
 8008958:	0800a9ac 	.word	0x0800a9ac
 800895c:	0800a8d0 	.word	0x0800a8d0
 8008960:	0800a944 	.word	0x0800a944
 8008964:	1e77      	subs	r7, r6, #1
 8008966:	2d00      	cmp	r5, #0
 8008968:	d12f      	bne.n	80089ca <__gethex+0x376>
 800896a:	2f00      	cmp	r7, #0
 800896c:	d004      	beq.n	8008978 <__gethex+0x324>
 800896e:	0039      	movs	r1, r7
 8008970:	0020      	movs	r0, r4
 8008972:	f000 fe5d 	bl	8009630 <__any_on>
 8008976:	0005      	movs	r5, r0
 8008978:	231f      	movs	r3, #31
 800897a:	117a      	asrs	r2, r7, #5
 800897c:	401f      	ands	r7, r3
 800897e:	3b1e      	subs	r3, #30
 8008980:	40bb      	lsls	r3, r7
 8008982:	9904      	ldr	r1, [sp, #16]
 8008984:	0092      	lsls	r2, r2, #2
 8008986:	5852      	ldr	r2, [r2, r1]
 8008988:	421a      	tst	r2, r3
 800898a:	d001      	beq.n	8008990 <__gethex+0x33c>
 800898c:	2302      	movs	r3, #2
 800898e:	431d      	orrs	r5, r3
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	0031      	movs	r1, r6
 8008994:	1b9b      	subs	r3, r3, r6
 8008996:	2602      	movs	r6, #2
 8008998:	0020      	movs	r0, r4
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	f7ff fdf0 	bl	8008580 <rshift>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	685f      	ldr	r7, [r3, #4]
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	d041      	beq.n	8008a2c <__gethex+0x3d8>
 80089a8:	9b02      	ldr	r3, [sp, #8]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d010      	beq.n	80089d2 <__gethex+0x37e>
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d012      	beq.n	80089da <__gethex+0x386>
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d106      	bne.n	80089c6 <__gethex+0x372>
 80089b8:	07aa      	lsls	r2, r5, #30
 80089ba:	d504      	bpl.n	80089c6 <__gethex+0x372>
 80089bc:	9a04      	ldr	r2, [sp, #16]
 80089be:	6810      	ldr	r0, [r2, #0]
 80089c0:	4305      	orrs	r5, r0
 80089c2:	421d      	tst	r5, r3
 80089c4:	d10c      	bne.n	80089e0 <__gethex+0x38c>
 80089c6:	2310      	movs	r3, #16
 80089c8:	e02f      	b.n	8008a2a <__gethex+0x3d6>
 80089ca:	2501      	movs	r5, #1
 80089cc:	e7d4      	b.n	8008978 <__gethex+0x324>
 80089ce:	2601      	movs	r6, #1
 80089d0:	e7e8      	b.n	80089a4 <__gethex+0x350>
 80089d2:	2301      	movs	r3, #1
 80089d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80089da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f2      	beq.n	80089c6 <__gethex+0x372>
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	2000      	movs	r0, #0
 80089e4:	9303      	str	r3, [sp, #12]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	0023      	movs	r3, r4
 80089ec:	9a04      	ldr	r2, [sp, #16]
 80089ee:	3314      	adds	r3, #20
 80089f0:	1899      	adds	r1, r3, r2
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	1c55      	adds	r5, r2, #1
 80089f6:	d01e      	beq.n	8008a36 <__gethex+0x3e2>
 80089f8:	3201      	adds	r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	0023      	movs	r3, r4
 80089fe:	3314      	adds	r3, #20
 8008a00:	2e02      	cmp	r6, #2
 8008a02:	d140      	bne.n	8008a86 <__gethex+0x432>
 8008a04:	9a02      	ldr	r2, [sp, #8]
 8008a06:	9901      	ldr	r1, [sp, #4]
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	d10b      	bne.n	8008a28 <__gethex+0x3d4>
 8008a10:	114a      	asrs	r2, r1, #5
 8008a12:	211f      	movs	r1, #31
 8008a14:	9801      	ldr	r0, [sp, #4]
 8008a16:	0092      	lsls	r2, r2, #2
 8008a18:	4001      	ands	r1, r0
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	0005      	movs	r5, r0
 8008a1e:	408d      	lsls	r5, r1
 8008a20:	58d3      	ldr	r3, [r2, r3]
 8008a22:	422b      	tst	r3, r5
 8008a24:	d000      	beq.n	8008a28 <__gethex+0x3d4>
 8008a26:	2601      	movs	r6, #1
 8008a28:	2320      	movs	r3, #32
 8008a2a:	431e      	orrs	r6, r3
 8008a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a2e:	601c      	str	r4, [r3, #0]
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	601f      	str	r7, [r3, #0]
 8008a34:	e6a7      	b.n	8008786 <__gethex+0x132>
 8008a36:	c301      	stmia	r3!, {r0}
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d8da      	bhi.n	80089f2 <__gethex+0x39e>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	68a2      	ldr	r2, [r4, #8]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	db17      	blt.n	8008a74 <__gethex+0x420>
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	9805      	ldr	r0, [sp, #20]
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	f000 f94b 	bl	8008ce4 <_Balloc>
 8008a4e:	1e05      	subs	r5, r0, #0
 8008a50:	d103      	bne.n	8008a5a <__gethex+0x406>
 8008a52:	0002      	movs	r2, r0
 8008a54:	2184      	movs	r1, #132	; 0x84
 8008a56:	4b1c      	ldr	r3, [pc, #112]	; (8008ac8 <__gethex+0x474>)
 8008a58:	e6b8      	b.n	80087cc <__gethex+0x178>
 8008a5a:	0021      	movs	r1, r4
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	310c      	adds	r1, #12
 8008a60:	1c9a      	adds	r2, r3, #2
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	300c      	adds	r0, #12
 8008a66:	f000 f923 	bl	8008cb0 <memcpy>
 8008a6a:	0021      	movs	r1, r4
 8008a6c:	9805      	ldr	r0, [sp, #20]
 8008a6e:	f000 f97d 	bl	8008d6c <_Bfree>
 8008a72:	002c      	movs	r4, r5
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	6122      	str	r2, [r4, #16]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	18e3      	adds	r3, r4, r3
 8008a82:	605a      	str	r2, [r3, #4]
 8008a84:	e7ba      	b.n	80089fc <__gethex+0x3a8>
 8008a86:	6922      	ldr	r2, [r4, #16]
 8008a88:	9903      	ldr	r1, [sp, #12]
 8008a8a:	428a      	cmp	r2, r1
 8008a8c:	dd09      	ble.n	8008aa2 <__gethex+0x44e>
 8008a8e:	2101      	movs	r1, #1
 8008a90:	0020      	movs	r0, r4
 8008a92:	f7ff fd75 	bl	8008580 <rshift>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	3701      	adds	r7, #1
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	42bb      	cmp	r3, r7
 8008a9e:	dac2      	bge.n	8008a26 <__gethex+0x3d2>
 8008aa0:	e6dc      	b.n	800885c <__gethex+0x208>
 8008aa2:	221f      	movs	r2, #31
 8008aa4:	9d01      	ldr	r5, [sp, #4]
 8008aa6:	9901      	ldr	r1, [sp, #4]
 8008aa8:	2601      	movs	r6, #1
 8008aaa:	4015      	ands	r5, r2
 8008aac:	4211      	tst	r1, r2
 8008aae:	d0bb      	beq.n	8008a28 <__gethex+0x3d4>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	189b      	adds	r3, r3, r2
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f000 fa0c 	bl	8008ed4 <__hi0bits>
 8008abc:	2320      	movs	r3, #32
 8008abe:	1b5d      	subs	r5, r3, r5
 8008ac0:	42a8      	cmp	r0, r5
 8008ac2:	dbe4      	blt.n	8008a8e <__gethex+0x43a>
 8008ac4:	e7b0      	b.n	8008a28 <__gethex+0x3d4>
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	0800a8d0 	.word	0x0800a8d0

08008acc <L_shift>:
 8008acc:	2308      	movs	r3, #8
 8008ace:	b570      	push	{r4, r5, r6, lr}
 8008ad0:	2520      	movs	r5, #32
 8008ad2:	1a9a      	subs	r2, r3, r2
 8008ad4:	0092      	lsls	r2, r2, #2
 8008ad6:	1aad      	subs	r5, r5, r2
 8008ad8:	6843      	ldr	r3, [r0, #4]
 8008ada:	6806      	ldr	r6, [r0, #0]
 8008adc:	001c      	movs	r4, r3
 8008ade:	40ac      	lsls	r4, r5
 8008ae0:	40d3      	lsrs	r3, r2
 8008ae2:	4334      	orrs	r4, r6
 8008ae4:	6004      	str	r4, [r0, #0]
 8008ae6:	6043      	str	r3, [r0, #4]
 8008ae8:	3004      	adds	r0, #4
 8008aea:	4288      	cmp	r0, r1
 8008aec:	d3f4      	bcc.n	8008ad8 <L_shift+0xc>
 8008aee:	bd70      	pop	{r4, r5, r6, pc}

08008af0 <__match>:
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	6803      	ldr	r3, [r0, #0]
 8008af4:	780c      	ldrb	r4, [r1, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	2c00      	cmp	r4, #0
 8008afa:	d102      	bne.n	8008b02 <__match+0x12>
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	2001      	movs	r0, #1
 8008b00:	bd30      	pop	{r4, r5, pc}
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	0015      	movs	r5, r2
 8008b06:	3d41      	subs	r5, #65	; 0x41
 8008b08:	2d19      	cmp	r5, #25
 8008b0a:	d800      	bhi.n	8008b0e <__match+0x1e>
 8008b0c:	3220      	adds	r2, #32
 8008b0e:	3101      	adds	r1, #1
 8008b10:	42a2      	cmp	r2, r4
 8008b12:	d0ef      	beq.n	8008af4 <__match+0x4>
 8008b14:	2000      	movs	r0, #0
 8008b16:	e7f3      	b.n	8008b00 <__match+0x10>

08008b18 <__hexnan>:
 8008b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1a:	680b      	ldr	r3, [r1, #0]
 8008b1c:	b08b      	sub	sp, #44	; 0x2c
 8008b1e:	9201      	str	r2, [sp, #4]
 8008b20:	9901      	ldr	r1, [sp, #4]
 8008b22:	115a      	asrs	r2, r3, #5
 8008b24:	0092      	lsls	r2, r2, #2
 8008b26:	188a      	adds	r2, r1, r2
 8008b28:	9202      	str	r2, [sp, #8]
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	221f      	movs	r2, #31
 8008b2e:	4011      	ands	r1, r2
 8008b30:	9008      	str	r0, [sp, #32]
 8008b32:	9106      	str	r1, [sp, #24]
 8008b34:	4213      	tst	r3, r2
 8008b36:	d002      	beq.n	8008b3e <__hexnan+0x26>
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	9302      	str	r3, [sp, #8]
 8008b3e:	9b02      	ldr	r3, [sp, #8]
 8008b40:	2500      	movs	r5, #0
 8008b42:	1f1e      	subs	r6, r3, #4
 8008b44:	0037      	movs	r7, r6
 8008b46:	0034      	movs	r4, r6
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	6035      	str	r5, [r6, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	9507      	str	r5, [sp, #28]
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	9503      	str	r5, [sp, #12]
 8008b54:	9b05      	ldr	r3, [sp, #20]
 8008b56:	3301      	adds	r3, #1
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	9304      	str	r3, [sp, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d028      	beq.n	8008bb6 <__hexnan+0x9e>
 8008b64:	9804      	ldr	r0, [sp, #16]
 8008b66:	f7ff fd5f 	bl	8008628 <__hexdig_fun>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d154      	bne.n	8008c18 <__hexnan+0x100>
 8008b6e:	9b04      	ldr	r3, [sp, #16]
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d819      	bhi.n	8008ba8 <__hexnan+0x90>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	9a07      	ldr	r2, [sp, #28]
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	dd12      	ble.n	8008ba2 <__hexnan+0x8a>
 8008b7c:	42bc      	cmp	r4, r7
 8008b7e:	d206      	bcs.n	8008b8e <__hexnan+0x76>
 8008b80:	2d07      	cmp	r5, #7
 8008b82:	dc04      	bgt.n	8008b8e <__hexnan+0x76>
 8008b84:	002a      	movs	r2, r5
 8008b86:	0039      	movs	r1, r7
 8008b88:	0020      	movs	r0, r4
 8008b8a:	f7ff ff9f 	bl	8008acc <L_shift>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	2508      	movs	r5, #8
 8008b92:	429c      	cmp	r4, r3
 8008b94:	d905      	bls.n	8008ba2 <__hexnan+0x8a>
 8008b96:	1f27      	subs	r7, r4, #4
 8008b98:	2500      	movs	r5, #0
 8008b9a:	003c      	movs	r4, r7
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	603d      	str	r5, [r7, #0]
 8008ba0:	9307      	str	r3, [sp, #28]
 8008ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba4:	9305      	str	r3, [sp, #20]
 8008ba6:	e7d5      	b.n	8008b54 <__hexnan+0x3c>
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	2b29      	cmp	r3, #41	; 0x29
 8008bac:	d159      	bne.n	8008c62 <__hexnan+0x14a>
 8008bae:	9b05      	ldr	r3, [sp, #20]
 8008bb0:	9a08      	ldr	r2, [sp, #32]
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d052      	beq.n	8008c62 <__hexnan+0x14a>
 8008bbc:	42bc      	cmp	r4, r7
 8008bbe:	d206      	bcs.n	8008bce <__hexnan+0xb6>
 8008bc0:	2d07      	cmp	r5, #7
 8008bc2:	dc04      	bgt.n	8008bce <__hexnan+0xb6>
 8008bc4:	002a      	movs	r2, r5
 8008bc6:	0039      	movs	r1, r7
 8008bc8:	0020      	movs	r0, r4
 8008bca:	f7ff ff7f 	bl	8008acc <L_shift>
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	d935      	bls.n	8008c40 <__hexnan+0x128>
 8008bd4:	001a      	movs	r2, r3
 8008bd6:	0023      	movs	r3, r4
 8008bd8:	cb02      	ldmia	r3!, {r1}
 8008bda:	c202      	stmia	r2!, {r1}
 8008bdc:	429e      	cmp	r6, r3
 8008bde:	d2fb      	bcs.n	8008bd8 <__hexnan+0xc0>
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	1c61      	adds	r1, r4, #1
 8008be4:	1eda      	subs	r2, r3, #3
 8008be6:	2304      	movs	r3, #4
 8008be8:	4291      	cmp	r1, r2
 8008bea:	d805      	bhi.n	8008bf8 <__hexnan+0xe0>
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	3b04      	subs	r3, #4
 8008bf0:	1b1b      	subs	r3, r3, r4
 8008bf2:	089b      	lsrs	r3, r3, #2
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	18d3      	adds	r3, r2, r3
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	c304      	stmia	r3!, {r2}
 8008c00:	429e      	cmp	r6, r3
 8008c02:	d2fc      	bcs.n	8008bfe <__hexnan+0xe6>
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d104      	bne.n	8008c14 <__hexnan+0xfc>
 8008c0a:	9b01      	ldr	r3, [sp, #4]
 8008c0c:	429e      	cmp	r6, r3
 8008c0e:	d126      	bne.n	8008c5e <__hexnan+0x146>
 8008c10:	2301      	movs	r3, #1
 8008c12:	6033      	str	r3, [r6, #0]
 8008c14:	2005      	movs	r0, #5
 8008c16:	e025      	b.n	8008c64 <__hexnan+0x14c>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	2d08      	cmp	r5, #8
 8008c22:	dd06      	ble.n	8008c32 <__hexnan+0x11a>
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	429c      	cmp	r4, r3
 8008c28:	d9bb      	bls.n	8008ba2 <__hexnan+0x8a>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2501      	movs	r5, #1
 8008c2e:	3c04      	subs	r4, #4
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	220f      	movs	r2, #15
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	4010      	ands	r0, r2
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	4318      	orrs	r0, r3
 8008c3c:	6020      	str	r0, [r4, #0]
 8008c3e:	e7b0      	b.n	8008ba2 <__hexnan+0x8a>
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0de      	beq.n	8008c04 <__hexnan+0xec>
 8008c46:	2120      	movs	r1, #32
 8008c48:	9a06      	ldr	r2, [sp, #24]
 8008c4a:	9b02      	ldr	r3, [sp, #8]
 8008c4c:	1a89      	subs	r1, r1, r2
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4252      	negs	r2, r2
 8008c52:	40ca      	lsrs	r2, r1
 8008c54:	3b04      	subs	r3, #4
 8008c56:	6819      	ldr	r1, [r3, #0]
 8008c58:	400a      	ands	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	e7d2      	b.n	8008c04 <__hexnan+0xec>
 8008c5e:	3e04      	subs	r6, #4
 8008c60:	e7d0      	b.n	8008c04 <__hexnan+0xec>
 8008c62:	2004      	movs	r0, #4
 8008c64:	b00b      	add	sp, #44	; 0x2c
 8008c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c68 <_localeconv_r>:
 8008c68:	4800      	ldr	r0, [pc, #0]	; (8008c6c <_localeconv_r+0x4>)
 8008c6a:	4770      	bx	lr
 8008c6c:	2000017c 	.word	0x2000017c

08008c70 <__retarget_lock_init_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <__retarget_lock_acquire_recursive>:
 8008c72:	4770      	bx	lr

08008c74 <__retarget_lock_release_recursive>:
 8008c74:	4770      	bx	lr

08008c76 <__ascii_mbtowc>:
 8008c76:	b082      	sub	sp, #8
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d100      	bne.n	8008c7e <__ascii_mbtowc+0x8>
 8008c7c:	a901      	add	r1, sp, #4
 8008c7e:	1e10      	subs	r0, r2, #0
 8008c80:	d006      	beq.n	8008c90 <__ascii_mbtowc+0x1a>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <__ascii_mbtowc+0x1e>
 8008c86:	7813      	ldrb	r3, [r2, #0]
 8008c88:	600b      	str	r3, [r1, #0]
 8008c8a:	7810      	ldrb	r0, [r2, #0]
 8008c8c:	1e43      	subs	r3, r0, #1
 8008c8e:	4198      	sbcs	r0, r3
 8008c90:	b002      	add	sp, #8
 8008c92:	4770      	bx	lr
 8008c94:	2002      	movs	r0, #2
 8008c96:	4240      	negs	r0, r0
 8008c98:	e7fa      	b.n	8008c90 <__ascii_mbtowc+0x1a>

08008c9a <memchr>:
 8008c9a:	b2c9      	uxtb	r1, r1
 8008c9c:	1882      	adds	r2, r0, r2
 8008c9e:	4290      	cmp	r0, r2
 8008ca0:	d101      	bne.n	8008ca6 <memchr+0xc>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	4770      	bx	lr
 8008ca6:	7803      	ldrb	r3, [r0, #0]
 8008ca8:	428b      	cmp	r3, r1
 8008caa:	d0fb      	beq.n	8008ca4 <memchr+0xa>
 8008cac:	3001      	adds	r0, #1
 8008cae:	e7f6      	b.n	8008c9e <memchr+0x4>

08008cb0 <memcpy>:
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d100      	bne.n	8008cba <memcpy+0xa>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	5ccc      	ldrb	r4, [r1, r3]
 8008cbc:	54c4      	strb	r4, [r0, r3]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	e7f8      	b.n	8008cb4 <memcpy+0x4>
	...

08008cc4 <__malloc_lock>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4802      	ldr	r0, [pc, #8]	; (8008cd0 <__malloc_lock+0xc>)
 8008cc8:	f7ff ffd3 	bl	8008c72 <__retarget_lock_acquire_recursive>
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	200005a8 	.word	0x200005a8

08008cd4 <__malloc_unlock>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	4802      	ldr	r0, [pc, #8]	; (8008ce0 <__malloc_unlock+0xc>)
 8008cd8:	f7ff ffcc 	bl	8008c74 <__retarget_lock_release_recursive>
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	200005a8 	.word	0x200005a8

08008ce4 <_Balloc>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ce8:	0006      	movs	r6, r0
 8008cea:	000c      	movs	r4, r1
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	d10e      	bne.n	8008d0e <_Balloc+0x2a>
 8008cf0:	2010      	movs	r0, #16
 8008cf2:	f7fc fe2d 	bl	8005950 <malloc>
 8008cf6:	1e02      	subs	r2, r0, #0
 8008cf8:	6270      	str	r0, [r6, #36]	; 0x24
 8008cfa:	d104      	bne.n	8008d06 <_Balloc+0x22>
 8008cfc:	2166      	movs	r1, #102	; 0x66
 8008cfe:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <_Balloc+0x80>)
 8008d00:	4819      	ldr	r0, [pc, #100]	; (8008d68 <_Balloc+0x84>)
 8008d02:	f001 f8fd 	bl	8009f00 <__assert_func>
 8008d06:	6045      	str	r5, [r0, #4]
 8008d08:	6085      	str	r5, [r0, #8]
 8008d0a:	6005      	str	r5, [r0, #0]
 8008d0c:	60c5      	str	r5, [r0, #12]
 8008d0e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008d10:	68eb      	ldr	r3, [r5, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d013      	beq.n	8008d3e <_Balloc+0x5a>
 8008d16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d18:	00a2      	lsls	r2, r4, #2
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	189b      	adds	r3, r3, r2
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d118      	bne.n	8008d56 <_Balloc+0x72>
 8008d24:	2101      	movs	r1, #1
 8008d26:	000d      	movs	r5, r1
 8008d28:	40a5      	lsls	r5, r4
 8008d2a:	1d6a      	adds	r2, r5, #5
 8008d2c:	0030      	movs	r0, r6
 8008d2e:	0092      	lsls	r2, r2, #2
 8008d30:	f000 fca1 	bl	8009676 <_calloc_r>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d00c      	beq.n	8008d52 <_Balloc+0x6e>
 8008d38:	6044      	str	r4, [r0, #4]
 8008d3a:	6085      	str	r5, [r0, #8]
 8008d3c:	e00d      	b.n	8008d5a <_Balloc+0x76>
 8008d3e:	2221      	movs	r2, #33	; 0x21
 8008d40:	2104      	movs	r1, #4
 8008d42:	0030      	movs	r0, r6
 8008d44:	f000 fc97 	bl	8009676 <_calloc_r>
 8008d48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d4a:	60e8      	str	r0, [r5, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e1      	bne.n	8008d16 <_Balloc+0x32>
 8008d52:	2000      	movs	r0, #0
 8008d54:	bd70      	pop	{r4, r5, r6, pc}
 8008d56:	6802      	ldr	r2, [r0, #0]
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	6103      	str	r3, [r0, #16]
 8008d5e:	60c3      	str	r3, [r0, #12]
 8008d60:	e7f8      	b.n	8008d54 <_Balloc+0x70>
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	0800a85e 	.word	0x0800a85e
 8008d68:	0800a9c0 	.word	0x0800a9c0

08008d6c <_Bfree>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d70:	0005      	movs	r5, r0
 8008d72:	000c      	movs	r4, r1
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	d10e      	bne.n	8008d96 <_Bfree+0x2a>
 8008d78:	2010      	movs	r0, #16
 8008d7a:	f7fc fde9 	bl	8005950 <malloc>
 8008d7e:	1e02      	subs	r2, r0, #0
 8008d80:	6268      	str	r0, [r5, #36]	; 0x24
 8008d82:	d104      	bne.n	8008d8e <_Bfree+0x22>
 8008d84:	218a      	movs	r1, #138	; 0x8a
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <_Bfree+0x40>)
 8008d88:	4809      	ldr	r0, [pc, #36]	; (8008db0 <_Bfree+0x44>)
 8008d8a:	f001 f8b9 	bl	8009f00 <__assert_func>
 8008d8e:	6046      	str	r6, [r0, #4]
 8008d90:	6086      	str	r6, [r0, #8]
 8008d92:	6006      	str	r6, [r0, #0]
 8008d94:	60c6      	str	r6, [r0, #12]
 8008d96:	2c00      	cmp	r4, #0
 8008d98:	d007      	beq.n	8008daa <_Bfree+0x3e>
 8008d9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d9c:	6862      	ldr	r2, [r4, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	0092      	lsls	r2, r2, #2
 8008da2:	189b      	adds	r3, r3, r2
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	601c      	str	r4, [r3, #0]
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	0800a85e 	.word	0x0800a85e
 8008db0:	0800a9c0 	.word	0x0800a9c0

08008db4 <__multadd>:
 8008db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db6:	000e      	movs	r6, r1
 8008db8:	9001      	str	r0, [sp, #4]
 8008dba:	000c      	movs	r4, r1
 8008dbc:	001d      	movs	r5, r3
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	690f      	ldr	r7, [r1, #16]
 8008dc2:	3614      	adds	r6, #20
 8008dc4:	6833      	ldr	r3, [r6, #0]
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	b299      	uxth	r1, r3
 8008dca:	4351      	muls	r1, r2
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	4353      	muls	r3, r2
 8008dd0:	1949      	adds	r1, r1, r5
 8008dd2:	0c0d      	lsrs	r5, r1, #16
 8008dd4:	195b      	adds	r3, r3, r5
 8008dd6:	0c1d      	lsrs	r5, r3, #16
 8008dd8:	b289      	uxth	r1, r1
 8008dda:	041b      	lsls	r3, r3, #16
 8008ddc:	185b      	adds	r3, r3, r1
 8008dde:	c608      	stmia	r6!, {r3}
 8008de0:	4287      	cmp	r7, r0
 8008de2:	dcef      	bgt.n	8008dc4 <__multadd+0x10>
 8008de4:	2d00      	cmp	r5, #0
 8008de6:	d022      	beq.n	8008e2e <__multadd+0x7a>
 8008de8:	68a3      	ldr	r3, [r4, #8]
 8008dea:	42bb      	cmp	r3, r7
 8008dec:	dc19      	bgt.n	8008e22 <__multadd+0x6e>
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	1c59      	adds	r1, r3, #1
 8008df4:	f7ff ff76 	bl	8008ce4 <_Balloc>
 8008df8:	1e06      	subs	r6, r0, #0
 8008dfa:	d105      	bne.n	8008e08 <__multadd+0x54>
 8008dfc:	0002      	movs	r2, r0
 8008dfe:	21b5      	movs	r1, #181	; 0xb5
 8008e00:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <__multadd+0x80>)
 8008e02:	480d      	ldr	r0, [pc, #52]	; (8008e38 <__multadd+0x84>)
 8008e04:	f001 f87c 	bl	8009f00 <__assert_func>
 8008e08:	0021      	movs	r1, r4
 8008e0a:	6923      	ldr	r3, [r4, #16]
 8008e0c:	310c      	adds	r1, #12
 8008e0e:	1c9a      	adds	r2, r3, #2
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	300c      	adds	r0, #12
 8008e14:	f7ff ff4c 	bl	8008cb0 <memcpy>
 8008e18:	0021      	movs	r1, r4
 8008e1a:	9801      	ldr	r0, [sp, #4]
 8008e1c:	f7ff ffa6 	bl	8008d6c <_Bfree>
 8008e20:	0034      	movs	r4, r6
 8008e22:	1d3b      	adds	r3, r7, #4
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	18e3      	adds	r3, r4, r3
 8008e28:	605d      	str	r5, [r3, #4]
 8008e2a:	1c7b      	adds	r3, r7, #1
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	0020      	movs	r0, r4
 8008e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	0800a8d0 	.word	0x0800a8d0
 8008e38:	0800a9c0 	.word	0x0800a9c0

08008e3c <__s2b>:
 8008e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3e:	0006      	movs	r6, r0
 8008e40:	0018      	movs	r0, r3
 8008e42:	000c      	movs	r4, r1
 8008e44:	3008      	adds	r0, #8
 8008e46:	2109      	movs	r1, #9
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	0015      	movs	r5, r2
 8008e4c:	f7f7 fa02 	bl	8000254 <__divsi3>
 8008e50:	2301      	movs	r3, #1
 8008e52:	2100      	movs	r1, #0
 8008e54:	4283      	cmp	r3, r0
 8008e56:	db0a      	blt.n	8008e6e <__s2b+0x32>
 8008e58:	0030      	movs	r0, r6
 8008e5a:	f7ff ff43 	bl	8008ce4 <_Balloc>
 8008e5e:	1e01      	subs	r1, r0, #0
 8008e60:	d108      	bne.n	8008e74 <__s2b+0x38>
 8008e62:	0002      	movs	r2, r0
 8008e64:	4b19      	ldr	r3, [pc, #100]	; (8008ecc <__s2b+0x90>)
 8008e66:	481a      	ldr	r0, [pc, #104]	; (8008ed0 <__s2b+0x94>)
 8008e68:	31ce      	adds	r1, #206	; 0xce
 8008e6a:	f001 f849 	bl	8009f00 <__assert_func>
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	3101      	adds	r1, #1
 8008e72:	e7ef      	b.n	8008e54 <__s2b+0x18>
 8008e74:	9b08      	ldr	r3, [sp, #32]
 8008e76:	6143      	str	r3, [r0, #20]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6103      	str	r3, [r0, #16]
 8008e7c:	2d09      	cmp	r5, #9
 8008e7e:	dd18      	ble.n	8008eb2 <__s2b+0x76>
 8008e80:	0023      	movs	r3, r4
 8008e82:	3309      	adds	r3, #9
 8008e84:	001f      	movs	r7, r3
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	1964      	adds	r4, r4, r5
 8008e8a:	783b      	ldrb	r3, [r7, #0]
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	0030      	movs	r0, r6
 8008e90:	3b30      	subs	r3, #48	; 0x30
 8008e92:	f7ff ff8f 	bl	8008db4 <__multadd>
 8008e96:	3701      	adds	r7, #1
 8008e98:	0001      	movs	r1, r0
 8008e9a:	42a7      	cmp	r7, r4
 8008e9c:	d1f5      	bne.n	8008e8a <__s2b+0x4e>
 8008e9e:	002c      	movs	r4, r5
 8008ea0:	9b00      	ldr	r3, [sp, #0]
 8008ea2:	3c08      	subs	r4, #8
 8008ea4:	191c      	adds	r4, r3, r4
 8008ea6:	002f      	movs	r7, r5
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	429f      	cmp	r7, r3
 8008eac:	db04      	blt.n	8008eb8 <__s2b+0x7c>
 8008eae:	0008      	movs	r0, r1
 8008eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eb2:	2509      	movs	r5, #9
 8008eb4:	340a      	adds	r4, #10
 8008eb6:	e7f6      	b.n	8008ea6 <__s2b+0x6a>
 8008eb8:	1b63      	subs	r3, r4, r5
 8008eba:	5ddb      	ldrb	r3, [r3, r7]
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	0030      	movs	r0, r6
 8008ec0:	3b30      	subs	r3, #48	; 0x30
 8008ec2:	f7ff ff77 	bl	8008db4 <__multadd>
 8008ec6:	3701      	adds	r7, #1
 8008ec8:	0001      	movs	r1, r0
 8008eca:	e7ed      	b.n	8008ea8 <__s2b+0x6c>
 8008ecc:	0800a8d0 	.word	0x0800a8d0
 8008ed0:	0800a9c0 	.word	0x0800a9c0

08008ed4 <__hi0bits>:
 8008ed4:	0003      	movs	r3, r0
 8008ed6:	0c02      	lsrs	r2, r0, #16
 8008ed8:	2000      	movs	r0, #0
 8008eda:	4282      	cmp	r2, r0
 8008edc:	d101      	bne.n	8008ee2 <__hi0bits+0xe>
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	3010      	adds	r0, #16
 8008ee2:	0e1a      	lsrs	r2, r3, #24
 8008ee4:	d101      	bne.n	8008eea <__hi0bits+0x16>
 8008ee6:	3008      	adds	r0, #8
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	0f1a      	lsrs	r2, r3, #28
 8008eec:	d101      	bne.n	8008ef2 <__hi0bits+0x1e>
 8008eee:	3004      	adds	r0, #4
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	0f9a      	lsrs	r2, r3, #30
 8008ef4:	d101      	bne.n	8008efa <__hi0bits+0x26>
 8008ef6:	3002      	adds	r0, #2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	db03      	blt.n	8008f06 <__hi0bits+0x32>
 8008efe:	3001      	adds	r0, #1
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	d400      	bmi.n	8008f06 <__hi0bits+0x32>
 8008f04:	2020      	movs	r0, #32
 8008f06:	4770      	bx	lr

08008f08 <__lo0bits>:
 8008f08:	6803      	ldr	r3, [r0, #0]
 8008f0a:	0002      	movs	r2, r0
 8008f0c:	2107      	movs	r1, #7
 8008f0e:	0018      	movs	r0, r3
 8008f10:	4008      	ands	r0, r1
 8008f12:	420b      	tst	r3, r1
 8008f14:	d00d      	beq.n	8008f32 <__lo0bits+0x2a>
 8008f16:	3906      	subs	r1, #6
 8008f18:	2000      	movs	r0, #0
 8008f1a:	420b      	tst	r3, r1
 8008f1c:	d105      	bne.n	8008f2a <__lo0bits+0x22>
 8008f1e:	3002      	adds	r0, #2
 8008f20:	4203      	tst	r3, r0
 8008f22:	d003      	beq.n	8008f2c <__lo0bits+0x24>
 8008f24:	40cb      	lsrs	r3, r1
 8008f26:	0008      	movs	r0, r1
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	4770      	bx	lr
 8008f2c:	089b      	lsrs	r3, r3, #2
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	e7fb      	b.n	8008f2a <__lo0bits+0x22>
 8008f32:	b299      	uxth	r1, r3
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d101      	bne.n	8008f3c <__lo0bits+0x34>
 8008f38:	2010      	movs	r0, #16
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	b2d9      	uxtb	r1, r3
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	d101      	bne.n	8008f46 <__lo0bits+0x3e>
 8008f42:	3008      	adds	r0, #8
 8008f44:	0a1b      	lsrs	r3, r3, #8
 8008f46:	0719      	lsls	r1, r3, #28
 8008f48:	d101      	bne.n	8008f4e <__lo0bits+0x46>
 8008f4a:	3004      	adds	r0, #4
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	0799      	lsls	r1, r3, #30
 8008f50:	d101      	bne.n	8008f56 <__lo0bits+0x4e>
 8008f52:	3002      	adds	r0, #2
 8008f54:	089b      	lsrs	r3, r3, #2
 8008f56:	07d9      	lsls	r1, r3, #31
 8008f58:	d4e9      	bmi.n	8008f2e <__lo0bits+0x26>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	d1e6      	bne.n	8008f2e <__lo0bits+0x26>
 8008f60:	2020      	movs	r0, #32
 8008f62:	e7e2      	b.n	8008f2a <__lo0bits+0x22>

08008f64 <__i2b>:
 8008f64:	b510      	push	{r4, lr}
 8008f66:	000c      	movs	r4, r1
 8008f68:	2101      	movs	r1, #1
 8008f6a:	f7ff febb 	bl	8008ce4 <_Balloc>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d106      	bne.n	8008f80 <__i2b+0x1c>
 8008f72:	21a0      	movs	r1, #160	; 0xa0
 8008f74:	0002      	movs	r2, r0
 8008f76:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <__i2b+0x24>)
 8008f78:	4804      	ldr	r0, [pc, #16]	; (8008f8c <__i2b+0x28>)
 8008f7a:	0049      	lsls	r1, r1, #1
 8008f7c:	f000 ffc0 	bl	8009f00 <__assert_func>
 8008f80:	2301      	movs	r3, #1
 8008f82:	6144      	str	r4, [r0, #20]
 8008f84:	6103      	str	r3, [r0, #16]
 8008f86:	bd10      	pop	{r4, pc}
 8008f88:	0800a8d0 	.word	0x0800a8d0
 8008f8c:	0800a9c0 	.word	0x0800a9c0

08008f90 <__multiply>:
 8008f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	0014      	movs	r4, r2
 8008f96:	6912      	ldr	r2, [r2, #16]
 8008f98:	000d      	movs	r5, r1
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	da01      	bge.n	8008fa4 <__multiply+0x14>
 8008fa0:	0025      	movs	r5, r4
 8008fa2:	000c      	movs	r4, r1
 8008fa4:	692f      	ldr	r7, [r5, #16]
 8008fa6:	6926      	ldr	r6, [r4, #16]
 8008fa8:	6869      	ldr	r1, [r5, #4]
 8008faa:	19bb      	adds	r3, r7, r6
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	68ab      	ldr	r3, [r5, #8]
 8008fb0:	19ba      	adds	r2, r7, r6
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	da00      	bge.n	8008fb8 <__multiply+0x28>
 8008fb6:	3101      	adds	r1, #1
 8008fb8:	f7ff fe94 	bl	8008ce4 <_Balloc>
 8008fbc:	9001      	str	r0, [sp, #4]
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d106      	bne.n	8008fd0 <__multiply+0x40>
 8008fc2:	215e      	movs	r1, #94	; 0x5e
 8008fc4:	0002      	movs	r2, r0
 8008fc6:	4b48      	ldr	r3, [pc, #288]	; (80090e8 <__multiply+0x158>)
 8008fc8:	4848      	ldr	r0, [pc, #288]	; (80090ec <__multiply+0x15c>)
 8008fca:	31ff      	adds	r1, #255	; 0xff
 8008fcc:	f000 ff98 	bl	8009f00 <__assert_func>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	3314      	adds	r3, #20
 8008fd6:	469c      	mov	ip, r3
 8008fd8:	19bb      	adds	r3, r7, r6
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4463      	add	r3, ip
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	4663      	mov	r3, ip
 8008fe2:	9903      	ldr	r1, [sp, #12]
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	d32c      	bcc.n	8009042 <__multiply+0xb2>
 8008fe8:	002b      	movs	r3, r5
 8008fea:	0022      	movs	r2, r4
 8008fec:	3314      	adds	r3, #20
 8008fee:	00bf      	lsls	r7, r7, #2
 8008ff0:	3214      	adds	r2, #20
 8008ff2:	9306      	str	r3, [sp, #24]
 8008ff4:	00b6      	lsls	r6, r6, #2
 8008ff6:	19db      	adds	r3, r3, r7
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	1993      	adds	r3, r2, r6
 8008ffc:	9307      	str	r3, [sp, #28]
 8008ffe:	2304      	movs	r3, #4
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	002b      	movs	r3, r5
 8009004:	9904      	ldr	r1, [sp, #16]
 8009006:	3315      	adds	r3, #21
 8009008:	9200      	str	r2, [sp, #0]
 800900a:	4299      	cmp	r1, r3
 800900c:	d305      	bcc.n	800901a <__multiply+0x8a>
 800900e:	1b4b      	subs	r3, r1, r5
 8009010:	3b15      	subs	r3, #21
 8009012:	089b      	lsrs	r3, r3, #2
 8009014:	3301      	adds	r3, #1
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	9305      	str	r3, [sp, #20]
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	9a00      	ldr	r2, [sp, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d311      	bcc.n	8009046 <__multiply+0xb6>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd06      	ble.n	8009036 <__multiply+0xa6>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	3b04      	subs	r3, #4
 800902c:	9303      	str	r3, [sp, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d053      	beq.n	80090de <__multiply+0x14e>
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	9a02      	ldr	r2, [sp, #8]
 800903a:	0018      	movs	r0, r3
 800903c:	611a      	str	r2, [r3, #16]
 800903e:	b009      	add	sp, #36	; 0x24
 8009040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009042:	c304      	stmia	r3!, {r2}
 8009044:	e7cd      	b.n	8008fe2 <__multiply+0x52>
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	b298      	uxth	r0, r3
 800904c:	2800      	cmp	r0, #0
 800904e:	d01b      	beq.n	8009088 <__multiply+0xf8>
 8009050:	4667      	mov	r7, ip
 8009052:	2400      	movs	r4, #0
 8009054:	9e06      	ldr	r6, [sp, #24]
 8009056:	ce02      	ldmia	r6!, {r1}
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	b28b      	uxth	r3, r1
 800905c:	4343      	muls	r3, r0
 800905e:	b292      	uxth	r2, r2
 8009060:	189b      	adds	r3, r3, r2
 8009062:	191b      	adds	r3, r3, r4
 8009064:	0c0c      	lsrs	r4, r1, #16
 8009066:	4344      	muls	r4, r0
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	0c11      	lsrs	r1, r2, #16
 800906c:	1861      	adds	r1, r4, r1
 800906e:	0c1c      	lsrs	r4, r3, #16
 8009070:	1909      	adds	r1, r1, r4
 8009072:	0c0c      	lsrs	r4, r1, #16
 8009074:	b29b      	uxth	r3, r3
 8009076:	0409      	lsls	r1, r1, #16
 8009078:	430b      	orrs	r3, r1
 800907a:	c708      	stmia	r7!, {r3}
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	42b3      	cmp	r3, r6
 8009080:	d8e9      	bhi.n	8009056 <__multiply+0xc6>
 8009082:	4663      	mov	r3, ip
 8009084:	9a05      	ldr	r2, [sp, #20]
 8009086:	509c      	str	r4, [r3, r2]
 8009088:	9b00      	ldr	r3, [sp, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0c1e      	lsrs	r6, r3, #16
 800908e:	d020      	beq.n	80090d2 <__multiply+0x142>
 8009090:	4663      	mov	r3, ip
 8009092:	002c      	movs	r4, r5
 8009094:	4660      	mov	r0, ip
 8009096:	2700      	movs	r7, #0
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3414      	adds	r4, #20
 800909c:	6822      	ldr	r2, [r4, #0]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	b291      	uxth	r1, r2
 80090a2:	4371      	muls	r1, r6
 80090a4:	6802      	ldr	r2, [r0, #0]
 80090a6:	0c12      	lsrs	r2, r2, #16
 80090a8:	1889      	adds	r1, r1, r2
 80090aa:	19cf      	adds	r7, r1, r7
 80090ac:	0439      	lsls	r1, r7, #16
 80090ae:	430b      	orrs	r3, r1
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	cc02      	ldmia	r4!, {r1}
 80090b4:	6843      	ldr	r3, [r0, #4]
 80090b6:	0c09      	lsrs	r1, r1, #16
 80090b8:	4371      	muls	r1, r6
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	0c3f      	lsrs	r7, r7, #16
 80090be:	18cb      	adds	r3, r1, r3
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	19db      	adds	r3, r3, r7
 80090c4:	0c1f      	lsrs	r7, r3, #16
 80090c6:	3004      	adds	r0, #4
 80090c8:	42a2      	cmp	r2, r4
 80090ca:	d8e7      	bhi.n	800909c <__multiply+0x10c>
 80090cc:	4662      	mov	r2, ip
 80090ce:	9905      	ldr	r1, [sp, #20]
 80090d0:	5053      	str	r3, [r2, r1]
 80090d2:	9b00      	ldr	r3, [sp, #0]
 80090d4:	3304      	adds	r3, #4
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	2304      	movs	r3, #4
 80090da:	449c      	add	ip, r3
 80090dc:	e79d      	b.n	800901a <__multiply+0x8a>
 80090de:	9b02      	ldr	r3, [sp, #8]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	9302      	str	r3, [sp, #8]
 80090e4:	e79d      	b.n	8009022 <__multiply+0x92>
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	0800a8d0 	.word	0x0800a8d0
 80090ec:	0800a9c0 	.word	0x0800a9c0

080090f0 <__pow5mult>:
 80090f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f2:	2303      	movs	r3, #3
 80090f4:	0015      	movs	r5, r2
 80090f6:	0007      	movs	r7, r0
 80090f8:	000e      	movs	r6, r1
 80090fa:	401a      	ands	r2, r3
 80090fc:	421d      	tst	r5, r3
 80090fe:	d008      	beq.n	8009112 <__pow5mult+0x22>
 8009100:	4925      	ldr	r1, [pc, #148]	; (8009198 <__pow5mult+0xa8>)
 8009102:	3a01      	subs	r2, #1
 8009104:	0092      	lsls	r2, r2, #2
 8009106:	5852      	ldr	r2, [r2, r1]
 8009108:	2300      	movs	r3, #0
 800910a:	0031      	movs	r1, r6
 800910c:	f7ff fe52 	bl	8008db4 <__multadd>
 8009110:	0006      	movs	r6, r0
 8009112:	10ad      	asrs	r5, r5, #2
 8009114:	d03d      	beq.n	8009192 <__pow5mult+0xa2>
 8009116:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009118:	2c00      	cmp	r4, #0
 800911a:	d10f      	bne.n	800913c <__pow5mult+0x4c>
 800911c:	2010      	movs	r0, #16
 800911e:	f7fc fc17 	bl	8005950 <malloc>
 8009122:	1e02      	subs	r2, r0, #0
 8009124:	6278      	str	r0, [r7, #36]	; 0x24
 8009126:	d105      	bne.n	8009134 <__pow5mult+0x44>
 8009128:	21d7      	movs	r1, #215	; 0xd7
 800912a:	4b1c      	ldr	r3, [pc, #112]	; (800919c <__pow5mult+0xac>)
 800912c:	481c      	ldr	r0, [pc, #112]	; (80091a0 <__pow5mult+0xb0>)
 800912e:	0049      	lsls	r1, r1, #1
 8009130:	f000 fee6 	bl	8009f00 <__assert_func>
 8009134:	6044      	str	r4, [r0, #4]
 8009136:	6084      	str	r4, [r0, #8]
 8009138:	6004      	str	r4, [r0, #0]
 800913a:	60c4      	str	r4, [r0, #12]
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	689c      	ldr	r4, [r3, #8]
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	2c00      	cmp	r4, #0
 8009144:	d108      	bne.n	8009158 <__pow5mult+0x68>
 8009146:	0038      	movs	r0, r7
 8009148:	4916      	ldr	r1, [pc, #88]	; (80091a4 <__pow5mult+0xb4>)
 800914a:	f7ff ff0b 	bl	8008f64 <__i2b>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	0004      	movs	r4, r0
 8009152:	6098      	str	r0, [r3, #8]
 8009154:	2300      	movs	r3, #0
 8009156:	6003      	str	r3, [r0, #0]
 8009158:	2301      	movs	r3, #1
 800915a:	421d      	tst	r5, r3
 800915c:	d00a      	beq.n	8009174 <__pow5mult+0x84>
 800915e:	0031      	movs	r1, r6
 8009160:	0022      	movs	r2, r4
 8009162:	0038      	movs	r0, r7
 8009164:	f7ff ff14 	bl	8008f90 <__multiply>
 8009168:	0031      	movs	r1, r6
 800916a:	9001      	str	r0, [sp, #4]
 800916c:	0038      	movs	r0, r7
 800916e:	f7ff fdfd 	bl	8008d6c <_Bfree>
 8009172:	9e01      	ldr	r6, [sp, #4]
 8009174:	106d      	asrs	r5, r5, #1
 8009176:	d00c      	beq.n	8009192 <__pow5mult+0xa2>
 8009178:	6820      	ldr	r0, [r4, #0]
 800917a:	2800      	cmp	r0, #0
 800917c:	d107      	bne.n	800918e <__pow5mult+0x9e>
 800917e:	0022      	movs	r2, r4
 8009180:	0021      	movs	r1, r4
 8009182:	0038      	movs	r0, r7
 8009184:	f7ff ff04 	bl	8008f90 <__multiply>
 8009188:	2300      	movs	r3, #0
 800918a:	6020      	str	r0, [r4, #0]
 800918c:	6003      	str	r3, [r0, #0]
 800918e:	0004      	movs	r4, r0
 8009190:	e7e2      	b.n	8009158 <__pow5mult+0x68>
 8009192:	0030      	movs	r0, r6
 8009194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009196:	46c0      	nop			; (mov r8, r8)
 8009198:	0800ab10 	.word	0x0800ab10
 800919c:	0800a85e 	.word	0x0800a85e
 80091a0:	0800a9c0 	.word	0x0800a9c0
 80091a4:	00000271 	.word	0x00000271

080091a8 <__lshift>:
 80091a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091aa:	000c      	movs	r4, r1
 80091ac:	0017      	movs	r7, r2
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	1155      	asrs	r5, r2, #5
 80091b2:	b087      	sub	sp, #28
 80091b4:	18eb      	adds	r3, r5, r3
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	3301      	adds	r3, #1
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	6849      	ldr	r1, [r1, #4]
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	9004      	str	r0, [sp, #16]
 80091c2:	9a01      	ldr	r2, [sp, #4]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	db10      	blt.n	80091ea <__lshift+0x42>
 80091c8:	9804      	ldr	r0, [sp, #16]
 80091ca:	f7ff fd8b 	bl	8008ce4 <_Balloc>
 80091ce:	2300      	movs	r3, #0
 80091d0:	0002      	movs	r2, r0
 80091d2:	0006      	movs	r6, r0
 80091d4:	0019      	movs	r1, r3
 80091d6:	3214      	adds	r2, #20
 80091d8:	4298      	cmp	r0, r3
 80091da:	d10c      	bne.n	80091f6 <__lshift+0x4e>
 80091dc:	21da      	movs	r1, #218	; 0xda
 80091de:	0002      	movs	r2, r0
 80091e0:	4b26      	ldr	r3, [pc, #152]	; (800927c <__lshift+0xd4>)
 80091e2:	4827      	ldr	r0, [pc, #156]	; (8009280 <__lshift+0xd8>)
 80091e4:	31ff      	adds	r1, #255	; 0xff
 80091e6:	f000 fe8b 	bl	8009f00 <__assert_func>
 80091ea:	3101      	adds	r1, #1
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	e7e8      	b.n	80091c2 <__lshift+0x1a>
 80091f0:	0098      	lsls	r0, r3, #2
 80091f2:	5011      	str	r1, [r2, r0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	42ab      	cmp	r3, r5
 80091f8:	dbfa      	blt.n	80091f0 <__lshift+0x48>
 80091fa:	43eb      	mvns	r3, r5
 80091fc:	17db      	asrs	r3, r3, #31
 80091fe:	401d      	ands	r5, r3
 8009200:	211f      	movs	r1, #31
 8009202:	0023      	movs	r3, r4
 8009204:	0038      	movs	r0, r7
 8009206:	00ad      	lsls	r5, r5, #2
 8009208:	1955      	adds	r5, r2, r5
 800920a:	6922      	ldr	r2, [r4, #16]
 800920c:	3314      	adds	r3, #20
 800920e:	0092      	lsls	r2, r2, #2
 8009210:	4008      	ands	r0, r1
 8009212:	4684      	mov	ip, r0
 8009214:	189a      	adds	r2, r3, r2
 8009216:	420f      	tst	r7, r1
 8009218:	d02a      	beq.n	8009270 <__lshift+0xc8>
 800921a:	3101      	adds	r1, #1
 800921c:	1a09      	subs	r1, r1, r0
 800921e:	9105      	str	r1, [sp, #20]
 8009220:	2100      	movs	r1, #0
 8009222:	9503      	str	r5, [sp, #12]
 8009224:	4667      	mov	r7, ip
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	40b8      	lsls	r0, r7
 800922a:	4301      	orrs	r1, r0
 800922c:	9803      	ldr	r0, [sp, #12]
 800922e:	c002      	stmia	r0!, {r1}
 8009230:	cb02      	ldmia	r3!, {r1}
 8009232:	9003      	str	r0, [sp, #12]
 8009234:	9805      	ldr	r0, [sp, #20]
 8009236:	40c1      	lsrs	r1, r0
 8009238:	429a      	cmp	r2, r3
 800923a:	d8f3      	bhi.n	8009224 <__lshift+0x7c>
 800923c:	0020      	movs	r0, r4
 800923e:	3015      	adds	r0, #21
 8009240:	2304      	movs	r3, #4
 8009242:	4282      	cmp	r2, r0
 8009244:	d304      	bcc.n	8009250 <__lshift+0xa8>
 8009246:	1b13      	subs	r3, r2, r4
 8009248:	3b15      	subs	r3, #21
 800924a:	089b      	lsrs	r3, r3, #2
 800924c:	3301      	adds	r3, #1
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	50e9      	str	r1, [r5, r3]
 8009252:	2900      	cmp	r1, #0
 8009254:	d002      	beq.n	800925c <__lshift+0xb4>
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	3302      	adds	r3, #2
 800925a:	9301      	str	r3, [sp, #4]
 800925c:	9b01      	ldr	r3, [sp, #4]
 800925e:	9804      	ldr	r0, [sp, #16]
 8009260:	3b01      	subs	r3, #1
 8009262:	0021      	movs	r1, r4
 8009264:	6133      	str	r3, [r6, #16]
 8009266:	f7ff fd81 	bl	8008d6c <_Bfree>
 800926a:	0030      	movs	r0, r6
 800926c:	b007      	add	sp, #28
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009270:	cb02      	ldmia	r3!, {r1}
 8009272:	c502      	stmia	r5!, {r1}
 8009274:	429a      	cmp	r2, r3
 8009276:	d8fb      	bhi.n	8009270 <__lshift+0xc8>
 8009278:	e7f0      	b.n	800925c <__lshift+0xb4>
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	0800a8d0 	.word	0x0800a8d0
 8009280:	0800a9c0 	.word	0x0800a9c0

08009284 <__mcmp>:
 8009284:	6902      	ldr	r2, [r0, #16]
 8009286:	690b      	ldr	r3, [r1, #16]
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	0004      	movs	r4, r0
 800928c:	1ad0      	subs	r0, r2, r3
 800928e:	429a      	cmp	r2, r3
 8009290:	d10d      	bne.n	80092ae <__mcmp+0x2a>
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	3414      	adds	r4, #20
 8009296:	3114      	adds	r1, #20
 8009298:	18e2      	adds	r2, r4, r3
 800929a:	18c9      	adds	r1, r1, r3
 800929c:	3a04      	subs	r2, #4
 800929e:	3904      	subs	r1, #4
 80092a0:	6815      	ldr	r5, [r2, #0]
 80092a2:	680b      	ldr	r3, [r1, #0]
 80092a4:	429d      	cmp	r5, r3
 80092a6:	d003      	beq.n	80092b0 <__mcmp+0x2c>
 80092a8:	2001      	movs	r0, #1
 80092aa:	429d      	cmp	r5, r3
 80092ac:	d303      	bcc.n	80092b6 <__mcmp+0x32>
 80092ae:	bd30      	pop	{r4, r5, pc}
 80092b0:	4294      	cmp	r4, r2
 80092b2:	d3f3      	bcc.n	800929c <__mcmp+0x18>
 80092b4:	e7fb      	b.n	80092ae <__mcmp+0x2a>
 80092b6:	4240      	negs	r0, r0
 80092b8:	e7f9      	b.n	80092ae <__mcmp+0x2a>
	...

080092bc <__mdiff>:
 80092bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092be:	000e      	movs	r6, r1
 80092c0:	0007      	movs	r7, r0
 80092c2:	0011      	movs	r1, r2
 80092c4:	0030      	movs	r0, r6
 80092c6:	b087      	sub	sp, #28
 80092c8:	0014      	movs	r4, r2
 80092ca:	f7ff ffdb 	bl	8009284 <__mcmp>
 80092ce:	1e05      	subs	r5, r0, #0
 80092d0:	d110      	bne.n	80092f4 <__mdiff+0x38>
 80092d2:	0001      	movs	r1, r0
 80092d4:	0038      	movs	r0, r7
 80092d6:	f7ff fd05 	bl	8008ce4 <_Balloc>
 80092da:	1e02      	subs	r2, r0, #0
 80092dc:	d104      	bne.n	80092e8 <__mdiff+0x2c>
 80092de:	4b40      	ldr	r3, [pc, #256]	; (80093e0 <__mdiff+0x124>)
 80092e0:	4940      	ldr	r1, [pc, #256]	; (80093e4 <__mdiff+0x128>)
 80092e2:	4841      	ldr	r0, [pc, #260]	; (80093e8 <__mdiff+0x12c>)
 80092e4:	f000 fe0c 	bl	8009f00 <__assert_func>
 80092e8:	2301      	movs	r3, #1
 80092ea:	6145      	str	r5, [r0, #20]
 80092ec:	6103      	str	r3, [r0, #16]
 80092ee:	0010      	movs	r0, r2
 80092f0:	b007      	add	sp, #28
 80092f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f4:	2301      	movs	r3, #1
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	2800      	cmp	r0, #0
 80092fa:	db04      	blt.n	8009306 <__mdiff+0x4a>
 80092fc:	0023      	movs	r3, r4
 80092fe:	0034      	movs	r4, r6
 8009300:	001e      	movs	r6, r3
 8009302:	2300      	movs	r3, #0
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	0038      	movs	r0, r7
 8009308:	6861      	ldr	r1, [r4, #4]
 800930a:	f7ff fceb 	bl	8008ce4 <_Balloc>
 800930e:	1e02      	subs	r2, r0, #0
 8009310:	d103      	bne.n	800931a <__mdiff+0x5e>
 8009312:	2190      	movs	r1, #144	; 0x90
 8009314:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <__mdiff+0x124>)
 8009316:	0089      	lsls	r1, r1, #2
 8009318:	e7e3      	b.n	80092e2 <__mdiff+0x26>
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	2700      	movs	r7, #0
 800931e:	60c3      	str	r3, [r0, #12]
 8009320:	6920      	ldr	r0, [r4, #16]
 8009322:	3414      	adds	r4, #20
 8009324:	9401      	str	r4, [sp, #4]
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	0084      	lsls	r4, r0, #2
 800932a:	191b      	adds	r3, r3, r4
 800932c:	0034      	movs	r4, r6
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	6933      	ldr	r3, [r6, #16]
 8009332:	3414      	adds	r4, #20
 8009334:	0099      	lsls	r1, r3, #2
 8009336:	1863      	adds	r3, r4, r1
 8009338:	9303      	str	r3, [sp, #12]
 800933a:	0013      	movs	r3, r2
 800933c:	3314      	adds	r3, #20
 800933e:	469c      	mov	ip, r3
 8009340:	9305      	str	r3, [sp, #20]
 8009342:	9b01      	ldr	r3, [sp, #4]
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	cc02      	ldmia	r4!, {r1}
 800934a:	cb20      	ldmia	r3!, {r5}
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	b2ab      	uxth	r3, r5
 8009350:	19df      	adds	r7, r3, r7
 8009352:	b28b      	uxth	r3, r1
 8009354:	1afb      	subs	r3, r7, r3
 8009356:	0c09      	lsrs	r1, r1, #16
 8009358:	0c2d      	lsrs	r5, r5, #16
 800935a:	1a6d      	subs	r5, r5, r1
 800935c:	1419      	asrs	r1, r3, #16
 800935e:	186d      	adds	r5, r5, r1
 8009360:	4661      	mov	r1, ip
 8009362:	142f      	asrs	r7, r5, #16
 8009364:	b29b      	uxth	r3, r3
 8009366:	042d      	lsls	r5, r5, #16
 8009368:	432b      	orrs	r3, r5
 800936a:	c108      	stmia	r1!, {r3}
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	468c      	mov	ip, r1
 8009370:	42a3      	cmp	r3, r4
 8009372:	d8e8      	bhi.n	8009346 <__mdiff+0x8a>
 8009374:	0031      	movs	r1, r6
 8009376:	9c03      	ldr	r4, [sp, #12]
 8009378:	3115      	adds	r1, #21
 800937a:	2304      	movs	r3, #4
 800937c:	428c      	cmp	r4, r1
 800937e:	d304      	bcc.n	800938a <__mdiff+0xce>
 8009380:	1ba3      	subs	r3, r4, r6
 8009382:	3b15      	subs	r3, #21
 8009384:	089b      	lsrs	r3, r3, #2
 8009386:	3301      	adds	r3, #1
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	9901      	ldr	r1, [sp, #4]
 800938c:	18cc      	adds	r4, r1, r3
 800938e:	9905      	ldr	r1, [sp, #20]
 8009390:	0026      	movs	r6, r4
 8009392:	18cb      	adds	r3, r1, r3
 8009394:	469c      	mov	ip, r3
 8009396:	9902      	ldr	r1, [sp, #8]
 8009398:	428e      	cmp	r6, r1
 800939a:	d310      	bcc.n	80093be <__mdiff+0x102>
 800939c:	9e02      	ldr	r6, [sp, #8]
 800939e:	1ee1      	subs	r1, r4, #3
 80093a0:	2500      	movs	r5, #0
 80093a2:	428e      	cmp	r6, r1
 80093a4:	d304      	bcc.n	80093b0 <__mdiff+0xf4>
 80093a6:	0031      	movs	r1, r6
 80093a8:	3103      	adds	r1, #3
 80093aa:	1b0c      	subs	r4, r1, r4
 80093ac:	08a4      	lsrs	r4, r4, #2
 80093ae:	00a5      	lsls	r5, r4, #2
 80093b0:	195b      	adds	r3, r3, r5
 80093b2:	3b04      	subs	r3, #4
 80093b4:	6819      	ldr	r1, [r3, #0]
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d00f      	beq.n	80093da <__mdiff+0x11e>
 80093ba:	6110      	str	r0, [r2, #16]
 80093bc:	e797      	b.n	80092ee <__mdiff+0x32>
 80093be:	ce02      	ldmia	r6!, {r1}
 80093c0:	b28d      	uxth	r5, r1
 80093c2:	19ed      	adds	r5, r5, r7
 80093c4:	0c0f      	lsrs	r7, r1, #16
 80093c6:	1429      	asrs	r1, r5, #16
 80093c8:	1879      	adds	r1, r7, r1
 80093ca:	140f      	asrs	r7, r1, #16
 80093cc:	b2ad      	uxth	r5, r5
 80093ce:	0409      	lsls	r1, r1, #16
 80093d0:	430d      	orrs	r5, r1
 80093d2:	4661      	mov	r1, ip
 80093d4:	c120      	stmia	r1!, {r5}
 80093d6:	468c      	mov	ip, r1
 80093d8:	e7dd      	b.n	8009396 <__mdiff+0xda>
 80093da:	3801      	subs	r0, #1
 80093dc:	e7e9      	b.n	80093b2 <__mdiff+0xf6>
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	0800a8d0 	.word	0x0800a8d0
 80093e4:	00000232 	.word	0x00000232
 80093e8:	0800a9c0 	.word	0x0800a9c0

080093ec <__ulp>:
 80093ec:	4b0f      	ldr	r3, [pc, #60]	; (800942c <__ulp+0x40>)
 80093ee:	4019      	ands	r1, r3
 80093f0:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <__ulp+0x44>)
 80093f2:	18c9      	adds	r1, r1, r3
 80093f4:	2900      	cmp	r1, #0
 80093f6:	dd04      	ble.n	8009402 <__ulp+0x16>
 80093f8:	2200      	movs	r2, #0
 80093fa:	000b      	movs	r3, r1
 80093fc:	0010      	movs	r0, r2
 80093fe:	0019      	movs	r1, r3
 8009400:	4770      	bx	lr
 8009402:	4249      	negs	r1, r1
 8009404:	2200      	movs	r2, #0
 8009406:	2300      	movs	r3, #0
 8009408:	1509      	asrs	r1, r1, #20
 800940a:	2913      	cmp	r1, #19
 800940c:	dc04      	bgt.n	8009418 <__ulp+0x2c>
 800940e:	2080      	movs	r0, #128	; 0x80
 8009410:	0300      	lsls	r0, r0, #12
 8009412:	4108      	asrs	r0, r1
 8009414:	0003      	movs	r3, r0
 8009416:	e7f1      	b.n	80093fc <__ulp+0x10>
 8009418:	3914      	subs	r1, #20
 800941a:	2001      	movs	r0, #1
 800941c:	291e      	cmp	r1, #30
 800941e:	dc02      	bgt.n	8009426 <__ulp+0x3a>
 8009420:	2080      	movs	r0, #128	; 0x80
 8009422:	0600      	lsls	r0, r0, #24
 8009424:	40c8      	lsrs	r0, r1
 8009426:	0002      	movs	r2, r0
 8009428:	e7e8      	b.n	80093fc <__ulp+0x10>
 800942a:	46c0      	nop			; (mov r8, r8)
 800942c:	7ff00000 	.word	0x7ff00000
 8009430:	fcc00000 	.word	0xfcc00000

08009434 <__b2d>:
 8009434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009436:	0006      	movs	r6, r0
 8009438:	6903      	ldr	r3, [r0, #16]
 800943a:	3614      	adds	r6, #20
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	18f3      	adds	r3, r6, r3
 8009440:	1f1d      	subs	r5, r3, #4
 8009442:	682c      	ldr	r4, [r5, #0]
 8009444:	000f      	movs	r7, r1
 8009446:	0020      	movs	r0, r4
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	f7ff fd43 	bl	8008ed4 <__hi0bits>
 800944e:	2320      	movs	r3, #32
 8009450:	1a1b      	subs	r3, r3, r0
 8009452:	491f      	ldr	r1, [pc, #124]	; (80094d0 <__b2d+0x9c>)
 8009454:	603b      	str	r3, [r7, #0]
 8009456:	280a      	cmp	r0, #10
 8009458:	dc16      	bgt.n	8009488 <__b2d+0x54>
 800945a:	230b      	movs	r3, #11
 800945c:	0027      	movs	r7, r4
 800945e:	1a1b      	subs	r3, r3, r0
 8009460:	40df      	lsrs	r7, r3
 8009462:	4339      	orrs	r1, r7
 8009464:	469c      	mov	ip, r3
 8009466:	000b      	movs	r3, r1
 8009468:	2100      	movs	r1, #0
 800946a:	42ae      	cmp	r6, r5
 800946c:	d202      	bcs.n	8009474 <__b2d+0x40>
 800946e:	9901      	ldr	r1, [sp, #4]
 8009470:	3908      	subs	r1, #8
 8009472:	6809      	ldr	r1, [r1, #0]
 8009474:	3015      	adds	r0, #21
 8009476:	4084      	lsls	r4, r0
 8009478:	4660      	mov	r0, ip
 800947a:	40c1      	lsrs	r1, r0
 800947c:	430c      	orrs	r4, r1
 800947e:	0022      	movs	r2, r4
 8009480:	0010      	movs	r0, r2
 8009482:	0019      	movs	r1, r3
 8009484:	b003      	add	sp, #12
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	2700      	movs	r7, #0
 800948a:	42ae      	cmp	r6, r5
 800948c:	d202      	bcs.n	8009494 <__b2d+0x60>
 800948e:	9d01      	ldr	r5, [sp, #4]
 8009490:	3d08      	subs	r5, #8
 8009492:	682f      	ldr	r7, [r5, #0]
 8009494:	230b      	movs	r3, #11
 8009496:	425b      	negs	r3, r3
 8009498:	469c      	mov	ip, r3
 800949a:	4484      	add	ip, r0
 800949c:	280b      	cmp	r0, #11
 800949e:	d013      	beq.n	80094c8 <__b2d+0x94>
 80094a0:	4663      	mov	r3, ip
 80094a2:	2020      	movs	r0, #32
 80094a4:	409c      	lsls	r4, r3
 80094a6:	1ac0      	subs	r0, r0, r3
 80094a8:	003b      	movs	r3, r7
 80094aa:	40c3      	lsrs	r3, r0
 80094ac:	431c      	orrs	r4, r3
 80094ae:	4321      	orrs	r1, r4
 80094b0:	000b      	movs	r3, r1
 80094b2:	2100      	movs	r1, #0
 80094b4:	42b5      	cmp	r5, r6
 80094b6:	d901      	bls.n	80094bc <__b2d+0x88>
 80094b8:	3d04      	subs	r5, #4
 80094ba:	6829      	ldr	r1, [r5, #0]
 80094bc:	4664      	mov	r4, ip
 80094be:	40c1      	lsrs	r1, r0
 80094c0:	40a7      	lsls	r7, r4
 80094c2:	430f      	orrs	r7, r1
 80094c4:	003a      	movs	r2, r7
 80094c6:	e7db      	b.n	8009480 <__b2d+0x4c>
 80094c8:	4321      	orrs	r1, r4
 80094ca:	000b      	movs	r3, r1
 80094cc:	e7fa      	b.n	80094c4 <__b2d+0x90>
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	3ff00000 	.word	0x3ff00000

080094d4 <__d2b>:
 80094d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094d6:	2101      	movs	r1, #1
 80094d8:	0014      	movs	r4, r2
 80094da:	001e      	movs	r6, r3
 80094dc:	9f08      	ldr	r7, [sp, #32]
 80094de:	f7ff fc01 	bl	8008ce4 <_Balloc>
 80094e2:	1e05      	subs	r5, r0, #0
 80094e4:	d105      	bne.n	80094f2 <__d2b+0x1e>
 80094e6:	0002      	movs	r2, r0
 80094e8:	4b26      	ldr	r3, [pc, #152]	; (8009584 <__d2b+0xb0>)
 80094ea:	4927      	ldr	r1, [pc, #156]	; (8009588 <__d2b+0xb4>)
 80094ec:	4827      	ldr	r0, [pc, #156]	; (800958c <__d2b+0xb8>)
 80094ee:	f000 fd07 	bl	8009f00 <__assert_func>
 80094f2:	0333      	lsls	r3, r6, #12
 80094f4:	0076      	lsls	r6, r6, #1
 80094f6:	0b1b      	lsrs	r3, r3, #12
 80094f8:	0d76      	lsrs	r6, r6, #21
 80094fa:	d124      	bne.n	8009546 <__d2b+0x72>
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	2c00      	cmp	r4, #0
 8009500:	d027      	beq.n	8009552 <__d2b+0x7e>
 8009502:	4668      	mov	r0, sp
 8009504:	9400      	str	r4, [sp, #0]
 8009506:	f7ff fcff 	bl	8008f08 <__lo0bits>
 800950a:	9c00      	ldr	r4, [sp, #0]
 800950c:	2800      	cmp	r0, #0
 800950e:	d01e      	beq.n	800954e <__d2b+0x7a>
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	2120      	movs	r1, #32
 8009514:	001a      	movs	r2, r3
 8009516:	1a09      	subs	r1, r1, r0
 8009518:	408a      	lsls	r2, r1
 800951a:	40c3      	lsrs	r3, r0
 800951c:	4322      	orrs	r2, r4
 800951e:	616a      	str	r2, [r5, #20]
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	9c01      	ldr	r4, [sp, #4]
 8009524:	61ac      	str	r4, [r5, #24]
 8009526:	1e63      	subs	r3, r4, #1
 8009528:	419c      	sbcs	r4, r3
 800952a:	3401      	adds	r4, #1
 800952c:	612c      	str	r4, [r5, #16]
 800952e:	2e00      	cmp	r6, #0
 8009530:	d018      	beq.n	8009564 <__d2b+0x90>
 8009532:	4b17      	ldr	r3, [pc, #92]	; (8009590 <__d2b+0xbc>)
 8009534:	18f6      	adds	r6, r6, r3
 8009536:	2335      	movs	r3, #53	; 0x35
 8009538:	1836      	adds	r6, r6, r0
 800953a:	1a18      	subs	r0, r3, r0
 800953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953e:	603e      	str	r6, [r7, #0]
 8009540:	6018      	str	r0, [r3, #0]
 8009542:	0028      	movs	r0, r5
 8009544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009546:	2280      	movs	r2, #128	; 0x80
 8009548:	0352      	lsls	r2, r2, #13
 800954a:	4313      	orrs	r3, r2
 800954c:	e7d6      	b.n	80094fc <__d2b+0x28>
 800954e:	616c      	str	r4, [r5, #20]
 8009550:	e7e7      	b.n	8009522 <__d2b+0x4e>
 8009552:	a801      	add	r0, sp, #4
 8009554:	f7ff fcd8 	bl	8008f08 <__lo0bits>
 8009558:	2401      	movs	r4, #1
 800955a:	9b01      	ldr	r3, [sp, #4]
 800955c:	612c      	str	r4, [r5, #16]
 800955e:	616b      	str	r3, [r5, #20]
 8009560:	3020      	adds	r0, #32
 8009562:	e7e4      	b.n	800952e <__d2b+0x5a>
 8009564:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <__d2b+0xc0>)
 8009566:	18c0      	adds	r0, r0, r3
 8009568:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <__d2b+0xc4>)
 800956a:	6038      	str	r0, [r7, #0]
 800956c:	18e3      	adds	r3, r4, r3
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	18eb      	adds	r3, r5, r3
 8009572:	6958      	ldr	r0, [r3, #20]
 8009574:	f7ff fcae 	bl	8008ed4 <__hi0bits>
 8009578:	0164      	lsls	r4, r4, #5
 800957a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957c:	1a24      	subs	r4, r4, r0
 800957e:	601c      	str	r4, [r3, #0]
 8009580:	e7df      	b.n	8009542 <__d2b+0x6e>
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	0800a8d0 	.word	0x0800a8d0
 8009588:	0000030a 	.word	0x0000030a
 800958c:	0800a9c0 	.word	0x0800a9c0
 8009590:	fffffbcd 	.word	0xfffffbcd
 8009594:	fffffbce 	.word	0xfffffbce
 8009598:	3fffffff 	.word	0x3fffffff

0800959c <__ratio>:
 800959c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959e:	b087      	sub	sp, #28
 80095a0:	000f      	movs	r7, r1
 80095a2:	a904      	add	r1, sp, #16
 80095a4:	0006      	movs	r6, r0
 80095a6:	f7ff ff45 	bl	8009434 <__b2d>
 80095aa:	9000      	str	r0, [sp, #0]
 80095ac:	9101      	str	r1, [sp, #4]
 80095ae:	9c00      	ldr	r4, [sp, #0]
 80095b0:	9d01      	ldr	r5, [sp, #4]
 80095b2:	0038      	movs	r0, r7
 80095b4:	a905      	add	r1, sp, #20
 80095b6:	f7ff ff3d 	bl	8009434 <__b2d>
 80095ba:	9002      	str	r0, [sp, #8]
 80095bc:	9103      	str	r1, [sp, #12]
 80095be:	9a02      	ldr	r2, [sp, #8]
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	6931      	ldr	r1, [r6, #16]
 80095c4:	6938      	ldr	r0, [r7, #16]
 80095c6:	9e05      	ldr	r6, [sp, #20]
 80095c8:	1a08      	subs	r0, r1, r0
 80095ca:	9904      	ldr	r1, [sp, #16]
 80095cc:	0140      	lsls	r0, r0, #5
 80095ce:	1b89      	subs	r1, r1, r6
 80095d0:	1841      	adds	r1, r0, r1
 80095d2:	0508      	lsls	r0, r1, #20
 80095d4:	2900      	cmp	r1, #0
 80095d6:	dd07      	ble.n	80095e8 <__ratio+0x4c>
 80095d8:	9901      	ldr	r1, [sp, #4]
 80095da:	1845      	adds	r5, r0, r1
 80095dc:	0020      	movs	r0, r4
 80095de:	0029      	movs	r1, r5
 80095e0:	f7f7 fb0e 	bl	8000c00 <__aeabi_ddiv>
 80095e4:	b007      	add	sp, #28
 80095e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e8:	9903      	ldr	r1, [sp, #12]
 80095ea:	1a0b      	subs	r3, r1, r0
 80095ec:	e7f6      	b.n	80095dc <__ratio+0x40>

080095ee <__copybits>:
 80095ee:	b570      	push	{r4, r5, r6, lr}
 80095f0:	0014      	movs	r4, r2
 80095f2:	0005      	movs	r5, r0
 80095f4:	3901      	subs	r1, #1
 80095f6:	6913      	ldr	r3, [r2, #16]
 80095f8:	1149      	asrs	r1, r1, #5
 80095fa:	3101      	adds	r1, #1
 80095fc:	0089      	lsls	r1, r1, #2
 80095fe:	3414      	adds	r4, #20
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	1841      	adds	r1, r0, r1
 8009604:	18e3      	adds	r3, r4, r3
 8009606:	42a3      	cmp	r3, r4
 8009608:	d80d      	bhi.n	8009626 <__copybits+0x38>
 800960a:	0014      	movs	r4, r2
 800960c:	3411      	adds	r4, #17
 800960e:	2500      	movs	r5, #0
 8009610:	429c      	cmp	r4, r3
 8009612:	d803      	bhi.n	800961c <__copybits+0x2e>
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	3b11      	subs	r3, #17
 8009618:	089b      	lsrs	r3, r3, #2
 800961a:	009d      	lsls	r5, r3, #2
 800961c:	2300      	movs	r3, #0
 800961e:	1940      	adds	r0, r0, r5
 8009620:	4281      	cmp	r1, r0
 8009622:	d803      	bhi.n	800962c <__copybits+0x3e>
 8009624:	bd70      	pop	{r4, r5, r6, pc}
 8009626:	cc40      	ldmia	r4!, {r6}
 8009628:	c540      	stmia	r5!, {r6}
 800962a:	e7ec      	b.n	8009606 <__copybits+0x18>
 800962c:	c008      	stmia	r0!, {r3}
 800962e:	e7f7      	b.n	8009620 <__copybits+0x32>

08009630 <__any_on>:
 8009630:	0002      	movs	r2, r0
 8009632:	6900      	ldr	r0, [r0, #16]
 8009634:	b510      	push	{r4, lr}
 8009636:	3214      	adds	r2, #20
 8009638:	114b      	asrs	r3, r1, #5
 800963a:	4298      	cmp	r0, r3
 800963c:	db13      	blt.n	8009666 <__any_on+0x36>
 800963e:	dd0c      	ble.n	800965a <__any_on+0x2a>
 8009640:	241f      	movs	r4, #31
 8009642:	0008      	movs	r0, r1
 8009644:	4020      	ands	r0, r4
 8009646:	4221      	tst	r1, r4
 8009648:	d007      	beq.n	800965a <__any_on+0x2a>
 800964a:	0099      	lsls	r1, r3, #2
 800964c:	588c      	ldr	r4, [r1, r2]
 800964e:	0021      	movs	r1, r4
 8009650:	40c1      	lsrs	r1, r0
 8009652:	4081      	lsls	r1, r0
 8009654:	2001      	movs	r0, #1
 8009656:	428c      	cmp	r4, r1
 8009658:	d104      	bne.n	8009664 <__any_on+0x34>
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	18d3      	adds	r3, r2, r3
 800965e:	4293      	cmp	r3, r2
 8009660:	d803      	bhi.n	800966a <__any_on+0x3a>
 8009662:	2000      	movs	r0, #0
 8009664:	bd10      	pop	{r4, pc}
 8009666:	0003      	movs	r3, r0
 8009668:	e7f7      	b.n	800965a <__any_on+0x2a>
 800966a:	3b04      	subs	r3, #4
 800966c:	6819      	ldr	r1, [r3, #0]
 800966e:	2900      	cmp	r1, #0
 8009670:	d0f5      	beq.n	800965e <__any_on+0x2e>
 8009672:	2001      	movs	r0, #1
 8009674:	e7f6      	b.n	8009664 <__any_on+0x34>

08009676 <_calloc_r>:
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	0c13      	lsrs	r3, r2, #16
 800967a:	0c0d      	lsrs	r5, r1, #16
 800967c:	d11e      	bne.n	80096bc <_calloc_r+0x46>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10c      	bne.n	800969c <_calloc_r+0x26>
 8009682:	b289      	uxth	r1, r1
 8009684:	b294      	uxth	r4, r2
 8009686:	434c      	muls	r4, r1
 8009688:	0021      	movs	r1, r4
 800968a:	f7fc f9e9 	bl	8005a60 <_malloc_r>
 800968e:	1e05      	subs	r5, r0, #0
 8009690:	d01b      	beq.n	80096ca <_calloc_r+0x54>
 8009692:	0022      	movs	r2, r4
 8009694:	2100      	movs	r1, #0
 8009696:	f7fc f96f 	bl	8005978 <memset>
 800969a:	e016      	b.n	80096ca <_calloc_r+0x54>
 800969c:	1c1d      	adds	r5, r3, #0
 800969e:	1c0b      	adds	r3, r1, #0
 80096a0:	b292      	uxth	r2, r2
 80096a2:	b289      	uxth	r1, r1
 80096a4:	b29c      	uxth	r4, r3
 80096a6:	4351      	muls	r1, r2
 80096a8:	b2ab      	uxth	r3, r5
 80096aa:	4363      	muls	r3, r4
 80096ac:	0c0c      	lsrs	r4, r1, #16
 80096ae:	191c      	adds	r4, r3, r4
 80096b0:	0c22      	lsrs	r2, r4, #16
 80096b2:	d107      	bne.n	80096c4 <_calloc_r+0x4e>
 80096b4:	0424      	lsls	r4, r4, #16
 80096b6:	b289      	uxth	r1, r1
 80096b8:	430c      	orrs	r4, r1
 80096ba:	e7e5      	b.n	8009688 <_calloc_r+0x12>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <_calloc_r+0x4e>
 80096c0:	1c13      	adds	r3, r2, #0
 80096c2:	e7ed      	b.n	80096a0 <_calloc_r+0x2a>
 80096c4:	230c      	movs	r3, #12
 80096c6:	2500      	movs	r5, #0
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	0028      	movs	r0, r5
 80096cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080096d0 <__ssputs_r>:
 80096d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d2:	688e      	ldr	r6, [r1, #8]
 80096d4:	b085      	sub	sp, #20
 80096d6:	0007      	movs	r7, r0
 80096d8:	000c      	movs	r4, r1
 80096da:	9203      	str	r2, [sp, #12]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	429e      	cmp	r6, r3
 80096e0:	d83c      	bhi.n	800975c <__ssputs_r+0x8c>
 80096e2:	2390      	movs	r3, #144	; 0x90
 80096e4:	898a      	ldrh	r2, [r1, #12]
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	421a      	tst	r2, r3
 80096ea:	d034      	beq.n	8009756 <__ssputs_r+0x86>
 80096ec:	6909      	ldr	r1, [r1, #16]
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	6960      	ldr	r0, [r4, #20]
 80096f2:	1a5b      	subs	r3, r3, r1
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	2303      	movs	r3, #3
 80096f8:	4343      	muls	r3, r0
 80096fa:	0fdd      	lsrs	r5, r3, #31
 80096fc:	18ed      	adds	r5, r5, r3
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	9802      	ldr	r0, [sp, #8]
 8009702:	3301      	adds	r3, #1
 8009704:	181b      	adds	r3, r3, r0
 8009706:	106d      	asrs	r5, r5, #1
 8009708:	42ab      	cmp	r3, r5
 800970a:	d900      	bls.n	800970e <__ssputs_r+0x3e>
 800970c:	001d      	movs	r5, r3
 800970e:	0553      	lsls	r3, r2, #21
 8009710:	d532      	bpl.n	8009778 <__ssputs_r+0xa8>
 8009712:	0029      	movs	r1, r5
 8009714:	0038      	movs	r0, r7
 8009716:	f7fc f9a3 	bl	8005a60 <_malloc_r>
 800971a:	1e06      	subs	r6, r0, #0
 800971c:	d109      	bne.n	8009732 <__ssputs_r+0x62>
 800971e:	230c      	movs	r3, #12
 8009720:	603b      	str	r3, [r7, #0]
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	2001      	movs	r0, #1
 8009726:	89a2      	ldrh	r2, [r4, #12]
 8009728:	4240      	negs	r0, r0
 800972a:	4313      	orrs	r3, r2
 800972c:	81a3      	strh	r3, [r4, #12]
 800972e:	b005      	add	sp, #20
 8009730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009732:	9a02      	ldr	r2, [sp, #8]
 8009734:	6921      	ldr	r1, [r4, #16]
 8009736:	f7ff fabb 	bl	8008cb0 <memcpy>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	4a14      	ldr	r2, [pc, #80]	; (8009790 <__ssputs_r+0xc0>)
 800973e:	401a      	ands	r2, r3
 8009740:	2380      	movs	r3, #128	; 0x80
 8009742:	4313      	orrs	r3, r2
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	6126      	str	r6, [r4, #16]
 800974a:	18f6      	adds	r6, r6, r3
 800974c:	6026      	str	r6, [r4, #0]
 800974e:	6165      	str	r5, [r4, #20]
 8009750:	9e01      	ldr	r6, [sp, #4]
 8009752:	1aed      	subs	r5, r5, r3
 8009754:	60a5      	str	r5, [r4, #8]
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	429e      	cmp	r6, r3
 800975a:	d900      	bls.n	800975e <__ssputs_r+0x8e>
 800975c:	9e01      	ldr	r6, [sp, #4]
 800975e:	0032      	movs	r2, r6
 8009760:	9903      	ldr	r1, [sp, #12]
 8009762:	6820      	ldr	r0, [r4, #0]
 8009764:	f000 fd58 	bl	800a218 <memmove>
 8009768:	68a3      	ldr	r3, [r4, #8]
 800976a:	2000      	movs	r0, #0
 800976c:	1b9b      	subs	r3, r3, r6
 800976e:	60a3      	str	r3, [r4, #8]
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	199e      	adds	r6, r3, r6
 8009774:	6026      	str	r6, [r4, #0]
 8009776:	e7da      	b.n	800972e <__ssputs_r+0x5e>
 8009778:	002a      	movs	r2, r5
 800977a:	0038      	movs	r0, r7
 800977c:	f000 fd5f 	bl	800a23e <_realloc_r>
 8009780:	1e06      	subs	r6, r0, #0
 8009782:	d1e0      	bne.n	8009746 <__ssputs_r+0x76>
 8009784:	0038      	movs	r0, r7
 8009786:	6921      	ldr	r1, [r4, #16]
 8009788:	f7fc f8fe 	bl	8005988 <_free_r>
 800978c:	e7c7      	b.n	800971e <__ssputs_r+0x4e>
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	fffffb7f 	.word	0xfffffb7f

08009794 <_svfiprintf_r>:
 8009794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009796:	b0a1      	sub	sp, #132	; 0x84
 8009798:	9003      	str	r0, [sp, #12]
 800979a:	001d      	movs	r5, r3
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	000f      	movs	r7, r1
 80097a0:	0016      	movs	r6, r2
 80097a2:	061b      	lsls	r3, r3, #24
 80097a4:	d511      	bpl.n	80097ca <_svfiprintf_r+0x36>
 80097a6:	690b      	ldr	r3, [r1, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10e      	bne.n	80097ca <_svfiprintf_r+0x36>
 80097ac:	2140      	movs	r1, #64	; 0x40
 80097ae:	f7fc f957 	bl	8005a60 <_malloc_r>
 80097b2:	6038      	str	r0, [r7, #0]
 80097b4:	6138      	str	r0, [r7, #16]
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d105      	bne.n	80097c6 <_svfiprintf_r+0x32>
 80097ba:	230c      	movs	r3, #12
 80097bc:	9a03      	ldr	r2, [sp, #12]
 80097be:	3801      	subs	r0, #1
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	b021      	add	sp, #132	; 0x84
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	2340      	movs	r3, #64	; 0x40
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	2300      	movs	r3, #0
 80097cc:	ac08      	add	r4, sp, #32
 80097ce:	6163      	str	r3, [r4, #20]
 80097d0:	3320      	adds	r3, #32
 80097d2:	7663      	strb	r3, [r4, #25]
 80097d4:	3310      	adds	r3, #16
 80097d6:	76a3      	strb	r3, [r4, #26]
 80097d8:	9507      	str	r5, [sp, #28]
 80097da:	0035      	movs	r5, r6
 80097dc:	782b      	ldrb	r3, [r5, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <_svfiprintf_r+0x52>
 80097e2:	2b25      	cmp	r3, #37	; 0x25
 80097e4:	d147      	bne.n	8009876 <_svfiprintf_r+0xe2>
 80097e6:	1bab      	subs	r3, r5, r6
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	42b5      	cmp	r5, r6
 80097ec:	d00c      	beq.n	8009808 <_svfiprintf_r+0x74>
 80097ee:	0032      	movs	r2, r6
 80097f0:	0039      	movs	r1, r7
 80097f2:	9803      	ldr	r0, [sp, #12]
 80097f4:	f7ff ff6c 	bl	80096d0 <__ssputs_r>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d100      	bne.n	80097fe <_svfiprintf_r+0x6a>
 80097fc:	e0ae      	b.n	800995c <_svfiprintf_r+0x1c8>
 80097fe:	6962      	ldr	r2, [r4, #20]
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	4694      	mov	ip, r2
 8009804:	4463      	add	r3, ip
 8009806:	6163      	str	r3, [r4, #20]
 8009808:	782b      	ldrb	r3, [r5, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d100      	bne.n	8009810 <_svfiprintf_r+0x7c>
 800980e:	e0a5      	b.n	800995c <_svfiprintf_r+0x1c8>
 8009810:	2201      	movs	r2, #1
 8009812:	2300      	movs	r3, #0
 8009814:	4252      	negs	r2, r2
 8009816:	6062      	str	r2, [r4, #4]
 8009818:	a904      	add	r1, sp, #16
 800981a:	3254      	adds	r2, #84	; 0x54
 800981c:	1852      	adds	r2, r2, r1
 800981e:	1c6e      	adds	r6, r5, #1
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	60e3      	str	r3, [r4, #12]
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	7013      	strb	r3, [r2, #0]
 8009828:	65a3      	str	r3, [r4, #88]	; 0x58
 800982a:	2205      	movs	r2, #5
 800982c:	7831      	ldrb	r1, [r6, #0]
 800982e:	4854      	ldr	r0, [pc, #336]	; (8009980 <_svfiprintf_r+0x1ec>)
 8009830:	f7ff fa33 	bl	8008c9a <memchr>
 8009834:	1c75      	adds	r5, r6, #1
 8009836:	2800      	cmp	r0, #0
 8009838:	d11f      	bne.n	800987a <_svfiprintf_r+0xe6>
 800983a:	6822      	ldr	r2, [r4, #0]
 800983c:	06d3      	lsls	r3, r2, #27
 800983e:	d504      	bpl.n	800984a <_svfiprintf_r+0xb6>
 8009840:	2353      	movs	r3, #83	; 0x53
 8009842:	a904      	add	r1, sp, #16
 8009844:	185b      	adds	r3, r3, r1
 8009846:	2120      	movs	r1, #32
 8009848:	7019      	strb	r1, [r3, #0]
 800984a:	0713      	lsls	r3, r2, #28
 800984c:	d504      	bpl.n	8009858 <_svfiprintf_r+0xc4>
 800984e:	2353      	movs	r3, #83	; 0x53
 8009850:	a904      	add	r1, sp, #16
 8009852:	185b      	adds	r3, r3, r1
 8009854:	212b      	movs	r1, #43	; 0x2b
 8009856:	7019      	strb	r1, [r3, #0]
 8009858:	7833      	ldrb	r3, [r6, #0]
 800985a:	2b2a      	cmp	r3, #42	; 0x2a
 800985c:	d016      	beq.n	800988c <_svfiprintf_r+0xf8>
 800985e:	0035      	movs	r5, r6
 8009860:	2100      	movs	r1, #0
 8009862:	200a      	movs	r0, #10
 8009864:	68e3      	ldr	r3, [r4, #12]
 8009866:	782a      	ldrb	r2, [r5, #0]
 8009868:	1c6e      	adds	r6, r5, #1
 800986a:	3a30      	subs	r2, #48	; 0x30
 800986c:	2a09      	cmp	r2, #9
 800986e:	d94e      	bls.n	800990e <_svfiprintf_r+0x17a>
 8009870:	2900      	cmp	r1, #0
 8009872:	d111      	bne.n	8009898 <_svfiprintf_r+0x104>
 8009874:	e017      	b.n	80098a6 <_svfiprintf_r+0x112>
 8009876:	3501      	adds	r5, #1
 8009878:	e7b0      	b.n	80097dc <_svfiprintf_r+0x48>
 800987a:	4b41      	ldr	r3, [pc, #260]	; (8009980 <_svfiprintf_r+0x1ec>)
 800987c:	6822      	ldr	r2, [r4, #0]
 800987e:	1ac0      	subs	r0, r0, r3
 8009880:	2301      	movs	r3, #1
 8009882:	4083      	lsls	r3, r0
 8009884:	4313      	orrs	r3, r2
 8009886:	002e      	movs	r6, r5
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	e7ce      	b.n	800982a <_svfiprintf_r+0x96>
 800988c:	9b07      	ldr	r3, [sp, #28]
 800988e:	1d19      	adds	r1, r3, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	9107      	str	r1, [sp, #28]
 8009894:	2b00      	cmp	r3, #0
 8009896:	db01      	blt.n	800989c <_svfiprintf_r+0x108>
 8009898:	930b      	str	r3, [sp, #44]	; 0x2c
 800989a:	e004      	b.n	80098a6 <_svfiprintf_r+0x112>
 800989c:	425b      	negs	r3, r3
 800989e:	60e3      	str	r3, [r4, #12]
 80098a0:	2302      	movs	r3, #2
 80098a2:	4313      	orrs	r3, r2
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	782b      	ldrb	r3, [r5, #0]
 80098a8:	2b2e      	cmp	r3, #46	; 0x2e
 80098aa:	d10a      	bne.n	80098c2 <_svfiprintf_r+0x12e>
 80098ac:	786b      	ldrb	r3, [r5, #1]
 80098ae:	2b2a      	cmp	r3, #42	; 0x2a
 80098b0:	d135      	bne.n	800991e <_svfiprintf_r+0x18a>
 80098b2:	9b07      	ldr	r3, [sp, #28]
 80098b4:	3502      	adds	r5, #2
 80098b6:	1d1a      	adds	r2, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	9207      	str	r2, [sp, #28]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	db2b      	blt.n	8009918 <_svfiprintf_r+0x184>
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	4e30      	ldr	r6, [pc, #192]	; (8009984 <_svfiprintf_r+0x1f0>)
 80098c4:	2203      	movs	r2, #3
 80098c6:	0030      	movs	r0, r6
 80098c8:	7829      	ldrb	r1, [r5, #0]
 80098ca:	f7ff f9e6 	bl	8008c9a <memchr>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d006      	beq.n	80098e0 <_svfiprintf_r+0x14c>
 80098d2:	2340      	movs	r3, #64	; 0x40
 80098d4:	1b80      	subs	r0, r0, r6
 80098d6:	4083      	lsls	r3, r0
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	3501      	adds	r5, #1
 80098dc:	4313      	orrs	r3, r2
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	7829      	ldrb	r1, [r5, #0]
 80098e2:	2206      	movs	r2, #6
 80098e4:	4828      	ldr	r0, [pc, #160]	; (8009988 <_svfiprintf_r+0x1f4>)
 80098e6:	1c6e      	adds	r6, r5, #1
 80098e8:	7621      	strb	r1, [r4, #24]
 80098ea:	f7ff f9d6 	bl	8008c9a <memchr>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d03c      	beq.n	800996c <_svfiprintf_r+0x1d8>
 80098f2:	4b26      	ldr	r3, [pc, #152]	; (800998c <_svfiprintf_r+0x1f8>)
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d125      	bne.n	8009944 <_svfiprintf_r+0x1b0>
 80098f8:	2207      	movs	r2, #7
 80098fa:	9b07      	ldr	r3, [sp, #28]
 80098fc:	3307      	adds	r3, #7
 80098fe:	4393      	bics	r3, r2
 8009900:	3308      	adds	r3, #8
 8009902:	9307      	str	r3, [sp, #28]
 8009904:	6963      	ldr	r3, [r4, #20]
 8009906:	9a04      	ldr	r2, [sp, #16]
 8009908:	189b      	adds	r3, r3, r2
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	e765      	b.n	80097da <_svfiprintf_r+0x46>
 800990e:	4343      	muls	r3, r0
 8009910:	0035      	movs	r5, r6
 8009912:	2101      	movs	r1, #1
 8009914:	189b      	adds	r3, r3, r2
 8009916:	e7a6      	b.n	8009866 <_svfiprintf_r+0xd2>
 8009918:	2301      	movs	r3, #1
 800991a:	425b      	negs	r3, r3
 800991c:	e7d0      	b.n	80098c0 <_svfiprintf_r+0x12c>
 800991e:	2300      	movs	r3, #0
 8009920:	200a      	movs	r0, #10
 8009922:	001a      	movs	r2, r3
 8009924:	3501      	adds	r5, #1
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	7829      	ldrb	r1, [r5, #0]
 800992a:	1c6e      	adds	r6, r5, #1
 800992c:	3930      	subs	r1, #48	; 0x30
 800992e:	2909      	cmp	r1, #9
 8009930:	d903      	bls.n	800993a <_svfiprintf_r+0x1a6>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0c5      	beq.n	80098c2 <_svfiprintf_r+0x12e>
 8009936:	9209      	str	r2, [sp, #36]	; 0x24
 8009938:	e7c3      	b.n	80098c2 <_svfiprintf_r+0x12e>
 800993a:	4342      	muls	r2, r0
 800993c:	0035      	movs	r5, r6
 800993e:	2301      	movs	r3, #1
 8009940:	1852      	adds	r2, r2, r1
 8009942:	e7f1      	b.n	8009928 <_svfiprintf_r+0x194>
 8009944:	ab07      	add	r3, sp, #28
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	003a      	movs	r2, r7
 800994a:	0021      	movs	r1, r4
 800994c:	4b10      	ldr	r3, [pc, #64]	; (8009990 <_svfiprintf_r+0x1fc>)
 800994e:	9803      	ldr	r0, [sp, #12]
 8009950:	f7fc f9a6 	bl	8005ca0 <_printf_float>
 8009954:	9004      	str	r0, [sp, #16]
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	3301      	adds	r3, #1
 800995a:	d1d3      	bne.n	8009904 <_svfiprintf_r+0x170>
 800995c:	89bb      	ldrh	r3, [r7, #12]
 800995e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009960:	065b      	lsls	r3, r3, #25
 8009962:	d400      	bmi.n	8009966 <_svfiprintf_r+0x1d2>
 8009964:	e72d      	b.n	80097c2 <_svfiprintf_r+0x2e>
 8009966:	2001      	movs	r0, #1
 8009968:	4240      	negs	r0, r0
 800996a:	e72a      	b.n	80097c2 <_svfiprintf_r+0x2e>
 800996c:	ab07      	add	r3, sp, #28
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	003a      	movs	r2, r7
 8009972:	0021      	movs	r1, r4
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <_svfiprintf_r+0x1fc>)
 8009976:	9803      	ldr	r0, [sp, #12]
 8009978:	f7fc fc44 	bl	8006204 <_printf_i>
 800997c:	e7ea      	b.n	8009954 <_svfiprintf_r+0x1c0>
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	0800ab1c 	.word	0x0800ab1c
 8009984:	0800ab22 	.word	0x0800ab22
 8009988:	0800ab26 	.word	0x0800ab26
 800998c:	08005ca1 	.word	0x08005ca1
 8009990:	080096d1 	.word	0x080096d1

08009994 <__sfputc_r>:
 8009994:	6893      	ldr	r3, [r2, #8]
 8009996:	b510      	push	{r4, lr}
 8009998:	3b01      	subs	r3, #1
 800999a:	6093      	str	r3, [r2, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	da04      	bge.n	80099aa <__sfputc_r+0x16>
 80099a0:	6994      	ldr	r4, [r2, #24]
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	db07      	blt.n	80099b6 <__sfputc_r+0x22>
 80099a6:	290a      	cmp	r1, #10
 80099a8:	d005      	beq.n	80099b6 <__sfputc_r+0x22>
 80099aa:	6813      	ldr	r3, [r2, #0]
 80099ac:	1c58      	adds	r0, r3, #1
 80099ae:	6010      	str	r0, [r2, #0]
 80099b0:	7019      	strb	r1, [r3, #0]
 80099b2:	0008      	movs	r0, r1
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	f000 f9b3 	bl	8009d20 <__swbuf_r>
 80099ba:	0001      	movs	r1, r0
 80099bc:	e7f9      	b.n	80099b2 <__sfputc_r+0x1e>

080099be <__sfputs_r>:
 80099be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c0:	0006      	movs	r6, r0
 80099c2:	000f      	movs	r7, r1
 80099c4:	0014      	movs	r4, r2
 80099c6:	18d5      	adds	r5, r2, r3
 80099c8:	42ac      	cmp	r4, r5
 80099ca:	d101      	bne.n	80099d0 <__sfputs_r+0x12>
 80099cc:	2000      	movs	r0, #0
 80099ce:	e007      	b.n	80099e0 <__sfputs_r+0x22>
 80099d0:	7821      	ldrb	r1, [r4, #0]
 80099d2:	003a      	movs	r2, r7
 80099d4:	0030      	movs	r0, r6
 80099d6:	f7ff ffdd 	bl	8009994 <__sfputc_r>
 80099da:	3401      	adds	r4, #1
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d1f3      	bne.n	80099c8 <__sfputs_r+0xa>
 80099e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099e4 <_vfiprintf_r>:
 80099e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e6:	b0a1      	sub	sp, #132	; 0x84
 80099e8:	0006      	movs	r6, r0
 80099ea:	000c      	movs	r4, r1
 80099ec:	001f      	movs	r7, r3
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d004      	beq.n	80099fe <_vfiprintf_r+0x1a>
 80099f4:	6983      	ldr	r3, [r0, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <_vfiprintf_r+0x1a>
 80099fa:	f7fe fd21 	bl	8008440 <__sinit>
 80099fe:	4b8e      	ldr	r3, [pc, #568]	; (8009c38 <_vfiprintf_r+0x254>)
 8009a00:	429c      	cmp	r4, r3
 8009a02:	d11c      	bne.n	8009a3e <_vfiprintf_r+0x5a>
 8009a04:	6874      	ldr	r4, [r6, #4]
 8009a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a08:	07db      	lsls	r3, r3, #31
 8009a0a:	d405      	bmi.n	8009a18 <_vfiprintf_r+0x34>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	059b      	lsls	r3, r3, #22
 8009a10:	d402      	bmi.n	8009a18 <_vfiprintf_r+0x34>
 8009a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a14:	f7ff f92d 	bl	8008c72 <__retarget_lock_acquire_recursive>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	071b      	lsls	r3, r3, #28
 8009a1c:	d502      	bpl.n	8009a24 <_vfiprintf_r+0x40>
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d11d      	bne.n	8009a60 <_vfiprintf_r+0x7c>
 8009a24:	0021      	movs	r1, r4
 8009a26:	0030      	movs	r0, r6
 8009a28:	f000 f9f2 	bl	8009e10 <__swsetup_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d017      	beq.n	8009a60 <_vfiprintf_r+0x7c>
 8009a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a32:	07db      	lsls	r3, r3, #31
 8009a34:	d50d      	bpl.n	8009a52 <_vfiprintf_r+0x6e>
 8009a36:	2001      	movs	r0, #1
 8009a38:	4240      	negs	r0, r0
 8009a3a:	b021      	add	sp, #132	; 0x84
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3e:	4b7f      	ldr	r3, [pc, #508]	; (8009c3c <_vfiprintf_r+0x258>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d101      	bne.n	8009a48 <_vfiprintf_r+0x64>
 8009a44:	68b4      	ldr	r4, [r6, #8]
 8009a46:	e7de      	b.n	8009a06 <_vfiprintf_r+0x22>
 8009a48:	4b7d      	ldr	r3, [pc, #500]	; (8009c40 <_vfiprintf_r+0x25c>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	d1db      	bne.n	8009a06 <_vfiprintf_r+0x22>
 8009a4e:	68f4      	ldr	r4, [r6, #12]
 8009a50:	e7d9      	b.n	8009a06 <_vfiprintf_r+0x22>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d4ee      	bmi.n	8009a36 <_vfiprintf_r+0x52>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f7ff f90b 	bl	8008c74 <__retarget_lock_release_recursive>
 8009a5e:	e7ea      	b.n	8009a36 <_vfiprintf_r+0x52>
 8009a60:	2300      	movs	r3, #0
 8009a62:	ad08      	add	r5, sp, #32
 8009a64:	616b      	str	r3, [r5, #20]
 8009a66:	3320      	adds	r3, #32
 8009a68:	766b      	strb	r3, [r5, #25]
 8009a6a:	3310      	adds	r3, #16
 8009a6c:	76ab      	strb	r3, [r5, #26]
 8009a6e:	9707      	str	r7, [sp, #28]
 8009a70:	9f03      	ldr	r7, [sp, #12]
 8009a72:	783b      	ldrb	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <_vfiprintf_r+0x98>
 8009a78:	2b25      	cmp	r3, #37	; 0x25
 8009a7a:	d14e      	bne.n	8009b1a <_vfiprintf_r+0x136>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	1afb      	subs	r3, r7, r3
 8009a80:	9305      	str	r3, [sp, #20]
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	429f      	cmp	r7, r3
 8009a86:	d00d      	beq.n	8009aa4 <_vfiprintf_r+0xc0>
 8009a88:	9b05      	ldr	r3, [sp, #20]
 8009a8a:	0021      	movs	r1, r4
 8009a8c:	0030      	movs	r0, r6
 8009a8e:	9a03      	ldr	r2, [sp, #12]
 8009a90:	f7ff ff95 	bl	80099be <__sfputs_r>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d100      	bne.n	8009a9a <_vfiprintf_r+0xb6>
 8009a98:	e0b5      	b.n	8009c06 <_vfiprintf_r+0x222>
 8009a9a:	696a      	ldr	r2, [r5, #20]
 8009a9c:	9b05      	ldr	r3, [sp, #20]
 8009a9e:	4694      	mov	ip, r2
 8009aa0:	4463      	add	r3, ip
 8009aa2:	616b      	str	r3, [r5, #20]
 8009aa4:	783b      	ldrb	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d100      	bne.n	8009aac <_vfiprintf_r+0xc8>
 8009aaa:	e0ac      	b.n	8009c06 <_vfiprintf_r+0x222>
 8009aac:	2201      	movs	r2, #1
 8009aae:	1c7b      	adds	r3, r7, #1
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4252      	negs	r2, r2
 8009ab6:	606a      	str	r2, [r5, #4]
 8009ab8:	a904      	add	r1, sp, #16
 8009aba:	3254      	adds	r2, #84	; 0x54
 8009abc:	1852      	adds	r2, r2, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	60eb      	str	r3, [r5, #12]
 8009ac2:	60ab      	str	r3, [r5, #8]
 8009ac4:	7013      	strb	r3, [r2, #0]
 8009ac6:	65ab      	str	r3, [r5, #88]	; 0x58
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	2205      	movs	r2, #5
 8009acc:	7819      	ldrb	r1, [r3, #0]
 8009ace:	485d      	ldr	r0, [pc, #372]	; (8009c44 <_vfiprintf_r+0x260>)
 8009ad0:	f7ff f8e3 	bl	8008c9a <memchr>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	1c5f      	adds	r7, r3, #1
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d120      	bne.n	8009b1e <_vfiprintf_r+0x13a>
 8009adc:	682a      	ldr	r2, [r5, #0]
 8009ade:	06d3      	lsls	r3, r2, #27
 8009ae0:	d504      	bpl.n	8009aec <_vfiprintf_r+0x108>
 8009ae2:	2353      	movs	r3, #83	; 0x53
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	185b      	adds	r3, r3, r1
 8009ae8:	2120      	movs	r1, #32
 8009aea:	7019      	strb	r1, [r3, #0]
 8009aec:	0713      	lsls	r3, r2, #28
 8009aee:	d504      	bpl.n	8009afa <_vfiprintf_r+0x116>
 8009af0:	2353      	movs	r3, #83	; 0x53
 8009af2:	a904      	add	r1, sp, #16
 8009af4:	185b      	adds	r3, r3, r1
 8009af6:	212b      	movs	r1, #43	; 0x2b
 8009af8:	7019      	strb	r1, [r3, #0]
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b2a      	cmp	r3, #42	; 0x2a
 8009b00:	d016      	beq.n	8009b30 <_vfiprintf_r+0x14c>
 8009b02:	2100      	movs	r1, #0
 8009b04:	68eb      	ldr	r3, [r5, #12]
 8009b06:	9f03      	ldr	r7, [sp, #12]
 8009b08:	783a      	ldrb	r2, [r7, #0]
 8009b0a:	1c78      	adds	r0, r7, #1
 8009b0c:	3a30      	subs	r2, #48	; 0x30
 8009b0e:	4684      	mov	ip, r0
 8009b10:	2a09      	cmp	r2, #9
 8009b12:	d94f      	bls.n	8009bb4 <_vfiprintf_r+0x1d0>
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d111      	bne.n	8009b3c <_vfiprintf_r+0x158>
 8009b18:	e017      	b.n	8009b4a <_vfiprintf_r+0x166>
 8009b1a:	3701      	adds	r7, #1
 8009b1c:	e7a9      	b.n	8009a72 <_vfiprintf_r+0x8e>
 8009b1e:	4b49      	ldr	r3, [pc, #292]	; (8009c44 <_vfiprintf_r+0x260>)
 8009b20:	682a      	ldr	r2, [r5, #0]
 8009b22:	1ac0      	subs	r0, r0, r3
 8009b24:	2301      	movs	r3, #1
 8009b26:	4083      	lsls	r3, r0
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	9703      	str	r7, [sp, #12]
 8009b2e:	e7cb      	b.n	8009ac8 <_vfiprintf_r+0xe4>
 8009b30:	9b07      	ldr	r3, [sp, #28]
 8009b32:	1d19      	adds	r1, r3, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	9107      	str	r1, [sp, #28]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	db01      	blt.n	8009b40 <_vfiprintf_r+0x15c>
 8009b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3e:	e004      	b.n	8009b4a <_vfiprintf_r+0x166>
 8009b40:	425b      	negs	r3, r3
 8009b42:	60eb      	str	r3, [r5, #12]
 8009b44:	2302      	movs	r3, #2
 8009b46:	4313      	orrs	r3, r2
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	783b      	ldrb	r3, [r7, #0]
 8009b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b4e:	d10a      	bne.n	8009b66 <_vfiprintf_r+0x182>
 8009b50:	787b      	ldrb	r3, [r7, #1]
 8009b52:	2b2a      	cmp	r3, #42	; 0x2a
 8009b54:	d137      	bne.n	8009bc6 <_vfiprintf_r+0x1e2>
 8009b56:	9b07      	ldr	r3, [sp, #28]
 8009b58:	3702      	adds	r7, #2
 8009b5a:	1d1a      	adds	r2, r3, #4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	9207      	str	r2, [sp, #28]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	db2d      	blt.n	8009bc0 <_vfiprintf_r+0x1dc>
 8009b64:	9309      	str	r3, [sp, #36]	; 0x24
 8009b66:	2203      	movs	r2, #3
 8009b68:	7839      	ldrb	r1, [r7, #0]
 8009b6a:	4837      	ldr	r0, [pc, #220]	; (8009c48 <_vfiprintf_r+0x264>)
 8009b6c:	f7ff f895 	bl	8008c9a <memchr>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d007      	beq.n	8009b84 <_vfiprintf_r+0x1a0>
 8009b74:	4b34      	ldr	r3, [pc, #208]	; (8009c48 <_vfiprintf_r+0x264>)
 8009b76:	682a      	ldr	r2, [r5, #0]
 8009b78:	1ac0      	subs	r0, r0, r3
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	4083      	lsls	r3, r0
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	3701      	adds	r7, #1
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	7839      	ldrb	r1, [r7, #0]
 8009b86:	1c7b      	adds	r3, r7, #1
 8009b88:	2206      	movs	r2, #6
 8009b8a:	4830      	ldr	r0, [pc, #192]	; (8009c4c <_vfiprintf_r+0x268>)
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	7629      	strb	r1, [r5, #24]
 8009b90:	f7ff f883 	bl	8008c9a <memchr>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d045      	beq.n	8009c24 <_vfiprintf_r+0x240>
 8009b98:	4b2d      	ldr	r3, [pc, #180]	; (8009c50 <_vfiprintf_r+0x26c>)
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d127      	bne.n	8009bee <_vfiprintf_r+0x20a>
 8009b9e:	2207      	movs	r2, #7
 8009ba0:	9b07      	ldr	r3, [sp, #28]
 8009ba2:	3307      	adds	r3, #7
 8009ba4:	4393      	bics	r3, r2
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	9307      	str	r3, [sp, #28]
 8009baa:	696b      	ldr	r3, [r5, #20]
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	189b      	adds	r3, r3, r2
 8009bb0:	616b      	str	r3, [r5, #20]
 8009bb2:	e75d      	b.n	8009a70 <_vfiprintf_r+0x8c>
 8009bb4:	210a      	movs	r1, #10
 8009bb6:	434b      	muls	r3, r1
 8009bb8:	4667      	mov	r7, ip
 8009bba:	189b      	adds	r3, r3, r2
 8009bbc:	3909      	subs	r1, #9
 8009bbe:	e7a3      	b.n	8009b08 <_vfiprintf_r+0x124>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	425b      	negs	r3, r3
 8009bc4:	e7ce      	b.n	8009b64 <_vfiprintf_r+0x180>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	001a      	movs	r2, r3
 8009bca:	3701      	adds	r7, #1
 8009bcc:	606b      	str	r3, [r5, #4]
 8009bce:	7839      	ldrb	r1, [r7, #0]
 8009bd0:	1c78      	adds	r0, r7, #1
 8009bd2:	3930      	subs	r1, #48	; 0x30
 8009bd4:	4684      	mov	ip, r0
 8009bd6:	2909      	cmp	r1, #9
 8009bd8:	d903      	bls.n	8009be2 <_vfiprintf_r+0x1fe>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0c3      	beq.n	8009b66 <_vfiprintf_r+0x182>
 8009bde:	9209      	str	r2, [sp, #36]	; 0x24
 8009be0:	e7c1      	b.n	8009b66 <_vfiprintf_r+0x182>
 8009be2:	230a      	movs	r3, #10
 8009be4:	435a      	muls	r2, r3
 8009be6:	4667      	mov	r7, ip
 8009be8:	1852      	adds	r2, r2, r1
 8009bea:	3b09      	subs	r3, #9
 8009bec:	e7ef      	b.n	8009bce <_vfiprintf_r+0x1ea>
 8009bee:	ab07      	add	r3, sp, #28
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	0022      	movs	r2, r4
 8009bf4:	0029      	movs	r1, r5
 8009bf6:	0030      	movs	r0, r6
 8009bf8:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <_vfiprintf_r+0x270>)
 8009bfa:	f7fc f851 	bl	8005ca0 <_printf_float>
 8009bfe:	9004      	str	r0, [sp, #16]
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	3301      	adds	r3, #1
 8009c04:	d1d1      	bne.n	8009baa <_vfiprintf_r+0x1c6>
 8009c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c08:	07db      	lsls	r3, r3, #31
 8009c0a:	d405      	bmi.n	8009c18 <_vfiprintf_r+0x234>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	059b      	lsls	r3, r3, #22
 8009c10:	d402      	bmi.n	8009c18 <_vfiprintf_r+0x234>
 8009c12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c14:	f7ff f82e 	bl	8008c74 <__retarget_lock_release_recursive>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	065b      	lsls	r3, r3, #25
 8009c1c:	d500      	bpl.n	8009c20 <_vfiprintf_r+0x23c>
 8009c1e:	e70a      	b.n	8009a36 <_vfiprintf_r+0x52>
 8009c20:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c22:	e70a      	b.n	8009a3a <_vfiprintf_r+0x56>
 8009c24:	ab07      	add	r3, sp, #28
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	0022      	movs	r2, r4
 8009c2a:	0029      	movs	r1, r5
 8009c2c:	0030      	movs	r0, r6
 8009c2e:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <_vfiprintf_r+0x270>)
 8009c30:	f7fc fae8 	bl	8006204 <_printf_i>
 8009c34:	e7e3      	b.n	8009bfe <_vfiprintf_r+0x21a>
 8009c36:	46c0      	nop			; (mov r8, r8)
 8009c38:	0800a904 	.word	0x0800a904
 8009c3c:	0800a924 	.word	0x0800a924
 8009c40:	0800a8e4 	.word	0x0800a8e4
 8009c44:	0800ab1c 	.word	0x0800ab1c
 8009c48:	0800ab22 	.word	0x0800ab22
 8009c4c:	0800ab26 	.word	0x0800ab26
 8009c50:	08005ca1 	.word	0x08005ca1
 8009c54:	080099bf 	.word	0x080099bf

08009c58 <nan>:
 8009c58:	2000      	movs	r0, #0
 8009c5a:	4901      	ldr	r1, [pc, #4]	; (8009c60 <nan+0x8>)
 8009c5c:	4770      	bx	lr
 8009c5e:	46c0      	nop			; (mov r8, r8)
 8009c60:	7ff80000 	.word	0x7ff80000

08009c64 <__sread>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	000c      	movs	r4, r1
 8009c68:	250e      	movs	r5, #14
 8009c6a:	5f49      	ldrsh	r1, [r1, r5]
 8009c6c:	f000 fb16 	bl	800a29c <_read_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	db03      	blt.n	8009c7c <__sread+0x18>
 8009c74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c76:	181b      	adds	r3, r3, r0
 8009c78:	6563      	str	r3, [r4, #84]	; 0x54
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	4a02      	ldr	r2, [pc, #8]	; (8009c88 <__sread+0x24>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	e7f9      	b.n	8009c7a <__sread+0x16>
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	ffffefff 	.word	0xffffefff

08009c8c <__swrite>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	001f      	movs	r7, r3
 8009c90:	898b      	ldrh	r3, [r1, #12]
 8009c92:	0005      	movs	r5, r0
 8009c94:	000c      	movs	r4, r1
 8009c96:	0016      	movs	r6, r2
 8009c98:	05db      	lsls	r3, r3, #23
 8009c9a:	d505      	bpl.n	8009ca8 <__swrite+0x1c>
 8009c9c:	230e      	movs	r3, #14
 8009c9e:	5ec9      	ldrsh	r1, [r1, r3]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	f000 fa38 	bl	800a118 <_lseek_r>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	4a05      	ldr	r2, [pc, #20]	; (8009cc0 <__swrite+0x34>)
 8009cac:	0028      	movs	r0, r5
 8009cae:	4013      	ands	r3, r2
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	0032      	movs	r2, r6
 8009cb4:	230e      	movs	r3, #14
 8009cb6:	5ee1      	ldrsh	r1, [r4, r3]
 8009cb8:	003b      	movs	r3, r7
 8009cba:	f000 f895 	bl	8009de8 <_write_r>
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	ffffefff 	.word	0xffffefff

08009cc4 <__sseek>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	000c      	movs	r4, r1
 8009cc8:	250e      	movs	r5, #14
 8009cca:	5f49      	ldrsh	r1, [r1, r5]
 8009ccc:	f000 fa24 	bl	800a118 <_lseek_r>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	1c42      	adds	r2, r0, #1
 8009cd4:	d103      	bne.n	8009cde <__sseek+0x1a>
 8009cd6:	4a05      	ldr	r2, [pc, #20]	; (8009cec <__sseek+0x28>)
 8009cd8:	4013      	ands	r3, r2
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
 8009cde:	2280      	movs	r2, #128	; 0x80
 8009ce0:	0152      	lsls	r2, r2, #5
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce8:	e7f8      	b.n	8009cdc <__sseek+0x18>
 8009cea:	46c0      	nop			; (mov r8, r8)
 8009cec:	ffffefff 	.word	0xffffefff

08009cf0 <__sclose>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	230e      	movs	r3, #14
 8009cf4:	5ec9      	ldrsh	r1, [r1, r3]
 8009cf6:	f000 f921 	bl	8009f3c <_close_r>
 8009cfa:	bd10      	pop	{r4, pc}

08009cfc <strncmp>:
 8009cfc:	b530      	push	{r4, r5, lr}
 8009cfe:	0005      	movs	r5, r0
 8009d00:	1e10      	subs	r0, r2, #0
 8009d02:	d008      	beq.n	8009d16 <strncmp+0x1a>
 8009d04:	2400      	movs	r4, #0
 8009d06:	3a01      	subs	r2, #1
 8009d08:	5d2b      	ldrb	r3, [r5, r4]
 8009d0a:	5d08      	ldrb	r0, [r1, r4]
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d101      	bne.n	8009d14 <strncmp+0x18>
 8009d10:	4294      	cmp	r4, r2
 8009d12:	d101      	bne.n	8009d18 <strncmp+0x1c>
 8009d14:	1a18      	subs	r0, r3, r0
 8009d16:	bd30      	pop	{r4, r5, pc}
 8009d18:	3401      	adds	r4, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1f4      	bne.n	8009d08 <strncmp+0xc>
 8009d1e:	e7f9      	b.n	8009d14 <strncmp+0x18>

08009d20 <__swbuf_r>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	0005      	movs	r5, r0
 8009d24:	000e      	movs	r6, r1
 8009d26:	0014      	movs	r4, r2
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d004      	beq.n	8009d36 <__swbuf_r+0x16>
 8009d2c:	6983      	ldr	r3, [r0, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <__swbuf_r+0x16>
 8009d32:	f7fe fb85 	bl	8008440 <__sinit>
 8009d36:	4b22      	ldr	r3, [pc, #136]	; (8009dc0 <__swbuf_r+0xa0>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d12e      	bne.n	8009d9a <__swbuf_r+0x7a>
 8009d3c:	686c      	ldr	r4, [r5, #4]
 8009d3e:	69a3      	ldr	r3, [r4, #24]
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	071b      	lsls	r3, r3, #28
 8009d46:	d532      	bpl.n	8009dae <__swbuf_r+0x8e>
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d02f      	beq.n	8009dae <__swbuf_r+0x8e>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	b2f7      	uxtb	r7, r6
 8009d54:	1a98      	subs	r0, r3, r2
 8009d56:	6963      	ldr	r3, [r4, #20]
 8009d58:	b2f6      	uxtb	r6, r6
 8009d5a:	4283      	cmp	r3, r0
 8009d5c:	dc05      	bgt.n	8009d6a <__swbuf_r+0x4a>
 8009d5e:	0021      	movs	r1, r4
 8009d60:	0028      	movs	r0, r5
 8009d62:	f000 f989 	bl	800a078 <_fflush_r>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d127      	bne.n	8009dba <__swbuf_r+0x9a>
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	60a3      	str	r3, [r4, #8]
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	6022      	str	r2, [r4, #0]
 8009d78:	701f      	strb	r7, [r3, #0]
 8009d7a:	6963      	ldr	r3, [r4, #20]
 8009d7c:	4283      	cmp	r3, r0
 8009d7e:	d004      	beq.n	8009d8a <__swbuf_r+0x6a>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	07db      	lsls	r3, r3, #31
 8009d84:	d507      	bpl.n	8009d96 <__swbuf_r+0x76>
 8009d86:	2e0a      	cmp	r6, #10
 8009d88:	d105      	bne.n	8009d96 <__swbuf_r+0x76>
 8009d8a:	0021      	movs	r1, r4
 8009d8c:	0028      	movs	r0, r5
 8009d8e:	f000 f973 	bl	800a078 <_fflush_r>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d111      	bne.n	8009dba <__swbuf_r+0x9a>
 8009d96:	0030      	movs	r0, r6
 8009d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <__swbuf_r+0xa4>)
 8009d9c:	429c      	cmp	r4, r3
 8009d9e:	d101      	bne.n	8009da4 <__swbuf_r+0x84>
 8009da0:	68ac      	ldr	r4, [r5, #8]
 8009da2:	e7cc      	b.n	8009d3e <__swbuf_r+0x1e>
 8009da4:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <__swbuf_r+0xa8>)
 8009da6:	429c      	cmp	r4, r3
 8009da8:	d1c9      	bne.n	8009d3e <__swbuf_r+0x1e>
 8009daa:	68ec      	ldr	r4, [r5, #12]
 8009dac:	e7c7      	b.n	8009d3e <__swbuf_r+0x1e>
 8009dae:	0021      	movs	r1, r4
 8009db0:	0028      	movs	r0, r5
 8009db2:	f000 f82d 	bl	8009e10 <__swsetup_r>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d0c9      	beq.n	8009d4e <__swbuf_r+0x2e>
 8009dba:	2601      	movs	r6, #1
 8009dbc:	4276      	negs	r6, r6
 8009dbe:	e7ea      	b.n	8009d96 <__swbuf_r+0x76>
 8009dc0:	0800a904 	.word	0x0800a904
 8009dc4:	0800a924 	.word	0x0800a924
 8009dc8:	0800a8e4 	.word	0x0800a8e4

08009dcc <__ascii_wctomb>:
 8009dcc:	0003      	movs	r3, r0
 8009dce:	1e08      	subs	r0, r1, #0
 8009dd0:	d005      	beq.n	8009dde <__ascii_wctomb+0x12>
 8009dd2:	2aff      	cmp	r2, #255	; 0xff
 8009dd4:	d904      	bls.n	8009de0 <__ascii_wctomb+0x14>
 8009dd6:	228a      	movs	r2, #138	; 0x8a
 8009dd8:	2001      	movs	r0, #1
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	4240      	negs	r0, r0
 8009dde:	4770      	bx	lr
 8009de0:	2001      	movs	r0, #1
 8009de2:	700a      	strb	r2, [r1, #0]
 8009de4:	e7fb      	b.n	8009dde <__ascii_wctomb+0x12>
	...

08009de8 <_write_r>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	0004      	movs	r4, r0
 8009dec:	0008      	movs	r0, r1
 8009dee:	0011      	movs	r1, r2
 8009df0:	001a      	movs	r2, r3
 8009df2:	2300      	movs	r3, #0
 8009df4:	4d05      	ldr	r5, [pc, #20]	; (8009e0c <_write_r+0x24>)
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	f7f9 fa97 	bl	800332a <_write>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d103      	bne.n	8009e08 <_write_r+0x20>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d000      	beq.n	8009e08 <_write_r+0x20>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	200005ac 	.word	0x200005ac

08009e10 <__swsetup_r>:
 8009e10:	4b37      	ldr	r3, [pc, #220]	; (8009ef0 <__swsetup_r+0xe0>)
 8009e12:	b570      	push	{r4, r5, r6, lr}
 8009e14:	681d      	ldr	r5, [r3, #0]
 8009e16:	0006      	movs	r6, r0
 8009e18:	000c      	movs	r4, r1
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	d005      	beq.n	8009e2a <__swsetup_r+0x1a>
 8009e1e:	69ab      	ldr	r3, [r5, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <__swsetup_r+0x1a>
 8009e24:	0028      	movs	r0, r5
 8009e26:	f7fe fb0b 	bl	8008440 <__sinit>
 8009e2a:	4b32      	ldr	r3, [pc, #200]	; (8009ef4 <__swsetup_r+0xe4>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d10f      	bne.n	8009e50 <__swsetup_r+0x40>
 8009e30:	686c      	ldr	r4, [r5, #4]
 8009e32:	230c      	movs	r3, #12
 8009e34:	5ee2      	ldrsh	r2, [r4, r3]
 8009e36:	b293      	uxth	r3, r2
 8009e38:	0711      	lsls	r1, r2, #28
 8009e3a:	d42d      	bmi.n	8009e98 <__swsetup_r+0x88>
 8009e3c:	06d9      	lsls	r1, r3, #27
 8009e3e:	d411      	bmi.n	8009e64 <__swsetup_r+0x54>
 8009e40:	2309      	movs	r3, #9
 8009e42:	2001      	movs	r0, #1
 8009e44:	6033      	str	r3, [r6, #0]
 8009e46:	3337      	adds	r3, #55	; 0x37
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	4240      	negs	r0, r0
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	4b29      	ldr	r3, [pc, #164]	; (8009ef8 <__swsetup_r+0xe8>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <__swsetup_r+0x4a>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7eb      	b.n	8009e32 <__swsetup_r+0x22>
 8009e5a:	4b28      	ldr	r3, [pc, #160]	; (8009efc <__swsetup_r+0xec>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	d1e8      	bne.n	8009e32 <__swsetup_r+0x22>
 8009e60:	68ec      	ldr	r4, [r5, #12]
 8009e62:	e7e6      	b.n	8009e32 <__swsetup_r+0x22>
 8009e64:	075b      	lsls	r3, r3, #29
 8009e66:	d513      	bpl.n	8009e90 <__swsetup_r+0x80>
 8009e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e6a:	2900      	cmp	r1, #0
 8009e6c:	d008      	beq.n	8009e80 <__swsetup_r+0x70>
 8009e6e:	0023      	movs	r3, r4
 8009e70:	3344      	adds	r3, #68	; 0x44
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d002      	beq.n	8009e7c <__swsetup_r+0x6c>
 8009e76:	0030      	movs	r0, r6
 8009e78:	f7fb fd86 	bl	8005988 <_free_r>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8009e80:	2224      	movs	r2, #36	; 0x24
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	4393      	bics	r3, r2
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	6063      	str	r3, [r4, #4]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	6023      	str	r3, [r4, #0]
 8009e90:	2308      	movs	r3, #8
 8009e92:	89a2      	ldrh	r2, [r4, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <__swsetup_r+0xa6>
 8009e9e:	21a0      	movs	r1, #160	; 0xa0
 8009ea0:	2280      	movs	r2, #128	; 0x80
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	0089      	lsls	r1, r1, #2
 8009ea6:	0092      	lsls	r2, r2, #2
 8009ea8:	400b      	ands	r3, r1
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d003      	beq.n	8009eb6 <__swsetup_r+0xa6>
 8009eae:	0021      	movs	r1, r4
 8009eb0:	0030      	movs	r0, r6
 8009eb2:	f000 f96d 	bl	800a190 <__smakebuf_r>
 8009eb6:	220c      	movs	r2, #12
 8009eb8:	5ea3      	ldrsh	r3, [r4, r2]
 8009eba:	2001      	movs	r0, #1
 8009ebc:	001a      	movs	r2, r3
 8009ebe:	b299      	uxth	r1, r3
 8009ec0:	4002      	ands	r2, r0
 8009ec2:	4203      	tst	r3, r0
 8009ec4:	d00f      	beq.n	8009ee6 <__swsetup_r+0xd6>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	60a2      	str	r2, [r4, #8]
 8009eca:	6962      	ldr	r2, [r4, #20]
 8009ecc:	4252      	negs	r2, r2
 8009ece:	61a2      	str	r2, [r4, #24]
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	6922      	ldr	r2, [r4, #16]
 8009ed4:	4282      	cmp	r2, r0
 8009ed6:	d1ba      	bne.n	8009e4e <__swsetup_r+0x3e>
 8009ed8:	060a      	lsls	r2, r1, #24
 8009eda:	d5b8      	bpl.n	8009e4e <__swsetup_r+0x3e>
 8009edc:	2240      	movs	r2, #64	; 0x40
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	3801      	subs	r0, #1
 8009ee4:	e7b3      	b.n	8009e4e <__swsetup_r+0x3e>
 8009ee6:	0788      	lsls	r0, r1, #30
 8009ee8:	d400      	bmi.n	8009eec <__swsetup_r+0xdc>
 8009eea:	6962      	ldr	r2, [r4, #20]
 8009eec:	60a2      	str	r2, [r4, #8]
 8009eee:	e7ef      	b.n	8009ed0 <__swsetup_r+0xc0>
 8009ef0:	20000024 	.word	0x20000024
 8009ef4:	0800a904 	.word	0x0800a904
 8009ef8:	0800a924 	.word	0x0800a924
 8009efc:	0800a8e4 	.word	0x0800a8e4

08009f00 <__assert_func>:
 8009f00:	b530      	push	{r4, r5, lr}
 8009f02:	0014      	movs	r4, r2
 8009f04:	001a      	movs	r2, r3
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <__assert_func+0x2c>)
 8009f08:	0005      	movs	r5, r0
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	68d8      	ldr	r0, [r3, #12]
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <__assert_func+0x30>)
 8009f12:	2c00      	cmp	r4, #0
 8009f14:	d101      	bne.n	8009f1a <__assert_func+0x1a>
 8009f16:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <__assert_func+0x34>)
 8009f18:	001c      	movs	r4, r3
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	9100      	str	r1, [sp, #0]
 8009f1e:	002b      	movs	r3, r5
 8009f20:	4905      	ldr	r1, [pc, #20]	; (8009f38 <__assert_func+0x38>)
 8009f22:	9402      	str	r4, [sp, #8]
 8009f24:	f000 f8e8 	bl	800a0f8 <fiprintf>
 8009f28:	f000 f9cc 	bl	800a2c4 <abort>
 8009f2c:	20000024 	.word	0x20000024
 8009f30:	0800ab2d 	.word	0x0800ab2d
 8009f34:	0800ab68 	.word	0x0800ab68
 8009f38:	0800ab3a 	.word	0x0800ab3a

08009f3c <_close_r>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_close_r+0x20>)
 8009f42:	0004      	movs	r4, r0
 8009f44:	0008      	movs	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f9 fa0b 	bl	8003362 <_close>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d103      	bne.n	8009f58 <_close_r+0x1c>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d000      	beq.n	8009f58 <_close_r+0x1c>
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	200005ac 	.word	0x200005ac

08009f60 <__sflush_r>:
 8009f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f62:	898b      	ldrh	r3, [r1, #12]
 8009f64:	0005      	movs	r5, r0
 8009f66:	000c      	movs	r4, r1
 8009f68:	071a      	lsls	r2, r3, #28
 8009f6a:	d45f      	bmi.n	800a02c <__sflush_r+0xcc>
 8009f6c:	684a      	ldr	r2, [r1, #4]
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	dc04      	bgt.n	8009f7c <__sflush_r+0x1c>
 8009f72:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	dc01      	bgt.n	8009f7c <__sflush_r+0x1c>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009f7e:	2f00      	cmp	r7, #0
 8009f80:	d0fa      	beq.n	8009f78 <__sflush_r+0x18>
 8009f82:	2200      	movs	r2, #0
 8009f84:	2180      	movs	r1, #128	; 0x80
 8009f86:	682e      	ldr	r6, [r5, #0]
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	0149      	lsls	r1, r1, #5
 8009f8e:	400a      	ands	r2, r1
 8009f90:	420b      	tst	r3, r1
 8009f92:	d034      	beq.n	8009ffe <__sflush_r+0x9e>
 8009f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	075b      	lsls	r3, r3, #29
 8009f9a:	d506      	bpl.n	8009faa <__sflush_r+0x4a>
 8009f9c:	6863      	ldr	r3, [r4, #4]
 8009f9e:	1ac0      	subs	r0, r0, r3
 8009fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <__sflush_r+0x4a>
 8009fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fa8:	1ac0      	subs	r0, r0, r3
 8009faa:	0002      	movs	r2, r0
 8009fac:	6a21      	ldr	r1, [r4, #32]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	0028      	movs	r0, r5
 8009fb2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009fb4:	47b8      	blx	r7
 8009fb6:	89a1      	ldrh	r1, [r4, #12]
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d106      	bne.n	8009fca <__sflush_r+0x6a>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	2b1d      	cmp	r3, #29
 8009fc0:	d831      	bhi.n	800a026 <__sflush_r+0xc6>
 8009fc2:	4a2c      	ldr	r2, [pc, #176]	; (800a074 <__sflush_r+0x114>)
 8009fc4:	40da      	lsrs	r2, r3
 8009fc6:	07d3      	lsls	r3, r2, #31
 8009fc8:	d52d      	bpl.n	800a026 <__sflush_r+0xc6>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6063      	str	r3, [r4, #4]
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	04cb      	lsls	r3, r1, #19
 8009fd4:	d505      	bpl.n	8009fe2 <__sflush_r+0x82>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <__sflush_r+0x80>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d100      	bne.n	8009fe2 <__sflush_r+0x82>
 8009fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8009fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fe4:	602e      	str	r6, [r5, #0]
 8009fe6:	2900      	cmp	r1, #0
 8009fe8:	d0c6      	beq.n	8009f78 <__sflush_r+0x18>
 8009fea:	0023      	movs	r3, r4
 8009fec:	3344      	adds	r3, #68	; 0x44
 8009fee:	4299      	cmp	r1, r3
 8009ff0:	d002      	beq.n	8009ff8 <__sflush_r+0x98>
 8009ff2:	0028      	movs	r0, r5
 8009ff4:	f7fb fcc8 	bl	8005988 <_free_r>
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	6360      	str	r0, [r4, #52]	; 0x34
 8009ffc:	e7bd      	b.n	8009f7a <__sflush_r+0x1a>
 8009ffe:	2301      	movs	r3, #1
 800a000:	0028      	movs	r0, r5
 800a002:	6a21      	ldr	r1, [r4, #32]
 800a004:	47b8      	blx	r7
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d1c5      	bne.n	8009f96 <__sflush_r+0x36>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0c2      	beq.n	8009f96 <__sflush_r+0x36>
 800a010:	2b1d      	cmp	r3, #29
 800a012:	d001      	beq.n	800a018 <__sflush_r+0xb8>
 800a014:	2b16      	cmp	r3, #22
 800a016:	d101      	bne.n	800a01c <__sflush_r+0xbc>
 800a018:	602e      	str	r6, [r5, #0]
 800a01a:	e7ad      	b.n	8009f78 <__sflush_r+0x18>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	89a2      	ldrh	r2, [r4, #12]
 800a020:	4313      	orrs	r3, r2
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	e7a9      	b.n	8009f7a <__sflush_r+0x1a>
 800a026:	2340      	movs	r3, #64	; 0x40
 800a028:	430b      	orrs	r3, r1
 800a02a:	e7fa      	b.n	800a022 <__sflush_r+0xc2>
 800a02c:	690f      	ldr	r7, [r1, #16]
 800a02e:	2f00      	cmp	r7, #0
 800a030:	d0a2      	beq.n	8009f78 <__sflush_r+0x18>
 800a032:	680a      	ldr	r2, [r1, #0]
 800a034:	600f      	str	r7, [r1, #0]
 800a036:	1bd2      	subs	r2, r2, r7
 800a038:	9201      	str	r2, [sp, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	079b      	lsls	r3, r3, #30
 800a03e:	d100      	bne.n	800a042 <__sflush_r+0xe2>
 800a040:	694a      	ldr	r2, [r1, #20]
 800a042:	60a2      	str	r2, [r4, #8]
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dc00      	bgt.n	800a04c <__sflush_r+0xec>
 800a04a:	e795      	b.n	8009f78 <__sflush_r+0x18>
 800a04c:	003a      	movs	r2, r7
 800a04e:	0028      	movs	r0, r5
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	6a21      	ldr	r1, [r4, #32]
 800a054:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a056:	47b0      	blx	r6
 800a058:	2800      	cmp	r0, #0
 800a05a:	dc06      	bgt.n	800a06a <__sflush_r+0x10a>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	2001      	movs	r0, #1
 800a060:	89a2      	ldrh	r2, [r4, #12]
 800a062:	4240      	negs	r0, r0
 800a064:	4313      	orrs	r3, r2
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	e787      	b.n	8009f7a <__sflush_r+0x1a>
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	183f      	adds	r7, r7, r0
 800a06e:	1a1b      	subs	r3, r3, r0
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	e7e7      	b.n	800a044 <__sflush_r+0xe4>
 800a074:	20400001 	.word	0x20400001

0800a078 <_fflush_r>:
 800a078:	690b      	ldr	r3, [r1, #16]
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	0005      	movs	r5, r0
 800a07e:	000c      	movs	r4, r1
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <_fflush_r+0x12>
 800a084:	2500      	movs	r5, #0
 800a086:	0028      	movs	r0, r5
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d004      	beq.n	800a098 <_fflush_r+0x20>
 800a08e:	6983      	ldr	r3, [r0, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <_fflush_r+0x20>
 800a094:	f7fe f9d4 	bl	8008440 <__sinit>
 800a098:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <_fflush_r+0x74>)
 800a09a:	429c      	cmp	r4, r3
 800a09c:	d11b      	bne.n	800a0d6 <_fflush_r+0x5e>
 800a09e:	686c      	ldr	r4, [r5, #4]
 800a0a0:	220c      	movs	r2, #12
 800a0a2:	5ea3      	ldrsh	r3, [r4, r2]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0ed      	beq.n	800a084 <_fflush_r+0xc>
 800a0a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0aa:	07d2      	lsls	r2, r2, #31
 800a0ac:	d404      	bmi.n	800a0b8 <_fflush_r+0x40>
 800a0ae:	059b      	lsls	r3, r3, #22
 800a0b0:	d402      	bmi.n	800a0b8 <_fflush_r+0x40>
 800a0b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0b4:	f7fe fddd 	bl	8008c72 <__retarget_lock_acquire_recursive>
 800a0b8:	0028      	movs	r0, r5
 800a0ba:	0021      	movs	r1, r4
 800a0bc:	f7ff ff50 	bl	8009f60 <__sflush_r>
 800a0c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0c2:	0005      	movs	r5, r0
 800a0c4:	07db      	lsls	r3, r3, #31
 800a0c6:	d4de      	bmi.n	800a086 <_fflush_r+0xe>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	059b      	lsls	r3, r3, #22
 800a0cc:	d4db      	bmi.n	800a086 <_fflush_r+0xe>
 800a0ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0d0:	f7fe fdd0 	bl	8008c74 <__retarget_lock_release_recursive>
 800a0d4:	e7d7      	b.n	800a086 <_fflush_r+0xe>
 800a0d6:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <_fflush_r+0x78>)
 800a0d8:	429c      	cmp	r4, r3
 800a0da:	d101      	bne.n	800a0e0 <_fflush_r+0x68>
 800a0dc:	68ac      	ldr	r4, [r5, #8]
 800a0de:	e7df      	b.n	800a0a0 <_fflush_r+0x28>
 800a0e0:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <_fflush_r+0x7c>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d1dc      	bne.n	800a0a0 <_fflush_r+0x28>
 800a0e6:	68ec      	ldr	r4, [r5, #12]
 800a0e8:	e7da      	b.n	800a0a0 <_fflush_r+0x28>
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	0800a904 	.word	0x0800a904
 800a0f0:	0800a924 	.word	0x0800a924
 800a0f4:	0800a8e4 	.word	0x0800a8e4

0800a0f8 <fiprintf>:
 800a0f8:	b40e      	push	{r1, r2, r3}
 800a0fa:	b503      	push	{r0, r1, lr}
 800a0fc:	0001      	movs	r1, r0
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	4804      	ldr	r0, [pc, #16]	; (800a114 <fiprintf+0x1c>)
 800a102:	cb04      	ldmia	r3!, {r2}
 800a104:	6800      	ldr	r0, [r0, #0]
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	f7ff fc6c 	bl	80099e4 <_vfiprintf_r>
 800a10c:	b002      	add	sp, #8
 800a10e:	bc08      	pop	{r3}
 800a110:	b003      	add	sp, #12
 800a112:	4718      	bx	r3
 800a114:	20000024 	.word	0x20000024

0800a118 <_lseek_r>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	0004      	movs	r4, r0
 800a11c:	0008      	movs	r0, r1
 800a11e:	0011      	movs	r1, r2
 800a120:	001a      	movs	r2, r3
 800a122:	2300      	movs	r3, #0
 800a124:	4d05      	ldr	r5, [pc, #20]	; (800a13c <_lseek_r+0x24>)
 800a126:	602b      	str	r3, [r5, #0]
 800a128:	f7f9 f93c 	bl	80033a4 <_lseek>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d103      	bne.n	800a138 <_lseek_r+0x20>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d000      	beq.n	800a138 <_lseek_r+0x20>
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	bd70      	pop	{r4, r5, r6, pc}
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	200005ac 	.word	0x200005ac

0800a140 <__swhatbuf_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	000e      	movs	r6, r1
 800a144:	001d      	movs	r5, r3
 800a146:	230e      	movs	r3, #14
 800a148:	5ec9      	ldrsh	r1, [r1, r3]
 800a14a:	0014      	movs	r4, r2
 800a14c:	b096      	sub	sp, #88	; 0x58
 800a14e:	2900      	cmp	r1, #0
 800a150:	da08      	bge.n	800a164 <__swhatbuf_r+0x24>
 800a152:	220c      	movs	r2, #12
 800a154:	5eb3      	ldrsh	r3, [r6, r2]
 800a156:	2200      	movs	r2, #0
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	061b      	lsls	r3, r3, #24
 800a15c:	d411      	bmi.n	800a182 <__swhatbuf_r+0x42>
 800a15e:	2380      	movs	r3, #128	; 0x80
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	e00f      	b.n	800a184 <__swhatbuf_r+0x44>
 800a164:	466a      	mov	r2, sp
 800a166:	f000 f8b5 	bl	800a2d4 <_fstat_r>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	dbf1      	blt.n	800a152 <__swhatbuf_r+0x12>
 800a16e:	23f0      	movs	r3, #240	; 0xf0
 800a170:	9901      	ldr	r1, [sp, #4]
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	4019      	ands	r1, r3
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <__swhatbuf_r+0x4c>)
 800a178:	18c9      	adds	r1, r1, r3
 800a17a:	424b      	negs	r3, r1
 800a17c:	4159      	adcs	r1, r3
 800a17e:	6029      	str	r1, [r5, #0]
 800a180:	e7ed      	b.n	800a15e <__swhatbuf_r+0x1e>
 800a182:	2340      	movs	r3, #64	; 0x40
 800a184:	2000      	movs	r0, #0
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	b016      	add	sp, #88	; 0x58
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	ffffe000 	.word	0xffffe000

0800a190 <__smakebuf_r>:
 800a190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a192:	2602      	movs	r6, #2
 800a194:	898b      	ldrh	r3, [r1, #12]
 800a196:	0005      	movs	r5, r0
 800a198:	000c      	movs	r4, r1
 800a19a:	4233      	tst	r3, r6
 800a19c:	d006      	beq.n	800a1ac <__smakebuf_r+0x1c>
 800a19e:	0023      	movs	r3, r4
 800a1a0:	3347      	adds	r3, #71	; 0x47
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	6163      	str	r3, [r4, #20]
 800a1aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a1ac:	466a      	mov	r2, sp
 800a1ae:	ab01      	add	r3, sp, #4
 800a1b0:	f7ff ffc6 	bl	800a140 <__swhatbuf_r>
 800a1b4:	9900      	ldr	r1, [sp, #0]
 800a1b6:	0007      	movs	r7, r0
 800a1b8:	0028      	movs	r0, r5
 800a1ba:	f7fb fc51 	bl	8005a60 <_malloc_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d108      	bne.n	800a1d4 <__smakebuf_r+0x44>
 800a1c2:	220c      	movs	r2, #12
 800a1c4:	5ea3      	ldrsh	r3, [r4, r2]
 800a1c6:	059a      	lsls	r2, r3, #22
 800a1c8:	d4ef      	bmi.n	800a1aa <__smakebuf_r+0x1a>
 800a1ca:	2203      	movs	r2, #3
 800a1cc:	4393      	bics	r3, r2
 800a1ce:	431e      	orrs	r6, r3
 800a1d0:	81a6      	strh	r6, [r4, #12]
 800a1d2:	e7e4      	b.n	800a19e <__smakebuf_r+0xe>
 800a1d4:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <__smakebuf_r+0x84>)
 800a1d6:	62ab      	str	r3, [r5, #40]	; 0x28
 800a1d8:	2380      	movs	r3, #128	; 0x80
 800a1da:	89a2      	ldrh	r2, [r4, #12]
 800a1dc:	6020      	str	r0, [r4, #0]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	9b00      	ldr	r3, [sp, #0]
 800a1e4:	6120      	str	r0, [r4, #16]
 800a1e6:	6163      	str	r3, [r4, #20]
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00d      	beq.n	800a20a <__smakebuf_r+0x7a>
 800a1ee:	0028      	movs	r0, r5
 800a1f0:	230e      	movs	r3, #14
 800a1f2:	5ee1      	ldrsh	r1, [r4, r3]
 800a1f4:	f000 f880 	bl	800a2f8 <_isatty_r>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d006      	beq.n	800a20a <__smakebuf_r+0x7a>
 800a1fc:	2203      	movs	r2, #3
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	4393      	bics	r3, r2
 800a202:	001a      	movs	r2, r3
 800a204:	2301      	movs	r3, #1
 800a206:	4313      	orrs	r3, r2
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	89a0      	ldrh	r0, [r4, #12]
 800a20c:	4307      	orrs	r7, r0
 800a20e:	81a7      	strh	r7, [r4, #12]
 800a210:	e7cb      	b.n	800a1aa <__smakebuf_r+0x1a>
 800a212:	46c0      	nop			; (mov r8, r8)
 800a214:	080083c5 	.word	0x080083c5

0800a218 <memmove>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	4288      	cmp	r0, r1
 800a21c:	d902      	bls.n	800a224 <memmove+0xc>
 800a21e:	188b      	adds	r3, r1, r2
 800a220:	4298      	cmp	r0, r3
 800a222:	d303      	bcc.n	800a22c <memmove+0x14>
 800a224:	2300      	movs	r3, #0
 800a226:	e007      	b.n	800a238 <memmove+0x20>
 800a228:	5c8b      	ldrb	r3, [r1, r2]
 800a22a:	5483      	strb	r3, [r0, r2]
 800a22c:	3a01      	subs	r2, #1
 800a22e:	d2fb      	bcs.n	800a228 <memmove+0x10>
 800a230:	bd10      	pop	{r4, pc}
 800a232:	5ccc      	ldrb	r4, [r1, r3]
 800a234:	54c4      	strb	r4, [r0, r3]
 800a236:	3301      	adds	r3, #1
 800a238:	429a      	cmp	r2, r3
 800a23a:	d1fa      	bne.n	800a232 <memmove+0x1a>
 800a23c:	e7f8      	b.n	800a230 <memmove+0x18>

0800a23e <_realloc_r>:
 800a23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a240:	0007      	movs	r7, r0
 800a242:	000e      	movs	r6, r1
 800a244:	0014      	movs	r4, r2
 800a246:	2900      	cmp	r1, #0
 800a248:	d105      	bne.n	800a256 <_realloc_r+0x18>
 800a24a:	0011      	movs	r1, r2
 800a24c:	f7fb fc08 	bl	8005a60 <_malloc_r>
 800a250:	0005      	movs	r5, r0
 800a252:	0028      	movs	r0, r5
 800a254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a256:	2a00      	cmp	r2, #0
 800a258:	d103      	bne.n	800a262 <_realloc_r+0x24>
 800a25a:	f7fb fb95 	bl	8005988 <_free_r>
 800a25e:	0025      	movs	r5, r4
 800a260:	e7f7      	b.n	800a252 <_realloc_r+0x14>
 800a262:	f000 f85b 	bl	800a31c <_malloc_usable_size_r>
 800a266:	9001      	str	r0, [sp, #4]
 800a268:	4284      	cmp	r4, r0
 800a26a:	d803      	bhi.n	800a274 <_realloc_r+0x36>
 800a26c:	0035      	movs	r5, r6
 800a26e:	0843      	lsrs	r3, r0, #1
 800a270:	42a3      	cmp	r3, r4
 800a272:	d3ee      	bcc.n	800a252 <_realloc_r+0x14>
 800a274:	0021      	movs	r1, r4
 800a276:	0038      	movs	r0, r7
 800a278:	f7fb fbf2 	bl	8005a60 <_malloc_r>
 800a27c:	1e05      	subs	r5, r0, #0
 800a27e:	d0e8      	beq.n	800a252 <_realloc_r+0x14>
 800a280:	9b01      	ldr	r3, [sp, #4]
 800a282:	0022      	movs	r2, r4
 800a284:	429c      	cmp	r4, r3
 800a286:	d900      	bls.n	800a28a <_realloc_r+0x4c>
 800a288:	001a      	movs	r2, r3
 800a28a:	0031      	movs	r1, r6
 800a28c:	0028      	movs	r0, r5
 800a28e:	f7fe fd0f 	bl	8008cb0 <memcpy>
 800a292:	0031      	movs	r1, r6
 800a294:	0038      	movs	r0, r7
 800a296:	f7fb fb77 	bl	8005988 <_free_r>
 800a29a:	e7da      	b.n	800a252 <_realloc_r+0x14>

0800a29c <_read_r>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	0004      	movs	r4, r0
 800a2a0:	0008      	movs	r0, r1
 800a2a2:	0011      	movs	r1, r2
 800a2a4:	001a      	movs	r2, r3
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	4d05      	ldr	r5, [pc, #20]	; (800a2c0 <_read_r+0x24>)
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	f7f9 f820 	bl	80032f0 <_read>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d103      	bne.n	800a2bc <_read_r+0x20>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d000      	beq.n	800a2bc <_read_r+0x20>
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	bd70      	pop	{r4, r5, r6, pc}
 800a2be:	46c0      	nop			; (mov r8, r8)
 800a2c0:	200005ac 	.word	0x200005ac

0800a2c4 <abort>:
 800a2c4:	2006      	movs	r0, #6
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	f000 f85a 	bl	800a380 <raise>
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	f7f9 f803 	bl	80032d8 <_exit>
	...

0800a2d4 <_fstat_r>:
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	b570      	push	{r4, r5, r6, lr}
 800a2d8:	4d06      	ldr	r5, [pc, #24]	; (800a2f4 <_fstat_r+0x20>)
 800a2da:	0004      	movs	r4, r0
 800a2dc:	0008      	movs	r0, r1
 800a2de:	0011      	movs	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f9 f848 	bl	8003376 <_fstat>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d103      	bne.n	800a2f2 <_fstat_r+0x1e>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d000      	beq.n	800a2f2 <_fstat_r+0x1e>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	200005ac 	.word	0x200005ac

0800a2f8 <_isatty_r>:
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	b570      	push	{r4, r5, r6, lr}
 800a2fc:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_isatty_r+0x20>)
 800a2fe:	0004      	movs	r4, r0
 800a300:	0008      	movs	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f9 f845 	bl	8003392 <_isatty>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d103      	bne.n	800a314 <_isatty_r+0x1c>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d000      	beq.n	800a314 <_isatty_r+0x1c>
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	bd70      	pop	{r4, r5, r6, pc}
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	200005ac 	.word	0x200005ac

0800a31c <_malloc_usable_size_r>:
 800a31c:	1f0b      	subs	r3, r1, #4
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	1f18      	subs	r0, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	da01      	bge.n	800a32a <_malloc_usable_size_r+0xe>
 800a326:	580b      	ldr	r3, [r1, r0]
 800a328:	18c0      	adds	r0, r0, r3
 800a32a:	4770      	bx	lr

0800a32c <_raise_r>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	0004      	movs	r4, r0
 800a330:	000d      	movs	r5, r1
 800a332:	291f      	cmp	r1, #31
 800a334:	d904      	bls.n	800a340 <_raise_r+0x14>
 800a336:	2316      	movs	r3, #22
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	2001      	movs	r0, #1
 800a33c:	4240      	negs	r0, r0
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <_raise_r+0x24>
 800a346:	008a      	lsls	r2, r1, #2
 800a348:	189b      	adds	r3, r3, r2
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	d108      	bne.n	800a362 <_raise_r+0x36>
 800a350:	0020      	movs	r0, r4
 800a352:	f000 f831 	bl	800a3b8 <_getpid_r>
 800a356:	002a      	movs	r2, r5
 800a358:	0001      	movs	r1, r0
 800a35a:	0020      	movs	r0, r4
 800a35c:	f000 f81a 	bl	800a394 <_kill_r>
 800a360:	e7ed      	b.n	800a33e <_raise_r+0x12>
 800a362:	2000      	movs	r0, #0
 800a364:	2a01      	cmp	r2, #1
 800a366:	d0ea      	beq.n	800a33e <_raise_r+0x12>
 800a368:	1c51      	adds	r1, r2, #1
 800a36a:	d103      	bne.n	800a374 <_raise_r+0x48>
 800a36c:	2316      	movs	r3, #22
 800a36e:	3001      	adds	r0, #1
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	e7e4      	b.n	800a33e <_raise_r+0x12>
 800a374:	2400      	movs	r4, #0
 800a376:	0028      	movs	r0, r5
 800a378:	601c      	str	r4, [r3, #0]
 800a37a:	4790      	blx	r2
 800a37c:	0020      	movs	r0, r4
 800a37e:	e7de      	b.n	800a33e <_raise_r+0x12>

0800a380 <raise>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4b03      	ldr	r3, [pc, #12]	; (800a390 <raise+0x10>)
 800a384:	0001      	movs	r1, r0
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	f7ff ffd0 	bl	800a32c <_raise_r>
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	20000024 	.word	0x20000024

0800a394 <_kill_r>:
 800a394:	2300      	movs	r3, #0
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_kill_r+0x20>)
 800a39a:	0004      	movs	r4, r0
 800a39c:	0008      	movs	r0, r1
 800a39e:	0011      	movs	r1, r2
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	f7f8 ff89 	bl	80032b8 <_kill>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	d103      	bne.n	800a3b2 <_kill_r+0x1e>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d000      	beq.n	800a3b2 <_kill_r+0x1e>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	200005ac 	.word	0x200005ac

0800a3b8 <_getpid_r>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	f7f8 ff77 	bl	80032ac <_getpid>
 800a3be:	bd10      	pop	{r4, pc}

0800a3c0 <_init>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	46c0      	nop			; (mov r8, r8)
 800a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c6:	bc08      	pop	{r3}
 800a3c8:	469e      	mov	lr, r3
 800a3ca:	4770      	bx	lr

0800a3cc <_fini>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d2:	bc08      	pop	{r3}
 800a3d4:	469e      	mov	lr, r3
 800a3d6:	4770      	bx	lr
